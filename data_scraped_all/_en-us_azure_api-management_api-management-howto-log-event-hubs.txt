Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to log events to Azure Event Hubs in Azure API Management
Article
2024-09-06
24 contributors
In this article
APPLIES TO: All API Management tiers
This article describes how to log API Management events using Azure Event Hubs.
Azure Event Hubs is a highly scalable data ingress service that can ingest millions of events per second so that you can process and analyze the massive amounts of data produced by your connected devices and applications. Event Hubs acts as the "front door" for an event pipeline, and once data is collected into an event hub, it can be transformed and stored using any real-time analytics provider or batching/storage adapters. Event Hubs decouples the production of a stream of events from the consumption of those events, so that event consumers can access the events on their own schedule.
Note
Currently, this feature isn't available inworkspaces.
Prerequisites
An API Management service instance. If you don't have one, seeCreate an API Management service instance.
An Azure Event Hubs namespace and event hub. For detailed steps, seeCreate an Event Hubs namespace and an event hub using the Azure portal.NoteThe Event Hubs resourcecan bein a different subscription or even a different tenant than the API Management resource
Note
The Event Hubs resourcecan bein a different subscription or even a different tenant than the API Management resource
Configure access to the event hub
To log events to the event hub, you need to configure credentials for access from API Management. API Management supports either of the two following access mechanisms:
A managed identity for your API Management instance (recommended)
An Event Hubs connection string
Note
Where possible, Microsoft recommends using managed identity credentials for enhanced security.
Option 1: Configure API Management managed identity
Enable a system-assigned or user-assignedmanaged identity for API Managementin your API Management instance.If you enable a user-assigned managed identity, take note of the identity'sClient ID.
Enable a system-assigned or user-assignedmanaged identity for API Managementin your API Management instance.
If you enable a user-assigned managed identity, take note of the identity'sClient ID.
Assign the identity theAzure Event Hubs Data senderrole, scoped to the Event Hubs namespace or to the event hub used for logging. To assign the role, use theAzure portalor other Azure tools.
Assign the identity theAzure Event Hubs Data senderrole, scoped to the Event Hubs namespace or to the event hub used for logging. To assign the role, use theAzure portalor other Azure tools.
Option 2: Configure Event Hubs connection string
To create an Event Hubs connection string, seeGet an Event Hubs connection string.
You can use a connection string for the Event Hubs namespace or for the specific event hub you use for logging from API Management.
The shared access policy for the connection string must enable at leastSendpermissions.
Create an API Management logger
The next step is to configure aloggerin your API Management service so that it can log events to the event hub.
Create and manage API Management loggers by using theAPI Management REST APIdirectly or by using tools includingAzure PowerShell, a Bicep template, or an Azure Resource Management template.
Option 1: Logger with managed identity credentials (recommended)
You can configure an API Management logger to an event hub using either system-assigned or user-assigned managed identity credentials.
Logger with system-assigned managed identity credentials
For prerequisites, seeConfigure API Management managed identity.
REST API
Bicep
ARM
Use the API ManagementLogger - Create or UpdateREST API with the following request body.
{
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with system-assigned managed identity",
    "credentials": {
         "endpointAddress":"<EventHubsNamespace>.servicebus.windows.net",
         "identityClientId":"SystemAssigned",
         "name":"<EventHubName>"
    }
  }
}
{
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with system-assigned managed identity",
    "credentials": {
         "endpointAddress":"<EventHubsNamespace>.servicebus.windows.net",
         "identityClientId":"SystemAssigned",
         "name":"<EventHubName>"
    }
  }
}
Include a snippet similar to the following in your Bicep template.
resource ehLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event hub logger with system-assigned managed identity'
    credentials: {
      endpointAddress: '<EventHubsNamespace>.servicebus.windows.net'
      identityClientId: 'systemAssigned'
      name: '<EventHubName>'
    }
  }
}
resource ehLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event hub logger with system-assigned managed identity'
    credentials: {
      endpointAddress: '<EventHubsNamespace>.servicebus.windows.net'
      identityClientId: 'systemAssigned'
      name: '<EventHubName>'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with system-assigned managed identity",
    "resourceId": "<EventHubsResourceID>",
    "credentials": {
      "endpointAddress": "<EventHubsNamespace>.servicebus.windows.net",
      "identityClientId": "SystemAssigned",
      "name": "<EventHubName>"
    },
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with system-assigned managed identity",
    "resourceId": "<EventHubsResourceID>",
    "credentials": {
      "endpointAddress": "<EventHubsNamespace>.servicebus.windows.net",
      "identityClientId": "SystemAssigned",
      "name": "<EventHubName>"
    },
  }
}
For prerequisites, seeConfigure API Management managed identity.
REST API
Bicep
ARM
Use the API ManagementLogger - Create or UpdateREST API with the following request body.
{
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with user-assigned managed identity",
    "credentials": {
         "endpointAddress":"<EventHubsNamespace>.servicebus.windows.net",
         "identityClientId":"<ClientID>",
         "name":"<EventHubName>"
    }
  }
}
{
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with user-assigned managed identity",
    "credentials": {
         "endpointAddress":"<EventHubsNamespace>.servicebus.windows.net",
         "identityClientId":"<ClientID>",
         "name":"<EventHubName>"
    }
  }
}
Include a snippet similar to the following in your Bicep template.
resource ehLoggerWithUserAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event Hub logger with user-assigned managed identity'
    credentials: {
      endpointAddress: '<EventHubsNamespace>.servicebus.windows.net'
      identityClientId: '<ClientID>'
      name: '<EventHubName>'
    }
  }
}
resource ehLoggerWithUserAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event Hub logger with user-assigned managed identity'
    credentials: {
      endpointAddress: '<EventHubsNamespace>.servicebus.windows.net'
      identityClientId: '<ClientID>'
      name: '<EventHubName>'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with user-assigned managed identity",
    "resourceId": "<EventHubsResourceID>",
    "credentials": {
      "endpointAddress": "<EventHubsNamespace>.servicebus.windows.net",
      "identityClientId": "<ClientID>",
      "name": "<EventHubName>"
    },
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with user-assigned managed identity",
    "resourceId": "<EventHubsResourceID>",
    "credentials": {
      "endpointAddress": "<EventHubsNamespace>.servicebus.windows.net",
      "identityClientId": "<ClientID>",
      "name": "<EventHubName>"
    },
  }
}
Option 2. Logger with connection string credentials
For prerequisites, seeConfigure Event Hubs connection string.
Note
Where possible, Microsoft recommends configuring the logger with managed identity credentials. SeeConfigure logger with managed identity credentials, earlier in this article.
PowerShell
Bicep
ARM
The following example uses theNew-AzApiManagementLoggercmdlet to create a logger to an event hub by configuring a connection string.
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# Create logger
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName
New-AzApiManagementLogger -Context $context -LoggerId "ContosoLogger1" -Name "ApimEventHub" -ConnectionString "Endpoint=sb://<EventHubsNamespace>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>" -Description "Event hub logger with connection string"
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# Create logger
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName
New-AzApiManagementLogger -Context $context -LoggerId "ContosoLogger1" -Name "ApimEventHub" -ConnectionString "Endpoint=sb://<EventHubsNamespace>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>" -Description "Event hub logger with connection string"
Include a snippet similar to the following in your Bicep template.
resource ehLoggerWithConnectionString 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event Hub logger with connection string credentials'
    credentials: {
      connectionString: 'Endpoint=sb://<EventHubsNamespace>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>'
      name: 'ApimEventHub'
    }
  }
}
resource ehLoggerWithConnectionString 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'azureEventHub'
    description: 'Event Hub logger with connection string credentials'
    credentials: {
      connectionString: 'Endpoint=sb://<EventHubsNamespace>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>'
      name: 'ApimEventHub'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with connection string credentials",
    "resourceId": "<EventHubsResourceID>"
    "credentials": {
      "connectionString": "Endpoint=sb://<EventHubsNamespace>/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>",
      "name": "ApimEventHub"
    },
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "azureEventHub",
    "description": "Event Hub logger with connection string credentials",
    "resourceId": "<EventHubsResourceID>"
    "credentials": {
      "connectionString": "Endpoint=sb://<EventHubsNamespace>/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<key>",
      "name": "ApimEventHub"
    },
  }
}
Configure log-to-eventhub policy
Once your logger is configured in API Management, you can configure yourlog-to-eventhubpolicy to log the desired events. For example, use thelog-to-eventhubpolicy in the inbound policy section to log requests, or in the outbound policy section to log responses.
log-to-eventhub
Browse to your API Management instance.
Browse to your API Management instance.
SelectAPIs, and then select the API to which you want to add the policy. In this example, we're adding a policy to theEcho APIin theUnlimitedproduct.
SelectAPIs, and then select the API to which you want to add the policy. In this example, we're adding a policy to theEcho APIin theUnlimitedproduct.
SelectAll operations.
SelectAll operations.
On the top of the screen, select theDesigntab.
On the top of the screen, select theDesigntab.
In the Inbound processing or Outbound processing window, select the</>(code editor) icon. For more information, seeHow to set or edit policies.
In the Inbound processing or Outbound processing window, select the</>(code editor) icon. For more information, seeHow to set or edit policies.
</>
Position your cursor in theinboundoroutboundpolicy section.
Position your cursor in theinboundoroutboundpolicy section.
inbound
outbound
In the window on the right, selectAdvanced policies>Log to EventHub. This inserts thelog-to-eventhubpolicy statement template.<log-to-eventhub logger-id="logger-id">
    @{
        return new JObject(
            new JProperty("EventTime", DateTime.UtcNow.ToString()),
            new JProperty("ServiceName", context.Deployment.ServiceName),
            new JProperty("RequestId", context.RequestId),
            new JProperty("RequestIp", context.Request.IpAddress),
            new JProperty("OperationName", context.Operation.Name)
        ).ToString();
    }
</log-to-eventhub>Replacelogger-idwith the name of the logger that you created in the previous step.You can use any expression that returns a string as the value for thelog-to-eventhubelement. In this example, a string in JSON format containing the date and time, service name, request ID, request IP address, and operation name is logged.
In the window on the right, selectAdvanced policies>Log to EventHub. This inserts thelog-to-eventhubpolicy statement template.
log-to-eventhub
<log-to-eventhub logger-id="logger-id">
    @{
        return new JObject(
            new JProperty("EventTime", DateTime.UtcNow.ToString()),
            new JProperty("ServiceName", context.Deployment.ServiceName),
            new JProperty("RequestId", context.RequestId),
            new JProperty("RequestIp", context.Request.IpAddress),
            new JProperty("OperationName", context.Operation.Name)
        ).ToString();
    }
</log-to-eventhub>
<log-to-eventhub logger-id="logger-id">
    @{
        return new JObject(
            new JProperty("EventTime", DateTime.UtcNow.ToString()),
            new JProperty("ServiceName", context.Deployment.ServiceName),
            new JProperty("RequestId", context.RequestId),
            new JProperty("RequestIp", context.Request.IpAddress),
            new JProperty("OperationName", context.Operation.Name)
        ).ToString();
    }
</log-to-eventhub>
Replacelogger-idwith the name of the logger that you created in the previous step.
logger-id
You can use any expression that returns a string as the value for thelog-to-eventhubelement. In this example, a string in JSON format containing the date and time, service name, request ID, request IP address, and operation name is logged.
log-to-eventhub
SelectSaveto save the updated policy configuration. As soon as it's saved, the policy is active and events are logged to the designated event hub.
SelectSaveto save the updated policy configuration. As soon as it's saved, the policy is active and events are logged to the designated event hub.
Note
The maximum supported message size that can be sent to an event hub from this API Management policy is 200 kilobytes (KB). If a message that is sent to an event hub is larger than 200 KB, it will be automatically truncated, and the truncated message will be transferred to the event hub. For larger messages, consider using Azure Storage with Azure API Management as a workaround to bypass the 200KB limit. More details can be found inthis article.
Preview the log in Event Hubs by using Azure Stream Analytics
You can preview the log in Event Hubs by usingAzure Stream Analytics queries.
In the Azure portal, browse to the event hub that the logger sends events to.
UnderFeatures, select theProcess datatab.
On theEnable real time insights from eventscard, selectStart.
You should be able to preview the log on theInput previewtab. If the data shown isn't current, selectRefreshto see the latest events.
Related content
Learn more about Azure Event HubsGet started with Azure Event HubsReceive messages with EventProcessorHostEvent Hubs programming guide
Get started with Azure Event Hubs
Receive messages with EventProcessorHost
Event Hubs programming guide
Learn more about API Management and Event Hubs integrationLogger entity referencelog-to-eventhubpolicy reference
Logger entity reference
log-to-eventhubpolicy reference
Learn more aboutintegration with Azure Application Insights
Feedback
Was this page helpful?
Additional resources