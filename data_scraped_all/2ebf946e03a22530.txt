Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Run Resource Graph query using Azure PowerShell
Article
2024-06-28
10 contributors
In this article
This quickstart describes how to run an Azure Resource Graph query using theAz.ResourceGraphmodule for Azure PowerShell. The module is included with the latest version of Azure PowerShell and addscmdletsfor Resource Graph.
Az.ResourceGraph
The article also shows how to order (sort) and limit the query's results. You can run a query for resources in your tenant, management groups, or subscriptions.
Prerequisites
If you don't have an Azure account, create afree accountbefore you begin.
Latest versions ofPowerShellandAzure PowerShell.
Visual Studio Code.
Install the module
If you installed the latest versions of PowerShell and Azure PowerShell, you already have theAz.ResourceGraphmodule and required version of PowerShellGet.
Az.ResourceGraph
Optional module installation
Use the following steps to install theAz.ResourceGraphmodule so that you can use Azure PowerShell to run Azure Resource Graph queries. The Azure Resource Graph module requires PowerShellGet version 2.0.1 or higher.
Az.ResourceGraph
Verify your PowerShellGet version:Get-Module -Name PowerShellGetIf you need to update, go toPowerShellGet.
Verify your PowerShellGet version:
Get-Module -Name PowerShellGet
Get-Module -Name PowerShellGet
If you need to update, go toPowerShellGet.
Install the module:Install-Module -Name Az.ResourceGraph -Repository PSGallery -Scope CurrentUserThe command installs the module in theCurrentUserscope. If you need to install in theAllUsersscope, run the installation from an administrative PowerShell session.
Install the module:
Install-Module -Name Az.ResourceGraph -Repository PSGallery -Scope CurrentUser
Install-Module -Name Az.ResourceGraph -Repository PSGallery -Scope CurrentUser
The command installs the module in theCurrentUserscope. If you need to install in theAllUsersscope, run the installation from an administrative PowerShell session.
CurrentUser
AllUsers
Verify the module was installed:Get-Command -Module Az.ResourceGraph -CommandType CmdletThe command displays theSearch-AzGraphcmdlet version and loads the module into your PowerShell session.
Verify the module was installed:
Get-Command -Module Az.ResourceGraph -CommandType Cmdlet
Get-Command -Module Az.ResourceGraph -CommandType Cmdlet
The command displays theSearch-AzGraphcmdlet version and loads the module into your PowerShell session.
Search-AzGraph
Connect to Azure
From a Visual Studio Code terminal session, connect to Azure. If you have more than one subscription, run the commands to set context to your subscription. Replace<subscriptionID>with your Azure subscription ID.
<subscriptionID>
Connect-AzAccount

# Run these commands if you have multiple subscriptions
Get-AzSubScription
Set-AzContext -Subscription <subscriptionID>
Connect-AzAccount

# Run these commands if you have multiple subscriptions
Get-AzSubScription
Set-AzContext -Subscription <subscriptionID>
Run a query
After the module is added to your environment, you can run a tenant-based query. The query in this example returns five Azure resources with thenameandtypeof each resource. To query bymanagement groupor subscription, use the-ManagementGroupor-Subscriptionparameters.
name
type
-ManagementGroup
-Subscription
Run an Azure Resource Graph query using theSearch-AzGraphcmdlet:Search-AzGraph -Query 'Resources | project name, type | limit 5'This query example doesn't use a sort modifier likeorder by. If you run the query multiple times, it might yield a different set of resources for each request.
Run an Azure Resource Graph query using theSearch-AzGraphcmdlet:
Search-AzGraph
Search-AzGraph -Query 'Resources | project name, type | limit 5'
Search-AzGraph -Query 'Resources | project name, type | limit 5'
This query example doesn't use a sort modifier likeorder by. If you run the query multiple times, it might yield a different set of resources for each request.
order by
Update the query toorder bythenameproperty:Search-AzGraph -Query 'Resources | project name, type | limit 5 | order by name asc'Like the previous query, if you run this query multiple times might yield a different set of resources for each request. The order of the query commands is important. In this example, theorder bycomes after thelimit. The query limits the results to five resources and then orders those results by name.
Update the query toorder bythenameproperty:
order by
name
Search-AzGraph -Query 'Resources | project name, type | limit 5 | order by name asc'
Search-AzGraph -Query 'Resources | project name, type | limit 5 | order by name asc'
Like the previous query, if you run this query multiple times might yield a different set of resources for each request. The order of the query commands is important. In this example, theorder bycomes after thelimit. The query limits the results to five resources and then orders those results by name.
order by
limit
Update the query toorder bythenameproperty and thenlimitthe output to five results:Search-AzGraph -Query 'Resources | project name, type | order by name asc | limit 5'If this query is run several times with no changes to your environment, the results are consistent and ordered by thenameproperty, but still limited to five results. The query orders the results by name and then limits the output to five resources.
Update the query toorder bythenameproperty and thenlimitthe output to five results:
order by
name
limit
Search-AzGraph -Query 'Resources | project name, type | order by name asc | limit 5'
Search-AzGraph -Query 'Resources | project name, type | order by name asc | limit 5'
If this query is run several times with no changes to your environment, the results are consistent and ordered by thenameproperty, but still limited to five results. The query orders the results by name and then limits the output to five resources.
name
If a query doesn't return results from a subscription you already have access to, then note thatSearch-AzGraphcmdlet defaults to subscriptions in the default context. To see the list of subscription IDs that are part of the default context, run this(Get-AzContext).Account.ExtendedProperties.SubscriptionsIf you wish to search across all the subscriptions you have access to, set thePSDefaultParameterValuesforSearch-AzGraphcmdlet by running$PSDefaultParameterValues=@{"Search-AzGraph:Subscription"= $(Get-AzSubscription).ID}
Search-AzGraph
(Get-AzContext).Account.ExtendedProperties.Subscriptions
PSDefaultParameterValues
Search-AzGraph
$PSDefaultParameterValues=@{"Search-AzGraph:Subscription"= $(Get-AzSubscription).ID}
Clean up resources
To sign out of your Azure PowerShell session:
Disconnect-AzAccount
Disconnect-AzAccount
Optional clean up steps
If you installed the latest version of Azure PowerShell, theAz.ResourceGraphmodule is included and shouldn't be removed. The following steps are optional if you did a manual install of theAz.ResourceGraphmodule and want to remove the module.
Az.ResourceGraph
Az.ResourceGraph
To remove theAz.ResourceGraphmodule from your PowerShell session, run the following command:
Az.ResourceGraph
Remove-Module -Name Az.ResourceGraph
Remove-Module -Name Az.ResourceGraph
To uninstall theAz.ResourceGraphmodule from your computer, run the following command:
Az.ResourceGraph
Uninstall-Module -Name Az.ResourceGraph
Uninstall-Module -Name Az.ResourceGraph
A message might be displayed thatmodule Az.ResourceGraph is currently in use. If so, you need to shut down your PowerShell session and start a new session. Then run the command to uninstall the module from your computer.
Next steps
In this quickstart, you added the Resource Graph module to your Azure PowerShell environment and ran a query. To learn more, go to the query language details page.
Understanding the Azure Resource Graph query language
Feedback
Was this page helpful?
Additional resources