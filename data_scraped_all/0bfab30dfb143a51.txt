Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a Java application with WebLogic Server on an Azure Kubernetes Service (AKS) cluster
Article
2024-12-24
9 contributors
In this article
This article demonstrates how to:
Run your Java application on Oracle WebLogic Server (WLS).
Stand up a WebLogic Server cluster on AKS using an Azure Marketplace offer.
Build an application Docker image that includes WebLogic Deploy Tooling (WDT) models.
Deploy the containerized application to the WebLogic Server cluster on AKS with connection to Microsoft Azure SQL.
This article uses theAzure Marketplace offer for WebLogic Serverto accelerate your journey to AKS. The offer automatically provisions several Azure resources, including the following resources:
An Azure Container Registry instance
An AKS cluster
An Azure App Gateway Ingress Controller (AGIC) instance
The WebLogic Kubernetes Operator
A container image including the WebLogic runtime
A WebLogic Server cluster without an application
Then, the article introduces building an image to update the WebLogic Server cluster. The image provides the application and WDT models.
If you prefer a less automated approach to deploying WebLogic on AKS, see the step-by-step guidance included in the official documentation from Oracle forAzure Kubernetes Service.
If you're interested in providing feedback or working closely on your migration scenarios with the engineering team developing WebLogic on AKS solutions, fill out this shortsurvey on WebLogic migrationand include your contact information. The team of program managers, architects, and engineers will promptly get in touch with you to initiate close collaboration.
Prerequisites
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Ensure the Azure identity you use to sign in and complete this article has either theOwnerrole in the current subscription or theContributorandUser Access Administratorroles in the current subscription. For an overview of Azure roles, seeWhat is Azure role-based access control (Azure RBAC)?For details on the specific roles required by WLS on AKS, seeAzure built-in roles.
Have the credentials for an Oracle single sign-on (SSO) account. To create one, seeCreate Your Oracle Account.
Accept the license terms for WebLogic Server.Visit theOracle Container Registryand sign in.If you have a support entitlement, selectMiddleware, then search for and selectweblogic_cpu.If you don't have a support entitlement from Oracle, selectMiddleware, then search for and selectweblogic.Accept the license agreement.NoteGet a support entitlement from Oracle before going to production. Failure to do so results in running insecure images that are not patched for critical security flaws. For more information on Oracle's critical patch updates, seeCritical Patch Updates, Security Alerts and Bulletinsfrom Oracle.
Visit theOracle Container Registryand sign in.
If you have a support entitlement, selectMiddleware, then search for and selectweblogic_cpu.
If you don't have a support entitlement from Oracle, selectMiddleware, then search for and selectweblogic.
Accept the license agreement.
Note
Get a support entitlement from Oracle before going to production. Failure to do so results in running insecure images that are not patched for critical security flaws. For more information on Oracle's critical patch updates, seeCritical Patch Updates, Security Alerts and Bulletinsfrom Oracle.
Prepare a local machine with Unix-like operating system installed - for example, Ubuntu, Azure Linux, macOS, Windows Subsystem for Linux.Azure CLI. Useaz --versionto test whether az works. This document was tested with version 2.55.1.kubectl. Usekubectl versionto test whether kubectl works. This document was tested with version v1.21.2.A Java Development Kit (JDK). The article directs you to installMicrosoft Build of OpenJDK 11. Ensure that yourJAVA_HOMEenvironment variable is set correctly in the shells in which you run the commands.Maven3.5.0 or higher.Ensure that you have the zip/unzip utility installed. Usezip/unzip -vto test whetherzip/unzipworks.
Azure CLI. Useaz --versionto test whether az works. This document was tested with version 2.55.1.
az --version
kubectl. Usekubectl versionto test whether kubectl works. This document was tested with version v1.21.2.
kubectl version
A Java Development Kit (JDK). The article directs you to installMicrosoft Build of OpenJDK 11. Ensure that yourJAVA_HOMEenvironment variable is set correctly in the shells in which you run the commands.
JAVA_HOME
Maven3.5.0 or higher.
Ensure that you have the zip/unzip utility installed. Usezip/unzip -vto test whetherzip/unzipworks.
zip/unzip -v
zip/unzip
Create an Azure SQL Database
Passwordless (Recommended)
Password
This section creates an Azure SQL Database using Microsoft Entra authentication, with managed identity connection enabled.
Create a resource group
Create a resource group withaz group create. Because resource groups must be unique within a subscription, pick a unique name. An easy way to have unique names is to use a combination of your initials, today's date, and some identifier. For example,abc1228rg. This example creates a resource group namedabc1228rgin theeastuslocation:
abc1228rg
abc1228rg
eastus
export RESOURCE_GROUP_NAME="abc1228rg"
az group create \
    --name ${RESOURCE_GROUP_NAME} \
    --location eastus
export RESOURCE_GROUP_NAME="abc1228rg"
az group create \
    --name ${RESOURCE_GROUP_NAME} \
    --location eastus
Create a database server and a database
Create a server with theaz sql server createcommand. This example creates a server namedmyazuresql20130213with admin userazureuserand admin password. Replace<your-password>with your password. For more information, seeQuickstart: Create a single database - Azure SQL Database.
myazuresql20130213
azureuser
<your-password>
Note
Even though you're using a username and password here, these credentials are not exposed outside the database. The connection between the application layer and the database is secured with managed identities.
export AZURESQL_SERVER_NAME="myazuresql20130213"
export AZURESQL_ADMIN_USER="azureuser"
export AZURESQL_ADMIN_PASSWORD="<your-password>"
export DATABASE_NAME="mysingledatabase20230213"
export AZURESQL_SERVER_NAME="myazuresql20130213"
export AZURESQL_ADMIN_USER="azureuser"
export AZURESQL_ADMIN_PASSWORD="<your-password>"
export DATABASE_NAME="mysingledatabase20230213"
az sql server create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AZURESQL_SERVER_NAME \
    --location westus \
    --admin-user $AZURESQL_ADMIN_USER \
    --admin-password $AZURESQL_ADMIN_PASSWORD
az sql server create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AZURESQL_SERVER_NAME \
    --location westus \
    --admin-user $AZURESQL_ADMIN_USER \
    --admin-password $AZURESQL_ADMIN_PASSWORD
Create a database with theaz sql db createcommand in theserverless compute tier.
az sql db create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $AZURESQL_SERVER_NAME \
    --name $DATABASE_NAME \
    --sample-name AdventureWorksLT \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
az sql db create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $AZURESQL_SERVER_NAME \
    --name $DATABASE_NAME \
    --sample-name AdventureWorksLT \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
Configure a Microsoft Entra administrator
For information on how Azure SQL Server interacts with managed identities, seeConnect using Microsoft Entra authentication.
Use the following steps to configure a Microsoft Entra administrator account to Azure SQL server from the Azure portal:
In theAzure portal, open the Azure SQL server instancemyazuresql20130213.
myazuresql20130213
SelectSettings, then selectMicrosoft Entra ID. On theMicrosoft Entra IDpage, selectSet admin.
On theAdd adminpage, search for a user, select the user or group to be an administrator, and then selectSelect.
At the top of theMicrosoft Entra IDpage, selectSave. For Microsoft Entra users and groups, the Object ID is displayed next to the admin name.
The process of changing the administrator might take several minutes. Then, the new administrator appears in theMicrosoft Entra IDbox.
Create a user-assigned managed identity
Next, in Azure CLI, create an identity in your subscription by using theaz identity createcommand. You use this managed identity to connect to your database.
az identity create \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name myManagedIdentity
az identity create \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name myManagedIdentity
Create a database user for your managed identity
Now, connect as the Microsoft Entra administrator user to your Azure SQL database from the Azure portal, and create a user for your managed identity.
First, create a firewall rule to access the Azure SQL server from portal, as shown in the following steps:
In theAzure portal, open the Azure SQL server instancemyazuresql20130213.
myazuresql20130213
SelectSecurity, then selectNetworking.
UnderFirewall rules, selectAdd your client IPV4 IP address.
UnderExceptions, selectAllow Azure services and resources to access this server.
SelectSave.
After the firewall rule is created, you can access the Azure SQL server from portal. Use the following steps to create a database user:
SelectSettings, then selectSQL databases. Selectmysingledatabase20230213.
SelectSettings, then selectSQL databases. Selectmysingledatabase20230213.
mysingledatabase20230213
SelectQuery editor. On theWelcome to SQL Database Query Editorpage, underActive Directory authentication, find a message likeLogged in as user@contoso.com.
SelectQuery editor. On theWelcome to SQL Database Query Editorpage, underActive Directory authentication, find a message likeLogged in as user@contoso.com.
Logged in as user@contoso.com
SelectContinue as user@contoso.com, whereuseris your AD admin account name.
SelectContinue as user@contoso.com, whereuseris your AD admin account name.
user
After signing in, in theQuery 1editor, run the following commands to create a database user for managed identitymyManagedIdentity.CREATE USER "myManagedIdentity" FROM EXTERNAL PROVIDER
ALTER ROLE db_datareader ADD MEMBER "myManagedIdentity";
ALTER ROLE db_datawriter ADD MEMBER "myManagedIdentity";
ALTER ROLE db_ddladmin ADD MEMBER "myManagedIdentity";
GO
After signing in, in theQuery 1editor, run the following commands to create a database user for managed identitymyManagedIdentity.
myManagedIdentity
CREATE USER "myManagedIdentity" FROM EXTERNAL PROVIDER
ALTER ROLE db_datareader ADD MEMBER "myManagedIdentity";
ALTER ROLE db_datawriter ADD MEMBER "myManagedIdentity";
ALTER ROLE db_ddladmin ADD MEMBER "myManagedIdentity";
GO
CREATE USER "myManagedIdentity" FROM EXTERNAL PROVIDER
ALTER ROLE db_datareader ADD MEMBER "myManagedIdentity";
ALTER ROLE db_datawriter ADD MEMBER "myManagedIdentity";
ALTER ROLE db_ddladmin ADD MEMBER "myManagedIdentity";
GO
In theQuery 1editor, selectRunto run the SQL commands.
In theQuery 1editor, selectRunto run the SQL commands.
If the commands complete successfully, you can find a message sayingQuery succeeded: Affected rows: 0.
If the commands complete successfully, you can find a message sayingQuery succeeded: Affected rows: 0.
Query succeeded: Affected rows: 0
Use the following command to get the connection string that you use in the next section:
export CONNECTION_STRING="jdbc:sqlserver://${AZURESQL_SERVER_NAME}.database.windows.net:1433;database=${DATABASE_NAME};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
echo ${CONNECTION_STRING}
export CONNECTION_STRING="jdbc:sqlserver://${AZURESQL_SERVER_NAME}.database.windows.net:1433;database=${DATABASE_NAME};encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;"
echo ${CONNECTION_STRING}
To create an Azure SQL Database single database for use with your app, follow the steps inQuickstart: Create a single database in Azure SQL Database. Carefully note the following differences:
At theBasicsstep, write down the values forResource group,Database name,<server-name>.database.windows.net,Server admin login, andPassword. This article refers to the databaseResource groupvalue as<db-resource-group>.
At theBasicsstep, write down the values forResource group,Database name,<server-name>.database.windows.net,Server admin login, andPassword. This article refers to the databaseResource groupvalue as<db-resource-group>.
<db-resource-group>
At theNetworkingstep, setConnectivity methodtoPublic endpoint, setAllow Azure services and resources to access this servertoYes, and setAdd current client IP addresstoYes.
At theNetworkingstep, setConnectivity methodtoPublic endpoint, setAllow Azure services and resources to access this servertoYes, and setAdd current client IP addresstoYes.

Note
Theserverless compute tierthat you selected for this database saves money by putting the database to sleep during periods of inactivity. The sample app will fail if the database is asleep when the app starts up.
To force the database to wake up, you can run a query by using the query editor. Follow the steps inQuery the database. Here's an example query:SELECT * FROM COFFEE;.
SELECT * FROM COFFEE;
Open theQuery editorpane by following the steps in theQuery the databasesection ofQuickstart: Create a single database - Azure SQL Database.
Create a schema for the sample application
SelectNew Queryand then, in the query editor, run the following query:
CREATE TABLE COFFEE (ID NUMERIC(19) NOT NULL, NAME VARCHAR(255) NULL, PRICE FLOAT(32) NULL, PRIMARY KEY (ID));
CREATE TABLE SEQUENCE (SEQ_NAME VARCHAR(50) NOT NULL, SEQ_COUNT NUMERIC(28) NULL, PRIMARY KEY (SEQ_NAME));
INSERT INTO SEQUENCE VALUES ('SEQ_GEN',0);
CREATE TABLE COFFEE (ID NUMERIC(19) NOT NULL, NAME VARCHAR(255) NULL, PRICE FLOAT(32) NULL, PRIMARY KEY (ID));
CREATE TABLE SEQUENCE (SEQ_NAME VARCHAR(50) NOT NULL, SEQ_COUNT NUMERIC(28) NULL, PRIMARY KEY (SEQ_NAME));
INSERT INTO SEQUENCE VALUES ('SEQ_GEN',0);
After a successful run, you should see the messageQuery succeeded: Affected rows: 1. If you don't see this message, troubleshoot and resolve the problem before proceeding.
You can proceed to deploy WLS on AKS offer.
Deploy WebLogic Server on AKS
Use the following steps to find the WebLogic Server on AKS offer and fill out theBasicspane:
In the search bar at the top of the Azure portal, enterweblogic. In the autosuggested search results, in theMarketplacesection, selectWebLogic Server on AKS.You can also go directly to theWebLogic Server on AKSoffer.
In the search bar at the top of the Azure portal, enterweblogic. In the autosuggested search results, in theMarketplacesection, selectWebLogic Server on AKS.

You can also go directly to theWebLogic Server on AKSoffer.
On the offer page, selectCreate.
On the offer page, selectCreate.
On theBasicspane, ensure the value shown in theSubscriptionfield is the same one that you logged into in Azure. Make sure you have the roles listed in the prerequisites section for the subscription.
On theBasicspane, ensure the value shown in theSubscriptionfield is the same one that you logged into in Azure. Make sure you have the roles listed in the prerequisites section for the subscription.

In theResource groupfield, selectCreate newand then fill in a value for the resource group. Because resource groups must be unique within a subscription, pick a unique name. An easy way to have unique names is to use a combination of your initials, today's date, and some identifier - for example,ejb0723wls.
In theResource groupfield, selectCreate newand then fill in a value for the resource group. Because resource groups must be unique within a subscription, pick a unique name. An easy way to have unique names is to use a combination of your initials, today's date, and some identifier - for example,ejb0723wls.
ejb0723wls
UnderInstance details, select the region for the deployment. For a list of Azure regions where AKS is available, seeAKS region availability.
UnderInstance details, select the region for the deployment. For a list of Azure regions where AKS is available, seeAKS region availability.
UnderCredentials for WebLogic, leave the default value forUsername for WebLogic Administrator.
UnderCredentials for WebLogic, leave the default value forUsername for WebLogic Administrator.
Fill inwlsAksCluster2022for thePassword for WebLogic Administrator. Use the same value for the confirmation andPassword for WebLogic Model encryptionfields.
Fill inwlsAksCluster2022for thePassword for WebLogic Administrator. Use the same value for the confirmation andPassword for WebLogic Model encryptionfields.
wlsAksCluster2022
SelectNext.
SelectNext.
Use the following steps start the deployment process:
Scroll to the section labeledProvide an Oracle Single Sign-On (SSO) account. Fill in your Oracle SSO credentials from the preconditions.
Scroll to the section labeledProvide an Oracle Single Sign-On (SSO) account. Fill in your Oracle SSO credentials from the preconditions.

Make sure you note the steps in the info box starting withBefore moving forward, you must accept the Oracle Standard Terms and Restrictions.
Make sure you note the steps in the info box starting withBefore moving forward, you must accept the Oracle Standard Terms and Restrictions.
Depending on whether or not the Oracle SSO account has an Oracle support entitlement, select the appropriate option forSelect the type of WebLogic Server Images. If the account has a support entitlement, selectPatched WebLogic Server Images. Otherwise, selectGeneral WebLogic Server Images.
Depending on whether or not the Oracle SSO account has an Oracle support entitlement, select the appropriate option forSelect the type of WebLogic Server Images. If the account has a support entitlement, selectPatched WebLogic Server Images. Otherwise, selectGeneral WebLogic Server Images.
Leave the value inSelect desired combination of WebLogic Server...at its default value. You have a broad range of choices for WebLogic Server, JDK, and OS version.
Leave the value inSelect desired combination of WebLogic Server...at its default value. You have a broad range of choices for WebLogic Server, JDK, and OS version.
In theApplicationsection, next toDeploy an application?, selectNo.
In theApplicationsection, next toDeploy an application?, selectNo.
The following steps make it so the WebLogic Server admin console and the sample app are exposed to the public Internet with a built-in Application Gateway ingress add-on. For a more information, seeWhat is Application Gateway Ingress Controller?
SelectNextto see theTLS/SSLpane.
SelectNextto see theTLS/SSLpane.
SelectNextto see theLoad balancingpane.
SelectNextto see theLoad balancingpane.
Next toLoad Balancing Options, selectApplication Gateway Ingress Controller.
Next toLoad Balancing Options, selectApplication Gateway Ingress Controller.

Under theApplication Gateway Ingress Controller, you should see all fields prepopulated with the defaults forVirtual networkandSubnet. Leave the default values.
Under theApplication Gateway Ingress Controller, you should see all fields prepopulated with the defaults forVirtual networkandSubnet. Leave the default values.
ForCreate ingress for Administration Console, selectYes.
ForCreate ingress for Administration Console, selectYes.

SelectNextto see theDNSpane.
SelectNextto see theDNSpane.
SelectNextto see theDatabasepane.
SelectNextto see theDatabasepane.
Passwordless (Recommended)
Password
Use the following steps to configure a database connection using a managed identity:
ForConnect to database?, selectYes.
UnderConnection settings, forChoose database type, open the dropdown menu and then selectMicrosoft SQL Server (with support for passwordless connection).
ForJNDI Name, inputjdbc/WebLogicCafeDB.
ForDataSource Connection String, input the connection string you obtained in last section.
SelectUse passwordless datasource connection.
ForUser assigned managed identity, select the managed identity you created in previous step. In this example, its name ismyManagedIdentity.
myManagedIdentity
SelectAdd.
TheConnection settingssection should look like the following screenshot:

To configure a database connection using a password, follow the instructions shown later in this article.
Use the following steps to complete the deployment:
SelectReview + create. Ensure that validation doesn't fail. If it fails, fix any validation problems, then selectReview + createagain.
SelectCreate.
Track the progress of the deployment on theDeployment is in progresspage.
Depending on network conditions and other activity in your selected region, the deployment might take up to 50 minutes to complete.
Note
If your organization requires you to deploy the workload within a corporate virtual network with no public IPs allowed, you can choose the internal Load Balancer service. To configure the internal Load Balancer service, use the following steps in theLoad balancingtab:
ForLoad Balancing Options, selectStandard Load Balancer Service.
ForLoad Balancing Options, selectStandard Load Balancer Service.
SelectUse Internal Load Balancer.
SelectUse Internal Load Balancer.
Add the following rows to the table:Service name prefixTargetPortwls-admin-internaladmin-server7001wls-cluster-internalcluster-18001
Add the following rows to the table:
wls-admin-internal
admin-server
wls-cluster-internal
cluster-1
TheLoad balancingtab should look like the following screenshot:

After the deployment, you can find the access URLs of the admin server and cluster from the output, labeledadminConsoleExternalUrlandclusterExternalUrl.
Examine the deployment output
Use the steps in this section to verify that the deployment was successful.
If you navigated away from theDeployment is in progresspage, the following steps show you how to get back to that page. If you're still on the page that showsYour deployment is complete, you can skip to step 5 after the next screenshot.
In the corner of any Azure portal page, select the hamburger menu and selectResource groups.
In the corner of any Azure portal page, select the hamburger menu and selectResource groups.
In the box with the textFilter for any field, enter the first few characters of the resource group you created previously. If you followed the recommended convention, enter your initials, then select the appropriate resource group.
In the box with the textFilter for any field, enter the first few characters of the resource group you created previously. If you followed the recommended convention, enter your initials, then select the appropriate resource group.
In the navigation pane, in theSettingssection, selectDeployments. You see an ordered list of the deployments to this resource group, with the most recent one first.
In the navigation pane, in theSettingssection, selectDeployments. You see an ordered list of the deployments to this resource group, with the most recent one first.
Scroll to the oldest entry in this list. This entry corresponds to the deployment you started in the preceding section. Select the oldest deployment, as shown in the following screenshot.
Scroll to the oldest entry in this list. This entry corresponds to the deployment you started in the preceding section. Select the oldest deployment, as shown in the following screenshot.

In the navigation pane, selectOutputs. This list shows the output values from the deployment. Useful information is included in the outputs.
In the navigation pane, selectOutputs. This list shows the output values from the deployment. Useful information is included in the outputs.
TheadminConsoleExternalUrlvalue is the fully qualified, public Internet visible link to the WebLogic Server admin console for this AKS cluster. Select the copy icon next to the field value to copy the link to your clipboard. Save this value aside for later.
TheadminConsoleExternalUrlvalue is the fully qualified, public Internet visible link to the WebLogic Server admin console for this AKS cluster. Select the copy icon next to the field value to copy the link to your clipboard. Save this value aside for later.
TheclusterExternalUrlvalue is the fully qualified, public Internet visible link to the sample app deployed in WebLogic Server on this AKS cluster. Select the copy icon next to the field value to copy the link to your clipboard. Save this value aside for later.
TheclusterExternalUrlvalue is the fully qualified, public Internet visible link to the sample app deployed in WebLogic Server on this AKS cluster. Select the copy icon next to the field value to copy the link to your clipboard. Save this value aside for later.
TheshellCmdtoOutputWlsImageModelYamlvalue is the base64 string of the WDT model that is used to build the container image. Save this value aside for later.
TheshellCmdtoOutputWlsImageModelYamlvalue is the base64 string of the WDT model that is used to build the container image. Save this value aside for later.
TheshellCmdtoOutputWlsImagePropertiesvalue is the base64 string of the WDT model properties that is used to build the container image. Save this value aside for later.
TheshellCmdtoOutputWlsImagePropertiesvalue is the base64 string of the WDT model properties that is used to build the container image. Save this value aside for later.
TheshellCmdtoConnectAksvalue is the Azure CLI command to connect to this specific AKS cluster.
TheshellCmdtoConnectAksvalue is the Azure CLI command to connect to this specific AKS cluster.
The other values in the outputs are beyond the scope of this article, but are explained in detail in theWebLogic on AKS user guide.
Configure and deploy the sample application
The offer provisions the WebLogic Server cluster viamodel in image. Currently, the WebLogic Server cluster has no application deployed.
This section updates the WebLogic Server cluster by deploying a sample application usingauxiliary image.
Check out the application
In this section, you clone the sample code for this guide. The sample is on GitHub in theweblogic-on-azurerepository in thejavaee/weblogic-cafe/folder. Here's the file structure of the application.
weblogic-cafe
âââ pom.xml
âââ src
    âââ main
        âââ java
        â   âââ cafe
        â       âââ model
        â       â   âââ CafeRepository.java
        â       â   âââ entity
        â       â       âââ Coffee.java
        â       âââ web
        â           âââ rest
        â           â   âââ CafeResource.java
        â           âââ view
        â               âââ Cafe.java
        âââ resources
        â   âââ META-INF
        â   â   âââ persistence.xml
        â   âââ cafe
        â       âââ web
        â           âââ messages.properties
        â           âââ messages_es.properties
        âââ webapp
            âââ WEB-INF
            â   âââ beans.xml
            â   âââ faces-config.xml
            â   âââ web.xml
            âââ index.xhtml
            âââ resources
                âââ components
                    âââ inputPrice.xhtml
weblogic-cafe
âââ pom.xml
âââ src
    âââ main
        âââ java
        â   âââ cafe
        â       âââ model
        â       â   âââ CafeRepository.java
        â       â   âââ entity
        â       â       âââ Coffee.java
        â       âââ web
        â           âââ rest
        â           â   âââ CafeResource.java
        â           âââ view
        â               âââ Cafe.java
        âââ resources
        â   âââ META-INF
        â   â   âââ persistence.xml
        â   âââ cafe
        â       âââ web
        â           âââ messages.properties
        â           âââ messages_es.properties
        âââ webapp
            âââ WEB-INF
            â   âââ beans.xml
            â   âââ faces-config.xml
            â   âââ web.xml
            âââ index.xhtml
            âââ resources
                âââ components
                    âââ inputPrice.xhtml
Use the following commands to clone the repository:
# cd <parent-directory-to-check-out-sample-code>
export BASE_DIR=$PWD

git clone --single-branch https://github.com/microsoft/weblogic-on-azure.git --branch 20240201 $BASE_DIR/weblogic-on-azure
# cd <parent-directory-to-check-out-sample-code>
export BASE_DIR=$PWD

git clone --single-branch https://github.com/microsoft/weblogic-on-azure.git --branch 20240201 $BASE_DIR/weblogic-on-azure
If you see a message about being in "detached HEAD" state, this message is safe to ignore. It just means you checked out a tag.
Use the following command to buildjavaee/weblogic-cafe/:
mvn clean package --file $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/pom.xml
mvn clean package --file $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/pom.xml
The package should be successfully generated and located at$BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/target/weblogic-cafe.war. If you don't see the package, you must troubleshoot and resolve the issue before you continue.
Use Azure Container Registry to create an auxiliary image
The steps in this section show you how to build an auxiliary image. This image includes the following components:
TheModel in Imagemodel files
Your application
The Java Database Connectivity (JDBC) driver archive file
The WebLogic Deploy Tooling installation
Anauxiliary imageis a Docker container image containing your app and configuration. The WebLogic Kubernetes Operator combines your auxiliary image with thedomain.spec.imagein the AKS cluster that contains the WebLogic Server, JDK, and operating system. For more information about auxiliary images, seeAuxiliary imagesin the Oracle documentation.
domain.spec.image
This section requires a Linux terminal with Azure CLI and kubectl installed.
Use the following steps to build the image:
Use the following commands to create a directory to stage the models and application:mkdir -p ${BASE_DIR}/mystaging/models
cd ${BASE_DIR}/mystaging/models
Use the following commands to create a directory to stage the models and application:
mkdir -p ${BASE_DIR}/mystaging/models
cd ${BASE_DIR}/mystaging/models
mkdir -p ${BASE_DIR}/mystaging/models
cd ${BASE_DIR}/mystaging/models
Copy theshellCmdtoOutputWlsImageModelYamlvalue that you saved from the deployment outputs, paste it into the Bash window, and run the command. The command should look similar to the following example:echo -e IyBDb3B5cmlna...Cgo= | base64 -d > model.yamlThis command produces a${BASE_DIR}/mystaging/models/model.yamlfile with contents similar to the following example:# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.yaml
# in https://github.com/oracle/weblogic-kubernetes-operator.

domainInfo:
  AdminUserName: "@@SECRET:__weblogic-credentials__:username@@"
  AdminPassword: "@@SECRET:__weblogic-credentials__:password@@"
  ServerStartMode: "prod"

topology:
  Name: "@@ENV:CUSTOM_DOMAIN_NAME@@"
  ProductionModeEnabled: true
  AdminServerName: "admin-server"
  Cluster:
    "cluster-1":
      DynamicServers:
        ServerTemplate: "cluster-1-template"
        ServerNamePrefix: "@@ENV:MANAGED_SERVER_PREFIX@@"
        DynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MaxDynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MinDynamicClusterSize: "0"
        CalculatedListenPorts: false
  Server:
    "admin-server":
      ListenPort: 7001
  ServerTemplate:
    "cluster-1-template":
      Cluster: "cluster-1"
      ListenPort: 8001
  SecurityConfiguration:
    NodeManagerUsername: "@@SECRET:__weblogic-credentials__:username@@"
    NodeManagerPasswordEncrypted: "@@SECRET:__weblogic-credentials__:password@@"

resources:
  SelfTuning:
    MinThreadsConstraint:
      SampleMinThreads:
        Target: "cluster-1"
        Count: 1
    MaxThreadsConstraint:
      SampleMaxThreads:
        Target: "cluster-1"
        Count: 10
    WorkManager:
      SampleWM:
        Target: "cluster-1"
        MinThreadsConstraint: "SampleMinThreads"
        MaxThreadsConstraint: "SampleMaxThreads"
Copy theshellCmdtoOutputWlsImageModelYamlvalue that you saved from the deployment outputs, paste it into the Bash window, and run the command. The command should look similar to the following example:
echo -e IyBDb3B5cmlna...Cgo= | base64 -d > model.yaml
echo -e IyBDb3B5cmlna...Cgo= | base64 -d > model.yaml
This command produces a${BASE_DIR}/mystaging/models/model.yamlfile with contents similar to the following example:
# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.yaml
# in https://github.com/oracle/weblogic-kubernetes-operator.

domainInfo:
  AdminUserName: "@@SECRET:__weblogic-credentials__:username@@"
  AdminPassword: "@@SECRET:__weblogic-credentials__:password@@"
  ServerStartMode: "prod"

topology:
  Name: "@@ENV:CUSTOM_DOMAIN_NAME@@"
  ProductionModeEnabled: true
  AdminServerName: "admin-server"
  Cluster:
    "cluster-1":
      DynamicServers:
        ServerTemplate: "cluster-1-template"
        ServerNamePrefix: "@@ENV:MANAGED_SERVER_PREFIX@@"
        DynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MaxDynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MinDynamicClusterSize: "0"
        CalculatedListenPorts: false
  Server:
    "admin-server":
      ListenPort: 7001
  ServerTemplate:
    "cluster-1-template":
      Cluster: "cluster-1"
      ListenPort: 8001
  SecurityConfiguration:
    NodeManagerUsername: "@@SECRET:__weblogic-credentials__:username@@"
    NodeManagerPasswordEncrypted: "@@SECRET:__weblogic-credentials__:password@@"

resources:
  SelfTuning:
    MinThreadsConstraint:
      SampleMinThreads:
        Target: "cluster-1"
        Count: 1
    MaxThreadsConstraint:
      SampleMaxThreads:
        Target: "cluster-1"
        Count: 10
    WorkManager:
      SampleWM:
        Target: "cluster-1"
        MinThreadsConstraint: "SampleMinThreads"
        MaxThreadsConstraint: "SampleMaxThreads"
# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.yaml
# in https://github.com/oracle/weblogic-kubernetes-operator.

domainInfo:
  AdminUserName: "@@SECRET:__weblogic-credentials__:username@@"
  AdminPassword: "@@SECRET:__weblogic-credentials__:password@@"
  ServerStartMode: "prod"

topology:
  Name: "@@ENV:CUSTOM_DOMAIN_NAME@@"
  ProductionModeEnabled: true
  AdminServerName: "admin-server"
  Cluster:
    "cluster-1":
      DynamicServers:
        ServerTemplate: "cluster-1-template"
        ServerNamePrefix: "@@ENV:MANAGED_SERVER_PREFIX@@"
        DynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MaxDynamicClusterSize: "@@PROP:CLUSTER_SIZE@@"
        MinDynamicClusterSize: "0"
        CalculatedListenPorts: false
  Server:
    "admin-server":
      ListenPort: 7001
  ServerTemplate:
    "cluster-1-template":
      Cluster: "cluster-1"
      ListenPort: 8001
  SecurityConfiguration:
    NodeManagerUsername: "@@SECRET:__weblogic-credentials__:username@@"
    NodeManagerPasswordEncrypted: "@@SECRET:__weblogic-credentials__:password@@"

resources:
  SelfTuning:
    MinThreadsConstraint:
      SampleMinThreads:
        Target: "cluster-1"
        Count: 1
    MaxThreadsConstraint:
      SampleMaxThreads:
        Target: "cluster-1"
        Count: 10
    WorkManager:
      SampleWM:
        Target: "cluster-1"
        MinThreadsConstraint: "SampleMinThreads"
        MaxThreadsConstraint: "SampleMaxThreads"
In a similar way, copy theshellCmdtoOutputWlsImagePropertiesvalue, paste it into the Bash window, and run the command. The command should look similar to the following example:echo -e IyBDb3B5cml...pFPTUK | base64 -d > model.propertiesThis command produces a${BASE_DIR}/mystaging/models/model.propertiesfile with contents similar to the following example:# Copyright (c) 2021, Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.properties
# in https://github.com/oracle/weblogic-kubernetes-operator.

CLUSTER_SIZE=5
In a similar way, copy theshellCmdtoOutputWlsImagePropertiesvalue, paste it into the Bash window, and run the command. The command should look similar to the following example:
echo -e IyBDb3B5cml...pFPTUK | base64 -d > model.properties
echo -e IyBDb3B5cml...pFPTUK | base64 -d > model.properties
This command produces a${BASE_DIR}/mystaging/models/model.propertiesfile with contents similar to the following example:
# Copyright (c) 2021, Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.properties
# in https://github.com/oracle/weblogic-kubernetes-operator.

CLUSTER_SIZE=5
# Copyright (c) 2021, Oracle Corporation and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Based on ./kubernetes/samples/scripts/create-weblogic-domain/model-in-image/model-images/model-in-image__WLS-v1/model.10.properties
# in https://github.com/oracle/weblogic-kubernetes-operator.

CLUSTER_SIZE=5
Use the following steps to create the application model file.Use the following commands to copyweblogic-cafe.warand save it towlsdeploy/applications:mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/applications
cp $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/target/weblogic-cafe.war ${BASE_DIR}/mystaging/models/wlsdeploy/applications/weblogic-cafe.warUse the following commands to create the application model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/appmodel.yaml.cat <<EOF >appmodel.yaml
appDeployments:
  Application:
    weblogic-cafe:
      SourcePath: 'wlsdeploy/applications/weblogic-cafe.war'
      ModuleType: ear
      Target: 'cluster-1'
EOF
Use the following steps to create the application model file.
Use the following commands to copyweblogic-cafe.warand save it towlsdeploy/applications:mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/applications
cp $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/target/weblogic-cafe.war ${BASE_DIR}/mystaging/models/wlsdeploy/applications/weblogic-cafe.war
Use the following commands to copyweblogic-cafe.warand save it towlsdeploy/applications:
mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/applications
cp $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/target/weblogic-cafe.war ${BASE_DIR}/mystaging/models/wlsdeploy/applications/weblogic-cafe.war
mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/applications
cp $BASE_DIR/weblogic-on-azure/javaee/weblogic-cafe/target/weblogic-cafe.war ${BASE_DIR}/mystaging/models/wlsdeploy/applications/weblogic-cafe.war
Use the following commands to create the application model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/appmodel.yaml.cat <<EOF >appmodel.yaml
appDeployments:
  Application:
    weblogic-cafe:
      SourcePath: 'wlsdeploy/applications/weblogic-cafe.war'
      ModuleType: ear
      Target: 'cluster-1'
EOF
Use the following commands to create the application model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/appmodel.yaml.
cat <<EOF >appmodel.yaml
appDeployments:
  Application:
    weblogic-cafe:
      SourcePath: 'wlsdeploy/applications/weblogic-cafe.war'
      ModuleType: ear
      Target: 'cluster-1'
EOF
cat <<EOF >appmodel.yaml
appDeployments:
  Application:
    weblogic-cafe:
      SourcePath: 'wlsdeploy/applications/weblogic-cafe.war'
      ModuleType: ear
      Target: 'cluster-1'
EOF
Use the following steps to configure the data source connection.Passwordless (Recommended)PasswordUse the following steps to download and install the Microsoft SQL Server JDBC driver and Azure Identity Extension that enables database connections using Azure Managed Identity.Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jarUse the following commands to install Azure Identity Extension towlsdeploy/classpathLibraries:curl -LO https://github.com/oracle/weblogic-azure/raw/refs/heads/main/weblogic-azure-aks/src/main/resources/azure-identity-extensions.xml

mvn dependency:copy-dependencies -f azure-identity-extensions.xml

mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries
mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson
# fix JARs conflict issue in GA images, put jackson libraries to PRE_CLASSPATH to upgrade the existing libs.
mv target/dependency/jackson-annotations-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-core-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-databind-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-dataformat-xml-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
# Thoes jars will be appended to CLASSPATH
mv target/dependency/*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries/Use the following commands to clean up resources:rm target -f -r
rm azure-identity-extensions.xmlConnect to the AKS cluster by copying theshellCmdtoConnectAksvalue that you saved aside previously, pasting it into the Bash window, then running the command. The command should look similar to the following example:az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>You should see output similar to the following example. If you don't see this output, troubleshoot and resolve the problem before continuing.Merged "<name>" as current context in /Users/<username>/.kube/configExport the database connection model and save it to${BASE_DIR}/mystaging/models/dbmodel.yaml. The following steps extract the database configuration model from the ConfigMapsample-domain1-wdt-config-map. The name follows the format<domain-uid>-wdt-config-map, where<domain-uid>is set during the offer deployment. If you modified the default value, replace it with your own domain UID.The data key is<db-secret-name>.yaml. Use the following command to retrieve the database secret name:export WLS_DOMAIN_UID=sample-domain1
export WLS_DOMAIN_NS=${WLS_DOMAIN_UID}-ns
export DB_K8S_SECRET_NAME=$(kubectl get secret -n ${WLS_DOMAIN_NS} | grep "ds-secret" | awk '{print $1}')Next, extract the database model with this command:kubectl get configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS} -o=jsonpath="{['data']['${DB_K8S_SECRET_NAME}\.yaml']}" >${BASE_DIR}/mystaging/models/dbmodel.yamlFinally, use the following command to verify the content ofdbmodel.yaml.cat ${BASE_DIR}/mystaging/models/dbmodel.yamlThe output of this command should resemble the following structure:# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
      JDBCDataSourceParams:
         JNDIName: [
            jdbc/WebLogicCafeDB
         ]
         GlobalTransactionsProtocol: OnePhaseCommit
      JDBCDriverParams:
         DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
         URL: '@@SECRET:ds-secret-sqlserver-1727147748:url@@'
         PasswordEncrypted: '@@SECRET:ds-secret-sqlserver-1727147748:password@@'
         Properties:
            user:
            Value: '@@SECRET:ds-secret-sqlserver-1727147748:user@@'
      JDBCConnectionPoolParams:
            TestTableName: SQL SELECT 1
            TestConnectionsOnReserve: trueUse the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jarNext, use the following commands to create the database connection model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/dbmodel.yaml. The model uses placeholders - secretsqlserver-secret- for database username, password, and URL. Make sure the following fields are set correctly. The following model names the resource withjdbc/WebLogicCafeDB.Item NameFieldValueJNDI nameresources.JDBCSystemResource.<resource-name>.JdbcResource.JDBCDataSourceParams.JNDINamejdbc/WebLogicCafeDBdriver nameresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.DriverNamecom.microsoft.sqlserver.jdbc.SQLServerDriverdatabase URLresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.URL@@SECRET:sqlserver-secret:url@@database passwordresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.PasswordEncrypted@@SECRET:sqlserver-secret:password@@database usernameresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.Properties.user.Value'@@SECRET:sqlserver-secret:user@@'cat <<EOF >dbmodel.yaml
resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
        JDBCDataSourceParams:
          JNDIName: [
            jdbc/WebLogicCafeDB
          ]
          GlobalTransactionsProtocol: None
        JDBCDriverParams:
          DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
          URL: '@@SECRET:sqlserver-secret:url@@'
          PasswordEncrypted: '@@SECRET:sqlserver-secret:password@@'
          Properties:
            user:
              Value: '@@SECRET:sqlserver-secret:user@@'
        JDBCConnectionPoolParams:
          TestTableName: SQL SELECT 1
          TestConnectionsOnReserve: true
EOF
Use the following steps to configure the data source connection.
Passwordless (Recommended)
Password
Use the following steps to download and install the Microsoft SQL Server JDBC driver and Azure Identity Extension that enables database connections using Azure Managed Identity.Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jarUse the following commands to install Azure Identity Extension towlsdeploy/classpathLibraries:curl -LO https://github.com/oracle/weblogic-azure/raw/refs/heads/main/weblogic-azure-aks/src/main/resources/azure-identity-extensions.xml

mvn dependency:copy-dependencies -f azure-identity-extensions.xml

mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries
mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson
# fix JARs conflict issue in GA images, put jackson libraries to PRE_CLASSPATH to upgrade the existing libs.
mv target/dependency/jackson-annotations-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-core-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-databind-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-dataformat-xml-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
# Thoes jars will be appended to CLASSPATH
mv target/dependency/*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries/Use the following commands to clean up resources:rm target -f -r
rm azure-identity-extensions.xml
Use the following steps to download and install the Microsoft SQL Server JDBC driver and Azure Identity Extension that enables database connections using Azure Managed Identity.
Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:
wlsdeploy/externalJDBCLibraries
export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
Use the following commands to install Azure Identity Extension towlsdeploy/classpathLibraries:curl -LO https://github.com/oracle/weblogic-azure/raw/refs/heads/main/weblogic-azure-aks/src/main/resources/azure-identity-extensions.xml

mvn dependency:copy-dependencies -f azure-identity-extensions.xml

mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries
mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson
# fix JARs conflict issue in GA images, put jackson libraries to PRE_CLASSPATH to upgrade the existing libs.
mv target/dependency/jackson-annotations-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-core-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-databind-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-dataformat-xml-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
# Thoes jars will be appended to CLASSPATH
mv target/dependency/*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries/
Use the following commands to install Azure Identity Extension towlsdeploy/classpathLibraries:
wlsdeploy/classpathLibraries
curl -LO https://github.com/oracle/weblogic-azure/raw/refs/heads/main/weblogic-azure-aks/src/main/resources/azure-identity-extensions.xml

mvn dependency:copy-dependencies -f azure-identity-extensions.xml

mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries
mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson
# fix JARs conflict issue in GA images, put jackson libraries to PRE_CLASSPATH to upgrade the existing libs.
mv target/dependency/jackson-annotations-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-core-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-databind-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-dataformat-xml-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
# Thoes jars will be appended to CLASSPATH
mv target/dependency/*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries/
curl -LO https://github.com/oracle/weblogic-azure/raw/refs/heads/main/weblogic-azure-aks/src/main/resources/azure-identity-extensions.xml

mvn dependency:copy-dependencies -f azure-identity-extensions.xml

mkdir -p ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries
mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson
# fix JARs conflict issue in GA images, put jackson libraries to PRE_CLASSPATH to upgrade the existing libs.
mv target/dependency/jackson-annotations-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-core-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-databind-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
mv target/dependency/jackson-dataformat-xml-*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/jackson/
# Thoes jars will be appended to CLASSPATH
mv target/dependency/*.jar ${BASE_DIR}/mystaging/models/wlsdeploy/classpathLibraries/azureLibraries/
Use the following commands to clean up resources:rm target -f -r
rm azure-identity-extensions.xml
Use the following commands to clean up resources:
rm target -f -r
rm azure-identity-extensions.xml
rm target -f -r
rm azure-identity-extensions.xml
Connect to the AKS cluster by copying theshellCmdtoConnectAksvalue that you saved aside previously, pasting it into the Bash window, then running the command. The command should look similar to the following example:az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>You should see output similar to the following example. If you don't see this output, troubleshoot and resolve the problem before continuing.Merged "<name>" as current context in /Users/<username>/.kube/config
Connect to the AKS cluster by copying theshellCmdtoConnectAksvalue that you saved aside previously, pasting it into the Bash window, then running the command. The command should look similar to the following example:
az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>
az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>
You should see output similar to the following example. If you don't see this output, troubleshoot and resolve the problem before continuing.
Merged "<name>" as current context in /Users/<username>/.kube/config
Merged "<name>" as current context in /Users/<username>/.kube/config
Export the database connection model and save it to${BASE_DIR}/mystaging/models/dbmodel.yaml. The following steps extract the database configuration model from the ConfigMapsample-domain1-wdt-config-map. The name follows the format<domain-uid>-wdt-config-map, where<domain-uid>is set during the offer deployment. If you modified the default value, replace it with your own domain UID.The data key is<db-secret-name>.yaml. Use the following command to retrieve the database secret name:export WLS_DOMAIN_UID=sample-domain1
export WLS_DOMAIN_NS=${WLS_DOMAIN_UID}-ns
export DB_K8S_SECRET_NAME=$(kubectl get secret -n ${WLS_DOMAIN_NS} | grep "ds-secret" | awk '{print $1}')Next, extract the database model with this command:kubectl get configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS} -o=jsonpath="{['data']['${DB_K8S_SECRET_NAME}\.yaml']}" >${BASE_DIR}/mystaging/models/dbmodel.yamlFinally, use the following command to verify the content ofdbmodel.yaml.cat ${BASE_DIR}/mystaging/models/dbmodel.yamlThe output of this command should resemble the following structure:# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
      JDBCDataSourceParams:
         JNDIName: [
            jdbc/WebLogicCafeDB
         ]
         GlobalTransactionsProtocol: OnePhaseCommit
      JDBCDriverParams:
         DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
         URL: '@@SECRET:ds-secret-sqlserver-1727147748:url@@'
         PasswordEncrypted: '@@SECRET:ds-secret-sqlserver-1727147748:password@@'
         Properties:
            user:
            Value: '@@SECRET:ds-secret-sqlserver-1727147748:user@@'
      JDBCConnectionPoolParams:
            TestTableName: SQL SELECT 1
            TestConnectionsOnReserve: true
Export the database connection model and save it to${BASE_DIR}/mystaging/models/dbmodel.yaml. The following steps extract the database configuration model from the ConfigMapsample-domain1-wdt-config-map. The name follows the format<domain-uid>-wdt-config-map, where<domain-uid>is set during the offer deployment. If you modified the default value, replace it with your own domain UID.
sample-domain1-wdt-config-map
<domain-uid>-wdt-config-map
<domain-uid>
The data key is<db-secret-name>.yaml. Use the following command to retrieve the database secret name:export WLS_DOMAIN_UID=sample-domain1
export WLS_DOMAIN_NS=${WLS_DOMAIN_UID}-ns
export DB_K8S_SECRET_NAME=$(kubectl get secret -n ${WLS_DOMAIN_NS} | grep "ds-secret" | awk '{print $1}')
The data key is<db-secret-name>.yaml. Use the following command to retrieve the database secret name:
export WLS_DOMAIN_UID=sample-domain1
export WLS_DOMAIN_NS=${WLS_DOMAIN_UID}-ns
export DB_K8S_SECRET_NAME=$(kubectl get secret -n ${WLS_DOMAIN_NS} | grep "ds-secret" | awk '{print $1}')
export WLS_DOMAIN_UID=sample-domain1
export WLS_DOMAIN_NS=${WLS_DOMAIN_UID}-ns
export DB_K8S_SECRET_NAME=$(kubectl get secret -n ${WLS_DOMAIN_NS} | grep "ds-secret" | awk '{print $1}')
Next, extract the database model with this command:kubectl get configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS} -o=jsonpath="{['data']['${DB_K8S_SECRET_NAME}\.yaml']}" >${BASE_DIR}/mystaging/models/dbmodel.yaml
Next, extract the database model with this command:
kubectl get configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS} -o=jsonpath="{['data']['${DB_K8S_SECRET_NAME}\.yaml']}" >${BASE_DIR}/mystaging/models/dbmodel.yaml
kubectl get configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS} -o=jsonpath="{['data']['${DB_K8S_SECRET_NAME}\.yaml']}" >${BASE_DIR}/mystaging/models/dbmodel.yaml
Finally, use the following command to verify the content ofdbmodel.yaml.cat ${BASE_DIR}/mystaging/models/dbmodel.yamlThe output of this command should resemble the following structure:# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
      JDBCDataSourceParams:
         JNDIName: [
            jdbc/WebLogicCafeDB
         ]
         GlobalTransactionsProtocol: OnePhaseCommit
      JDBCDriverParams:
         DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
         URL: '@@SECRET:ds-secret-sqlserver-1727147748:url@@'
         PasswordEncrypted: '@@SECRET:ds-secret-sqlserver-1727147748:password@@'
         Properties:
            user:
            Value: '@@SECRET:ds-secret-sqlserver-1727147748:user@@'
      JDBCConnectionPoolParams:
            TestTableName: SQL SELECT 1
            TestConnectionsOnReserve: true
Finally, use the following command to verify the content ofdbmodel.yaml.
cat ${BASE_DIR}/mystaging/models/dbmodel.yaml
cat ${BASE_DIR}/mystaging/models/dbmodel.yaml
The output of this command should resemble the following structure:
# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
      JDBCDataSourceParams:
         JNDIName: [
            jdbc/WebLogicCafeDB
         ]
         GlobalTransactionsProtocol: OnePhaseCommit
      JDBCDriverParams:
         DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
         URL: '@@SECRET:ds-secret-sqlserver-1727147748:url@@'
         PasswordEncrypted: '@@SECRET:ds-secret-sqlserver-1727147748:password@@'
         Properties:
            user:
            Value: '@@SECRET:ds-secret-sqlserver-1727147748:user@@'
      JDBCConnectionPoolParams:
            TestTableName: SQL SELECT 1
            TestConnectionsOnReserve: true
# Copyright (c) 2020, 2021, Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
      JDBCDataSourceParams:
         JNDIName: [
            jdbc/WebLogicCafeDB
         ]
         GlobalTransactionsProtocol: OnePhaseCommit
      JDBCDriverParams:
         DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
         URL: '@@SECRET:ds-secret-sqlserver-1727147748:url@@'
         PasswordEncrypted: '@@SECRET:ds-secret-sqlserver-1727147748:password@@'
         Properties:
            user:
            Value: '@@SECRET:ds-secret-sqlserver-1727147748:user@@'
      JDBCConnectionPoolParams:
            TestTableName: SQL SELECT 1
            TestConnectionsOnReserve: true
Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
Use the following commands to download and install Microsoft SQL Server JDBC driver towlsdeploy/externalJDBCLibraries:
export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
export DRIVER_VERSION="10.2.1.jre8"
export MSSQL_DRIVER_URL="https://repo.maven.apache.org/maven2/com/microsoft/sqlserver/mssql-jdbc/${DRIVER_VERSION}/mssql-jdbc-${DRIVER_VERSION}.jar"

mkdir ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries
curl -m 120 -fL ${MSSQL_DRIVER_URL} -o ${BASE_DIR}/mystaging/models/wlsdeploy/externalJDBCLibraries/mssql-jdbc-${DRIVER_VERSION}.jar
Next, use the following commands to create the database connection model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/dbmodel.yaml. The model uses placeholders - secretsqlserver-secret- for database username, password, and URL. Make sure the following fields are set correctly. The following model names the resource withjdbc/WebLogicCafeDB.Item NameFieldValueJNDI nameresources.JDBCSystemResource.<resource-name>.JdbcResource.JDBCDataSourceParams.JNDINamejdbc/WebLogicCafeDBdriver nameresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.DriverNamecom.microsoft.sqlserver.jdbc.SQLServerDriverdatabase URLresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.URL@@SECRET:sqlserver-secret:url@@database passwordresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.PasswordEncrypted@@SECRET:sqlserver-secret:password@@database usernameresources.JDBCSystemResource.<resource-name>.JDBCDriverParams.Properties.user.Value'@@SECRET:sqlserver-secret:user@@'cat <<EOF >dbmodel.yaml
resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
        JDBCDataSourceParams:
          JNDIName: [
            jdbc/WebLogicCafeDB
          ]
          GlobalTransactionsProtocol: None
        JDBCDriverParams:
          DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
          URL: '@@SECRET:sqlserver-secret:url@@'
          PasswordEncrypted: '@@SECRET:sqlserver-secret:password@@'
          Properties:
            user:
              Value: '@@SECRET:sqlserver-secret:user@@'
        JDBCConnectionPoolParams:
          TestTableName: SQL SELECT 1
          TestConnectionsOnReserve: true
EOF
Next, use the following commands to create the database connection model file with the contents shown. Save the model file to${BASE_DIR}/mystaging/models/dbmodel.yaml. The model uses placeholders - secretsqlserver-secret- for database username, password, and URL. Make sure the following fields are set correctly. The following model names the resource withjdbc/WebLogicCafeDB.
sqlserver-secret
jdbc/WebLogicCafeDB
resources.JDBCSystemResource.<resource-name>.JdbcResource.JDBCDataSourceParams.JNDIName
jdbc/WebLogicCafeDB
resources.JDBCSystemResource.<resource-name>.JDBCDriverParams.DriverName
com.microsoft.sqlserver.jdbc.SQLServerDriver
resources.JDBCSystemResource.<resource-name>.JDBCDriverParams.URL
@@SECRET:sqlserver-secret:url@@
resources.JDBCSystemResource.<resource-name>.JDBCDriverParams.PasswordEncrypted
@@SECRET:sqlserver-secret:password@@
resources.JDBCSystemResource.<resource-name>.JDBCDriverParams.Properties.user.Value
'@@SECRET:sqlserver-secret:user@@'
cat <<EOF >dbmodel.yaml
resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
        JDBCDataSourceParams:
          JNDIName: [
            jdbc/WebLogicCafeDB
          ]
          GlobalTransactionsProtocol: None
        JDBCDriverParams:
          DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
          URL: '@@SECRET:sqlserver-secret:url@@'
          PasswordEncrypted: '@@SECRET:sqlserver-secret:password@@'
          Properties:
            user:
              Value: '@@SECRET:sqlserver-secret:user@@'
        JDBCConnectionPoolParams:
          TestTableName: SQL SELECT 1
          TestConnectionsOnReserve: true
EOF
cat <<EOF >dbmodel.yaml
resources:
  JDBCSystemResource:
    jdbc/WebLogicCafeDB:
      Target: 'cluster-1'
      JdbcResource:
        JDBCDataSourceParams:
          JNDIName: [
            jdbc/WebLogicCafeDB
          ]
          GlobalTransactionsProtocol: None
        JDBCDriverParams:
          DriverName: com.microsoft.sqlserver.jdbc.SQLServerDriver
          URL: '@@SECRET:sqlserver-secret:url@@'
          PasswordEncrypted: '@@SECRET:sqlserver-secret:password@@'
          Properties:
            user:
              Value: '@@SECRET:sqlserver-secret:user@@'
        JDBCConnectionPoolParams:
          TestTableName: SQL SELECT 1
          TestConnectionsOnReserve: true
EOF
Use the following commands to create an archive file and then remove thewlsdeployfolder, which you don't need anymore:cd ${BASE_DIR}/mystaging/models
zip -r archive.zip wlsdeploy

rm -f -r wlsdeploy
Use the following commands to create an archive file and then remove thewlsdeployfolder, which you don't need anymore:
cd ${BASE_DIR}/mystaging/models
zip -r archive.zip wlsdeploy

rm -f -r wlsdeploy
cd ${BASE_DIR}/mystaging/models
zip -r archive.zip wlsdeploy

rm -f -r wlsdeploy
Use the following commands to download and installWebLogic Deploy Tooling(WDT) in the staging directory and remove itsweblogic-deploy/bin/*.cmdfiles, which aren't used in UNIX environments:cd ${BASE_DIR}/mystaging
curl -m 120 -fL https://github.com/oracle/weblogic-deploy-tooling/releases/latest/download/weblogic-deploy.zip -o weblogic-deploy.zip

unzip weblogic-deploy.zip -d .
rm ./weblogic-deploy/bin/*.cmd
Use the following commands to download and installWebLogic Deploy Tooling(WDT) in the staging directory and remove itsweblogic-deploy/bin/*.cmdfiles, which aren't used in UNIX environments:
cd ${BASE_DIR}/mystaging
curl -m 120 -fL https://github.com/oracle/weblogic-deploy-tooling/releases/latest/download/weblogic-deploy.zip -o weblogic-deploy.zip

unzip weblogic-deploy.zip -d .
rm ./weblogic-deploy/bin/*.cmd
cd ${BASE_DIR}/mystaging
curl -m 120 -fL https://github.com/oracle/weblogic-deploy-tooling/releases/latest/download/weblogic-deploy.zip -o weblogic-deploy.zip

unzip weblogic-deploy.zip -d .
rm ./weblogic-deploy/bin/*.cmd
Use the following command to clean up the WDT installer:rm weblogic-deploy.zip
Use the following command to clean up the WDT installer:
rm weblogic-deploy.zip
rm weblogic-deploy.zip
Use the following commands to create a docker file:cd ${BASE_DIR}/mystaging
cat <<EOF >Dockerfile
FROM busybox
ARG AUXILIARY_IMAGE_PATH=/auxiliary
ARG USER=oracle
ARG USERID=1000
ARG GROUP=root
ENV AUXILIARY_IMAGE_PATH=\${AUXILIARY_IMAGE_PATH}
RUN adduser -D -u \${USERID} -G \$GROUP \$USER
COPY --chown=\$USER:\$GROUP ./ \${AUXILIARY_IMAGE_PATH}/
USER \$USER
EOF
Use the following commands to create a docker file:
cd ${BASE_DIR}/mystaging
cat <<EOF >Dockerfile
FROM busybox
ARG AUXILIARY_IMAGE_PATH=/auxiliary
ARG USER=oracle
ARG USERID=1000
ARG GROUP=root
ENV AUXILIARY_IMAGE_PATH=\${AUXILIARY_IMAGE_PATH}
RUN adduser -D -u \${USERID} -G \$GROUP \$USER
COPY --chown=\$USER:\$GROUP ./ \${AUXILIARY_IMAGE_PATH}/
USER \$USER
EOF
cd ${BASE_DIR}/mystaging
cat <<EOF >Dockerfile
FROM busybox
ARG AUXILIARY_IMAGE_PATH=/auxiliary
ARG USER=oracle
ARG USERID=1000
ARG GROUP=root
ENV AUXILIARY_IMAGE_PATH=\${AUXILIARY_IMAGE_PATH}
RUN adduser -D -u \${USERID} -G \$GROUP \$USER
COPY --chown=\$USER:\$GROUP ./ \${AUXILIARY_IMAGE_PATH}/
USER \$USER
EOF
Run theaz acr buildcommand using${BASE_DIR}/mystaging/Dockerfile, as shown in the following example:export ACR_NAME=<value-from-clipboard>
export IMAGE="wlsaks-auxiliary-image:1.0"
Run theaz acr buildcommand using${BASE_DIR}/mystaging/Dockerfile, as shown in the following example:
az acr build
export ACR_NAME=<value-from-clipboard>
export IMAGE="wlsaks-auxiliary-image:1.0"
export ACR_NAME=<value-from-clipboard>
export IMAGE="wlsaks-auxiliary-image:1.0"
Use the following commands to double-check the staging files:cd ${BASE_DIR}/mystaging
find -maxdepth 2 -type f -printThese commands produce output similar to the following example:./models/model.properties
./models/model.yaml
./models/appmodel.yaml
./models/dbmodel.yaml
./models/archive.zip
./Dockerfile
./weblogic-deploy/VERSION.txt
./weblogic-deploy/LICENSE.txt
Use the following commands to double-check the staging files:
cd ${BASE_DIR}/mystaging
find -maxdepth 2 -type f -print
cd ${BASE_DIR}/mystaging
find -maxdepth 2 -type f -print
These commands produce output similar to the following example:
./models/model.properties
./models/model.yaml
./models/appmodel.yaml
./models/dbmodel.yaml
./models/archive.zip
./Dockerfile
./weblogic-deploy/VERSION.txt
./weblogic-deploy/LICENSE.txt
./models/model.properties
./models/model.yaml
./models/appmodel.yaml
./models/dbmodel.yaml
./models/archive.zip
./Dockerfile
./weblogic-deploy/VERSION.txt
./weblogic-deploy/LICENSE.txt
Build the image withaz acr build, as shown in the following example:az acr build -t ${IMAGE} --build-arg AUXILIARY_IMAGE_PATH=/auxiliary -r ${ACR_NAME} --platform linux/amd64 .When you build the image successfully, the output looks similar to the following example:...
Step 1/9 : FROM busybox
latest: Pulling from library/busybox
Digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
Status: Image is up to date for busybox:latest
---> 65ad0d468eb1
Step 2/9 : ARG AUXILIARY_IMAGE_PATH=/auxiliary
---> Running in 1f8f4e82ccb6
Removing intermediate container 1f8f4e82ccb6
---> 947fde618be9
Step 3/9 : ARG USER=oracle
---> Running in dda021591e41
Removing intermediate container dda021591e41
---> f43d84be4517
Step 4/9 : ARG USERID=1000
---> Running in cac4df6dfd13
Removing intermediate container cac4df6dfd13
---> e5513f426c74
Step 5/9 : ARG GROUP=root
---> Running in 8fec1763270c
Removing intermediate container 8fec1763270c
---> 9ef233dbe279
Step 6/9 : ENV AUXILIARY_IMAGE_PATH=${AUXILIARY_IMAGE_PATH}
---> Running in b7754f58157a
Removing intermediate container b7754f58157a
---> 4a26a97eb572
Step 7/9 : RUN adduser -D -u ${USERID} -G $GROUP $USER
---> Running in b6c1f1a81af1
Removing intermediate container b6c1f1a81af1
---> 97d3e5ad7540
Step 8/9 : COPY --chown=$USER:$GROUP ./ ${AUXILIARY_IMAGE_PATH}/
---> 21088171876f
Step 9/9 : USER $USER
---> Running in 825e0abc9f6a
Removing intermediate container 825e0abc9f6a
---> b81d6430fcda
Successfully built b81d6430fcda
Successfully tagged wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:19 Successfully executed container: build
2024/08/28 03:06:19 Executing step ID: push. Timeout(sec): 3600, Working directory: '', Network: ''
2024/08/28 03:06:19 Pushing image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0, attempt 1
The push refers to repository [wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image]
ee589b3cda86: Preparing
c1fd1adab3b9: Preparing
d51af96cf93e: Preparing
c1fd1adab3b9: Pushed
d51af96cf93e: Pushed
ee589b3cda86: Pushed
1.0: digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac size: 946
2024/08/28 03:06:21 Successfully pushed image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:21 Step ID: build marked as successful (elapsed time in seconds: 8.780235)
2024/08/28 03:06:21 Populating digests for step ID: build...
2024/08/28 03:06:22 Successfully populated digests for step ID: build
2024/08/28 03:06:22 Step ID: push marked as successful (elapsed time in seconds: 1.980158)
2024/08/28 03:06:22 The following dependencies were found:
2024/08/28 03:06:22
- image:
   registry: wlsaksacru6jyly7kztoqu.azurecr.io
   repository: wlsaks-auxiliary-image
   tag: "1.0"
   digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac
runtime-dependency:
   registry: registry.hub.docker.com
   repository: library/busybox
   tag: latest
   digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
git: {}

Run ID: ca1 was successful after 14sThe image is pushed to ACR after a success build.
Build the image withaz acr build, as shown in the following example:
az acr build
az acr build -t ${IMAGE} --build-arg AUXILIARY_IMAGE_PATH=/auxiliary -r ${ACR_NAME} --platform linux/amd64 .
az acr build -t ${IMAGE} --build-arg AUXILIARY_IMAGE_PATH=/auxiliary -r ${ACR_NAME} --platform linux/amd64 .
When you build the image successfully, the output looks similar to the following example:
...
Step 1/9 : FROM busybox
latest: Pulling from library/busybox
Digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
Status: Image is up to date for busybox:latest
---> 65ad0d468eb1
Step 2/9 : ARG AUXILIARY_IMAGE_PATH=/auxiliary
---> Running in 1f8f4e82ccb6
Removing intermediate container 1f8f4e82ccb6
---> 947fde618be9
Step 3/9 : ARG USER=oracle
---> Running in dda021591e41
Removing intermediate container dda021591e41
---> f43d84be4517
Step 4/9 : ARG USERID=1000
---> Running in cac4df6dfd13
Removing intermediate container cac4df6dfd13
---> e5513f426c74
Step 5/9 : ARG GROUP=root
---> Running in 8fec1763270c
Removing intermediate container 8fec1763270c
---> 9ef233dbe279
Step 6/9 : ENV AUXILIARY_IMAGE_PATH=${AUXILIARY_IMAGE_PATH}
---> Running in b7754f58157a
Removing intermediate container b7754f58157a
---> 4a26a97eb572
Step 7/9 : RUN adduser -D -u ${USERID} -G $GROUP $USER
---> Running in b6c1f1a81af1
Removing intermediate container b6c1f1a81af1
---> 97d3e5ad7540
Step 8/9 : COPY --chown=$USER:$GROUP ./ ${AUXILIARY_IMAGE_PATH}/
---> 21088171876f
Step 9/9 : USER $USER
---> Running in 825e0abc9f6a
Removing intermediate container 825e0abc9f6a
---> b81d6430fcda
Successfully built b81d6430fcda
Successfully tagged wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:19 Successfully executed container: build
2024/08/28 03:06:19 Executing step ID: push. Timeout(sec): 3600, Working directory: '', Network: ''
2024/08/28 03:06:19 Pushing image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0, attempt 1
The push refers to repository [wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image]
ee589b3cda86: Preparing
c1fd1adab3b9: Preparing
d51af96cf93e: Preparing
c1fd1adab3b9: Pushed
d51af96cf93e: Pushed
ee589b3cda86: Pushed
1.0: digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac size: 946
2024/08/28 03:06:21 Successfully pushed image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:21 Step ID: build marked as successful (elapsed time in seconds: 8.780235)
2024/08/28 03:06:21 Populating digests for step ID: build...
2024/08/28 03:06:22 Successfully populated digests for step ID: build
2024/08/28 03:06:22 Step ID: push marked as successful (elapsed time in seconds: 1.980158)
2024/08/28 03:06:22 The following dependencies were found:
2024/08/28 03:06:22
- image:
   registry: wlsaksacru6jyly7kztoqu.azurecr.io
   repository: wlsaks-auxiliary-image
   tag: "1.0"
   digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac
runtime-dependency:
   registry: registry.hub.docker.com
   repository: library/busybox
   tag: latest
   digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
git: {}

Run ID: ca1 was successful after 14s
...
Step 1/9 : FROM busybox
latest: Pulling from library/busybox
Digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
Status: Image is up to date for busybox:latest
---> 65ad0d468eb1
Step 2/9 : ARG AUXILIARY_IMAGE_PATH=/auxiliary
---> Running in 1f8f4e82ccb6
Removing intermediate container 1f8f4e82ccb6
---> 947fde618be9
Step 3/9 : ARG USER=oracle
---> Running in dda021591e41
Removing intermediate container dda021591e41
---> f43d84be4517
Step 4/9 : ARG USERID=1000
---> Running in cac4df6dfd13
Removing intermediate container cac4df6dfd13
---> e5513f426c74
Step 5/9 : ARG GROUP=root
---> Running in 8fec1763270c
Removing intermediate container 8fec1763270c
---> 9ef233dbe279
Step 6/9 : ENV AUXILIARY_IMAGE_PATH=${AUXILIARY_IMAGE_PATH}
---> Running in b7754f58157a
Removing intermediate container b7754f58157a
---> 4a26a97eb572
Step 7/9 : RUN adduser -D -u ${USERID} -G $GROUP $USER
---> Running in b6c1f1a81af1
Removing intermediate container b6c1f1a81af1
---> 97d3e5ad7540
Step 8/9 : COPY --chown=$USER:$GROUP ./ ${AUXILIARY_IMAGE_PATH}/
---> 21088171876f
Step 9/9 : USER $USER
---> Running in 825e0abc9f6a
Removing intermediate container 825e0abc9f6a
---> b81d6430fcda
Successfully built b81d6430fcda
Successfully tagged wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:19 Successfully executed container: build
2024/08/28 03:06:19 Executing step ID: push. Timeout(sec): 3600, Working directory: '', Network: ''
2024/08/28 03:06:19 Pushing image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0, attempt 1
The push refers to repository [wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image]
ee589b3cda86: Preparing
c1fd1adab3b9: Preparing
d51af96cf93e: Preparing
c1fd1adab3b9: Pushed
d51af96cf93e: Pushed
ee589b3cda86: Pushed
1.0: digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac size: 946
2024/08/28 03:06:21 Successfully pushed image: wlsaksacru6jyly7kztoqu.azurecr.io/wlsaks-auxiliary-image:1.0
2024/08/28 03:06:21 Step ID: build marked as successful (elapsed time in seconds: 8.780235)
2024/08/28 03:06:21 Populating digests for step ID: build...
2024/08/28 03:06:22 Successfully populated digests for step ID: build
2024/08/28 03:06:22 Step ID: push marked as successful (elapsed time in seconds: 1.980158)
2024/08/28 03:06:22 The following dependencies were found:
2024/08/28 03:06:22
- image:
   registry: wlsaksacru6jyly7kztoqu.azurecr.io
   repository: wlsaks-auxiliary-image
   tag: "1.0"
   digest: sha256:c813eb75576eb07a179c3cb4e70106ca7dd280f933ab33a2f6858de673b12eac
runtime-dependency:
   registry: registry.hub.docker.com
   repository: library/busybox
   tag: latest
   digest: sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7
git: {}

Run ID: ca1 was successful after 14s
The image is pushed to ACR after a success build.
You can runaz acr repository showto test whether the image is pushed to the remote repository successfully, as shown in the following example:az acr repository show --name ${ACR_NAME} --image ${IMAGE}This command should produce output similar to the following example:{
   "changeableAttributes": {
      "deleteEnabled": true,
      "listEnabled": true,
      "readEnabled": true,
      "writeEnabled": true
   },
   "createdTime": "2024-01-24T06:14:19.4546321Z",
   "digest": "sha256:a1befbefd0181a06c6fe00848e76f1743c1fecba2b42a975e9504ba2aaae51ea",
   "lastUpdateTime": "2024-01-24T06:14:19.4546321Z",
   "name": "1.0",
   "quarantineState": "Passed",
   "signed": false
}
You can runaz acr repository showto test whether the image is pushed to the remote repository successfully, as shown in the following example:
az acr repository show
az acr repository show --name ${ACR_NAME} --image ${IMAGE}
az acr repository show --name ${ACR_NAME} --image ${IMAGE}
This command should produce output similar to the following example:
{
   "changeableAttributes": {
      "deleteEnabled": true,
      "listEnabled": true,
      "readEnabled": true,
      "writeEnabled": true
   },
   "createdTime": "2024-01-24T06:14:19.4546321Z",
   "digest": "sha256:a1befbefd0181a06c6fe00848e76f1743c1fecba2b42a975e9504ba2aaae51ea",
   "lastUpdateTime": "2024-01-24T06:14:19.4546321Z",
   "name": "1.0",
   "quarantineState": "Passed",
   "signed": false
}
{
   "changeableAttributes": {
      "deleteEnabled": true,
      "listEnabled": true,
      "readEnabled": true,
      "writeEnabled": true
   },
   "createdTime": "2024-01-24T06:14:19.4546321Z",
   "digest": "sha256:a1befbefd0181a06c6fe00848e76f1743c1fecba2b42a975e9504ba2aaae51ea",
   "lastUpdateTime": "2024-01-24T06:14:19.4546321Z",
   "name": "1.0",
   "quarantineState": "Passed",
   "signed": false
}
Apply the auxiliary image
In the previous steps, you created the auxiliary image including models and WDT. Apply the auxiliary image to the WebLogic Server cluster with the following steps.
Passwordless (Recommended)
Password
Apply the auxiliary image by patching the domain custom resource definition (CRD) using thekubectl patchcommand.The auxiliary image is defined inspec.configuration.model.auxiliaryImages, as shown in the following example:spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deployUse the following commands to increase therestartVersionvalue and usekubectl patchto apply the auxiliary image to the domain CRD using the definition shown:export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))

export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
   "op": "remove",
   "path": "/spec/configuration/model/configMap"
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
Apply the auxiliary image by patching the domain custom resource definition (CRD) using thekubectl patchcommand.
kubectl patch
The auxiliary image is defined inspec.configuration.model.auxiliaryImages, as shown in the following example:
spec.configuration.model.auxiliaryImages
spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deploy
spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deploy
Use the following commands to increase therestartVersionvalue and usekubectl patchto apply the auxiliary image to the domain CRD using the definition shown:
restartVersion
kubectl patch
export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))

export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
   "op": "remove",
   "path": "/spec/configuration/model/configMap"
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))

export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
   "op": "remove",
   "path": "/spec/configuration/model/configMap"
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
Because the database connection is configured in the auxiliary image, run the following command to remove the ConfigMap:kubectl delete configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS}
Because the database connection is configured in the auxiliary image, run the following command to remove the ConfigMap:
kubectl delete configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS}
kubectl delete configmap sample-domain1-wdt-config-map -n ${WLS_DOMAIN_NS}
Connect to the AKS cluster by copying theshellCmdtoConnectAksvalue that you saved aside previously, pasting it into the Bash window, then running the command. The command should look similar to the following example:az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>You should see output similar to the following example. If you don't see this output, troubleshoot and resolve the problem before continuing.Merged "<name>" as current context in /Users/<username>/.kube/config
Connect to the AKS cluster by copying theshellCmdtoConnectAksvalue that you saved aside previously, pasting it into the Bash window, then running the command. The command should look similar to the following example:
az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>
az account set --subscription <subscription>;
az aks get-credentials \
    --resource-group <resource-group> \
    --name <name>
You should see output similar to the following example. If you don't see this output, troubleshoot and resolve the problem before continuing.
Merged "<name>" as current context in /Users/<username>/.kube/config
Merged "<name>" as current context in /Users/<username>/.kube/config
Use the following steps to get values for the variables shown in the following table. You use these values to create the secret for the datasource connection.VariableDescriptionExampleDB_CONNECTION_STRINGThe connection string of the SQL server.jdbc:sqlserver://server-name.database.windows.net:1433;database=wlsaksquickstart0125DB_USERThe username to sign in to the SQL server.welogic@sqlserverforwlsaksDB_PASSWORDThe password to sign in to the SQL server.Secret123456Visit the SQL database resource in the Azure portal.In the navigation pane, underSettings, selectConnection strings.Select theJDBCtab.Select the copy icon to copy the connection string to the clipboard.ForDB_CONNECTION_STRING, use the entire connection string, but replace the placeholder{your_password_here}with your database password.ForDB_USER, use the portion of the connection string fromazureuserup to but not including;password={your_password_here}.ForDB_PASSWORD, use the value you entered when you created the database.
Use the following steps to get values for the variables shown in the following table. You use these values to create the secret for the datasource connection.
DB_CONNECTION_STRING
jdbc:sqlserver://server-name.database.windows.net:1433;database=wlsaksquickstart0125
DB_USER
welogic@sqlserverforwlsaks
DB_PASSWORD
Secret123456
Visit the SQL database resource in the Azure portal.
Visit the SQL database resource in the Azure portal.
In the navigation pane, underSettings, selectConnection strings.
In the navigation pane, underSettings, selectConnection strings.
Select theJDBCtab.
Select theJDBCtab.
Select the copy icon to copy the connection string to the clipboard.
Select the copy icon to copy the connection string to the clipboard.
ForDB_CONNECTION_STRING, use the entire connection string, but replace the placeholder{your_password_here}with your database password.
ForDB_CONNECTION_STRING, use the entire connection string, but replace the placeholder{your_password_here}with your database password.
DB_CONNECTION_STRING
{your_password_here}
ForDB_USER, use the portion of the connection string fromazureuserup to but not including;password={your_password_here}.
ForDB_USER, use the portion of the connection string fromazureuserup to but not including;password={your_password_here}.
DB_USER
azureuser
;password={your_password_here}
ForDB_PASSWORD, use the value you entered when you created the database.
ForDB_PASSWORD, use the value you entered when you created the database.
DB_PASSWORD
Use the following commands to create the Kubernetes Secret. This article uses the secret namesqlserver-secretfor the secret of the datasource connection. If you use a different name, make sure the value is the same as the one indbmodel.yaml.In the following commands, be sure to set the variablesDB_CONNECTION_STRING,DB_USER, andDB_PASSWORDcorrectly by replacing the placeholder examples with the values described in the previous steps. To prevent the shell from interfering with them, enclose the value of theDB_variables in single quotes.export DB_CONNECTION_STRING='<example-jdbc:sqlserver://server-name.database.windows.net:1433;database=wlsaksquickstart0125>'
export DB_USER='<example-welogic@sqlserverforwlsaks>'
export DB_PASSWORD='<example-Secret123456>'
export WLS_DOMAIN_NS=sample-domain1-ns
export WLS_DOMAIN_UID=sample-domain1
export SECRET_NAME=sqlserver-secret

kubectl -n ${WLS_DOMAIN_NS} create secret generic \
    ${SECRET_NAME} \
    --from-literal=password="${DB_PASSWORD}" \
    --from-literal=url="${DB_CONNECTION_STRING}" \
    --from-literal=user="${DB_USER}"

kubectl -n ${WLS_DOMAIN_NS} label secret \
    ${SECRET_NAME} \
    weblogic.domainUID=${WLS_DOMAIN_UID}You must see the following output before you continue. If you don't see this output, troubleshoot and resolve the problem before you continue.secret/sqlserver-secret created
secret/sqlserver-secret labeled
Use the following commands to create the Kubernetes Secret. This article uses the secret namesqlserver-secretfor the secret of the datasource connection. If you use a different name, make sure the value is the same as the one indbmodel.yaml.
sqlserver-secret
In the following commands, be sure to set the variablesDB_CONNECTION_STRING,DB_USER, andDB_PASSWORDcorrectly by replacing the placeholder examples with the values described in the previous steps. To prevent the shell from interfering with them, enclose the value of theDB_variables in single quotes.
DB_CONNECTION_STRING
DB_USER
DB_PASSWORD
DB_
export DB_CONNECTION_STRING='<example-jdbc:sqlserver://server-name.database.windows.net:1433;database=wlsaksquickstart0125>'
export DB_USER='<example-welogic@sqlserverforwlsaks>'
export DB_PASSWORD='<example-Secret123456>'
export WLS_DOMAIN_NS=sample-domain1-ns
export WLS_DOMAIN_UID=sample-domain1
export SECRET_NAME=sqlserver-secret

kubectl -n ${WLS_DOMAIN_NS} create secret generic \
    ${SECRET_NAME} \
    --from-literal=password="${DB_PASSWORD}" \
    --from-literal=url="${DB_CONNECTION_STRING}" \
    --from-literal=user="${DB_USER}"

kubectl -n ${WLS_DOMAIN_NS} label secret \
    ${SECRET_NAME} \
    weblogic.domainUID=${WLS_DOMAIN_UID}
export DB_CONNECTION_STRING='<example-jdbc:sqlserver://server-name.database.windows.net:1433;database=wlsaksquickstart0125>'
export DB_USER='<example-welogic@sqlserverforwlsaks>'
export DB_PASSWORD='<example-Secret123456>'
export WLS_DOMAIN_NS=sample-domain1-ns
export WLS_DOMAIN_UID=sample-domain1
export SECRET_NAME=sqlserver-secret

kubectl -n ${WLS_DOMAIN_NS} create secret generic \
    ${SECRET_NAME} \
    --from-literal=password="${DB_PASSWORD}" \
    --from-literal=url="${DB_CONNECTION_STRING}" \
    --from-literal=user="${DB_USER}"

kubectl -n ${WLS_DOMAIN_NS} label secret \
    ${SECRET_NAME} \
    weblogic.domainUID=${WLS_DOMAIN_UID}
You must see the following output before you continue. If you don't see this output, troubleshoot and resolve the problem before you continue.
secret/sqlserver-secret created
secret/sqlserver-secret labeled
secret/sqlserver-secret created
secret/sqlserver-secret labeled
Apply the auxiliary image by patching the domain custom resource definition (CRD) using thekubectl patchcommand.The auxiliary image is defined inspec.configuration.model.auxiliaryImages, as shown in the following example.spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deployUse the following commands to increase therestartVersionvalue and usekubectl patchto apply the auxiliary image to the domain CRD using the definition shown:export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))
export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
    "op": "add",
    "path": "/spec/configuration/secrets",
    "value": ["${SECRET_NAME}"]
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
Apply the auxiliary image by patching the domain custom resource definition (CRD) using thekubectl patchcommand.
kubectl patch
The auxiliary image is defined inspec.configuration.model.auxiliaryImages, as shown in the following example.
spec.configuration.model.auxiliaryImages
spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deploy
spec:
  clusters:
  - name: sample-domain1-cluster-1
  configuration:
    model:
      auxiliaryImages:
      - image: wlsaksacrafvzeyyswhxek.azurecr.io/wlsaks-auxiliary-image:1.0
        imagePullPolicy: IfNotPresent
        sourceModelHome: /auxiliary/models
        sourceWDTInstallHome: /auxiliary/weblogic-deploy
Use the following commands to increase therestartVersionvalue and usekubectl patchto apply the auxiliary image to the domain CRD using the definition shown:
restartVersion
kubectl patch
export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))
export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
    "op": "add",
    "path": "/spec/configuration/secrets",
    "value": ["${SECRET_NAME}"]
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
export VERSION=$(kubectl -n ${WLS_DOMAIN_NS} get domain ${WLS_DOMAIN_UID} -o=jsonpath='{.spec.restartVersion}' | tr -d "\"")
export VERSION=$((VERSION+1))
export ACR_LOGIN_SERVER=$(az acr show --name ${ACR_NAME} --query "loginServer" --output tsv)

cat <<EOF >patch-file.json
[
  {
    "op": "replace",
    "path": "/spec/restartVersion",
    "value": "${VERSION}"
  },
  {
    "op": "add",
    "path": "/spec/configuration/model/auxiliaryImages",
    "value": [{"image": "$ACR_LOGIN_SERVER/$IMAGE", "imagePullPolicy": "IfNotPresent", "sourceModelHome": "/auxiliary/models", "sourceWDTInstallHome": "/auxiliary/weblogic-deploy"}]
  },
  {
    "op": "add",
    "path": "/spec/configuration/secrets",
    "value": ["${SECRET_NAME}"]
  }
]
EOF

kubectl -n ${WLS_DOMAIN_NS} patch domain ${WLS_DOMAIN_UID} \
    --type=json \
    --patch-file patch-file.json
Before you proceed, wait until the following command produces the following output for the admin server and managed servers:
kubectl get pod -n ${WLS_DOMAIN_NS} -w
kubectl get pod -n ${WLS_DOMAIN_NS} -w
NAME                             READY   STATUS    RESTARTS   AGE
sample-domain1-admin-server      1/1     Running   0          20m
sample-domain1-managed-server1   1/1     Running   0          19m
sample-domain1-managed-server2   1/1     Running   0          18m
NAME                             READY   STATUS    RESTARTS   AGE
sample-domain1-admin-server      1/1     Running   0          20m
sample-domain1-managed-server1   1/1     Running   0          19m
sample-domain1-managed-server2   1/1     Running   0          18m
It might take 5-10 minutes for the system to reach this state. The following list provides an overview of what's happening while you wait:
You should see thesample-domain1-introspectorrunning first. This software looks for changes to the domain custom resource so it can take the necessary actions on the Kubernetes cluster.
sample-domain1-introspector
When changes are detected, the domain introspector kills and starts new pods to roll out the changes.
Next, you should see thesample-domain1-admin-serverpod terminate and restart.
sample-domain1-admin-server
Then, you should see the two managed servers terminate and restart.
Only when all three pods show the1/1 Runningstate, is it ok to proceed.
1/1 Running
Verify the functionality of the deployment
Use the following steps to verify the functionality of the deployment by viewing the WebLogic Server admin console and the sample app:
Paste theadminConsoleExternalUrlvalue into the address bar of an Internet-connected web browser. You should see the familiar WebLogic Server admin console sign-in screen.
Paste theadminConsoleExternalUrlvalue into the address bar of an Internet-connected web browser. You should see the familiar WebLogic Server admin console sign-in screen.
Sign in with the usernameweblogicand the password you entered when deploying WebLogic Server from the Azure portal. Recall that this value iswlsAksCluster2022.
Sign in with the usernameweblogicand the password you entered when deploying WebLogic Server from the Azure portal. Recall that this value iswlsAksCluster2022.
weblogic
wlsAksCluster2022
In theDomain Structurebox, selectServices.
In theDomain Structurebox, selectServices.
Under theServices, selectData Sources.
Under theServices, selectData Sources.
In theSummary of JDBC Data Sourcespanel, selectMonitoring. Your screen should look similar to the following example. You find the state of data source is running on managed servers.
In theSummary of JDBC Data Sourcespanel, selectMonitoring. Your screen should look similar to the following example. You find the state of data source is running on managed servers.

In theDomain Structurebox, selectDeployments.
In theDomain Structurebox, selectDeployments.
In theDeploymentstable, there should be one row. The name should be the same value as theApplicationvalue in yourappmodel.yamlfile. Select the name.
In theDeploymentstable, there should be one row. The name should be the same value as theApplicationvalue in yourappmodel.yamlfile. Select the name.
Application
Select theTestingtab.
Select theTestingtab.
Selectweblogic-cafe.
Selectweblogic-cafe.
In theSettings for weblogic-cafepanel, select theTestingtab.
In theSettings for weblogic-cafepanel, select theTestingtab.
Expand the+icon next toweblogic-cafe. Your screen should look similar to the following example. In particular, you should see values similar tohttp://sample-domain1-managed-server1:8001/weblogic-cafe/index.xhtmlin theTest Pointcolumn.NoteThe hyperlinks in theTest Pointcolumn are not selectable because we did not configure the admin console with the external URL on which it is running. This article shows the WebLogic Server admin console merely by way of demonstration. Don't use the WebLogic Server admin console for any durable configuration changes when running WebLogic Server on AKS. The cloud-native design of WebLogic Server on AKS requires that any durable configuration must be represented in the initial docker images or applied to the running AKS cluster using CI/CD techniques such as updating the model, as described in theOracle documentation.
Expand the+icon next toweblogic-cafe. Your screen should look similar to the following example. In particular, you should see values similar tohttp://sample-domain1-managed-server1:8001/weblogic-cafe/index.xhtmlin theTest Pointcolumn.
http://sample-domain1-managed-server1:8001/weblogic-cafe/index.xhtml

Note
The hyperlinks in theTest Pointcolumn are not selectable because we did not configure the admin console with the external URL on which it is running. This article shows the WebLogic Server admin console merely by way of demonstration. Don't use the WebLogic Server admin console for any durable configuration changes when running WebLogic Server on AKS. The cloud-native design of WebLogic Server on AKS requires that any durable configuration must be represented in the initial docker images or applied to the running AKS cluster using CI/CD techniques such as updating the model, as described in theOracle documentation.
Understand thecontext-pathvalue of the sample app you deployed. If you deployed the recommended sample app, thecontext-pathisweblogic-cafe.
Understand thecontext-pathvalue of the sample app you deployed. If you deployed the recommended sample app, thecontext-pathisweblogic-cafe.
context-path
context-path
weblogic-cafe
Construct a fully qualified URL for the sample app by appending thecontext-pathto theclusterExternalUrlvalue. If you deployed the recommended sample app, the fully qualified URL should be something likehttp://wlsgw202401-wls-aks-domain1.eastus.cloudapp.azure.com/weblogic-cafe/.
Construct a fully qualified URL for the sample app by appending thecontext-pathto theclusterExternalUrlvalue. If you deployed the recommended sample app, the fully qualified URL should be something likehttp://wlsgw202401-wls-aks-domain1.eastus.cloudapp.azure.com/weblogic-cafe/.
context-path
http://wlsgw202401-wls-aks-domain1.eastus.cloudapp.azure.com/weblogic-cafe/
Paste the fully qualified URL in an Internet-connected web browser. If you deployed the recommended sample app, you should see results similar to the following screenshot:
Paste the fully qualified URL in an Internet-connected web browser. If you deployed the recommended sample app, you should see results similar to the following screenshot:

Clean up resources
To avoid Azure charges, you should clean up unnecessary resources. When you no longer need the cluster, use theaz group deletecommand. The following command removes the resource group, container service, container registry, database, and all related resources:
az group delete --name <resource-group-name> --yes --no-wait
az group delete --name <db-resource-group-name> --yes --no-wait
az group delete --name <resource-group-name> --yes --no-wait
az group delete --name <db-resource-group-name> --yes --no-wait
Next steps
Learn more about running WebLogic Server on AKS or virtual machines by following these links:
WebLogic Server on AKS
WebLogic Server on virtual machines
For more information about the Oracle WebLogic offers at Azure Marketplace, seeOracle WebLogic Server on Azure. These offers are allBring-Your-Own-License. They assume that you already have the appropriate licenses with Oracle and are properly licensed to run offers in Azure.
Azure Kubernetes Service

Additional resources