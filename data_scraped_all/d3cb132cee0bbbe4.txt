Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
AppCenterDistribute@3 - App Center distribute v3 task
Article
2025-03-28
4 contributors
In this article
Use this task to distribute app builds to testers and users via Visual Studio App Center.
Syntax
# App Center distribute v3
# Distribute app builds to testers and users via Visual Studio App Center.
- task: AppCenterDistribute@3
  inputs:
    serverEndpoint: # string. Required. App Center service connection. 
    appSlug: # string. Required. App slug. 
    appFile: # string. Alias: app. Required. Binary file path. 
    #buildVersion: # string. Build version. 
    releaseNotesOption: 'input' # 'input' | 'file'. Alias: releaseNotesSelection. Required. Create release notes. Default: input.
    releaseNotesInput: # string. Required when releaseNotesSelection = input. Release notes. 
    #releaseNotesFile: # string. Required when releaseNotesSelection = file. Release notes file. 
    #isMandatory: false # boolean. Require users to update to this release. Default: false.
    destinationType: 'groups' # 'groups' | 'store'. Required. Release destination. Default: groups.
    #distributionGroupId: # string. Alias: destinationGroupIds. Optional. Use when destinationType = groups. Destination IDs. 
    #destinationStoreId: # string. Required when destinationType = store. Destination ID. 
    #isSilent: # boolean. Optional. Use when destinationType = groups. Do not notify testers. Release will still be available to install. 
  # Symbols
    #symbolsOption: 'Apple' # 'Apple' | 'Android' | 'UWP'. Alias: symbolsType. Symbols type. Default: Apple.
    #symbolsPath: # string. Optional. Use when symbolsType == AndroidNative || symbolsType = Windows. Symbols path. 
    #appxsymPath: # string. Optional. Use when symbolsType = UWP. Symbols path (*.appxsym). 
    #symbolsDsymFiles: # string. Alias: dsymPath. Optional. Use when symbolsType = Apple. dSYM path. 
    #symbolsMappingTxtFile: # string. Alias: mappingTxtPath. Optional. Use when symbolsType = Android. Mapping file. 
    #nativeLibrariesPath: # string. Optional. Use when symbolsType == Android. Native Library File Path. 
    #symbolsIncludeParentDirectory: # boolean. Alias: packParentFolder. Optional. Use when symbolsType = Apple. Include all items in parent folder.
# App Center distribute v3
# Distribute app builds to testers and users via Visual Studio App Center.
- task: AppCenterDistribute@3
  inputs:
    serverEndpoint: # string. Required. App Center service connection. 
    appSlug: # string. Required. App slug. 
    appFile: # string. Alias: app. Required. Binary file path. 
    #buildVersion: # string. Build version. 
    releaseNotesOption: 'input' # 'input' | 'file'. Alias: releaseNotesSelection. Required. Create release notes. Default: input.
    releaseNotesInput: # string. Required when releaseNotesSelection = input. Release notes. 
    #releaseNotesFile: # string. Required when releaseNotesSelection = file. Release notes file. 
    #isMandatory: false # boolean. Require users to update to this release. Default: false.
    destinationType: 'groups' # 'groups' | 'store'. Required. Release destination. Default: groups.
    #distributionGroupId: # string. Alias: destinationGroupIds. Optional. Use when destinationType = groups. Destination IDs. 
    #destinationStoreId: # string. Required when destinationType = store. Destination ID. 
    #isSilent: # boolean. Optional. Use when destinationType = groups. Do not notify testers. Release will still be available to install. 
  # Symbols
    #symbolsOption: 'Apple' # 'Apple' | 'Android' | 'UWP'. Alias: symbolsType. Symbols type. Default: Apple.
    #symbolsPath: # string. Optional. Use when symbolsType == AndroidNative || symbolsType = Windows. Symbols path. 
    #appxsymPath: # string. Optional. Use when symbolsType = UWP. Symbols path (*.appxsym). 
    #symbolsDsymFiles: # string. Alias: dsymPath. Optional. Use when symbolsType = Apple. dSYM path. 
    #symbolsMappingTxtFile: # string. Alias: mappingTxtPath. Optional. Use when symbolsType = Android. Mapping file. 
    #nativeLibrariesPath: # string. Optional. Use when symbolsType == Android. Native Library File Path. 
    #symbolsIncludeParentDirectory: # boolean. Alias: packParentFolder. Optional. Use when symbolsType = Apple. Include all items in parent folder.
Inputs
serverEndpoint-App Center service connectionstring. Required.
serverEndpoint
string
Selects the service connection for Visual Studio App Center. To create one, click theManagelink and create a new service connection.
Manage
appSlug-App slugstring. Required.
appSlug
string
The app slug is in the format of{username}/{app_identifier}.  To locate{username}and{app_identifier}for an app, click on its name fromApp Center, and the resulting URL is in the format ofhttps://appcenter.ms/users/**{username}**/apps/**{app_identifier}**. If you are using orgs, the app slug is of the format{orgname}/{app_identifier}.
{username}/{app_identifier}
{username}
{app_identifier}
https://appcenter.ms/users/**{username}**/apps/**{app_identifier}**
{orgname}/{app_identifier}
appFile-Binary file pathInput alias:app.string. Required.
appFile
app
string
The relative path from the repo root to the APK/AAB or IPA file you want to publish.
buildVersion-Build versionstring.
buildVersion
string
The build version of the uploading binary which needs to be specified for.zipand.msi. This value will be ignored unless the platform is WPF or WinForms.
.zip
.msi
symbolsOption-Symbols typeInput alias:symbolsType.string. Allowed values:Apple,Android,UWP. Default value:Apple.
symbolsOption
symbolsType
string
Apple
Android
UWP
Apple
Includes symbol files to receive symbolicated stack traces in App Center Diagnostics.
symbolsPath-Symbols pathstring. Optional. Use whensymbolsType == AndroidNative || symbolsType = Windows.
symbolsPath
string
symbolsType == AndroidNative || symbolsType = Windows
The relative path from the repo root to the symbols folder.
appxsymPath-Symbols path (*.appxsym)string. Optional. Use whensymbolsType = UWP.
appxsymPath
string
symbolsType = UWP
The relative path to the APPXSYM symbols file. Path may containwildcards.
symbolsDsymFiles-dSYM pathInput alias:dsymPath.string. Optional. Use whensymbolsType = Apple.
symbolsDsymFiles
dsymPath
string
symbolsType = Apple
The relative path from the repo root to dSYM folder. Path may containwildcards.
symbolsMappingTxtFile-Mapping fileInput alias:mappingTxtPath.string. Optional. Use whensymbolsType = Android.
symbolsMappingTxtFile
mappingTxtPath
string
symbolsType = Android
The relative path from the repo root to Android'smapping.txtfile.
mapping.txt
nativeLibrariesPath-Native Library File Pathstring. Optional. Use whensymbolsType == Android.
nativeLibrariesPath
string
symbolsType == Android
The relative path from the repo root to the additional native libraries you want to publish (e.g. .so files).
symbolsIncludeParentDirectory-Include all items in parent folderInput alias:packParentFolder.boolean. Optional. Use whensymbolsType = Apple.
symbolsIncludeParentDirectory
packParentFolder
boolean
symbolsType = Apple
Uploads the selected symbols file or folder and all other items inside the same parent folder. This is required for React Native apps.
releaseNotesOption-Create release notesInput alias:releaseNotesSelection.string. Required. Allowed values:input(Enter Release Notes),file(Select Release Notes File). Default value:input.
releaseNotesOption
releaseNotesSelection
string
input
file
input
The release notes will be attached to the release and shown to testers on the installation page.
releaseNotesInput-Release notesstring. Required whenreleaseNotesSelection = input.
releaseNotesInput
string
releaseNotesSelection = input
The release notes for this version.
releaseNotesFile-Release notes filestring. Required whenreleaseNotesSelection = file.
releaseNotesFile
string
releaseNotesSelection = file
Selects a UTF-8 encoded text file which contains the release notes for this version.
isMandatory-Require users to update to this releaseboolean. Default value:false.
isMandatory
boolean
false
The App Center Distribute SDK required to mandate an update. Testers are automatically prompted to update.
destinationType-Release destinationstring. Required. Allowed values:groups,store. Default value:groups.
destinationType
string
groups
store
groups
Each release is distributed to either groups or a store.
distributionGroupId-Destination IDsInput alias:destinationGroupIds.string. Optional. Use whendestinationType = groups.
distributionGroupId
destinationGroupIds
string
destinationType = groups
The IDs of the distribution groups who will receive the build release. Leave it empty to use the default group, and use commas or semicolons to separate multiple IDs.
destinationStoreId-Destination IDstring. Required whendestinationType = store.
destinationStoreId
string
destinationType = store
The IDs of the distribution store that will receive the build release.
isSilent-Do not notify testers. Release will still be available to install.boolean. Optional. Use whendestinationType = groups.
isSilent
boolean
destinationType = groups
Testers do not receive an email for new releases.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Use this task to distribute app builds to testers and users through App Center.
Sign up with App Centerfirst.
For details about using this task, see the App Center documentation articleDeploy Azure DevOps Builds with App Center.
Examples
This example pipeline builds an Android app, runs tests, and publishes the app using App Center Distribute.
# Android
# Build your Android project with Gradle.
# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://learn.microsoft.com/azure/devops/pipelines/ecosystems/android

pool:
  vmImage: 'macOS-latest'
steps:

- script: sudo npm install -g appcenter-cli
- script: appcenter login --token {YOUR_TOKEN}

- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: build

- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(build.artifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)'
    artifactName: 'outputs'
    artifactType: 'container'

# Run tests using the App Center CLI
- script: appcenter test run espresso --app "{APP_CENTER_SLUG}" --devices "{DEVICE}" --app-path {APP_FILE} --test-series "master" --locale "en_US" --build-dir {PAT_ESPRESSO} --debug

# Distribute the app
- task: AppCenterDistribute@3
  inputs:
    serverEndpoint: 'AppCenter'
    appSlug: '$(APP_CENTER_SLUG)'
    appFile: '$(APP_FILE)' # Relative path from the repo root to the APK or IPA file you want to publish
    symbolsOption: 'Android'
    releaseNotesOption: 'input'
    releaseNotesInput: 'Here are the release notes for this version.'
    destinationType: 'groups'
# Android
# Build your Android project with Gradle.
# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://learn.microsoft.com/azure/devops/pipelines/ecosystems/android

pool:
  vmImage: 'macOS-latest'
steps:

- script: sudo npm install -g appcenter-cli
- script: appcenter login --token {YOUR_TOKEN}

- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: build

- task: CopyFiles@2
  inputs:
    contents: '**/*.apk'
    targetFolder: '$(build.artifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(build.artifactStagingDirectory)'
    artifactName: 'outputs'
    artifactType: 'container'

# Run tests using the App Center CLI
- script: appcenter test run espresso --app "{APP_CENTER_SLUG}" --devices "{DEVICE}" --app-path {APP_FILE} --test-series "master" --locale "en_US" --build-dir {PAT_ESPRESSO} --debug

# Distribute the app
- task: AppCenterDistribute@3
  inputs:
    serverEndpoint: 'AppCenter'
    appSlug: '$(APP_CENTER_SLUG)'
    appFile: '$(APP_FILE)' # Relative path from the repo root to the APK or IPA file you want to publish
    symbolsOption: 'Android'
    releaseNotesOption: 'input'
    releaseNotesInput: 'Here are the release notes for this version.'
    destinationType: 'groups'
Requirements
Feedback
Was this page helpful?
Additional resources