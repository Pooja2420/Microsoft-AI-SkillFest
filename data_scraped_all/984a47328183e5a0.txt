Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Using Application Health extension with Azure Virtual Machines
Article
2024-09-12
2 contributors
In this article
Monitoring your application health is an important signal for managing your VMs. Azure Virtual Machines provides support forAutomatic VM Guest Patching, which rely on health monitoring of the individual instances to safely update your VMs.
This article describes how you can use the two types of Application Health extension,Binary Health StatesorRich Health States, to monitor the health of your applications deployed on Azure virtual machines.
Application health monitoring is also available on virtual machine scale sets and helps enable functionalities such asRolling Upgrades,Automatic OS-Image Upgrades, andAutomatic Instance Repairs. To experience these capabilities with the added benefits of scale, availability, and flexibility on scale sets, you canattach your VM to an existing scale setorcreate a new scale set.
Prerequisites
This article assumes that you're familiar withAzure virtual machine extensions.
Caution
Application Health Extension expects to receive a consistent probe response at the configured porttcpor request pathhttp/httpsin order to label a VM asHealthy. If no application is running on the VM, or you're unable to configure a probe response, your VM is going to show up asUnhealthy(Binary Health States) orUnknown(Rich Health States).  Seeapplication health samplesfor examples of health probe responses being emitted to a local endpoint.
tcp
http/https
When to use the Application Health extension
Application Health Extension reports on application health from inside the Virtual Machine. The extension probes on a local application endpoint and updates the health status based on TCP/HTTP(S) responses received from the application. This health status is used by Azure to monitor and detect patching failures duringAutomatic VM Guest Patching.
The extension reports health from within a VM and can be used in situations where an external probe such as theAzure Load Balancer health probescanât be used.
Application health is a customer-provided signal on the status of your application running inside the VM. Application health is different fromresource health, which is a platform-provided signal used to report service-level events impacting the performance of your VM.
Binary versus Rich Health States
Application Health Extensions has two options available:Binary Health StatesandRich Health States. The following table highlights some key differences between the two options. See the end of this section for general recommendations.
1TheUnknownstate is unavailable on TCP protocol.2Only applicable for HTTP/HTTPS protocol. TCP protocol follows the same process of identifyingUnhealthyinstances as in Binary Health States.
UseBinary Health Statesif:
You're not interested in configuring custom logic to identify and flag an unhealthy instance
You don't require aninitializinggrace period for newly created instances
UseRich Health Statesif:
You send health signals through HTTP/HTTPS protocol and can submit health information through the probe response body
You would like to use custom logic to identify and mark unhealthy instances
You would like to set aninitializinggrace period allowing newly created instances to settle into a steady health state
Binary Health States
Binary Health State reporting contains two Health States,HealthyandUnhealthy. The following tables provide a brief description for how the Health States are configured.
HTTP/HTTPS Protocol
TCP Protocol
Some common scenarios that result in anUnhealthystate include:
When the application endpoint returns a non-200 status code
When there's no application endpoint configured inside the virtual machine to provide application health status
When the application endpoint is incorrectly configured
When the application endpoint isn't reachable
Rich Health States
Rich Health States reporting contains four Health States,Initializing,Healthy,Unhealthy, andUnknown. The following tables provide a brief description for how each Health State is configured.
HTTP/HTTPS Protocol
{"ApplicationHealthState": "Healthy"}
{"ApplicationHealthState": "Unhealthy"}
ApplicationHealthState
TCP Protocol
Initializing state
This state only applies to Rich Health States. TheInitializingstate only occurs once at extension start time and can be configured by the extension settingsgracePeriodandnumberOfProbes.
gracePeriod
numberOfProbes
At extension startup, the application health remains in theInitializingstate until one of two scenarios occurs:
The same Health State (HealthyorUnhealthy) is reported a consecutive number of times as configured throughnumberOfProbes
ThegracePeriodexpires
gracePeriod
If the same Health State (HealthyorUnhealthy) is reported consecutively, the application health transitions out of theInitializingstate and into the reported Health State (HealthyorUnhealthy).
Example
IfnumberOfProbes= 3, that would mean:
numberOfProbes
To transition fromInitializingtoHealthystate: Application health extension must receive three consecutiveHealthysignals via HTTP/HTTPS or TCP protocol
To transition fromInitializingtoUnhealthystate: Application health extension must receive three consecutiveUnhealthysignals via HTTP/HTTPS or TCP protocol
If thegracePeriodexpires before a consecutive health status is reported by the application, the instance health is determined as follows:
gracePeriod
HTTP/HTTPS protocol: The application health transitions fromInitializingtoUnknown
TCP protocol: The application health transitions fromInitializingtoUnhealthy
Unknown state
TheUnknownstate only applies to Rich Health States. This state is only reported forhttporhttpsprobes and occurs in the following scenarios:
http
https
When a non-2xx status code is returned by the application
When the probe request times out
When the application endpoint is unreachable or incorrectly configured
When a missing or invalid value is provided forApplicationHealthStatein the response body
ApplicationHealthState
When the grace period expires
Extension schema for Binary Health States
The following JSON shows the schema for the Application Health extension. The extension requires at a minimum either a "tcp", "http" or "https" request with an associated port or request path respectively.
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "1.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1
          }
        }
      }
    ]
  }
}
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "1.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1
          }
        }
      }
    ]
  }
}
Property values
2018-10-01
Microsoft.ManagedServices
ApplicationHealthLinux
ApplicationHealthWindows
1.0
Settings
http
https
tcp
http
https
tcp
http
https
tcp
Extension schema for Rich Health States
The following JSON shows the schema for the Rich Health States extension. The extension requires at a minimum either an "http" or "https" request with an associated port or request path respectively. TCP probes are also supported, but cannot set theApplicationHealthStatethrough the probe response body and do not have access to theUnknownstate.
ApplicationHealthState
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "2.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1,
            "gracePeriod": 600
          }
        }
      }
    ]
  }
}
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "2.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1,
            "gracePeriod": 600
          }
        }
      }
    ]
  }
}
Property values
2018-10-01
Microsoft.ManagedServices
ApplicationHealthLinux
ApplicationHealthWindows
2.0
Settings
http
https
tcp
http
https
tcp
http
https
tcp
intervalInSeconds
numberOfProbes
Deploy the Application Health extension
There are multiple ways of deploying the Application Health extension to your VMs as detailed in the following examples.
Binary Health States
REST API
Azure PowerShell
Azure CLI 2.0
Azure portal
The following example adds the Application Health extension namedmyHealthExtensionto a Windows-based virtual machine.
You can also use this example to change an existing extension from Rich Health States to Binary Health by making a PATCH call instead of a PUT.
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myHealthExtension?api-version=2018-10-01`
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myHealthExtension?api-version=2018-10-01`
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "1.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>"
    }
  }
}
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "1.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>"
    }
  }
}
UsePATCHto edit an already deployed extension.
PATCH
Use theSet-AzVmExtensioncmdlet to add or update Application Health extension to your virtual machine.
The following example adds the Application Health extension to a Windows-based virtual machine.
You can also use this example to change an existing extension from Rich Health States to Binary Health.
# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"};

# Add the Application Health extension to the virtual machine
Set-AzVMExtension -Name "myHealthExtension" `
  -ResourceGroupName "<myResourceGroup>" `
  -VMName "<myVM>" ` 
  -Publisher "Microsoft.ManagedServices" `
  -ExtensionType "ApplicationHealthWindows" `
  -TypeHandlerVersion "1.0" `
  -Location "<location>" `
  -Settings $publicConfig
# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"};

# Add the Application Health extension to the virtual machine
Set-AzVMExtension -Name "myHealthExtension" `
  -ResourceGroupName "<myResourceGroup>" `
  -VMName "<myVM>" ` 
  -Publisher "Microsoft.ManagedServices" `
  -ExtensionType "ApplicationHealthWindows" `
  -TypeHandlerVersion "1.0" `
  -Location "<location>" `
  -Settings $publicConfig
Useaz vm extension setto add the Application Health extension to a virtual machine.
The following example adds the Application Health extension to a Linux-based virtual machine.
You can also use this example to change an existing extension from Rich Health States to Binary Health.
az vm extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 1.0 \
  --resource-group <myResourceGroup> \
  --vm-name <myVM> \
  --settings ./extension.json
az vm extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 1.0 \
  --resource-group <myResourceGroup> \
  --vm-name <myVM> \
  --settings ./extension.json
The extension.json file content.
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>"
}
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>"
}
The following example adds the Application Health extension to an existing virtual machine onAzure portal.
Navigate to your existing Virtual Machine
On the left sidebar, go to theHealth monitoringblade
Click onEnable application health monitoring, selectBinaryfor Health States. Configure your protocol, port, and more to set up the health probes.
ClickSaveto save your settings

Rich Health States
REST API
Azure PowerShell
Azure CLI 2.0
Azure portal
The following example adds theApplication Health - Rich Statesextension (with name myHealthExtension) to a Windows-based virtual machine.
You can also use this example to upgrade an existing extension from Binary to Rich Health States by making a PATCH call instead of a PUT.
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myHealthExtension?api-version=2018-10-01`
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myHealthExtension?api-version=2018-10-01`
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "2.0",
    "settings": {
      "requestPath": "</requestPath>",
      "intervalInSeconds": <intervalInSeconds>,
      "numberOfProbes": <numberOfProbes>,
      "gracePeriod": <gracePeriod>
    }
  }
}
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "2.0",
    "settings": {
      "requestPath": "</requestPath>",
      "intervalInSeconds": <intervalInSeconds>,
      "numberOfProbes": <numberOfProbes>,
      "gracePeriod": <gracePeriod>
    }
  }
}
UsePATCHto edit an already deployed extension.
PATCH
Use theSet-AzVmExtensioncmdlet to add or update Application Health extension to your virtual machine.
The following example adds theApplication Health - Rich Statesextension to a Windows-based virtual machine.
You can also use this example to upgrade an existing extension from Binary to Rich Health States.
# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"; "gracePeriod" = 600};

# Add the Application Health extension to the virtual machine
Set-AzVMExtension -Name "myHealthExtension" `
  -ResourceGroupName "<myResourceGroup>" `
  -VMName "<myVM>" ` 
  -Publisher "Microsoft.ManagedServices" `
  -ExtensionType "ApplicationHealthWindows" `
  -TypeHandlerVersion "2.0" `
  -Location "<location>" `
  -Settings $publicConfig
# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"; "gracePeriod" = 600};

# Add the Application Health extension to the virtual machine
Set-AzVMExtension -Name "myHealthExtension" `
  -ResourceGroupName "<myResourceGroup>" `
  -VMName "<myVM>" ` 
  -Publisher "Microsoft.ManagedServices" `
  -ExtensionType "ApplicationHealthWindows" `
  -TypeHandlerVersion "2.0" `
  -Location "<location>" `
  -Settings $publicConfig
Useaz vm extension setto add the Application Health extension to a virtual machine.
The following example adds theApplication Health - Rich Statesextension to a Linux-based virtual machine.
You can also use this example to upgrade an existing extension from Binary to Rich Health States.
az vm extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 2.0 \
  --resource-group <myResourceGroup> \
  --vm-name <myVM> \
  --settings ./extension.json
az vm extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 2.0 \
  --resource-group <myResourceGroup> \
  --vm-name <myVM> \
  --settings ./extension.json
The extension.json file content.
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>",
  "gracePeriod": <healthExtensionGracePeriod>
}
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>",
  "gracePeriod": <healthExtensionGracePeriod>
}
The following example adds the Application Health extension to an existing virtual machine onAzure portal.
Navigate to your existing Virtual Machine
On the left sidebar, go to theHealth monitoringblade
Click onEnable application health monitoring, selectRich (advanced)for Health States. Configure your protocol, port, and more to set up the health probes.
ClickSaveto save your settings

Troubleshoot
Need help configuring a probe response
Seeapplication health samplesfor examples of health probe responses being emitted to a local endpoint.
View VMHealth
REST API
Azure PowerShell
Azure CLI 2.0
Azure portal
GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/instanceView?api-version=2023-07-01
GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/instanceView?api-version=2023-07-01
Sample Response (see "vmHealth" object for the latest VM health status)
"vmHealth": {
    "status": {
      "code": "HealthState/unknown",
      "level": "Warning",
      "displayStatus": "The VM health is unknown",
      "time": "2023-12-04T22:25:39+00:00"
    }
}
"vmHealth": {
    "status": {
      "code": "HealthState/unknown",
      "level": "Warning",
      "displayStatus": "The VM health is unknown",
      "time": "2023-12-04T22:25:39+00:00"
    }
}
Get-AzVM
  -ResourceGroupName "<rgName>" `
  -Name "<vmName>" `
  -Status
Get-AzVM
  -ResourceGroupName "<rgName>" `
  -Name "<vmName>" `
  -Status
az vm get-instance-view --name <vmName> --resource-group <rgName>
az vm get-instance-view --name <vmName> --resource-group <rgName>
Navigate to your existing Virtual Machine
On the left sidebar, go to theOverviewblade
Your application health can be observed under theHealth Statefield

Extension execution output log
Extension execution output is logged to files found in the following directories:
C:\WindowsAzure\Logs\Plugins\Microsoft.ManagedServices.ApplicationHealthWindows\<version>\
C:\WindowsAzure\Logs\Plugins\Microsoft.ManagedServices.ApplicationHealthWindows\<version>\
/var/lib/waagent/Microsoft.ManagedServices.ApplicationHealthLinux-<extension_version>/status
/var/log/azure/applicationhealth-extension
/var/lib/waagent/Microsoft.ManagedServices.ApplicationHealthLinux-<extension_version>/status
/var/log/azure/applicationhealth-extension
The logs also periodically capture the application health status.
Feedback
Was this page helpful?
Additional resources