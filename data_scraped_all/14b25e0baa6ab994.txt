Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Run your app in Azure App Service directly from a ZIP package
Article
2025-04-22
10 contributors
In this article
Note
Run from package is not supported for Python apps. When deploying a ZIP file of your Python code, you need to set a flag to enable Azure build automation. The build automation will create the Python virtual environment for your app and install any necessary requirements and package needed. Seebuild automationfor more details.
InAzure App Service, you can run your apps directly from a deployment ZIP package file. This article shows how to enable this functionality in your app.
All other deployment methods in App Service have something in common: your unzip files are deployed toD:\home\site\wwwrootin your app (or/home/site/wwwrootfor Linux apps). Since the same directory is used by your app at runtime, it's possible for deployment to fail because of file lock conflicts, and for the app to behave unpredictably because some of the files are not yet updated. To enable this setting, you do not need to assign any value to theWEBSITE_RUN_FROM_PACKAGEvariable or you can remove it entirely.
WEBSITE_RUN_FROM_PACKAGE
In contrast, when you run directly from a ZIP package, the files in the package are not copied to thewwwrootdirectory. Instead, the ZIP package itself gets mounted directly as the read-onlywwwrootdirectory. To enable this setting, setWEBSITE_RUN_FROM_PACKAGE=1 or provide the URL of the ZIP file. There are several benefits to running directly from a package:
WEBSITE_RUN_FROM_PACKAGE
Eliminates file lock conflicts between deployment and runtime.
Ensures only full-deployed apps are running at any time.
Can be deployed to a production app (with restart).
Improves the performance of Azure Resource Manager deployments.
May reduce cold-start times, particularly for JavaScript functions with large npm package trees.
Note
Currently, only ZIP package files are supported.
Create a project ZIP package
Important
When you create the ZIP package for deployment, don't include the root directory. Include only the files and directories in the root directory. If you download a GitHub repository as a ZIP file, you can't deploy that file as-is to App Service. GitHub adds nested directories at the top level, which doesn't work with App Service.
In a local terminal window, navigate to the root directory of your app project.
This directory should contain the entry file to your web app, such asindex.html,index.php, andapp.js. It can also contain package management files likeproject.json,composer.json,package.json,bower.json, andrequirements.txt.
index.html
index.php
app.js
project.json
composer.json
package.json
bower.json
requirements.txt
If you don't want App Service to run deployment automation for you, run all the build tasks. For example:npm,bower,gulp,composer, andpip. Make sure that you have all the files you need to run the app. This step is required if you want torun your package directly.
npm
bower
gulp
composer
pip
Create a ZIP archive of everything in your project. Fordotnetprojects, add everything in the output directory of thedotnet publishcommand, excluding the output directory itself. For example, enter the following command in your terminal to create a ZIP package that includes the contents of the current directory:
dotnet
dotnet publish
# Bash
zip -r <file-name>.zip .

# PowerShell
Compress-Archive -Path * -DestinationPath <file-name>.zip
# Bash
zip -r <file-name>.zip .

# PowerShell
Compress-Archive -Path * -DestinationPath <file-name>.zip
Enable running from ZIP package
TheWEBSITE_RUN_FROM_PACKAGEapp setting enables running from a ZIP package. To set it, run the following command with Azure CLI.
WEBSITE_RUN_FROM_PACKAGE
az webapp config appsettings set --resource-group <group-name> --name <app-name> --settings WEBSITE_RUN_FROM_PACKAGE="1"
az webapp config appsettings set --resource-group <group-name> --name <app-name> --settings WEBSITE_RUN_FROM_PACKAGE="1"
WEBSITE_RUN_FROM_PACKAGE="1"lets you run your app from a ZIP package local to your app. You can alsorun from a remote package.
WEBSITE_RUN_FROM_PACKAGE="1"
Run the ZIP package
The easiest way to run a ZIP package in your App Service is with the Azure CLIaz webapp deployment source config-zipcommand. For example:
az webapp deploy --resource-group <group-name> --name <app-name> --src-path <filename>.zip
az webapp deploy --resource-group <group-name> --name <app-name> --src-path <filename>.zip
Because theWEBSITE_RUN_FROM_PACKAGEapp setting is set, this command doesn't extract the ZIP package content to theD:\home\site\wwwrootdirectory of your app. Instead, it uploads the ZIP file as-is toD:\home\data\SitePackages, and creates apackagename.txtin the same directory, that contains the name of the ZIP package to load at runtime. If you upload your ZIP package in a different way (such asFTP), you need to create theD:\home\data\SitePackagesdirectory and thepackagename.txtfile manually.
WEBSITE_RUN_FROM_PACKAGE
The command also restarts the app. BecauseWEBSITE_RUN_FROM_PACKAGEis set, App Service mounts the uploaded package as the read-onlywwwrootdirectory and runs the app directly from that mounted directory.
WEBSITE_RUN_FROM_PACKAGE
Run from external URL instead
You can also run a ZIP package from an external URL, such as Azure Blob Storage. You can use theAzure Storage Explorerto upload ZIP package files to your Blob storage account. You should use a private storage container with aShared Access Signature (SAS)oruse a managed identityto enable the App Service runtime to access the ZIP package securely.
Note
Currently, an existing App Service resource that runs a local ZIP package cannot be migrated to run from a remote ZIP package. You will have to create a new App Service resource configured to run from an external URL.
Once you upload your file to Blob storage and have an SAS URL for the file, set theWEBSITE_RUN_FROM_PACKAGEapp setting to the URL. Make sure the URL ends with.zip. The following example does it by using Azure CLI:
WEBSITE_RUN_FROM_PACKAGE
.zip
az webapp config appsettings set --name <app-name> --resource-group <resource-group-name> --settings WEBSITE_RUN_FROM_PACKAGE="https://myblobstorage.blob.core.windows.net/content/SampleCoreMVCApp.zip?st=2018-02-13T09%3A48%3A00Z&se=2044-06-14T09%3A48%3A00Z&sp=rl&sv=2017-04-17&sr=b&sig=bNrVrEFzRHQB17GFJ7boEanetyJ9DGwBSV8OM3Mdh%2FM%3D"
az webapp config appsettings set --name <app-name> --resource-group <resource-group-name> --settings WEBSITE_RUN_FROM_PACKAGE="https://myblobstorage.blob.core.windows.net/content/SampleCoreMVCApp.zip?st=2018-02-13T09%3A48%3A00Z&se=2044-06-14T09%3A48%3A00Z&sp=rl&sv=2017-04-17&sr=b&sig=bNrVrEFzRHQB17GFJ7boEanetyJ9DGwBSV8OM3Mdh%2FM%3D"
If you publish an updated package with the same name to Blob storage, you need to restart your app so that the updated package is loaded into App Service.
Access a package in Azure Blob Storage using a managed identity
You can configure Azure Blob Storage toauthorize requests with Microsoft Entra ID. This configuration means that instead of generating a SAS key with an expiration, you can instead rely on the application'smanaged identity. By default, the app's system-assigned identity is used. If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also acceptSystemAssignedas a value, which is equivalent to omitting the setting.
WEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_ID
SystemAssigned
To enable the package to be fetched using the identity:
Ensure that the blob isconfigured for private access.
Ensure that the blob isconfigured for private access.
Grant the identity theStorage Blob Data Readerrole with scope over the package blob. SeeAssign an Azure role for access to blob datafor details on creating the role assignment.
Grant the identity theStorage Blob Data Readerrole with scope over the package blob. SeeAssign an Azure role for access to blob datafor details on creating the role assignment.
Set theWEBSITE_RUN_FROM_PACKAGEapplication setting to the blob URL of the package. This URL is usually of the formhttps://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}or similar.
Set theWEBSITE_RUN_FROM_PACKAGEapplication setting to the blob URL of the package. This URL is usually of the formhttps://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}or similar.
WEBSITE_RUN_FROM_PACKAGE
https://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}
If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also accept "SystemAssigned" as a value, although this is the same as omitting the setting altogether. A resource ID is a standard representation for a resource in Azure. For a user-assigned managed identity, that is going to be/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name. The resource ID of a user-assigned managed identity can be obtained in theSettings->Properties->ID for the user assigned managed identity.
If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also accept "SystemAssigned" as a value, although this is the same as omitting the setting altogether. A resource ID is a standard representation for a resource in Azure. For a user-assigned managed identity, that is going to be/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name. The resource ID of a user-assigned managed identity can be obtained in theSettings->Properties->ID for the user assigned managed identity.
WEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_ID
/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name
Deploy WebJob files when running from package
There are two ways to deployWebJobfiles when youenable running an app from package:
Deploy in the same ZIP package as your app: include them as you normally would in<project-root>\app_data\jobs\...(which maps to the deployment path\site\wwwroot\app_data\jobs\...as specified in theWebJobs quickstart).
<project-root>\app_data\jobs\...
\site\wwwroot\app_data\jobs\...
Deploy separately from the ZIP package of your app: Since the usual deployment path\site\wwwroot\app_data\jobs\...is now read-only, you can't deploy WebJob files there. Instead, deploy WebJob files to\site\jobs\..., which is not read only. WebJobs deployed to\site\wwwroot\app_data\jobs\...and\site\jobs\...both run.
\site\wwwroot\app_data\jobs\...
\site\jobs\...
\site\wwwroot\app_data\jobs\...
\site\jobs\...
Note
When\site\wwwrootbecomes read-only, operations like the creation of thedisable.jobwill fail.
\site\wwwroot
Troubleshooting
Running directly from a package makeswwwrootread-only. Your app will receive an error if it tries to write files to this directory.
wwwroot
TAR and GZIP formats are not supported.
The ZIP file can be at most 1GB
This feature is not compatible withlocal cache.
For improved cold-start performance, use the local Zip option (WEBSITE_RUN_FROM_PACKAGE=1).
WEBSITE_RUN_FROM_PACKAGE
More resources
Continuous deployment for Azure App Service
Deploy code with a ZIP or WAR file
Feedback
Was this page helpful?
Additional resources