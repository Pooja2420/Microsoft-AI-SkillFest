Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Event Hubs trigger and bindings for Azure Functions
Article
2023-06-01
24 contributors
In this article
This article explains how to work withAzure Event Hubsbindings for Azure Functions. Azure Functions supports trigger and output bindings for Event Hubs.
Install extension
The extension NuGet package you install depends on the C# mode you're using in your function app:
Isolated worker model
In-process model
Functions execute in an isolated C# worker process. To learn more, seeGuide for running C# Azure Functions in an isolated worker process.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Functions execute in the same process as the Functions host. To learn more, seeDevelop C# class library functions using Azure Functions.
In a variation of this model, Functions can be run usingC# scripting, which is supported primarily for C# portal editing. To update existing binding extensions for C# script apps running in the portal without having to republish your function app, seeUpdate your extensions.
The functionality of the extension varies depending on the extension version:
Extension v5.x+
Extension v3.x+
Functions v1.x
Extension v5.x+
Extension v3.x+
Functions v1.x
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 4.x.
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
This version uses the newer Event Hubs binding typeAzure.Messaging.EventHubs.EventData.
This extension version is available by installing theNuGet package, version 5.x.
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 2.x.
Supports the original Event Hubs binding parameter type ofMicrosoft.Azure.EventHubs.EventData.
Add the extension to your project by installing theNuGet package, version 3.x or 4.x.
Important
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
Version 1.x of the Functions runtime doesn't require an extension.
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
This version supports configuration of triggers and bindings through.NET Aspire integration.
Add the extension to your project by installing theNuGet package, version 5.x.
Add the extension to your project by installing theNuGet package, version 4.x.
Version 1.x of the Functions runtime doesn't support running in an isolated worker process.
Install bundle
The Event Hubs extension is part of anextension bundle, which is specified in your host.json project file. You may need to modify this bundle to change the version of the binding, or if bundles aren't already installed. To learn more, seeextension bundle.
Bundle v3.x
Bundle v2.x
Functions v1.x
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
You can add this version of the extension from the extension bundle v3 by adding or replacing the following code in yourhost.jsonfile:
host.json
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
To learn more, seeUpdate your extensions.
You can install this version of the extension in your function app by registering theextension bundle, version 2.x.
Version 1.x of the Functions runtime doesn't require extension bundles.
Binding types
The binding types supported for .NET depend on both the extension version and C# execution mode, which can be one of the following options:
Isolated worker model
In-process model
An isolated worker process class library compiled C# function runs in a process isolated from the runtime.
An in-process class library is a compiled C# function runs in the same process as the Functions runtime.
Choose a version to see binding type details for the mode and version.
Extension v5.x+
Extension v3.x+
Functions v1.x
Extension v5.x+
Extension v3.x+
Functions v1.x
The Event Hubs extension supports parameter types according to the table below.
string
byte[]
EventData[]
string[]
string
byte[]
ICollector<T>
IAsyncCollector<T>
T
1Events containing JSON data can be deserialized into known plain-old CLR object (POCO) types.
Earlier versions of the extension exposed types from the now deprecatedMicrosoft.Azure.EventHubsnamespace. Newer types fromAzure.Messaging.EventHubsare exclusive toExtension v5.x+.
This version of the extension supports parameter types according to the table below.
string
byte[]
EventData[]
string[]
string
byte[]
1Events containing JSON data can be deserialized into known plain-old CLR object (POCO) types.
Earlier versions of the extension exposed types from the now deprecatedMicrosoft.Azure.EventHubsnamespace. Newer types fromAzure.Messaging.EventHubsare exclusive toExtension v5.x+.
This version of the extension supports parameter types according to the table below.
string
byte[]
EventData[]
string[]
string
byte[]
1Events containing JSON data can be deserialized into known plain-old CLR object (POCO) types.
The isolated worker process supports parameter types according to the tables below. Support for binding to types fromAzure.Messaging.EventHubsis in preview.
Event Hubs trigger
When you want the function to process a single event, the Event Hubs trigger can bind to the following types:
string
byte[]
Body
When you want the function to process a batch of events, the Event Hubs trigger can bind to the following types:
string[]
EventData[]
T[]
T
1To use these types, you need to referenceMicrosoft.Azure.Functions.Worker.Extensions.EventHubs 5.5.0 or laterand thecommon dependencies for SDK type bindings.
Event Hubs output binding
When you want the function to write a single event, the Event Hubs output binding can bind to the following types:
string
byte[]
When you want the function to write multiple events, the Event Hubs output binding can bind to the following types:
T[]
T
For other output scenarios, create and use anEventHubProducerClientwith other types fromAzure.Messaging.EventHubsdirectly. SeeRegister Azure clientsfor an example of using dependency injection to create a client type from the Azure SDK.
Earlier versions of the extension in the isolated worker process only support binding to strings and JSON serializable types. More options are available toExtension v5.x+.
Functions version 1.x doesn't support the isolated worker process. To use the isolated worker model,upgrade your application to Functions 4.x.
host.json settings

Thehost.jsonfile contains settings that control behavior for the Event Hubs trigger. The configuration is different depending on the extension version.
Extension v5.x+
Extension v3.x+
Functions v1.x
{
    "version": "2.0",
    "extensions": {
        "eventHubs": {
            "maxEventBatchSize" : 100,
            "minEventBatchSize" : 25,
            "maxWaitTime" : "00:05:00",            
            "batchCheckpointFrequency" : 1,
            "prefetchCount" : 300,
            "transportType" : "amqpWebSockets",
            "webProxy" : "https://proxyserver:8080",
            "customEndpointAddress" : "amqps://company.gateway.local",
            "targetUnprocessedEventThreshold" : 75,
            "initialOffsetOptions" : {
                "type" : "fromStart",
                "enqueuedTimeUtc" : ""
            },
            "clientRetryOptions":{
                "mode" : "exponential",
                "tryTimeout" : "00:01:00",
                "delay" : "00:00:00.80",
                "maximumDelay" : "00:01:00",
                "maximumRetries" : 3
            }
        }
    }
}
{
    "version": "2.0",
    "extensions": {
        "eventHubs": {
            "maxEventBatchSize" : 100,
            "minEventBatchSize" : 25,
            "maxWaitTime" : "00:05:00",            
            "batchCheckpointFrequency" : 1,
            "prefetchCount" : 300,
            "transportType" : "amqpWebSockets",
            "webProxy" : "https://proxyserver:8080",
            "customEndpointAddress" : "amqps://company.gateway.local",
            "targetUnprocessedEventThreshold" : 75,
            "initialOffsetOptions" : {
                "type" : "fromStart",
                "enqueuedTimeUtc" : ""
            },
            "clientRetryOptions":{
                "mode" : "exponential",
                "tryTimeout" : "00:01:00",
                "delay" : "00:00:00.80",
                "maximumDelay" : "00:01:00",
                "maximumRetries" : 3
            }
        }
    }
}
maxEventBatchSize
maxWaitTime
minEventBatchSize
minEventBatchSize
amqpTcp
amqpWebSockets
amqpTcp
maxEventBatchSize
fromStart
fromEnd
fromEnqueuedTime
initialOffsetOptions/type
fromEnqueuedTime
2020-10-26T20:31Z
exponential
fixed
1UsingminEventBatchSizeandmaxWaitTimerequiresv5.3.0of theMicrosoft.Azure.WebJobs.Extensions.EventHubspackage, or a later version.
minEventBatchSize
maxWaitTime
Microsoft.Azure.WebJobs.Extensions.EventHubs
2The defaultmaxEventBatchSizechanged inv6.0.0of theMicrosoft.Azure.WebJobs.Extensions.EventHubspackage.  In earlier versions, this was 10.
maxEventBatchSize
Microsoft.Azure.WebJobs.Extensions.EventHubs
TheclientRetryOptionsare used to retry operations between the Functions host and Event Hubs (such as fetching events and sending events).  Refer to guidance onAzure Functions error handling and retriesfor information on applying retry policies to individual functions.
clientRetryOptions
For a reference of host.json in Azure Functions 2.x and beyond, seehost.json reference for Azure Functions.
{
    "version": "2.0",
    "extensions": {
        "eventHubs": {
            "batchCheckpointFrequency": 1,
            "eventProcessorOptions": {
                "maxBatchSize": 256,
                "prefetchCount": 512
            },
            "initialOffsetOptions": {
                "type": "fromStart",
                "enqueuedTimeUtc": ""
            }
        }
    }
}
{
    "version": "2.0",
    "extensions": {
        "eventHubs": {
            "batchCheckpointFrequency": 1,
            "eventProcessorOptions": {
                "maxBatchSize": 256,
                "prefetchCount": 512
            },
            "initialOffsetOptions": {
                "type": "fromStart",
                "enqueuedTimeUtc": ""
            }
        }
    }
}
EventProcessorHost
fromStart
fromEnd
fromEnqueuedTime
fromEnd
initialOffsetOptions/type
fromEnqueuedTime
2020-10-26T20:31Z
1Support forinitialOffsetOptionsbegins withEventHubs v4.2.0.
initialOffsetOptions
For a reference of host.json in Azure Functions 2.x and beyond, seehost.json reference for Azure Functions.
{
    "eventHub": {
      "maxBatchSize": 64,
      "prefetchCount": 256,
      "batchCheckpointFrequency": 1
    }
}
{
    "eventHub": {
      "maxBatchSize": 64,
      "prefetchCount": 256,
      "batchCheckpointFrequency": 1
    }
}
EventProcessorHost
For a reference of host.json in Azure Functions 1.x, seehost.json reference for Azure Functions 1.x.
Next steps
Respond to events sent to an event hub event stream (Trigger)
Write events to an event stream (Output binding)
Feedback
Was this page helpful?
Additional resources