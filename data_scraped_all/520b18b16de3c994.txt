Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Apply automatic security upgrades to Azure Kubernetes Service (AKS) nodes using GitHub Actions
Article
2024-08-01
10 contributors
In this article
Security updates are a key part of maintaining your AKS cluster's security and compliance with the latest fixes for the underlying OS. These updates include OS security fixes or kernel updates. Some updates require a node reboot to complete the process.
This article shows you how you can automate the update process of AKS nodes using GitHub Actions and Azure CLI to create an update task based oncronthat runs automatically.
cron
Note
You can also perform node image upgrades automatically and schedule these upgrades using planned maintenance. For more information, seeAutomatically upgrade node images.
Before you begin
This article assumes you have an existing AKS cluster. If you need an AKS cluster, create one usingAzure CLI,Azure PowerShell, orthe Azure portal.
This article also assumes you have aGitHub accountand aprofile repositoryto host your actions. If you don't have a repository, create one with the same name as your GitHub username.
You need the Azure CLI version 2.0.59 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Update nodes withaz aks upgrade
az aks upgrade
Theaz aks upgradecommand gives you a zero downtime way to apply updates. The command performs the following actions:
az aks upgrade
Applies the latest updates to all your cluster's nodes.
Cordons (makes the node unavailable for the scheduling of new workloads) and drains (moves the existent workloads to other node) traffic to the nodes.
Restarts the nodes.
Enables the updated nodes to receive traffic again.
AKS doesn't automatically restart your nodes if you update them using a different method.
Note
Runningaz aks upgradewith the--node-image-onlyflag only upgrades the node images. Running the command without the flag upgrades both the node images and the Kubernetes control plane version. For more information, see thedocs for managed upgrades on nodesand thedocs for cluster upgrades.
az aks upgrade
--node-image-only
All Kubernetes nodes run in a standard Windows or Linux-based Azure virtual machine (VM). The Linux-based VMs use an Ubuntu image with the OS configured to automatically check for updates every night.
When you use theaz aks upgradecommand, Azure CLI creates a surge of new nodes with the latest security and kernel updates. These new nodes are initially cordoned to prevent any apps from being scheduled to them until the update completes. After the update completes, Azure cordons and drains the older nodes and uncordons the new ones, transferring all the scheduled applications to the new nodes.
az aks upgrade
This process is better than updating Linux-based kernels manually because Linux requires a reboot when a new kernel update is installed. If you update the OS manually, you also need to reboot the VM, manually cordoning and draining all the apps.
Create a timed GitHub Action
cronis a utility that allows you to run a set of commands, orjobs, on an automated schedule. To create a job to update your AKS nodes on an automated schedule, you need a repository to host your actions. GitHub Actions are usually configured in the same repository as your application, but you can use any repository.
cron
Navigate to your repository on GitHub.
Navigate to your repository on GitHub.
SelectActions.
SelectActions.
SelectNew workflow>Set up a workflow yourself.
SelectNew workflow>Set up a workflow yourself.
Create a GitHub Action namedUpgrade cluster node imageswith a schedule trigger to run every 15 days at 3am. Copy the following code into the YAML:name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
Create a GitHub Action namedUpgrade cluster node imageswith a schedule trigger to run every 15 days at 3am. Copy the following code into the YAML:
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
Create a job namedupgrade-nodethat runs on an Ubuntu agent and connects to your Azure CLI account to execute the node upgrade command. Copy the following code into the YAML under theonkey:jobs:
  upgrade-node:
    runs-on: ubuntu-latest
Create a job namedupgrade-nodethat runs on an Ubuntu agent and connects to your Azure CLI account to execute the node upgrade command. Copy the following code into the YAML under theonkey:
on
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
Set up the Azure CLI in the workflow
In theSearch Marketplace for Actionsbar, search forAzure Login.
In theSearch Marketplace for Actionsbar, search forAzure Login.
SelectAzure Login.
SelectAzure Login.

UnderInstallation, select a version, such asv1.4.6, and copy the installation code snippet.
UnderInstallation, select a version, such asv1.4.6, and copy the installation code snippet.
Add thestepskey and the following information from the installation code snippet to the YAML:name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
Add thestepskey and the following information from the installation code snippet to the YAML:
steps
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
Create credentials for the Azure CLI
In a new browser window, create a new service principal using theaz ad sp create-for-rbaccommand. Make sure you replace*{subscriptionID}*with your own subscription ID.NoteThis example creates theContributorrole at theSubscriptionscope. You can provide the role and scope that meets your needs. For more information, seeAzure built-in rolesandAzure RBAC scope levels.az ad sp create-for-rbac --role Contributor --scopes /subscriptions/{subscriptionID} -o jsonYour output should be similar to the following example output:{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "xxxxx-xxx-xxxx-xx-xx-xx-xx-xx",
  "password": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
In a new browser window, create a new service principal using theaz ad sp create-for-rbaccommand. Make sure you replace*{subscriptionID}*with your own subscription ID.
az ad sp create-for-rbac
*{subscriptionID}*
Note
This example creates theContributorrole at theSubscriptionscope. You can provide the role and scope that meets your needs. For more information, seeAzure built-in rolesandAzure RBAC scope levels.
Contributor
az ad sp create-for-rbac --role Contributor --scopes /subscriptions/{subscriptionID} -o json
az ad sp create-for-rbac --role Contributor --scopes /subscriptions/{subscriptionID} -o json
Your output should be similar to the following example output:
{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "xxxxx-xxx-xxxx-xx-xx-xx-xx-xx",
  "password": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "xxxxx-xxx-xxxx-xx-xx-xx-xx-xx",
  "password": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
Copy the output and navigate to your GitHub repository.
Copy the output and navigate to your GitHub repository.
SelectSettings>Secrets and variables>Actions>New repository secret.
SelectSettings>Secrets and variables>Actions>New repository secret.
ForName, enterAZURE_CREDENTIALS.
ForName, enterAZURE_CREDENTIALS.
AZURE_CREDENTIALS
ForSecret, copy in the contents of the output you received when you created the service principal.
ForSecret, copy in the contents of the output you received when you created the service principal.
SelectAdd Secret.
SelectAdd Secret.
Create the steps to execute the Azure CLI commands
Navigate to your window with the workflow YAML.
Navigate to your window with the workflow YAML.
In theSearch Marketplace for Actionsbar, search forAzure CLI Action.
In theSearch Marketplace for Actionsbar, search forAzure CLI Action.
SelectAzure CLI Action.
SelectAzure CLI Action.

UnderInstallation, select a version, such asv1.0.8, and copy the installation code snippet.
UnderInstallation, select a version, such asv1.0.8, and copy the installation code snippet.
Paste the contents of the action into the YAML below the*Azure Login*step, similar to the following example:name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Upgrade node images
        uses: Azure/cli@v1.0.8
        with:
          inlineScript: az aks upgrade --resource-group <resourceGroupName> --name <aksClusterName> --node-image-only --yesTipYou can decouple the--resource-groupand--nameparameters from the command by creating new repository secrets like you did forAZURE_CREDENTIALS.If you create secrets for these parameters, you need to replace the<resourceGroupName>and<aksClusterName>placeholders with their secret counterparts. For example,${{secrets.RESOURCE_GROUP_NAME}}and${{secrets.AKS_CLUSTER_NAME}}
Paste the contents of the action into the YAML below the*Azure Login*step, similar to the following example:
*Azure Login*
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Upgrade node images
        uses: Azure/cli@v1.0.8
        with:
          inlineScript: az aks upgrade --resource-group <resourceGroupName> --name <aksClusterName> --node-image-only --yes
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
jobs:
  upgrade-node:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Upgrade node images
        uses: Azure/cli@v1.0.8
        with:
          inlineScript: az aks upgrade --resource-group <resourceGroupName> --name <aksClusterName> --node-image-only --yes
Tip
You can decouple the--resource-groupand--nameparameters from the command by creating new repository secrets like you did forAZURE_CREDENTIALS.
--resource-group
--name
AZURE_CREDENTIALS
If you create secrets for these parameters, you need to replace the<resourceGroupName>and<aksClusterName>placeholders with their secret counterparts. For example,${{secrets.RESOURCE_GROUP_NAME}}and${{secrets.AKS_CLUSTER_NAME}}
<resourceGroupName>
<aksClusterName>
${{secrets.RESOURCE_GROUP_NAME}}
${{secrets.AKS_CLUSTER_NAME}}
Rename the YAML toupgrade-node-images.yml.
Rename the YAML toupgrade-node-images.yml.
upgrade-node-images.yml
SelectCommit changes..., add a commit message, and then selectCommit changes.
SelectCommit changes..., add a commit message, and then selectCommit changes.
Run the GitHub Action manually
You can run the workflow manually in addition to the scheduled run by adding a newontrigger calledworkflow_dispatch.
on
workflow_dispatch
Note
If you want to upgrade a single node pool instead of all node pools on the cluster, add the--nameparameter to theaz aks nodepool upgradecommand to specify the node pool name. For example:
--name
az aks nodepool upgrade
az aks nodepool upgrade --resource-group <resourceGroupName> --cluster-name <aksClusterName> --name <nodePoolName> --node-image-only
az aks nodepool upgrade --resource-group <resourceGroupName> --cluster-name <aksClusterName> --name <nodePoolName> --node-image-only
Add theworkflow_dispatchtrigger under theonkey:name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
  workflow_dispatch:The YAML should look similar to the following example:name: Upgrade cluster node images
    on:
      schedule:
        - cron: '0 3 */15 * *'
      workflow_dispatch:
    jobs:
      upgrade-node:
        runs-on: ubuntu-latest
        steps:
          - name: Azure Login
            uses: Azure/login@v1.4.6
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
          - name: Upgrade node images
            uses: Azure/cli@v1.0.8
            with:
              inlineScript: az aks upgrade -g {resourceGroupName} -n {aksClusterName} --node-image-only --yes
          # Code for upgrading one or more node pools
Add theworkflow_dispatchtrigger under theonkey:
workflow_dispatch
on
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
  workflow_dispatch:
name: Upgrade cluster node images
on:
  schedule:
    - cron: '0 3 */15 * *'
  workflow_dispatch:
The YAML should look similar to the following example:
name: Upgrade cluster node images
    on:
      schedule:
        - cron: '0 3 */15 * *'
      workflow_dispatch:
    jobs:
      upgrade-node:
        runs-on: ubuntu-latest
        steps:
          - name: Azure Login
            uses: Azure/login@v1.4.6
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
          - name: Upgrade node images
            uses: Azure/cli@v1.0.8
            with:
              inlineScript: az aks upgrade -g {resourceGroupName} -n {aksClusterName} --node-image-only --yes
          # Code for upgrading one or more node pools
name: Upgrade cluster node images
    on:
      schedule:
        - cron: '0 3 */15 * *'
      workflow_dispatch:
    jobs:
      upgrade-node:
        runs-on: ubuntu-latest
        steps:
          - name: Azure Login
            uses: Azure/login@v1.4.6
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
          - name: Upgrade node images
            uses: Azure/cli@v1.0.8
            with:
              inlineScript: az aks upgrade -g {resourceGroupName} -n {aksClusterName} --node-image-only --yes
          # Code for upgrading one or more node pools
Next steps
For more information about AKS upgrades, see the following articles and resources:
AKS release notes
Upgrade an AKS cluster
For a detailed discussion of upgrade best practices and other considerations, seeAKS patch and upgrade guidance.
Azure Kubernetes Service

Additional resources