Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Defender for Containers architecture
Article
2024-08-07
10 contributors
In this article
Defender for Containers is designed differently for each Kubernetes environment whether they're running in:
Azure Kubernetes Service (AKS)- Microsoft's managed service for developing, deploying, and managing containerized applications.
Azure Kubernetes Service (AKS)- Microsoft's managed service for developing, deploying, and managing containerized applications.
Amazon Elastic Kubernetes Service (EKS) in a connected Amazon Web Services (AWS) account- Amazon's managed service for running Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or nodes.
Amazon Elastic Kubernetes Service (EKS) in a connected Amazon Web Services (AWS) account- Amazon's managed service for running Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or nodes.
Google Kubernetes Engine (GKE) in a connected Google Cloud Platform (GCP) project- Googleâs managed environment for deploying, managing, and scaling applications using GCP infrastructure.
Google Kubernetes Engine (GKE) in a connected Google Cloud Platform (GCP) project- Googleâs managed environment for deploying, managing, and scaling applications using GCP infrastructure.
An unmanaged Kubernetes distribution(using Azure Arc-enabled Kubernetes) - Cloud Native Computing Foundation (CNCF) certified Kubernetes clusters hosted on-premises or on IaaS.
An unmanaged Kubernetes distribution(using Azure Arc-enabled Kubernetes) - Cloud Native Computing Foundation (CNCF) certified Kubernetes clusters hosted on-premises or on IaaS.
Note
Defender for Containers support for Arc-enabled Kubernetes clusters (AWS EKS and GCP GKE) is a preview feature.
To protect your Kubernetes containers, Defender for Containers receives and analyzes:
Audit logs and security events from the API server
Cluster configuration information from the control plane
Workload configuration from Azure Policy
Security signals and events from the node level
To learn more about implementation details such as supported operating systems, feature availability, outbound proxy, seeDefender for Containers feature availability.
Architecture for each Kubernetes environment
Azure (AKS)
On-premises / IaaS (Arc)
AWS (EKS)
GCP (GKE)
Architecture diagram of Defender for Cloud and AKS clusters
When Defender for Cloud protects a cluster hosted in Azure Kubernetes Service, the collection of audit log data is agentless and collected automatically through Azure infrastructure with no additional cost or configuration considerations. These are the required components in order to receive the full protection offered by Microsoft Defender for Containers:
Defender sensor: The DaemonSet that is deployed on each node, collects signals from hosts usingeBPF technology, and provides runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace. The Defender sensor is deployed as an AKS Security profile.
Note
When the Defender sensor is configured on an AKS cluster, it triggers a reconciliation process. This happens as part of the Defender for Containers plan and is expected behaviour.
Azure Policy for Kubernetes:  A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. The Azure Policy for Kubernetes pod is deployed as an AKS add-on. It's only installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.

Defender sensor component details
* Resource limits aren't configurable; Learn more aboutKubernetes resources limits.
How does agentless discovery for Kubernetes in Azure work?
The discovery process is based on snapshots taken at intervals:

When you enable the agentless discovery for Kubernetes extension, the following process occurs:
Create:If the extension is enabled from Defender CSPM, Defender for Cloud creates an identity in customer environments calledCloudPosture/securityOperator/DefenderCSPMSecurityOperator.If the extension is enabled from Defender for Containers, Defender for Cloud creates an identity in customer environments calledCloudPosture/securityOperator/DefenderForContainersSecurityOperator.
Create:
If the extension is enabled from Defender CSPM, Defender for Cloud creates an identity in customer environments calledCloudPosture/securityOperator/DefenderCSPMSecurityOperator.
CloudPosture/securityOperator/DefenderCSPMSecurityOperator
If the extension is enabled from Defender for Containers, Defender for Cloud creates an identity in customer environments calledCloudPosture/securityOperator/DefenderForContainersSecurityOperator.
CloudPosture/securityOperator/DefenderForContainersSecurityOperator
Assign: Defender for Cloud assigns a built-in role calledKubernetes Agentless Operatorto that identity on subscription scope. The role contains the following permissions:AKS read (Microsoft.ContainerService/managedClusters/read)AKS Trusted Access with the following permissions:Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/writeMicrosoft.ContainerService/managedClusters/trustedAccessRoleBindings/readMicrosoft.ContainerService/managedClusters/trustedAccessRoleBindings/deleteLearn more aboutAKS Trusted Access.
Assign: Defender for Cloud assigns a built-in role calledKubernetes Agentless Operatorto that identity on subscription scope. The role contains the following permissions:
AKS read (Microsoft.ContainerService/managedClusters/read)
AKS Trusted Access with the following permissions:
Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/write
Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/read
Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/delete
Learn more aboutAKS Trusted Access.
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the AKS clusters in your environment using API calls to the API server of AKS.
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the AKS clusters in your environment using API calls to the API server of AKS.
Bind: Upon discovery of an AKS cluster, Defender for Cloud performs an AKS bind operation by creating aClusterRoleBindingbetween the created identity and the KubernetesClusterRoleaks:trustedaccessrole:defender-containers:microsoft-defender-operator. TheClusterRoleis visible via API and gives Defender for Cloud data plane read permission inside the cluster.
Bind: Upon discovery of an AKS cluster, Defender for Cloud performs an AKS bind operation by creating aClusterRoleBindingbetween the created identity and the KubernetesClusterRoleaks:trustedaccessrole:defender-containers:microsoft-defender-operator. TheClusterRoleis visible via API and gives Defender for Cloud data plane read permission inside the cluster.
ClusterRoleBinding
ClusterRole
ClusterRole
Note
The copied snapshot remains in the same region as the cluster.
Architecture diagram of Defender for Cloud and Arc-enabled Kubernetes clusters
These components are required in order to receive the full protection offered by Microsoft Defender for Containers:
Azure Arc-enabled Kubernetes- Azure Arc-enabled Kubernetes - A sensor based solution, installed on one node in the cluster, that connects your clusters to Defender for Cloud. Defender for Cloud is then able to deploy the following two agents asArc extensions:
Azure Arc-enabled Kubernetes- Azure Arc-enabled Kubernetes - A sensor based solution, installed on one node in the cluster, that connects your clusters to Defender for Cloud. Defender for Cloud is then able to deploy the following two agents asArc extensions:
Defender sensor: The DaemonSet that is deployed on each node, collects host signals usingeBPF technologyand Kubernetes audit logs, to provide runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace. The Defender sensor is deployed as an Arc-enabled Kubernetes extension.
Defender sensor: The DaemonSet that is deployed on each node, collects host signals usingeBPF technologyand Kubernetes audit logs, to provide runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace. The Defender sensor is deployed as an Arc-enabled Kubernetes extension.
Azure Policy for Kubernetes: A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. It's only installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.
Azure Policy for Kubernetes: A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. It's only installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.
Note
Defender for Containers support for Arc-enabled Kubernetes clusters is a preview feature.

Architecture diagram of Defender for Cloud and EKS clusters
When Defender for Cloud protects a cluster hosted in Elastic Kubernetes Service, the collection of audit log data is agentless. These are the required components in order to receive the full protection offered by Microsoft Defender for Containers:
Kubernetes audit logsâAWS accountâs CloudWatchenables, and collects audit log data through an agentless collector, and sends the collected information to the Microsoft Defender for Cloud backend for further analysis.
Azure Arc-enabled Kubernetes- Azure Arc-enabled Kubernetes - A sensor based solution, installed on one node in the cluster, that connects your clusters to Defender for Cloud. Defender for Cloud is then able to deploy the following two agents asArc extensions:
Defender sensor: The DaemonSet that is deployed on each node, collects signals from hosts usingeBPF technology, and provides runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace. The Defender sensor is deployed as an Arc-enabled Kubernetes extension.
Azure Policy for Kubernetes:  A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. The Azure Policy for Kubernetes pod is deployed as an Arc-enabled Kubernetes extension. It's only installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.

How does agentless discovery for Kubernetes in AWS work?
The discovery process is based on snapshots taken at intervals:
When you enable the agentless discovery for Kubernetes extension, the following process occurs:
Create:The Defender for Cloud roleMDCContainersAgentlessDiscoveryK8sRolemust be added to theaws-auth ConfigMapof the EKS clusters. The name can be customized.
Create:
The Defender for Cloud roleMDCContainersAgentlessDiscoveryK8sRolemust be added to theaws-auth ConfigMapof the EKS clusters. The name can be customized.
Assign: Defender for Cloud assigns theMDCContainersAgentlessDiscoveryK8sRolerole the following permissions:eks:UpdateClusterConfigeks:DescribeCluster
Assign: Defender for Cloud assigns theMDCContainersAgentlessDiscoveryK8sRolerole the following permissions:
eks:UpdateClusterConfig
eks:UpdateClusterConfig
eks:DescribeCluster
eks:DescribeCluster
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the EKS clusters in your environment using API calls to the API server of EKS.
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the EKS clusters in your environment using API calls to the API server of EKS.
Note
The copied snapshot remains in the same region as the cluster.
Architecture diagram of Defender for Cloud and GKE clusters
When Defender for Cloud protects a cluster hosted in Google Kubernetes Engine, the collection of audit log data is agentless. These are the required components in order to receive the full protection offered by Microsoft Defender for Containers:
Kubernetes audit logsâGCP Cloud Loggingenables, and collects audit log data through an agentless collector, and sends the collected information to the Microsoft Defender for Cloud backend for further analysis.
Kubernetes audit logsâGCP Cloud Loggingenables, and collects audit log data through an agentless collector, and sends the collected information to the Microsoft Defender for Cloud backend for further analysis.
Azure Arc-enabled Kubernetes- Azure Arc-enabled Kubernetes - A sensor based solution, installed on one node in the cluster, that enables your clusters to connect to Defender for Cloud. Defender for Cloud is then able to deploy the following two agents asArc extensions:
Azure Arc-enabled Kubernetes- Azure Arc-enabled Kubernetes - A sensor based solution, installed on one node in the cluster, that enables your clusters to connect to Defender for Cloud. Defender for Cloud is then able to deploy the following two agents asArc extensions:
Defender sensor: The DaemonSet that is deployed on each node, collects signals from hosts usingeBPF technology, and provides runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace.
Defender sensor: The DaemonSet that is deployed on each node, collects signals from hosts usingeBPF technology, and provides runtime protection. The sensor is registered with a Log Analytics workspace, and used as a data pipeline. However, the audit log data isn't stored in the Log Analytics workspace.
Azure Policy for Kubernetes:  A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. The Azure Policy for Kubernetes pod is deployed as an Arc-enabled Kubernetes extension. It only needs to be installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.
Azure Policy for Kubernetes:  A pod that extends the open-sourceGatekeeperâ¯v3â¯and registers as a web hook to Kubernetes admission control making it possible to apply at-scale enforcements, and safeguards on your clusters in a centralized, consistent manner. The Azure Policy for Kubernetes pod is deployed as an Arc-enabled Kubernetes extension. It only needs to be installed on one node in the cluster. For more information, seeProtect your Kubernetes workloadsandUnderstand Azure Policy for Kubernetes clusters.

How does agentless discovery for Kubernetes in GCP work?
The discovery process is based on snapshots taken at intervals:
When you enable the agentless discovery for Kubernetes extension, the following process occurs:
Create:The service accountmdc-containers-k8s-operatoris created. The name can be customized.
Create:
The service accountmdc-containers-k8s-operatoris created. The name can be customized.
Assign: Defender for Cloud attaches the following roles to the service accountmdc-containers-k8s-operator:The custom roleMDCGkeClusterWriteRole, which has thecontainer.clusters.updatepermissionThe built-in rolecontainer.viewer
Assign: Defender for Cloud attaches the following roles to the service accountmdc-containers-k8s-operator:
The custom roleMDCGkeClusterWriteRole, which has thecontainer.clusters.updatepermission
MDCGkeClusterWriteRole
container.clusters.update
The built-in rolecontainer.viewer
container.viewer
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the GKE clusters in your environment using API calls to the API server of GKE.
Discover: Using the system assigned identity, Defender for Cloud performs a discovery of the GKE clusters in your environment using API calls to the API server of GKE.
Note
The copied snapshot remains in the same region as the cluster.
Next steps
In this overview, you learned about the architecture of container security in Microsoft Defender for Cloud. To enable the plan, see:
Enable Defender for Containers
Feedback
Was this page helpful?
Additional resources