Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable Application Insights for ASP.NET Core applications
Article
2023-10-11
3 contributors
In this article
This article describes how to enable Application Insights for anASP.NET Coreapplication deployed as an Azure Web App. This implementation uses an SDK-based approach. Anautoinstrumentation approachis also available.
Application Insights can collect the following telemetry from your ASP.NET Core application:
Requests
Dependencies
Exceptions
Performance counters
Heartbeats
Logs
For a sample application, we'll use anASP.NET Core MVC applicationthat targetsnet6.0. However, you can apply these instructions to all ASP.NET Core applications. If you're using theWorker Service, use the instructions fromhere.
net6.0
Note
AnOpenTelemetry-based .NET offeringis available.Learn more.
Note
On March 31, 2025, support for instrumentation key ingestion will end. Instrumentation key ingestion will continue to work, but we'll no longer provide updates or support for the feature.Transition to connection stringsto take advantage ofnew capabilities.
Supported scenarios
TheApplication Insights SDK for ASP.NET Corecan monitor your applications no matter where or how they run. If your application is running and has network connectivity to Azure, Application Insights can collect telemetry from it. Application Insights monitoring is supported everywhere .NET Core is supported. The following scenarios are supported:
Operating system: Windows, Linux, or Mac
Hosting method: In process or out of process
Deployment method: Framework dependent or self-contained
Web server: Internet Information Server (IIS) or Kestrel
Hosting platform: The Web Apps feature of Azure App Service, Azure VM, Docker, Azure Kubernetes Service (AKS), and so on
.NET Core version: All officiallysupported .NET Core versionsthat aren't in preview
IDE: Visual Studio, Visual Studio Code, or command line
Prerequisites
To complete this tutorial, you need:
Visual Studio 2022
The following Visual Studio workloads:ASP.NET and web developmentData storage and processingAzure development
ASP.NET and web development
Data storage and processing
Azure development
.NET 6.0
Azure subscription and user account (with the ability to create and delete resources)
Deploy Azure resources
Please follow theguidance to deploy the sample application from its GitHub repository..
In order to provide globally unique names to resources, a six-character suffix is assigned to some resources. Please make note of this suffix for use later on in this article.

Create an Application Insights resource
In theAzure portal, select theapplication-insights-azure-caferesource group.
In theAzure portal, select theapplication-insights-azure-caferesource group.
From the top toolbar menu, select+ Create.
From the top toolbar menu, select+ Create.

On theCreate a resourcescreen, search for and selectApplication Insightsin the marketplace search textbox.Screenshot of the Create a resource screen in the Azure portal. The screenshot shows a search for Application Insights highlighted and Application Insights displaying in the search results, which is also highlighted.
On theCreate a resourcescreen, search for and selectApplication Insightsin the marketplace search textbox.

Screenshot of the Create a resource screen in the Azure portal. The screenshot shows a search for Application Insights highlighted and Application Insights displaying in the search results, which is also highlighted.

On the Application Insights resource overview screen, selectCreate.
On the Application Insights resource overview screen, selectCreate.

On the Application Insights screen,Basicstab, complete the form by using the following table, then select theReview + createbutton. Fields not specified in the table below may retain their default values.FieldValueNameEnterazure-cafe-application-insights-{SUFFIX}, replacing{SUFFIX}with the appropriate suffix value recorded earlier.RegionSelect the same region chosen when deploying the article resources.Log Analytics WorkspaceSelectazure-cafe-log-analytics-workspace. Alternatively, you can create a new log analytics workspace.
On the Application Insights screen,Basicstab, complete the form by using the following table, then select theReview + createbutton. Fields not specified in the table below may retain their default values.
azure-cafe-application-insights-{SUFFIX}

Once validation has passed, selectCreateto deploy the resource.
Once validation has passed, selectCreateto deploy the resource.

Once the resource is deployed, return to theapplication-insights-azure-caferesource group, and select the Application Insights resource you deployed.
Once the resource is deployed, return to theapplication-insights-azure-caferesource group, and select the Application Insights resource you deployed.
application-insights-azure-cafe

On the Overview screen of the Application Insights resource, select theCopy to clipboardbutton to copy the connection string value. You will use the connection string value in the next section of this article.Screenshot of the Application Insights Overview screen in the Azure portal. The screenshot shows the connection string value highlighted and the Copy to clipboard button selected and highlighted.
On the Overview screen of the Application Insights resource, select theCopy to clipboardbutton to copy the connection string value. You will use the connection string value in the next section of this article.

Screenshot of the Application Insights Overview screen in the Azure portal. The screenshot shows the connection string value highlighted and the Copy to clipboard button selected and highlighted.

Configure the Application Insights connection string application setting in the web App Service
Return to theapplication-insights-azure-caferesource group and open theazure-cafe-web-{SUFFIX}App Service resource.
Return to theapplication-insights-azure-caferesource group and open theazure-cafe-web-{SUFFIX}App Service resource.
application-insights-azure-cafe

From the left menu, under the Settings section, selectConfiguration. Then, on theApplication settingstab, select+ New application settingbeneath the Application settings header.Screenshot of the App Service resource screen in the Azure portal. The screenshot shows Configuration in the left menu under the Settings section selected and highlighted, the Application settings tab selected and highlighted, and the + New application setting toolbar button highlighted.
From the left menu, under the Settings section, selectConfiguration. Then, on theApplication settingstab, select+ New application settingbeneath the Application settings header.

Screenshot of the App Service resource screen in the Azure portal. The screenshot shows Configuration in the left menu under the Settings section selected and highlighted, the Application settings tab selected and highlighted, and the + New application setting toolbar button highlighted.

In the Add/Edit application setting pane, complete the form as follows and selectOK.FieldValueNameAPPLICATIONINSIGHTS_CONNECTION_STRINGValuePaste the Application Insights connection string value you copied in the preceding section.
In the Add/Edit application setting pane, complete the form as follows and selectOK.

On the App Service Configuration screen, select theSavebutton from the toolbar menu. When prompted to save the changes, selectContinue.
On the App Service Configuration screen, select theSavebutton from the toolbar menu. When prompted to save the changes, selectContinue.

Install the Application Insights NuGet Package
We need to configure the ASP.NET Core MVC web application to send telemetry. This is accomplished using theApplication Insights for ASP.NET Core web applications NuGet package.
In Visual Studio, open1 - Starter Application\src\AzureCafe.sln.
In Visual Studio, open1 - Starter Application\src\AzureCafe.sln.
1 - Starter Application\src\AzureCafe.sln
In the Visual Studio Solution Explorer panel, right-click on the AzureCafe project file and selectManage NuGet Packages.
In the Visual Studio Solution Explorer panel, right-click on the AzureCafe project file and selectManage NuGet Packages.

Select theBrowsetab and then search for and selectMicrosoft.ApplicationInsights.AspNetCore. SelectInstall, and accept the license terms. It is recommended you use the latest stable version. For the full release notes for the SDK, see theopen-source GitHub repo.Screenshot that shows the NuGet Package Manager user interface in Visual Studio with the Browse tab selected. Microsoft.ApplicationInsights.AspNetCore is entered in the search box, and the Microsoft.ApplicationInsights.AspNetCore package is selected from a list of results. In the right pane, the latest stable version of the Microsoft.ApplicationInsights.AspNetCore package is selected from a drop down list and the Install button is highlighted.Keep Visual Studio open for the next section of the article.
Select theBrowsetab and then search for and selectMicrosoft.ApplicationInsights.AspNetCore. SelectInstall, and accept the license terms. It is recommended you use the latest stable version. For the full release notes for the SDK, see theopen-source GitHub repo.

Screenshot that shows the NuGet Package Manager user interface in Visual Studio with the Browse tab selected. Microsoft.ApplicationInsights.AspNetCore is entered in the search box, and the Microsoft.ApplicationInsights.AspNetCore package is selected from a list of results. In the right pane, the latest stable version of the Microsoft.ApplicationInsights.AspNetCore package is selected from a drop down list and the Install button is highlighted.

Keep Visual Studio open for the next section of the article.
Enable Application Insights server-side telemetry
The Application Insights for ASP.NET Core web applications NuGet package encapsulates features to enable sending server-side telemetry to the Application Insights resource in Azure.
From the Visual Studio Solution Explorer, open theProgram.csfile.
From the Visual Studio Solution Explorer, open theProgram.csfile.

Insert the following code prior to thebuilder.Services.AddControllersWithViews()statement. This code automatically reads the Application Insights connection string value from configuration. TheAddApplicationInsightsTelemetrymethod registers theApplicationInsightsLoggerProviderwith the built-in dependency injection container that will then be used to fulfillILoggerandILogger<TCategoryName>implementation requests.builder.Services.AddApplicationInsightsTelemetry();TipLearn more about theconfiguration options in ASP.NET Core.
Insert the following code prior to thebuilder.Services.AddControllersWithViews()statement. This code automatically reads the Application Insights connection string value from configuration. TheAddApplicationInsightsTelemetrymethod registers theApplicationInsightsLoggerProviderwith the built-in dependency injection container that will then be used to fulfillILoggerandILogger<TCategoryName>implementation requests.
builder.Services.AddControllersWithViews()
AddApplicationInsightsTelemetry
ApplicationInsightsLoggerProvider
builder.Services.AddApplicationInsightsTelemetry();
builder.Services.AddApplicationInsightsTelemetry();

Tip
Learn more about theconfiguration options in ASP.NET Core.
Enable client-side telemetry for web applications
The preceding steps are enough to help you start collecting server-side telemetry. The sample application has client-side components. Follow the next steps to start collectingusage telemetry.
In Visual Studio Solution Explorer, open\Views\_ViewImports.cshtml.
In Visual Studio Solution Explorer, open\Views\_ViewImports.cshtml.
\Views\_ViewImports.cshtml
Add the following code at the end of the existing file.@inject Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet
Add the following code at the end of the existing file.
@inject Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet
@inject Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet

To properly enable client-side monitoring for your application, in Visual Studio Solution Explorer, open\Views\Shared\_Layout.cshtmland insert the following code immediately before the closing<\head>tag. This JavaScript snippet must be inserted in the<head>section of each page of your application that you want to monitor.@Html.Raw(JavaScriptSnippet.FullScript)TipAn alternative to usingFullScriptisScriptBody. UseScriptBodyif you need to control the<script>tag to set a Content Security Policy:<script> // apply custom changes to this script tag.
    @Html.Raw(JavaScriptSnippet.ScriptBody)
</script>
To properly enable client-side monitoring for your application, in Visual Studio Solution Explorer, open\Views\Shared\_Layout.cshtmland insert the following code immediately before the closing<\head>tag. This JavaScript snippet must be inserted in the<head>section of each page of your application that you want to monitor.
\Views\Shared\_Layout.cshtml
<\head>
<head>
@Html.Raw(JavaScriptSnippet.FullScript)
@Html.Raw(JavaScriptSnippet.FullScript)

Tip
An alternative to usingFullScriptisScriptBody. UseScriptBodyif you need to control the<script>tag to set a Content Security Policy:
FullScript
ScriptBody
ScriptBody
<script>
<script> // apply custom changes to this script tag.
    @Html.Raw(JavaScriptSnippet.ScriptBody)
</script>
<script> // apply custom changes to this script tag.
    @Html.Raw(JavaScriptSnippet.ScriptBody)
</script>
Note
JavaScript injection provides a default configuration experience. If you requireconfigurationbeyond setting the connection string, you are required to remove auto-injection as described above and manually add theJavaScript SDK.
Enable monitoring of database queries
When investigating causes for performance degradation, it is important to include insights into database calls. You enable monitoring by configuring thedependency module. Dependency monitoring, including SQL, is enabled by default.
Follow these steps to capture the full SQL query text.
Note
SQL text may contain sensitive data such as passwords and PII. Be careful when enabling this feature.
From the Visual Studio Solution Explorer, open theProgram.csfile.
From the Visual Studio Solution Explorer, open theProgram.csfile.
At the top of the file, add the followingusingstatement.using Microsoft.ApplicationInsights.DependencyCollector;
At the top of the file, add the followingusingstatement.
using
using Microsoft.ApplicationInsights.DependencyCollector;
using Microsoft.ApplicationInsights.DependencyCollector;
To enable SQL command text instrumentation, insert the following code immediately after thebuilder.Services.AddApplicationInsightsTelemetry()code.builder.Services.ConfigureTelemetryModule<DependencyTrackingTelemetryModule>((module, o) => { module.EnableSqlCommandTextInstrumentation = true; });
To enable SQL command text instrumentation, insert the following code immediately after thebuilder.Services.AddApplicationInsightsTelemetry()code.
builder.Services.AddApplicationInsightsTelemetry()
builder.Services.ConfigureTelemetryModule<DependencyTrackingTelemetryModule>((module, o) => { module.EnableSqlCommandTextInstrumentation = true; });
builder.Services.ConfigureTelemetryModule<DependencyTrackingTelemetryModule>((module, o) => { module.EnableSqlCommandTextInstrumentation = true; });

Run the Azure Cafe web application
After you deploy the web application code, telemetry will flow to Application Insights. The Application Insights SDK automatically collects incoming web requests to your application.
From the Visual Studio Solution Explorer, right-click on theAzureCafeproject and selectPublishfrom the context menu.
From the Visual Studio Solution Explorer, right-click on theAzureCafeproject and selectPublishfrom the context menu.

SelectPublishto promote the new code to the Azure App Service.When the Azure Cafe web application is successfully published, a new browser window opens to the Azure Cafe web application.
SelectPublishto promote the new code to the Azure App Service.

When the Azure Cafe web application is successfully published, a new browser window opens to the Azure Cafe web application.

To generate some telemetry, follow these steps in the web application to add a review.To view a cafe's menu and reviews, selectDetailsnext to a cafe.To view and add reviews, on the Cafe screen, select theReviewstab. Select theAdd reviewbutton to add a review.On the Create a review dialog, enter a name, rating, comments, and upload a photo for the review. When finished, selectAdd review.If you need to generate additional telemetry, add additional reviews.
To generate some telemetry, follow these steps in the web application to add a review.
To view a cafe's menu and reviews, selectDetailsnext to a cafe.
To view a cafe's menu and reviews, selectDetailsnext to a cafe.

To view and add reviews, on the Cafe screen, select theReviewstab. Select theAdd reviewbutton to add a review.
To view and add reviews, on the Cafe screen, select theReviewstab. Select theAdd reviewbutton to add a review.

On the Create a review dialog, enter a name, rating, comments, and upload a photo for the review. When finished, selectAdd review.
On the Create a review dialog, enter a name, rating, comments, and upload a photo for the review. When finished, selectAdd review.

If you need to generate additional telemetry, add additional reviews.
If you need to generate additional telemetry, add additional reviews.
Live metrics
You can useLive Metricsto quickly verify if Application Insights monitoring is configured correctly. Live Metrics shows CPU usage of the running process in near real time. It can also show other telemetry such as Requests, Dependencies, and Traces. Note that it might take a few minutes for the telemetry to appear in the portal and analytics.
Viewing the application map
The sample application makes calls to multiple Azure resources, including Azure SQL, Azure Blob Storage, and the Azure Language Service (for review sentiment analysis).

Application Insights introspects the incoming telemetry data and is able to generate a visual map of the system integrations it detects.
Sign in to theAzure portal.
Sign in to theAzure portal.
Open the resource group for the sample application, which isapplication-insights-azure-cafe.
Open the resource group for the sample application, which isapplication-insights-azure-cafe.
application-insights-azure-cafe
From the list of resources, select theazure-cafe-insights-{SUFFIX}Application Insights resource.
From the list of resources, select theazure-cafe-insights-{SUFFIX}Application Insights resource.
azure-cafe-insights-{SUFFIX}
From the left menu, beneath theInvestigateheading, selectApplication map. Observe the generated Application map.
From the left menu, beneath theInvestigateheading, selectApplication map. Observe the generated Application map.

Viewing HTTP calls and database SQL command text
In the Azure portal, open the Application Insights resource.
In the Azure portal, open the Application Insights resource.
On the left menu, beneath theInvestigateheader, selectPerformance.
On the left menu, beneath theInvestigateheader, selectPerformance.
TheOperationstab contains details of the HTTP calls received by the application. To toggle between Server and Browser (client-side) views of the data, use the Server/Browser toggle.Screenshot of the Application Insights Performance screen in the Azure portal. The screenshot shows the Server/Browser toggle and HTTP calls received by the application highlighted.
TheOperationstab contains details of the HTTP calls received by the application. To toggle between Server and Browser (client-side) views of the data, use the Server/Browser toggle.

Screenshot of the Application Insights Performance screen in the Azure portal. The screenshot shows the Server/Browser toggle and HTTP calls received by the application highlighted.

Select an Operation from the table, and choose to drill into a sample of the request.Screenshot of the Application Insights Performance screen in the Azure portal. The screenshot shows a POST operation and a sample operation from the suggested list selected and highlighted and the Drill into samples button is highlighted.The end-to-end transaction displays for the selected request. In this case, a review was created, including an image, so it includes calls to Azure Storage and the Language Service (for sentiment analysis). It also includes database calls into SQL Azure to persist the review. In this example, the first selected Event displays information relative to the HTTP POST call.
Select an Operation from the table, and choose to drill into a sample of the request.

Screenshot of the Application Insights Performance screen in the Azure portal. The screenshot shows a POST operation and a sample operation from the suggested list selected and highlighted and the Drill into samples button is highlighted.

The end-to-end transaction displays for the selected request. In this case, a review was created, including an image, so it includes calls to Azure Storage and the Language Service (for sentiment analysis). It also includes database calls into SQL Azure to persist the review. In this example, the first selected Event displays information relative to the HTTP POST call.

Select a SQL item to review the SQL command text issued to the database.
Select a SQL item to review the SQL command text issued to the database.

Optionally, select the Dependency (outgoing) requests to Azure Storage or the Language Service.
Optionally, select the Dependency (outgoing) requests to Azure Storage or the Language Service.
Return to thePerformancescreen and select theDependenciestab to investigate calls into external resources. Notice the Operations table includes calls into Sentiment Analysis, Blob Storage, and Azure SQL.
Return to thePerformancescreen and select theDependenciestab to investigate calls into external resources. Notice the Operations table includes calls into Sentiment Analysis, Blob Storage, and Azure SQL.

Application logging with Application Insights
Logging overview
Application Insights is one type oflogging provideravailable to ASP.NET Core applications that becomes available to applications when theApplication Insights for ASP.NET CoreNuGet package is installed andserver-side telemetry collection is enabled.
As a reminder, the following code inProgram.csregisters theApplicationInsightsLoggerProviderwith the built-in dependency injection container.
ApplicationInsightsLoggerProvider
builder.Services.AddApplicationInsightsTelemetry();
builder.Services.AddApplicationInsightsTelemetry();
With theApplicationInsightsLoggerProviderregistered as the logging provider, the app is ready to log into Application Insights by using either constructor injection withILoggeror the generic-type alternativeILogger<TCategoryName>.
ApplicationInsightsLoggerProvider
Note
By default, the logging provider is configured to automatically capture log events with a severity ofLogLevel.Warningor greater.
Consider the following example controller. It demonstrates the injection of ILogger, which is resolved with theApplicationInsightsLoggerProviderthat is registered with the dependency injection container. Observe in theGetmethod that an Informational, Warning, and Error message are recorded.
ApplicationInsightsLoggerProvider
Note
By default, the Information level trace will not be recorded. Only the Warning and above levels are captured.
using Microsoft.AspNetCore.Mvc;

[Route("api/[controller]")]
[ApiController]
public class ValuesController : ControllerBase
{
    private readonly ILogger _logger;

    public ValuesController(ILogger<ValuesController> logger)
    {
        _logger = logger;
    }

    [HttpGet]
    public ActionResult<IEnumerable<string>> Get()
    {
        //Info level traces are not captured by default
        _logger.LogInformation("An example of an Info trace..");
        _logger.LogWarning("An example of a Warning trace..");
        _logger.LogError("An example of an Error level message");

        return new string[] { "value1", "value2" };
    }
}
using Microsoft.AspNetCore.Mvc;

[Route("api/[controller]")]
[ApiController]
public class ValuesController : ControllerBase
{
    private readonly ILogger _logger;

    public ValuesController(ILogger<ValuesController> logger)
    {
        _logger = logger;
    }

    [HttpGet]
    public ActionResult<IEnumerable<string>> Get()
    {
        //Info level traces are not captured by default
        _logger.LogInformation("An example of an Info trace..");
        _logger.LogWarning("An example of a Warning trace..");
        _logger.LogError("An example of an Error level message");

        return new string[] { "value1", "value2" };
    }
}
For more information, seeLogging in ASP.NET Core.
View logs in Application Insights
The ValuesController above is deployed with the sample application and is located in theControllersfolder of the project.
Using an internet browser, open the sample application. In the address bar, append/api/Valuesand pressEnter.
Using an internet browser, open the sample application. In the address bar, append/api/Valuesand pressEnter.
/api/Values

In theAzure portal, wait a few moments and then select theazure-cafe-insights-{SUFFIX}Application Insights resource.
In theAzure portal, wait a few moments and then select theazure-cafe-insights-{SUFFIX}Application Insights resource.

From the left menu of the Application Insights resource, under theMonitoringsection, selectLogs.
From the left menu of the Application Insights resource, under theMonitoringsection, selectLogs.
In theTablespane, under theApplication Insightstree, double-click on thetracestable.
In theTablespane, under theApplication Insightstree, double-click on thetracestable.
Modify the query to retrieve traces for theValuescontroller as follows, then selectRunto filter the results.traces 
| where operation_Name == "GET Values/Get"The results display the logging messages present in the controller. A log severity of 2 indicates a warning level, and a log severity of 3 indicates an Error level.
Modify the query to retrieve traces for theValuescontroller as follows, then selectRunto filter the results.
traces 
| where operation_Name == "GET Values/Get"
traces 
| where operation_Name == "GET Values/Get"
The results display the logging messages present in the controller. A log severity of 2 indicates a warning level, and a log severity of 3 indicates an Error level.
Alternatively, you can also write the query to retrieve results based on the category of the log. By default, the category is the fully qualified name of the class where the ILogger is injected. In this case, the category name isValuesController(if there is a namespace associated with the class, the name will be prefixed with the namespace). Re-write and run the following query to retrieve results based on category.traces 
| where customDimensions.CategoryName == "ValuesController"
Alternatively, you can also write the query to retrieve results based on the category of the log. By default, the category is the fully qualified name of the class where the ILogger is injected. In this case, the category name isValuesController(if there is a namespace associated with the class, the name will be prefixed with the namespace). Re-write and run the following query to retrieve results based on category.
traces 
| where customDimensions.CategoryName == "ValuesController"
traces 
| where customDimensions.CategoryName == "ValuesController"
Control the level of logs sent to Application Insights
ILoggerimplementations have a built-in mechanism to applylog filtering. This filtering lets you control the logs that are sent to each registered provider, including the Application Insights provider. You can use the filtering either in configuration (using anappsettings.jsonfile) or in code. For more information about log levels and guidance on how to use them appropriately, see theLog Leveldocumentation.
ILogger
The following examples show how to apply filter rules to theApplicationInsightsLoggerProviderto control the level of logs sent to Application Insights.
ApplicationInsightsLoggerProvider
Create filter rules with configuration
TheApplicationInsightsLoggerProvideris aliased asApplicationInsightsin configuration. The following section of anappsettings.jsonfile sets the default log level for all providers toLogLevel.Warning. The configuration for the ApplicationInsights provider, specifically for categories that start with "ValuesController," overrides this default value withLogLevel.Errorand higher.
ApplicationInsightsLoggerProvider
{
  //... additional code removed for brevity
  "Logging": {
    "LogLevel": { // No provider, LogLevel applies to all the enabled providers.
      "Default": "Warning"
    },
    "ApplicationInsights": { // Specific to the provider, LogLevel applies to the Application Insights provider.
      "LogLevel": {
        "ValuesController": "Error" //Log Level for the "ValuesController" category
      }
    }
  }
}
{
  //... additional code removed for brevity
  "Logging": {
    "LogLevel": { // No provider, LogLevel applies to all the enabled providers.
      "Default": "Warning"
    },
    "ApplicationInsights": { // Specific to the provider, LogLevel applies to the Application Insights provider.
      "LogLevel": {
        "ValuesController": "Error" //Log Level for the "ValuesController" category
      }
    }
  }
}
Deploying the sample application with the preceding code inappsettings.jsonwill yield only the error trace being sent to Application Insights when interacting with theValuesController. This is because theLogLevelfor theValuesControllercategory is set toError. Therefore, theWarningtrace is suppressed.
Turn off logging to Application Insights
To disable logging by using configuration, set all LogLevel values to "None".
{
  //... additional code removed for brevity
  "Logging": {
    "LogLevel": { // No provider, LogLevel applies to all the enabled providers.
      "Default": "None"
    },
    "ApplicationInsights": { // Specific to the provider, LogLevel applies to the Application Insights provider.
      "LogLevel": {
        "ValuesController": "None" //Log Level for the "ValuesController" category
      }
    }
  }
}
{
  //... additional code removed for brevity
  "Logging": {
    "LogLevel": { // No provider, LogLevel applies to all the enabled providers.
      "Default": "None"
    },
    "ApplicationInsights": { // Specific to the provider, LogLevel applies to the Application Insights provider.
      "LogLevel": {
        "ValuesController": "None" //Log Level for the "ValuesController" category
      }
    }
  }
}
Similarly, within the code, set the default level for theApplicationInsightsLoggerProviderand any subsequent log levels toNone.
ApplicationInsightsLoggerProvider
var builder = WebApplication.CreateBuilder(args);
builder.Logging.AddFilter<ApplicationInsightsLoggerProvider>("", LogLevel.None);
builder.Logging.AddFilter<Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLoggerProvider>("ValuesController", LogLevel.None);
var builder = WebApplication.CreateBuilder(args);
builder.Logging.AddFilter<ApplicationInsightsLoggerProvider>("", LogLevel.None);
builder.Logging.AddFilter<Microsoft.Extensions.Logging.ApplicationInsights.ApplicationInsightsLoggerProvider>("ValuesController", LogLevel.None);
Open-source SDK
Read and contribute to the code.
For the latest updates and bug fixes, see therelease notes.
Next steps
Explore user flowsto understand how users navigate through your app.
Configure a snapshot collectionto see the state of source code and variables at the moment an exception is thrown.
Use the APIto send your own events and metrics for a detailed view of your app's performance and usage.
Availability overview
Dependency Injection in ASP.NET Core
Logging in ASP.NET Core
.NET trace logs in Application Insights
Autoinstrumentation for Application Insights
Additional resources