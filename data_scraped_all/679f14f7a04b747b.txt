Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Timer trigger for Azure Functions
Article
2024-02-19
53 contributors
In this article
This article explains how to work with timer triggers in Azure Functions. A timer trigger lets you run a function on a schedule.
This is reference information for Azure Functions developers. If you're new to Azure Functions, start with the following resources:
Azure Functions developer reference
Create your first function
Create your first function
C# developer references:In-process class libraryIsolated worker process class libraryC# script
C# developer references:
In-process class library
Isolated worker process class library
C# script
Create your first function
Create your first function
JavaScript developer reference
JavaScript developer reference
Create your first function
Create your first function
TypeScript developer reference
TypeScript developer reference
Create your first function
Create your first function
Java developer reference
Java developer reference
Create your first function
Create your first function
Python developer reference
Python developer reference
Create your first function
Create your first function
PowerShell developer reference
PowerShell developer reference
Azure Functions triggers and bindings concepts
Azure Functions triggers and bindings concepts
Code and test Azure Functions locally
Code and test Azure Functions locally
For information on how to manually run a timer-triggered function, seeManually run a non HTTP-triggered function.
Support for this binding is automatically provided in all development environments. You don't have to manually install the package or register the extension.
Source code for the timer extension package is in theazure-webjobs-sdk-extensionsGitHub repository.
Important
This article uses tabs to support multiple versions of the Node.js programming model. The v4 model is generally available and is designed to have a more flexible and intuitive experience for JavaScript and TypeScript developers. For more details about how the v4 model works, refer to theAzure Functions Node.js developer guide. To learn more about the differences between v3 and v4, refer to themigration guide.
Azure Functions supports two programming models for Python. The way that you define your bindings depends on your chosen programming model.
v2
v1
The Python v2 programming model lets you define bindings using decorators directly in your Python function code. For more information, see thePython developer guide.
The Python v1 programming model requires you to define bindings in a separatefunction.jsonfile in the function folder. For more information, see thePython developer guide.
This article supports both programming models.
Example
This example shows a C# function that executes each time the minutes have a value divisible by five. For example, when the function starts at 18:55:00, the next execution is at 19:00:00. ATimerInfoobject is passed to the function.
TimerInfo
A C# function can be created by using one of the following C# modes:
Isolated worker model: Compiled C# function that runs in a worker process that's isolated from the runtime. Isolated worker process is required to support C# functions running on LTS and non-LTS versions .NET and the .NET Framework. Extensions for isolated worker process functions useMicrosoft.Azure.Functions.Worker.Extensions.*namespaces.
Microsoft.Azure.Functions.Worker.Extensions.*
In-process model: Compiled C# function that runs in the same process as the Functions runtime. In a variation of this model, Functions can be run usingC# scripting, which is supported primarily for C# portal editing. Extensions for in-process functions useMicrosoft.Azure.WebJobs.Extensions.*namespaces.
Microsoft.Azure.WebJobs.Extensions.*
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Isolated worker model
In-process model
//<docsnippet_fixed_delay_retry_example>
[Function(nameof(TimerFunction))]
[FixedDelayRetry(5, "00:00:10")]
public static void Run([TimerTrigger("0 */5 * * * *")] TimerInfo timerInfo,
    FunctionContext context)
{
    var logger = context.GetLogger(nameof(TimerFunction));
//<docsnippet_fixed_delay_retry_example>
[Function(nameof(TimerFunction))]
[FixedDelayRetry(5, "00:00:10")]
public static void Run([TimerTrigger("0 */5 * * * *")] TimerInfo timerInfo,
    FunctionContext context)
{
    var logger = context.GetLogger(nameof(TimerFunction));
[FunctionName("TimerTriggerCSharp")]
public static void Run([TimerTrigger("0 */5 * * * *")]TimerInfo myTimer, ILogger log)
{
    if (myTimer.IsPastDue)
    {
        log.LogInformation("Timer is running late!");
    }
    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
}
[FunctionName("TimerTriggerCSharp")]
public static void Run([TimerTrigger("0 */5 * * * *")]TimerInfo myTimer, ILogger log)
{
    if (myTimer.IsPastDue)
    {
        log.LogInformation("Timer is running late!");
    }
    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
}
The following example function triggers and executes every five minutes. The@TimerTriggerannotation on the function defines the schedule using the same string format asCRON expressions.
@TimerTrigger
@FunctionName("keepAlive")
public void keepAlive(
  @TimerTrigger(name = "keepAliveTrigger", schedule = "0 */5 * * * *") String timerInfo,
      ExecutionContext context
 ) {
     // timeInfo is a JSON string, you can deserialize it to an object using your favorite JSON library
     context.getLogger().info("Timer is triggered: " + timerInfo);
}
@FunctionName("keepAlive")
public void keepAlive(
  @TimerTrigger(name = "keepAliveTrigger", schedule = "0 */5 * * * *") String timerInfo,
      ExecutionContext context
 ) {
     // timeInfo is a JSON string, you can deserialize it to an object using your favorite JSON library
     context.getLogger().info("Timer is triggered: " + timerInfo);
}
The following example shows a timer trigger binding and function code that uses the binding, where an instance representing the timer is passed to the function. The function writes a log indicating whether this function invocation is due to a missed schedule occurrence. The example depends on whether you use thev1 or v2 Python programming model.
v2
v1
import datetime
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="mytimer")
@app.timer_trigger(schedule="0 */5 * * * *", 
              arg_name="mytimer",
              run_on_startup=True) 
def test_function(mytimer: func.TimerRequest) -> None:
    utc_timestamp = datetime.datetime.utcnow().replace(
        tzinfo=datetime.timezone.utc).isoformat()
    if mytimer.past_due:
        logging.info('The timer is past due!')
    logging.info('Python timer trigger function ran at %s', utc_timestamp)
import datetime
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="mytimer")
@app.timer_trigger(schedule="0 */5 * * * *", 
              arg_name="mytimer",
              run_on_startup=True) 
def test_function(mytimer: func.TimerRequest) -> None:
    utc_timestamp = datetime.datetime.utcnow().replace(
        tzinfo=datetime.timezone.utc).isoformat()
    if mytimer.past_due:
        logging.info('The timer is past due!')
    logging.info('Python timer trigger function ran at %s', utc_timestamp)
Here's the binding data in thefunction.jsonfile:
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
Here's the Python code, where the object passed into the function is of typeazure.functions.TimerRequest object.
import datetime
import logging

import azure.functions as func


def main(mytimer: func.TimerRequest) -> None:
    utc_timestamp = datetime.datetime.now(datetime.timezone.utc).isoformat()

    if mytimer.past_due:
        logging.info('The timer is past due!')

    logging.info('Python timer trigger function ran at %s', utc_timestamp)
import datetime
import logging

import azure.functions as func


def main(mytimer: func.TimerRequest) -> None:
    utc_timestamp = datetime.datetime.now(datetime.timezone.utc).isoformat()

    if mytimer.past_due:
        logging.info('The timer is past due!')

    logging.info('Python timer trigger function ran at %s', utc_timestamp)
The following example shows a timer triggerTypeScript function.
Model v4
Model v3
import { app, InvocationContext, Timer } from '@azure/functions';

export async function timerTrigger1(myTimer: Timer, context: InvocationContext): Promise<void> {
    context.log('Timer function processed request.');
}

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    handler: timerTrigger1,
});
import { app, InvocationContext, Timer } from '@azure/functions';

export async function timerTrigger1(myTimer: Timer, context: InvocationContext): Promise<void> {
    context.log('Timer function processed request.');
}

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    handler: timerTrigger1,
});
TypeScript samples are not documented for model v3.
The following example shows a timer triggerJavaScript function.
Model v4
Model v3
const { app } = require('@azure/functions');

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    handler: (myTimer, context) => {
        context.log('Timer function processed request.');
    },
});
const { app } = require('@azure/functions');

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    handler: (myTimer, context) => {
        context.log('Timer function processed request.');
    },
});
Here's the binding data in thefunction.jsonfile:
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
Here's the JavaScript code:
module.exports = async function (context, myTimer) {
    var timeStamp = new Date().toISOString();

    if (myTimer.isPastDue)
    {
        context.log('Node is running late!');
    }
    context.log('Node timer trigger function ran!', timeStamp);   
};
module.exports = async function (context, myTimer) {
    var timeStamp = new Date().toISOString();

    if (myTimer.isPastDue)
    {
        context.log('Node is running late!');
    }
    context.log('Node timer trigger function ran!', timeStamp);   
};
Here's the binding data in thefunction.jsonfile:
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
{
    "schedule": "0 */5 * * * *",
    "name": "myTimer",
    "type": "timerTrigger",
    "direction": "in"
}
The following is the timer function code in the run.ps1 file:
#â¯Inputâ¯bindingsâ¯areâ¯passedâ¯inâ¯viaâ¯paramâ¯block.
param($myTimer)

#â¯Getâ¯theâ¯currentâ¯universalâ¯timeâ¯inâ¯theâ¯defaultâ¯stringâ¯format.
$currentUTCtimeâ¯=â¯(Get-Date).ToUniversalTime()

#â¯Theâ¯'IsPastDue'â¯propertyâ¯isâ¯'true'â¯whenâ¯theâ¯currentâ¯functionâ¯invocationâ¯isâ¯laterâ¯thanâ¯scheduled.
ifâ¯($myTimer.IsPastDue)â¯{
â¯â¯â¯â¯Write-Hostâ¯"PowerShellâ¯timerâ¯isâ¯runningâ¯late!"
}

#â¯Writeâ¯anâ¯informationâ¯logâ¯withâ¯theâ¯currentâ¯time.
Write-Hostâ¯"PowerShellâ¯timerâ¯triggerâ¯functionâ¯ran!â¯TIME:â¯$currentUTCtime"
#â¯Inputâ¯bindingsâ¯areâ¯passedâ¯inâ¯viaâ¯paramâ¯block.
param($myTimer)

#â¯Getâ¯theâ¯currentâ¯universalâ¯timeâ¯inâ¯theâ¯defaultâ¯stringâ¯format.
$currentUTCtimeâ¯=â¯(Get-Date).ToUniversalTime()

#â¯Theâ¯'IsPastDue'â¯propertyâ¯isâ¯'true'â¯whenâ¯theâ¯currentâ¯functionâ¯invocationâ¯isâ¯laterâ¯thanâ¯scheduled.
ifâ¯($myTimer.IsPastDue)â¯{
â¯â¯â¯â¯Write-Hostâ¯"PowerShellâ¯timerâ¯isâ¯runningâ¯late!"
}

#â¯Writeâ¯anâ¯informationâ¯logâ¯withâ¯theâ¯currentâ¯time.
Write-Hostâ¯"PowerShellâ¯timerâ¯triggerâ¯functionâ¯ran!â¯TIME:â¯$currentUTCtime"
Attributes
In-processC# library usesTimerTriggerAttributefromMicrosoft.Azure.WebJobs.Extensionswhereasisolated worker processC# library usesTimerTriggerAttributefromMicrosoft.Azure.Functions.Worker.Extensions.Timerto define the function. C# script instead uses afunction.json configuration file.
Isolated worker model
In-process model
TimeSpan
%ScheduleAppSetting%
true
true
true
false
true
false
TimeSpan
%ScheduleAppSetting%
true
true
true
false
true
false
Decorators
Applies only to the Python v2 programming model.
For Python v2 functions defined using a decorator, the following properties on theschedule:
schedule
arg_name
schedule
TimeSpan
run_on_startup
true
true
use_monitor
true
false
true
false
For Python functions defined by usingfunction.json, see theConfigurationsection.
Annotations
The@TimerTriggerannotation on the function defines thescheduleusing the same string format asCRON expressions. The annotation supports the following settings:
@TimerTrigger
schedule
dataType
name
schedule
Configuration
Applies only to the Python v1 programming model.
Model v4
Model v3
The following table explains the properties that you can set on theoptionsobject passed to theapp.timer()method.
options
app.timer()
TimeSpan
true
true
true
false
true
false
The following table explains the binding configuration properties that you set in thefunction.jsonfile.
TimeSpan
true
true
true
false
true
false
The following table explains the binding configuration properties that you set in thefunction.jsonfile.
TimeSpan
true
true
true
false
true
false
When you're developing locally, add your application settings in thelocal.settings.json filein theValuescollection.
Values
Caution
Don't setrunOnStartuptotruein production. Using this setting makes code execute at highly unpredictable times. In certain production settings, these extra executions can result in significantly higher costs for apps hosted in a Consumption plan. For example, withrunOnStartupenabled the trigger is invoked whenever your function app is scaled. Make sure you fully understand the production behavior of your functions before enablingrunOnStartupin production.
true
See theExample sectionfor complete examples.
Usage
When a timer trigger function is invoked, a timer object is passed into the function. The following JSON is an example representation of the timer object.
{
    "Schedule":{
        "AdjustForDST": true
    },
    "ScheduleStatus": {
        "Last":"2016-10-04T10:15:00+00:00",
        "LastUpdated":"2016-10-04T10:16:00+00:00",
        "Next":"2016-10-04T10:20:00+00:00"
    },
    "IsPastDue":false
}
{
    "Schedule":{
        "AdjustForDST": true
    },
    "ScheduleStatus": {
        "Last":"2016-10-04T10:15:00+00:00",
        "LastUpdated":"2016-10-04T10:16:00+00:00",
        "Next":"2016-10-04T10:20:00+00:00"
    },
    "IsPastDue":false
}
{
    "schedule":{
        "adjustForDST": true
    },
    "scheduleStatus": {
        "last":"2016-10-04T10:15:00+00:00",
        "lastUpdated":"2016-10-04T10:16:00+00:00",
        "next":"2016-10-04T10:20:00+00:00"
    },
    "isPastDue":false
}
{
    "schedule":{
        "adjustForDST": true
    },
    "scheduleStatus": {
        "last":"2016-10-04T10:15:00+00:00",
        "lastUpdated":"2016-10-04T10:16:00+00:00",
        "next":"2016-10-04T10:20:00+00:00"
    },
    "isPastDue":false
}
TheisPastDueproperty istruewhen the current function invocation is later than scheduled. For example, a function app restart might cause an invocation to be missed.
isPastDue
true
NCRONTAB expressions
Azure Functions uses theNCronTablibrary to interpret NCRONTAB expressions. An NCRONTAB expression is similar to a CRON expression except that it includes an additional sixth field at the beginning to use for time precision in seconds:
{second} {minute} {hour} {day} {month} {day-of-week}
{second} {minute} {hour} {day} {month} {day-of-week}
Each field can have one of the following types of values:
0 5 * * * *
*
0 * 5 * * *
-
5-7 * * * * *
,
5,8,10 * * * * *
/
0 */5 * * * *
To specify months or days you can use numeric values, names, or abbreviations of names:
For days, the numeric values are 0 to 6, where 0 starts with Sunday.
Names are in English. For example:Monday,January.
Monday
January
Names are case-insensitive.
Names can be abbreviated. We recommend using three letters for abbreviations. For example:Mon,Jan.
Mon
Jan
Here are some examples of NCRONTAB expressions you can use for the timer trigger in Azure Functions.
0 */5 * * * *
0 0 * * * *
0 0 */2 * * *
0 0 9-17 * * *
0 30 9 * * *
0 30 9 * * 1-5
0 30 9 * Jan Mon
Note
NCRONTAB expression supports bothfive fieldandsix fieldformat. The sixth field position is a value for seconds which is placed at the beginning of the expression.
If the CRON expression is invalid the Azure Portal Function Test will display a 404 error, if Application Insights is connected more details are logged there.
The numbers in an NCRONTAB expression refer to a time and date, not a time span. For example, a 5 in thehourfield refers to 5:00 AM, not every 5 hours.
hour
The default time zone used with the CRON expressions is Coordinated Universal Time (UTC). To have your CRON expression based on another time zone, create an app setting for your function app namedWEBSITE_TIME_ZONE.
WEBSITE_TIME_ZONE
The value of this setting depends on the operating system and plan on which your function app runs.
tzutil.exe /L
Note
WEBSITE_TIME_ZONEandTZare not currently supported when running on Linux in a Consumption or Flex Consumption plan. In this case, settingWEBSITE_TIME_ZONEorTZcan create SSL-related issues and cause metrics to stop working for your app.
WEBSITE_TIME_ZONE
TZ
WEBSITE_TIME_ZONE
TZ
For example, Eastern Time in the US (represented byEastern Standard Time(Windows) orAmerica/New_York(Linux)) currently uses UTC-05:00 during standard time and UTC-04:00 during daylight time. To have a timer trigger fire at 10:00 AM Eastern Time every day, create an app setting for your function app namedWEBSITE_TIME_ZONE, set the value toEastern Standard Time(Windows) orAmerica/New_York(Linux), and then use the following NCRONTAB expression:
Eastern Standard Time
America/New_York
WEBSITE_TIME_ZONE
Eastern Standard Time
America/New_York
"0 0 10 * * *"
"0 0 10 * * *"
When you useWEBSITE_TIME_ZONEthe time is adjusted for time changes in the specific timezone, including daylight saving time and changes in standard time.
WEBSITE_TIME_ZONE
TimeSpan
ATimeSpancan be used only for a function app that runs on an App Service Plan.
TimeSpan
Unlike an NCRONTAB expression, aTimeSpanvalue specifies the time interval between each function invocation. When a function completes after running longer than the specified interval, the timer immediately invokes the function again.
TimeSpan
Expressed as a string, theTimeSpanformat ishh:mm:sswhenhhis less than 24. When the first two digits are 24 or greater, the format isdd:hh:mm. Here are some examples:
TimeSpan
hh:mm:ss
hh
dd:hh:mm
Scale-out
If a function app scales out to multiple instances, only a single instance of a timer-triggered function is run across all instances. It will not trigger again if there is an outstanding invocation still running.
Function apps sharing Storage
If you are sharing storage accounts across function apps that are not deployed to app service, you might need to explicitly assign host ID to each app.
AzureFunctionsWebHost__hostid
id
You can omit the identifying value or manually set each function app's identifying configuration to a different value.
The timer trigger uses a storage lock to ensure that there is only one timer instance when a function app scales out to multiple instances. If two function apps share the same identifying configuration and each uses a timer trigger, only one timer runs.
Retry behavior
Unlike the queue trigger, the timer trigger doesn't retry after a function fails. When a function fails, it isn't called again until the next time on the schedule.
Manually invoke a timer trigger
The timer trigger for Azure Functions provides an HTTP webhook that can be invoked to manually trigger the function. This can be extremely useful in the following scenarios.
Integration testing
Slot swaps as part of a smoke test or warmup activity
Initial deployment of a function to immediately populate a cache or lookup table in a database
Please refer tomanually run a non HTTP-triggered functionfor details on how to manually invoke a timer triggered function.
Troubleshooting
For information about what to do when the timer trigger doesn't work as expected, seeInvestigating and reporting issues with timer triggered functions not firing.
Connections
Timer triggers have an implicit dependency on blob storage, except when run locally through the Azure Functions Core Tools. The system uses blob storage to coordinate across multiple instanceswhen the app scales out. It accesses blob storage using the host storage (AzureWebJobsStorage) connection. If you configure the host storage to use anidentity-based connection, the identity should have theStorage Blob Data Ownerrole, which is the default requirement for host storage.
AzureWebJobsStorage
Next steps
Go to a quickstart that uses a timer trigger
Learn more about Azure functions triggers and bindings
Feedback
Was this page helpful?
Additional resources