Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Simplified application autoscaling with Kubernetes Event-driven Autoscaling (KEDA) add-on
Article
2025-03-14
10 contributors
In this article
Important
The KEDA add-on for AKS doesn't currently support modifying the CPU requests or limits for the Metrics Server or Operator. Keep this limitation in mind when using the add-on. If you have any questions, feel free to reach outhere.
Kubernetes Event-driven Autoscaling (KEDA) is a single-purpose and lightweight component that strives to make application autoscaling simple and is a CNCF Graduate project.
It applies event-driven autoscaling to scale your application to meet demand in a sustainable and cost-efficient manner with scale-to-zero.
The KEDA add-on makes it even easier by deploying a managed KEDA installation, providing you witha rich catalog of Azure KEDA scalersthat you can scale your applications with on your Azure Kubernetes Services (AKS) cluster.
Note
KEDA version 2.15+ introduces a breaking change thatremoves pod identity support. We recommend moving over to workload identity for your authentication if you're using pod identity. While the KEDA managed add-on doesn't currently run KEDA version 2.15+, it will begin running it in the AKS preview version 1.32.
For more information on how to securely scale your applications with workload identity, please read ourtutorial. To view KEDA's breaking change/deprecation policy, please read theirofficial documentation.
Architecture
KEDAprovides two main components:
KEDA operatorallows end-users to scale workloads in/out from 0 to N instances with support for Kubernetes Deployments, Jobs, StatefulSets or any custom resource that defines/scalesubresource.
/scale
Metrics serverexposes external metrics to Horizontal Pod Autoscaler (HPA) in Kubernetes for autoscaling purposes such as messages in a Kafka topic, or number of events in an Azure event hub. Due to upstream limitations, KEDA must be the only installed external metric adapter.

Learn more about how KEDA works in theofficial KEDA documentation.
Installation
KEDA can be added to your Azure Kubernetes Service (AKS) cluster by enabling the KEDA add-on using anARM templateorAzure CLI.
The KEDA add-on provides a fully supported installation of KEDA that is integrated with AKS.
Capabilities and features
KEDA provides the following capabilities and features:
Build sustainable and cost-efficient applications with scale-to-zero
Scale application workloads to meet demand usinga rich catalog of Azure KEDA scalers
Autoscale applications withScaledObjects, such as Deployments, StatefulSets or any custom resource that defines/scalesubresource
ScaledObjects
/scale
Autoscale job-like workloads withScaledJobs
ScaledJobs
Use production-grade security by decoupling autoscaling authentication from workloads
Bring-your-own external scaler to use tailor-made autoscaling decisions
Integrate withMicrosoft Entra Workload IDfor authentication
Note
If you plan to use workload identity,enable the workload identity add-onbefore enabling the KEDA add-on.
Add-on limitations
The KEDA AKS add-on has the following limitations:
KEDA'sHTTP add-on (preview)to scale HTTP workloads isn't installed with the extension, but can be deployed separately.
KEDA'sexternal scaler for Azure Cosmos DBto scale based on Azure Cosmos DB change feed isn't installed with the extension, but can be deployed separately.
Only one external metric server is allowed in the Kubernetes cluster. Because of that the KEDA add-on should be the only external metrics server inside the cluster.Multiple KEDA installations aren't supported
Multiple KEDA installations aren't supported
For general KEDA questions, we recommendvisiting the FAQ overview.
Note
If you're usingMicrosoft Entra Workload IDand you enable KEDA before Workload ID, you need to restart the KEDA operator pods so the proper environment variables can be injected:
Restart the pods by runningkubectl rollout restart deployment keda-operator -n kube-system.
Restart the pods by runningkubectl rollout restart deployment keda-operator -n kube-system.
kubectl rollout restart deployment keda-operator -n kube-system
Obtain KEDA operator pods usingkubectl get pod -n kube-systemand finding pods that begin withkeda-operator.
Obtain KEDA operator pods usingkubectl get pod -n kube-systemand finding pods that begin withkeda-operator.
kubectl get pod -n kube-system
keda-operator
Verify successful injection of the environment variables by runningkubectl describe pod <keda-operator-pod> -n kube-system.
UnderEnvironment, you should see values forAZURE_TENANT_ID,AZURE_FEDERATED_TOKEN_FILE, andAZURE_AUTHORITY_HOST.
Verify successful injection of the environment variables by runningkubectl describe pod <keda-operator-pod> -n kube-system.
UnderEnvironment, you should see values forAZURE_TENANT_ID,AZURE_FEDERATED_TOKEN_FILE, andAZURE_AUTHORITY_HOST.
kubectl describe pod <keda-operator-pod> -n kube-system
Environment
AZURE_TENANT_ID
AZURE_FEDERATED_TOKEN_FILE
AZURE_AUTHORITY_HOST
Supported Kubernetes and KEDA versions
Your cluster Kubernetes version determines what KEDA version will be installed on your AKS cluster. To see which KEDA version maps to each AKS version, see theAKS managed add-onscolumn of theKubernetes component version table.
For GA Kubernetes versions, AKS offers full support of the corresponding KEDA minor version in the table. Kubernetes preview versions and the latest KEDA patch are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
Next steps
Enable the KEDA add-on with an ARM template
Enable the KEDA add-on with the Azure CLI
Troubleshoot KEDA add-on problems
Autoscale a .NET Core worker processing Azure Service Bus Queue messages
View the upstream KEDA docs
Azure Kubernetes Service

Additional resources