Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
materialize()
Article
2024-08-12
3 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Captures the value of a tabular expression for the duration of the query execution so that it can be referenced multiple times by the query without recalculation.
Syntax
materialize(expression)
materialize(
)
Learn more aboutsyntax conventions.
Parameters
string
Remarks
Thematerialize()function is useful in the following scenarios:
materialize()
To speed up queries that performheavycalculations whose results are used multiple times in the query.
To evaluate a tabular expression only once and use it many times in a query. This is commonly required if the tabular expression is non-deterministic. For example, if the expression uses therand()or thedcount()functions.
rand()
dcount()
Note
Materialize has a cache size limit of5 GB. This limit is per cluster node and is mutual for all queries running concurrently. If a query usesmaterialize()and the cache can't hold any more data, the query will abort with an error.
materialize()
Tip
Another way to perform materialization of tabular expression is by using thehint.materializedflag
of theas operatorandpartition operator. They all share a
single materialization cache.
hint.materialized
Tip
Push all possible operators that reduce the materialized dataset and keep the semantics of the query. For example, use common filters on top of the same materialized expression.
Use materialize with join or union when their operands have mutual subqueries that can be executed once. For example, join/union fork legs. Seeexample of using join operator.
Materialize can only be used in let statements if you give the cached result a name. Seeexample of using let statements).
Examples of query performance improvement
The following example shows howmaterialize()can be used to improve performance of the query.
The expression_detailed_datais defined usingmaterialize()function and therefore is calculated only once.
materialize()
_detailed_data
materialize()
Run the query
let _detailed_data = materialize(StormEvents | summarize Events=count() by State, EventType);
_detailed_data
| summarize TotalStateEvents=sum(Events) by State
| join (_detailed_data) on State
| extend EventPercentage = Events*100.0 / TotalStateEvents
| project State, EventType, EventPercentage, Events
| top 10 by EventPercentage
let _detailed_data = materialize(StormEvents | summarize Events=count() by State, EventType);
_detailed_data
| summarize TotalStateEvents=sum(Events) by State
| join (_detailed_data) on State
| extend EventPercentage = Events*100.0 / TotalStateEvents
| project State, EventType, EventPercentage, Events
| top 10 by EventPercentage
Output
The following example generates a set of random numbers and calculates:
How many distinct values in the set (Dcount)
Dcount
The top three values in the set
The sum of all these values in the set
This operation can be done usingbatchesand materialize:
Run the query
let randomSet = 
    materialize(
        range x from 1 to 3000000 step 1
        | project value = rand(10000000));
randomSet | summarize Dcount=dcount(value);
randomSet | top 3 by value;
randomSet | summarize Sum=sum(value)
let randomSet = 
    materialize(
        range x from 1 to 3000000 step 1
        | project value = rand(10000000));
randomSet | summarize Dcount=dcount(value);
randomSet | top 3 by value;
randomSet | summarize Sum=sum(value)
Result set 1:
Result set 2:
Result set 3:
Examples of using materialize()
Tip
Materialize your column at ingestion time if most of your queries extract fields from dynamic objects across millions of rows.
To use theletstatement with a value that you use more than once, use thematerialize() function. Try to push all possible operators that will reduce the materialized dataset and still keep the semantics of the query. For example, use filters, or project only required columns.
let
let materializedData = materialize(Table
    | where Timestamp > ago(1d));
    union (materializedData
    | where Text !has "somestring"
    | summarize dcount(Resource1)), (materializedData
    | where Text !has "somestring"
    | summarize dcount(Resource2))
let materializedData = materialize(Table
    | where Timestamp > ago(1d));
    union (materializedData
    | where Text !has "somestring"
    | summarize dcount(Resource1)), (materializedData
    | where Text !has "somestring"
    | summarize dcount(Resource2))
The filter onTextis mutual and can be pushed to the materialize expression.
The query only needs columnsTimestamp,Text,Resource1, andResource2. Project these columns inside the materialized expression.
Text
Timestamp
Text
Resource1
Resource2
let materializedData = materialize(Table
    | where Timestamp > ago(1d)
    | where Text !has "somestring"
    | project Timestamp, Resource1, Resource2, Text);
    union (materializedData
    | summarize dcount(Resource1)), (materializedData
    | summarize dcount(Resource2))
let materializedData = materialize(Table
    | where Timestamp > ago(1d)
    | where Text !has "somestring"
    | project Timestamp, Resource1, Resource2, Text);
    union (materializedData
    | summarize dcount(Resource1)), (materializedData
    | summarize dcount(Resource2))
If the filters aren't identical, as in the following query:
let materializedData = materialize(Table
    | where Timestamp > ago(1d));
    union (materializedData
    | where Text has "String1"
    | summarize dcount(Resource1)), (materializedData
    | where Text has "String2"
    | summarize dcount(Resource2))
let materializedData = materialize(Table
    | where Timestamp > ago(1d));
    union (materializedData
    | where Text has "String1"
    | summarize dcount(Resource1)), (materializedData
    | where Text has "String2"
    | summarize dcount(Resource2))
When the combined filter reduces the materialized result drastically, combine both filters on the materialized result by a logicalorexpression as in the following query. However, keep the filters in each union leg to preserve the semantics of the query.
or
let materializedData = materialize(Table
    | where Timestamp > ago(1d)
    | where Text has "String1" or Text has "String2"
    | project Timestamp, Resource1, Resource2, Text);
    union (materializedData
    | where Text has "String1"
    | summarize dcount(Resource1)), (materializedData
    | where Text has "String2"
    | summarize dcount(Resource2))
let materializedData = materialize(Table
    | where Timestamp > ago(1d)
    | where Text has "String1" or Text has "String2"
    | project Timestamp, Resource1, Resource2, Text);
    union (materializedData
    | where Text has "String1"
    | summarize dcount(Resource1)), (materializedData
    | where Text has "String2"
    | summarize dcount(Resource2))
Feedback
Was this page helpful?
Additional resources