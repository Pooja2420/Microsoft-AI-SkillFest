Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Host a RESTful API with CORS in Azure App Service
Article
2024-09-15
12 contributors
In this article
Azure App Serviceprovides a highly scalable self-patching web hosting service. In addition, App Service has built-in support forcross-origin resource sharing (CORS)for RESTful APIs. This tutorial shows how to deploy an ASP.NET Core API app to App Service with CORS support. You configure the app using command-line tools and deploy the app using Git.
In this tutorial, you learn how to:
Create App Service resources using Azure CLI.
Deploy a RESTful API to Azure using Git.
Enable App Service CORS support.
You can complete this tutorial on macOS, Linux, or Windows.
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prerequisites
Install Git.
Install the latest .NET Core 3.1 SDK.
Create a local ASP.NET Core app
In this step, you set up the local ASP.NET Core project. App Service supports the same workflow for APIs written in other languages.
Clone the sample application
In the terminal window, usecdto go to a working directory.
In the terminal window, usecdto go to a working directory.
cd
Clone the sample repository, and then go to the repository root.git clone https://github.com/Azure-Samples/dotnet-core-api
cd dotnet-core-apiThis repository contains an app that's created based on the tutorialASP.NET Core web API documentation with Swagger / OpenAPI. It uses a Swagger generator to serve theSwagger UIand the Swagger JSON endpoint.
Clone the sample repository, and then go to the repository root.
git clone https://github.com/Azure-Samples/dotnet-core-api
cd dotnet-core-api
git clone https://github.com/Azure-Samples/dotnet-core-api
cd dotnet-core-api
This repository contains an app that's created based on the tutorialASP.NET Core web API documentation with Swagger / OpenAPI. It uses a Swagger generator to serve theSwagger UIand the Swagger JSON endpoint.
Make sure the default branch ismain.git branch -m mainTipThe branch name change isn't required by App Service. However, since many repositories are changing their default branch tomain(seeChange deployment branch), this tutorial shows you how to deploy a repository frommain.
Make sure the default branch ismain.
main
git branch -m main
git branch -m main
Tip
The branch name change isn't required by App Service. However, since many repositories are changing their default branch tomain(seeChange deployment branch), this tutorial shows you how to deploy a repository frommain.
main
main
Run the application
Run the following commands to install the required packages, run database migrations, and start the application.dotnet restore
dotnet run
Run the following commands to install the required packages, run database migrations, and start the application.
dotnet restore
dotnet run
dotnet restore
dotnet run
Navigate tohttp://localhost:5000/swaggerin a browser to try the Swagger UI.
Navigate tohttp://localhost:5000/swaggerin a browser to try the Swagger UI.
http://localhost:5000/swagger

Navigate tohttp://localhost:5000/api/todoto see a list of ToDo JSON items.
Navigate tohttp://localhost:5000/api/todoto see a list of ToDo JSON items.
http://localhost:5000/api/todo
Navigate tohttp://localhost:5000and experiment with the browser app. Later, you'll point the browser app to a remote API in App Service to test CORS functionality. Code for the browser app is found in the repository'swwwrootdirectory.
Navigate tohttp://localhost:5000and experiment with the browser app. Later, you'll point the browser app to a remote API in App Service to test CORS functionality. Code for the browser app is found in the repository'swwwrootdirectory.
http://localhost:5000
To stop ASP.NET Core at any time, selectCtrl+Cin the terminal.
To stop ASP.NET Core at any time, selectCtrl+Cin the terminal.
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
Deploy the app to Azure
In this step, you deploy your .NET Core application to App Service.
Configure local Git deployment
FTP and local Git can deploy to an Azure web app by using adeployment user. Once you configure your deployment user, you can use it for all your Azure deployments. Your account-level deployment username and password are different from your Azure subscription credentials.
To configure the deployment user, run theaz webapp deployment user setcommand in Azure Cloud Shell. Replace <username> and <password> with a deployment user username and password.
The username must be unique within Azure, and for local Git pushes, must not contain the â@â symbol.
The password must be at least eight characters long, with two of the following three elements: letters, numbers, and symbols.
az webapp deployment user set --user-name <username> --password <password>
az webapp deployment user set --user-name <username> --password <password>
The JSON output shows the password asnull. If you get a'Conflict'. Details: 409error, change the username. If you get a'Bad Request'. Details: 400error, use a stronger password.
null
'Conflict'. Details: 409
'Bad Request'. Details: 400
Record your username and password to use to deploy your web apps.
Create a resource group
Aresource groupis a logical container into which Azure resources, such as web apps, databases, and storage accounts, are deployed and managed. For example, you can choose to delete the entire resource group in one simple step later.
In the Cloud Shell, create a resource group with theaz group createcommand. The following example creates a resource group namedmyResourceGroupin theWest Europelocation. To see all supported locations for App Service inFreetier, run theaz appservice list-locations --sku FREEcommand.
az group create
az appservice list-locations --sku FREE
az group create --name myResourceGroup --location "West Europe"
az group create --name myResourceGroup --location "West Europe"
You generally create your resource group and the resources in a region near you.
When the command finishes, a JSON output shows you the resource group properties.
Create an App Service plan
In the Cloud Shell, create an App Service plan with theaz appservice plan createcommand.
az appservice plan create
The following example creates an App Service plan namedmyAppServicePlanin theFreepricing tier:
myAppServicePlan
az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku FREE
az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku FREE
When the App Service plan has been created, the Azure CLI shows information similar to the following example:
{ 
  "adminSiteName": null,
  "appServicePlanName": "myAppServicePlan",
  "geoRegion": "West Europe",
  "hostingEnvironmentProfile": null,
  "id": "/subscriptions/0000-0000/resourceGroups/myResourceGroup/providers/Microsoft.Web/serverfarms/myAppServicePlan",
  "kind": "app",
  "location": "West Europe",
  "maximumNumberOfWorkers": 1,
  "name": "myAppServicePlan",
  < JSON data removed for brevity. >
  "targetWorkerSizeId": 0,
  "type": "Microsoft.Web/serverfarms",
  "workerTierName": null
}
Create a web app
Create aweb appin themyAppServicePlanApp Service plan.
myAppServicePlan
In the Cloud Shell, you can use theaz webapp createcommand. In the following example, replace<app-name>with a globally unique app name (valid characters area-z,0-9, and-).
az webapp create
<app-name>
a-z
0-9
-
az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app-name> --deployment-local-git
az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app-name> --deployment-local-git
When the web app has been created, the Azure CLI shows output similar to the following example:
Local git is configured with url of 'https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git'
{
  "availabilityState": "Normal",
  "clientAffinityEnabled": true,
  "clientCertEnabled": false,
  "clientCertExclusionPaths": null,
  "cloningInfo": null,
  "containerSize": 0,
  "dailyMemoryTimeQuota": 0,
  "defaultHostName": "<app-name>.azurewebsites.net",
  "deploymentLocalGitUrl": "https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git",
  "enabled": true,
  < JSON data removed for brevity. >
}
Note
The URL of the Git remote is shown in thedeploymentLocalGitUrlproperty, with the formathttps://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git. Save this URL as you need it later.
deploymentLocalGitUrl
https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git
Push to Azure from Git
Since you're deploying themainbranch, you need to set the default deployment branch for your App Service app tomain(seeChange deployment branch). In the Cloud Shell, set theDEPLOYMENT_BRANCHapp setting with theaz webapp config appsettings setcommand.az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
Since you're deploying themainbranch, you need to set the default deployment branch for your App Service app tomain(seeChange deployment branch). In the Cloud Shell, set theDEPLOYMENT_BRANCHapp setting with theaz webapp config appsettings setcommand.
main
main
DEPLOYMENT_BRANCH
az webapp config appsettings set
az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
Back in the local terminal window, add an Azure remote to your local Git repository. Replace<deploymentLocalGitUrl-from-create-step>with the URL of the Git remote that you saved fromCreate a web app.git remote add azure <deploymentLocalGitUrl-from-create-step>
Back in the local terminal window, add an Azure remote to your local Git repository. Replace<deploymentLocalGitUrl-from-create-step>with the URL of the Git remote that you saved fromCreate a web app.
git remote add azure <deploymentLocalGitUrl-from-create-step>
git remote add azure <deploymentLocalGitUrl-from-create-step>
Push to the Azure remote to deploy your app with the following command. When Git Credential Manager prompts you for credentials, make sure you enter the credentials you created inConfigure local git deployment, not the credentials you use to sign in to the Azure portal.git push azure mainThis command might take a few minutes to run. While running, it displays information similar to the following example:
Push to the Azure remote to deploy your app with the following command. When Git Credential Manager prompts you for credentials, make sure you enter the credentials you created inConfigure local git deployment, not the credentials you use to sign in to the Azure portal.
git push azure main
git push azure main
This command might take a few minutes to run. While running, it displays information similar to the following example:
Enumerating objects: 83, done.
Counting objects: 100% (83/83), done.
Delta compression using up to 8 threads
Compressing objects: 100% (78/78), done.
Writing objects: 100% (83/83), 22.15 KiB | 3.69 MiB/s, done.
Total 83 (delta 26), reused 0 (delta 0)
remote: Updating branch 'master'.
remote: Updating submodules.
remote: Preparing deployment for commit id '509236e13d'.
remote: Generating deployment script.
remote: Project file path: .\TodoApi.csproj
remote: Generating deployment script for ASP.NET MSBuild16 App
remote: Generated deployment script files
remote: Running deployment command...
remote: Handling ASP.NET Core Web Application deployment with MSBuild16.
remote: .
remote: .
remote: .
remote: Finished successfully.
remote: Running post deployment command(s)...
remote: Triggering recycle (preview mode disabled).
remote: Deployment successful.
To https://&lt;app_name&gt;.scm.azurewebsites.net/&lt;app_name&gt;.git
* [new branch]      master -> master
Enumerating objects: 83, done.
Counting objects: 100% (83/83), done.
Delta compression using up to 8 threads
Compressing objects: 100% (78/78), done.
Writing objects: 100% (83/83), 22.15 KiB | 3.69 MiB/s, done.
Total 83 (delta 26), reused 0 (delta 0)
remote: Updating branch 'master'.
remote: Updating submodules.
remote: Preparing deployment for commit id '509236e13d'.
remote: Generating deployment script.
remote: Project file path: .\TodoApi.csproj
remote: Generating deployment script for ASP.NET MSBuild16 App
remote: Generated deployment script files
remote: Running deployment command...
remote: Handling ASP.NET Core Web Application deployment with MSBuild16.
remote: .
remote: .
remote: .
remote: Finished successfully.
remote: Running post deployment command(s)...
remote: Triggering recycle (preview mode disabled).
remote: Deployment successful.
To https://&lt;app_name&gt;.scm.azurewebsites.net/&lt;app_name&gt;.git
* [new branch]      master -> master
Browse to the Azure app
Navigate tohttp://<app_name>.azurewebsites.net/swaggerin a browser and view the Swagger UI.
Navigate tohttp://<app_name>.azurewebsites.net/swaggerin a browser and view the Swagger UI.
http://<app_name>.azurewebsites.net/swagger

Navigate tohttp://<app_name>.azurewebsites.net/swagger/v1/swagger.jsonto see theswagger.jsonfor your deployed API.
Navigate tohttp://<app_name>.azurewebsites.net/swagger/v1/swagger.jsonto see theswagger.jsonfor your deployed API.
http://<app_name>.azurewebsites.net/swagger/v1/swagger.json
Navigate tohttp://<app_name>.azurewebsites.net/api/todoto see your deployed API working.
Navigate tohttp://<app_name>.azurewebsites.net/api/todoto see your deployed API working.
http://<app_name>.azurewebsites.net/api/todo
Add CORS functionality
Next, you enable the built-in CORS support in App Service for your API.
Test CORS in the sample app
In your local repository, openwwwroot/index.html.
In your local repository, openwwwroot/index.html.
On line 51, set theapiEndpointvariable to the URL of your deployed API (http://<app_name>.azurewebsites.net). Replace<appname>with your app name in App Service.
On line 51, set theapiEndpointvariable to the URL of your deployed API (http://<app_name>.azurewebsites.net). Replace<appname>with your app name in App Service.
apiEndpoint
http://<app_name>.azurewebsites.net
In your local terminal window, run the sample app again.dotnet run
In your local terminal window, run the sample app again.
dotnet run
dotnet run
Navigate to the browser app athttp://localhost:5000. Open the developer tools window in your browser (Ctrl+Shift+iin Chrome for Windows) and inspect theConsoletab. You should now see the error message,No 'Access-Control-Allow-Origin' header is present on the requested resource.The domain mismatch between the browser app (http://localhost:5000) and remote resource (http://<app_name>.azurewebsites.net) is recognized by your browser as a cross-origin resource request. Also, because the App Service app isn't sending theAccess-Control-Allow-Originheader, the browser has prevented cross-domain content from loading.In production, your browser app would have a public URL instead of the localhost URL, but the process for enabling CORS to a localhost URL is the same as the process for a public URL.
Navigate to the browser app athttp://localhost:5000. Open the developer tools window in your browser (Ctrl+Shift+iin Chrome for Windows) and inspect theConsoletab. You should now see the error message,No 'Access-Control-Allow-Origin' header is present on the requested resource.
http://localhost:5000
No 'Access-Control-Allow-Origin' header is present on the requested resource

The domain mismatch between the browser app (http://localhost:5000) and remote resource (http://<app_name>.azurewebsites.net) is recognized by your browser as a cross-origin resource request. Also, because the App Service app isn't sending theAccess-Control-Allow-Originheader, the browser has prevented cross-domain content from loading.
http://localhost:5000
http://<app_name>.azurewebsites.net
Access-Control-Allow-Origin
In production, your browser app would have a public URL instead of the localhost URL, but the process for enabling CORS to a localhost URL is the same as the process for a public URL.
Enable CORS
In Cloud Shell, enable CORS to your client's URL by using theaz webapp cors addcommand. Replace the<app-name>placeholder.
az webapp cors add
az webapp cors add --resource-group myResourceGroup --name <app-name> --allowed-origins 'http://localhost:5000'
az webapp cors add --resource-group myResourceGroup --name <app-name> --allowed-origins 'http://localhost:5000'
You can add multiple allowed origins by running the command multiple times or by adding a comma-separated list in--allowed-origins. To allow all origins, use--allowed-origins '*'.
--allowed-origins
--allowed-origins '*'
Test CORS again
Refresh the browser app athttp://localhost:5000. The error message in theConsolewindow is now gone, and you can see the data from the deployed API and interact with it. Your remote API now supports CORS to your browser app running locally.
http://localhost:5000

Congratulations, you're running an API in Azure App Service with CORS support.
Frequently asked questions
App Service CORS vs. your CORS
How do I set allowed origins to a wildcard subdomain?
How do I enable the ACCESS-CONTROL-ALLOW-CREDENTIALS header on the response?
You can use your own CORS utilities instead of App Service CORS for more flexibility. For example, you might want to specify different allowed origins for different routes or methods. Since App Service CORS lets you specify only one set of accepted origins for all API routes and methods, you would want to use your own CORS code. See how CORS is enabled in ASP.NET Core atEnable CORS.
The built-in App Service CORS feature doesn't have options to allow only specific HTTP methods or verbs for each origin that you specify. It will automatically allow all methods and headers for each origin defined. This behavior is similar toASP.NET Core CORSpolicies when you use the options.AllowAnyHeader()and.AllowAnyMethod()in the code.
.AllowAnyHeader()
.AllowAnyMethod()
Note
Don't try to use App Service CORS and your own CORS code together. If you try to use them together, App Service CORS takes precedence and your own CORS code has no effect.
A wildcard subdomain like*.contoso.comis more restrictive than the wildcard origin*. The app's CORS management page in the Azure portal doesn't let you set a wildcard subdomain as an allowed origin. However, you can do that by using Azure CLI, like so:
*.contoso.com
*
az webapp cors add --resource-group <group-name> --name <app-name> --allowed-origins 'https://*.contoso.com'
az webapp cors add --resource-group <group-name> --name <app-name> --allowed-origins 'https://*.contoso.com'
If your app requires credentials such as cookies or authentication tokens to be sent, the browser might require theACCESS-CONTROL-ALLOW-CREDENTIALSheader on the response. To enable this in App Service, setproperties.cors.supportCredentialstotrue:
ACCESS-CONTROL-ALLOW-CREDENTIALS
properties.cors.supportCredentials
true
az resource update --name web --resource-group <group-name> \
  --namespace Microsoft.Web --resource-type config \
  --parent sites/<app-name> --set properties.cors.supportCredentials=true
az resource update --name web --resource-group <group-name> \
  --namespace Microsoft.Web --resource-type config \
  --parent sites/<app-name> --set properties.cors.supportCredentials=true
This operation isn't allowed when allowed origins include the wildcard origin'*'. SpecifyingAllowAnyOriginandAllowCredentialsisn't secure. Doing so can result in cross-site request forgery. To allow credentials, try replacing the wildcard origin withwildcard subdomains.
'*'
AllowAnyOrigin
AllowCredentials
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following command in the Cloud Shell:
az group delete --name myResourceGroup
az group delete --name myResourceGroup
This command may take a minute to run.

Next steps
What you learned:
Create App Service resources using Azure CLI.
Deploy a RESTful API to Azure using Git.
Enable App Service CORS support.
Go to the next tutorial to learn how to authenticate and authorize users.
Tutorial: Authenticate and authorize users end-to-end
Feedback
Was this page helpful?
Additional resources