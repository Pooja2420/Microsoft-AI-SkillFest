Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use GitHub Actions with Azure Machine Learning
Article
2025-02-13
13 contributors
In this article
APPLIES TO:Azure CLI ml extension v2 (current)Python SDK azure-ai-ml v2 (current)
Get started withGitHub Actionsto train a model on Azure Machine Learning.
This article teaches you how to create a GitHub Actions workflow that builds and deploys a machine learning model toAzure Machine Learning. You train ascikit-learnlinear regression model on the NYC Taxi dataset.
GitHub Actions use a workflow YAML (.yml) file in the/.github/workflows/path in your repository. This definition contains the various steps and parameters that make up the workflow.
/.github/workflows/
Prerequisites
An Azure Machine Learning workspace. For steps for creating a workspace, seeCreate the workspace.
An Azure Machine Learning workspace. For steps for creating a workspace, seeCreate the workspace.
The Azure Machine Learning SDK for Python v2. To install the SDK, use the following command:pip install azure-ai-ml azure-identityTo update an existing installation of the SDK to the latest version, use the following command:pip install --upgrade azure-ai-ml azure-identityFor more information, seeAzure Machine Learning Package client library for Python.
The Azure Machine Learning SDK for Python v2. To install the SDK, use the following command:
pip install azure-ai-ml azure-identity
pip install azure-ai-ml azure-identity
To update an existing installation of the SDK to the latest version, use the following command:
pip install --upgrade azure-ai-ml azure-identity
pip install --upgrade azure-ai-ml azure-identity
For more information, seeAzure Machine Learning Package client library for Python.
A GitHub account. If you don't have one, sign up forfree.
Step 1: Get the code
Fork the following repo at GitHub:
https://github.com/azure/azureml-examples
https://github.com/azure/azureml-examples
Clone your forked repo locally.
git clone https://github.com/YOUR-USERNAME/azureml-examples
git clone https://github.com/YOUR-USERNAME/azureml-examples
Step 2: Authenticate with Azure
You'll need to first define how to authenticate with Azure. The recommended, more secure option is tosign in with OpenID Connect using a Microsoft Entra application or a user-assigned managed identity. If necessary, you can also usesign in with a service principal and secret. This approach is less secure and not recommended.
Generate deployment credentials
OpenID Connect
Service principal
To useAzure Login actionwith OIDC, you need to configure a federated identity credential on a Microsoft Entra application or a user-assigned managed identity.
Option 1: Microsoft Entra application
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure a federated identity credential on a Microsoft Entra applicationto trust tokens issued by GitHub Actions to your GitHub repository.
Option 2: User-assigned managed identity
Create a user-assigned managed identity.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your user-assigned managed identity.
Configure a federated identity credential on a user-assigned managed identityto trust tokens issued by GitHub Actions to your GitHub repository.
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Create a client secret for your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Client Secret,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Create secrets
OpenID Connect
Service principal
You need to provide your application'sClient ID,Directory (tenant) ID, andSubscription IDto the login action. These values can either be provided directly in the workflow or can be stored in GitHub secrets and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.
InGitHub, go to your repository.
InGitHub, go to your repository.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.NoteTo enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
SelectNew repository secret.
Note
To enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:GitHub secretMicrosoft Entra application or user-assigned managed identityAZURE_CLIENT_IDClient IDAZURE_SUBSCRIPTION_IDSubscription IDAZURE_TENANT_IDDirectory (tenant) IDNoteFor security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_SUBSCRIPTION_ID
Note
For security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
InGitHub, go to your repository.
InGitHub, go to your repository.
Go toSettingsin the navigation menu.
Go toSettingsin the navigation menu.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.
SelectNew repository secret.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
AZURE_CREDENTIALS
SelectAdd secret.
SelectAdd secret.
Step 3: Updatesetup.shto connect to your Azure Machine Learning workspace
setup.sh
You need to update the CLI setup file variables to match your workspace.
In your forked repository, go toazureml-examples/cli/.
In your forked repository, go toazureml-examples/cli/.
azureml-examples/cli/
Editsetup.shand update these variables in the file.VariableDescriptionGROUPName of resource groupLOCATIONLocation of your workspace (example:eastus2)WORKSPACEName of Azure Machine Learning workspace
Editsetup.shand update these variables in the file.
setup.sh
eastus2
Step 4: Updatepipeline.ymlwith your compute cluster name
pipeline.yml
You use apipeline.ymlfile to deploy your Azure Machine Learning pipeline. The pipeline is a machine learning pipeline and not a DevOps pipeline. You only need to make this update if you're using a name other thancpu-clusterfor your computer cluster name.
pipeline.yml
cpu-cluster
In your forked repository, go toazureml-examples/cli/jobs/pipelines/nyc-taxi/pipeline.yml.
azureml-examples/cli/jobs/pipelines/nyc-taxi/pipeline.yml
Each time you seecompute: azureml:cpu-cluster, update the value ofcpu-clusterwith your compute cluster name. For example, if your cluster is namedmy-cluster, your new value would beazureml:my-cluster. There are five updates.
compute: azureml:cpu-cluster
cpu-cluster
my-cluster
azureml:my-cluster
Step 5: Run your GitHub Actions workflow
Your workflow authenticates with Azure, sets up the Azure Machine Learning CLI, and uses the CLI to train a model in Azure Machine Learning.
OpenID Connect
Service principal
Your workflow file is made up of a trigger section and jobs:
A trigger starts the workflow in theonsection. The workflow runs by default on a cron schedule and when a pull request is made from matching branches and paths. Learn more aboutevents that trigger workflows.
on
In the jobs section of the workflow, you checkout code and log into Azure with the Azure login action using OpenID Connect.
The jobs section also includes a setup action that installs and sets up theMachine Learning CLI (v2). Once the CLI is installed, the run job action runs your Azure Machine Learningpipeline.ymlfile to train a model with NYC taxi data.
pipeline.yml
Enable your workflow
In your forked repository, open.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.ymland verify that your workflow looks like this.name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
In your forked repository, open.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.ymland verify that your workflow looks like this.
.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
SelectView runs.
SelectView runs.
Enable workflows by selectingI understand my workflows, go ahead and enable them.
Enable workflows by selectingI understand my workflows, go ahead and enable them.
Select thecli-jobs-pipelines-nyc-taxi-pipeline workflowand choose toEnable workflow.
Select thecli-jobs-pipelines-nyc-taxi-pipeline workflowand choose toEnable workflow.

SelectRun workflowand choose the option toRun workflownow.
SelectRun workflowand choose the option toRun workflownow.

Your workflow file is made up of a trigger section and jobs:
A trigger starts the workflow in theonsection. The workflow runs by default on a cron schedule and when a pull request is made from matching branches and paths. Learn more aboutevents that trigger workflows.
on
In the jobs section of the workflow, you checkout code and log into Azure with your service principal secret.
The jobs section also includes a setup action that installs and sets up theMachine Learning CLI (v2). Once the CLI is installed, the run job action runs your Azure Machine Learningpipeline.ymlfile to train a model with NYC taxi data.
pipeline.yml
Enable your workflow
In your forked repository, open.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.ymland verify that your workflow looks like this.name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
In your forked repository, open.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.ymland verify that your workflow looks like this.
.github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
name: cli-jobs-pipelines-nyc-taxi-pipeline
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0/4 * * *"
  pull_request:
    branches:
      - main
      - sdk-preview
    paths:
      - cli/jobs/pipelines/nyc-taxi/**
      - .github/workflows/cli-jobs-pipelines-nyc-taxi-pipeline.yml
      - cli/run-pipeline-jobs.sh
      - cli/setup.sh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: check out repo
      uses: actions/checkout@v2
    - name: azure login
      uses: azure/login@v2
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: setup
      run: bash setup.sh
      working-directory: cli
      continue-on-error: true
    - name: run job
      run: bash -x ../../../run-job.sh pipeline.yml
      working-directory: cli/jobs/pipelines/nyc-taxi
SelectView runs.
SelectView runs.
Enable workflows by selectingI understand my workflows, go ahead and enable them.
Enable workflows by selectingI understand my workflows, go ahead and enable them.
Select thecli-jobs-pipelines-nyc-taxi-pipeline workflowand choose toEnable workflow.
Select thecli-jobs-pipelines-nyc-taxi-pipeline workflowand choose toEnable workflow.
SelectRun workflowand choose the option toRun workflownow.
SelectRun workflowand choose the option toRun workflownow.
Step 6: Verify your workflow run
Open your completed workflow run and verify that the build job ran successfully. You see a green checkmark next to the job.
Open your completed workflow run and verify that the build job ran successfully. You see a green checkmark next to the job.
Open Azure Machine Learning studio and navigate to thenyc-taxi-pipeline-example. Verify that each part of your job (prep, transform, train, predict, score) completed and that you see a green checkmark.
Open Azure Machine Learning studio and navigate to thenyc-taxi-pipeline-example. Verify that each part of your job (prep, transform, train, predict, score) completed and that you see a green checkmark.

Clean up resources
When your resource group and repository are no longer needed, clean up the resources you deployed by deleting the resource group and your GitHub repository.
Next steps
Create production ML pipelines with Python SDK
Feedback
Was this page helpful?
Additional resources