Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Azure Cosmos DB for Table with Azure SDK for .NET
Article
2025-04-08
5 contributors
Applies to: â Table
In this article
.NET
Python
Node.js
Java
Go
In this quickstart, you deploy a basic Azure Cosmos DB for Table application using the Azure SDK for .NET. Azure Cosmos DB for Table is a schemaless data store allowing applications to store structured table data in the cloud. You learn how to create tables, rows, and perform basic tasks within your Azure Cosmos DB resource using the Azure SDK for .NET.
API reference documentation|Library source code|Package (NuGet)|Azure Developer CLI
Prerequisites
Azure Developer CLI
Docker Desktop
.NET 9.0
If you don't have an Azure account, create afree accountbefore you begin.
Initialize the project
Use the Azure Developer CLI (azd) to create an Azure Cosmos DB for Table account and deploy a containerized sample application. The sample application uses the client library to manage, create, read, and query sample data.
azd
Open a terminal in an empty directory.
Open a terminal in an empty directory.
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.azd auth login
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.
azd auth login
azd auth login
azd auth login
Useazd initto initialize the project.azd init --template cosmos-db-table-dotnet-quickstart
Useazd initto initialize the project.
azd init
azd init --template cosmos-db-table-dotnet-quickstart
azd init --template cosmos-db-table-dotnet-quickstart
During initialization, configure a unique environment name.
During initialization, configure a unique environment name.
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.azd up
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.
azd up
azd up
azd up
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.

Install the client library
The client library is available through NuGet, as theAzure.Data.Tablespackage.
Azure.Data.Tables
Open a terminal and navigate to the/src/webfolder.cd ./src/web
Open a terminal and navigate to the/src/webfolder.
/src/web
cd ./src/web
cd ./src/web
If not already installed, install theAzure.Data.Tablespackage usingdotnet add package.dotnet add package Azure.Data.Tables
If not already installed, install theAzure.Data.Tablespackage usingdotnet add package.
Azure.Data.Tables
dotnet add package
dotnet add package Azure.Data.Tables
dotnet add package Azure.Data.Tables
Open and review thesrc/web/Microsoft.Samples.Cosmos.Table.Quickstart.Web.csprojfile to validate that theAzure.Data.Tablesentry exists.
Open and review thesrc/web/Microsoft.Samples.Cosmos.Table.Quickstart.Web.csprojfile to validate that theAzure.Data.Tablesentry exists.
Azure.Data.Tables
Import libraries
Import theAzure.IdentityandAzure.Data.Tablesnamespaces into your application code.
Azure.Identity
Azure.Data.Tables
using Azure.Identity;

using Azure.Data.Tables;
using Azure.Identity;

using Azure.Data.Tables;
Object model
Code examples
Authenticate the client
Get a table
Create an entity
Get an entity
Query entities
The sample code in the template uses a table namedcosmicworks-products. Thecosmicworks-productstable contains details such as name, category, quantity, price, a unique identifier, and a sale flag for each product. The container uses aunique identifieras the row key andcategoryas a partition key.
cosmicworks-products
cosmicworks-products
Authenticate the client
This sample creates a new instance of theTableServiceClientclass.
TableServiceClient
DefaultAzureCredential credential = new();

TableServiceClient serviceClient = new(
    endpoint: new Uri("<azure-cosmos-db-table-account-endpoint>"),
    credential
);
DefaultAzureCredential credential = new();

TableServiceClient serviceClient = new(
    endpoint: new Uri("<azure-cosmos-db-table-account-endpoint>"),
    credential
);
Get a table
This sample creates an instance of theTableClientclass using theGetTableClientmethod of theTableServiceClientclass.
TableClient
GetTableClient
TableServiceClient
TableClient client = serviceClient.GetTableClient(
    tableName: "<azure-cosmos-db-table-name>"
);
TableClient client = serviceClient.GetTableClient(
    tableName: "<azure-cosmos-db-table-name>"
);
Create an entity
The easiest way to create a new entity in a table is to create a class that implements theITableEntityinterface. You can then add your own properties to the class to populate columns of data in that table row.
ITableEntity
public record Product : ITableEntity
{
    public required string RowKey { get; set; }

    public required string PartitionKey { get; set; }

    public required string Name { get; set; }

    public required int Quantity { get; set; }

    public required decimal Price { get; set; }

    public required bool Clearance { get; set; }

    public ETag ETag { get; set; } = ETag.All;

    public DateTimeOffset? Timestamp { get; set; }
};
public record Product : ITableEntity
{
    public required string RowKey { get; set; }

    public required string PartitionKey { get; set; }

    public required string Name { get; set; }

    public required int Quantity { get; set; }

    public required decimal Price { get; set; }

    public required bool Clearance { get; set; }

    public ETag ETag { get; set; } = ETag.All;

    public DateTimeOffset? Timestamp { get; set; }
};
Create an entity in the table using theProductclass by callingTableClient.AddEntityAsync<T>.
Product
TableClient.AddEntityAsync<T>
Product entity = new()
{
    RowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
    PartitionKey = "gear-surf-surfboards",
    Name = "Surfboard",
    Quantity = 10,
    Price = 300.00m,
    Clearance = true
};

Response response = await client.UpsertEntityAsync<Product>(
    entity: entity,
    mode: TableUpdateMode.Replace
);
Product entity = new()
{
    RowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
    PartitionKey = "gear-surf-surfboards",
    Name = "Surfboard",
    Quantity = 10,
    Price = 300.00m,
    Clearance = true
};

Response response = await client.UpsertEntityAsync<Product>(
    entity: entity,
    mode: TableUpdateMode.Replace
);
Get an entity
You can retrieve a specific entity from a table using theTableClient.GetEntityAsync<T>method. Provide thepartitionKeyandrowKeyas parameters to identify the correct row to perform a quickpoint readof that entity.
TableClient.GetEntityAsync<T>
partitionKey
rowKey
Response<Product> response = await client.GetEntityAsync<Product>(
    rowKey: "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
    partitionKey: "gear-surf-surfboards"
);
Response<Product> response = await client.GetEntityAsync<Product>(
    rowKey: "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
    partitionKey: "gear-surf-surfboards"
);
Query entities
After you insert an entity, you can also run a query to get all entities that match a specific filter by using theTableClient.Query<T>method. This example filters products by category using Language Integrated Query (LINQ) syntax, which is a benefit of using typedITableEntitymodels like theProductclass.
TableClient.Query<T>
ITableEntity
Product
string category = "gear-surf-surfboards";

AsyncPageable<Product> results = client.QueryAsync<Product>(
    product => product.PartitionKey == category
);
string category = "gear-surf-surfboards";

AsyncPageable<Product> results = client.QueryAsync<Product>(
    product => product.PartitionKey == category
);
Parse the paginated results of the query by looping through each page of results using asynchronous loop.
List<Product> entities = new();
await foreach (Product product in results)
{
    entities.Add(product);
}
List<Product> entities = new();
await foreach (Product product in results)
{
    entities.Add(product);
}
Clean up resources
When you no longer need the sample application or resources, remove the corresponding deployment and all resources.
azd down
azd down
Related content
Node.js Quickstart
Python Quickstart
Java Quickstart
Go Quickstart
Feedback
Was this page helpful?
Additional resources