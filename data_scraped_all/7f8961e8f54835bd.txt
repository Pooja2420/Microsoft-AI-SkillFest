Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Migrate custom check-in policy
Article
2025-04-02
2 contributors
In this article
Warning
To use the provided migration method you must not remove the old implementations of the policies prior to following this guide.
To migrate your custom policies, you should first create a new class with the same methods but inheritingCheckinPolicyBaseclass (IPolicyCompatibilityJsonforIPolicyCompatibility) instead ofPolicyBase.
Examples:
CheckinPolicyBase
IPolicyCompatibilityJson
IPolicyCompatibility
PolicyBase
Obsolete
[Serializable]
    public class Simple : PolicyBase
    {
       public override string Description => "SimplePolicyDescription";
       ...
    }
[Serializable]
    public class Simple : PolicyBase
    {
       public override string Description => "SimplePolicyDescription";
       ...
    }
Updated
[Serializable]
    public class SimpleNew : CheckinPolicyBase
    {
        public override string Description => "SimplePolicyDescription";
        ...
    }
[Serializable]
    public class SimpleNew : CheckinPolicyBase
    {
        public override string Description => "SimplePolicyDescription";
        ...
    }
IfGetBinaryFormatterwas overridden, then also implementGetJsonSerializerSettingswith same logic for serialization.
Example:
GetBinaryFormatter
GetJsonSerializerSettings
Obsolete
[Serializable]
    public class Simple : PolicyBase
    {
        public override BinaryFormatter GetBinaryFormatter()
        {
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Binder = new SimpleBinder();
            return formatter;
        }
        ...
    }
[Serializable]
    public class Simple : PolicyBase
    {
        public override BinaryFormatter GetBinaryFormatter()
        {
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Binder = new SimpleBinder();
            return formatter;
        }
        ...
    }
Updated
[Serializable]
    public class SimpleNew : CheckinPolicyBase
    {
        public override JsonSerializerSettings GetJsonSerializerSettings()
        {
            return new JsonSerializerSettings()
            {
                SerializationBinder = new SimpleNewSerializationBinder(),
                TypeNameHandling = TypeNameHandling.Objects
            };
        }
        ...
    }
[Serializable]
    public class SimpleNew : CheckinPolicyBase
    {
        public override JsonSerializerSettings GetJsonSerializerSettings()
        {
            return new JsonSerializerSettings()
            {
                SerializationBinder = new SimpleNewSerializationBinder(),
                TypeNameHandling = TypeNameHandling.Objects
            };
        }
        ...
    }
Instead of the old methods likeGetCheckinPoliciesForServerPaths/GetCheckinPolicies/SetCheckinPoliciesnew ones were introduced:GetCheckinClientPoliciesForServerPaths/GetCheckinClientPolicies/SetCheckinClientPoliciesaccordingly.
For example, default behavior right now for theLoadPoliciesmethod in the package is to use new policies if they are created/available and obsolete ones in case they are absent.
GetCheckinPoliciesForServerPaths
GetCheckinPolicies
SetCheckinPolicies
GetCheckinClientPoliciesForServerPaths
GetCheckinClientPolicies
SetCheckinClientPolicies
LoadPolicies
Note
If you are not planning to use the migration method provided by NuGet package, further instructions can be omitted and obsolete policies can be removed, you are done, congratulations!
For your obsolete policy addIPolicyMigration(This interface marked as deprecated only to show that it will be removed as unnecessary together withPolicyBaseandIPolicyCompatibility).
IPolicyMigration
PolicyBase
IPolicyCompatibility
Warning
Obsolete policies that donât inherit this interface will beskippedduring migration andnotsaved as new policies.
ImplementToNewPolicyTypefrom the mentioned interface. It should return the instance of the newly created policy class that is based on currently modified policy.
Example:
ToNewPolicyType
[Serializable]
    public class Simple : PolicyBase, IPolicyMigration
    {
        ...
        public CheckinPolicyBase ToNewPolicyType()
        {
            return new SimpleNew();
        }
    }
[Serializable]
    public class Simple : PolicyBase, IPolicyMigration
    {
        ...
        public CheckinPolicyBase ToNewPolicyType()
        {
            return new SimpleNew();
        }
    }
CallMigrateFromOldPoliciesmethod.
MigrateFromOldPolicies
You are done, congratulations!
Feedback
Was this page helpful?
Additional resources