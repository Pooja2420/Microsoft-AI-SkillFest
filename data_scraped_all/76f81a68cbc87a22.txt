Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Overview of the Terraform AzAPI provider
Article
2024-11-11
5 contributors
In this article
The AzAPI provider is a thin layer on top of theAzure ARM REST APIs. It enables you to manage any Azure resource type using any API version, enabling you to utilize the latest functionality within Azure. AzAPI is a first-class provider designed to be used on its own or in tandem with the AzureRM provider.
Benefits of using the AzAPI provider
The AzAPI provider features the following benefits:
Supports all Azure control plane services:Preview services and featuresAll API versions
Preview services and features
All API versions
Full Terraform state file fidelityProperties and values are saved to state
Properties and values are saved to state
No dependency on Swagger
Common and consistent Azure authentication
Built-in preflight validation
Granular control over infrastructure development
Robust VS Code Extension
Resources
To allow you to manage all Azure resources and features without requiring updates, the AzAPI provider includes the following generic resources:
azapi_resource
azapi_update_resource
azapi_resource_action
azapi_data_plane_resource
Usage hierarchy
Overall, usage should follow these steps:
It's always recommended to start with performing as many operations as possible withinazapi_resource.
azapi_resource
If the resource type doesn't exist withinazapi_resourcebut does fall under one of the types supported byazapi_data_plane_resource, use that instead.
azapi_resource
azapi_data_plane_resource
If the resource already exists in AzureRM or has a property that can't be accessed withinazapi_resource, useazapi_update_resourceto access these specific properties. Resources thatazapi_resourceorazapi_data_plane_resourcedon't support can't be updated through this resource.
azapi_resource
azapi_update_resource
azapi_resource
azapi_data_plane_resource
If you're trying to perform an action that isn't based on an Azure CRUD-friendly resource,azapi_resource_actionis less straightforward thanazapi_update_resourcebut more flexible.
azapi_resource_action
azapi_update_resource
Resource configuration examples
The following code snippet configures a resource that doesn't currently exist in the AzureRM provider:
resource "azapi_resource" "publicip" {
  type      = "Microsoft.Network/Customipprefixes@2021-03-01"
  name      = "exfullrange"
  parent_id = azurerm_resource_group.example.id
  location  = "westus2"

  body = {
    properties = {
      cidr          = "10.0.0.0/24"
      signedMessage = "Sample Message for WAN"
    }
  }
}
resource "azapi_resource" "publicip" {
  type      = "Microsoft.Network/Customipprefixes@2021-03-01"
  name      = "exfullrange"
  parent_id = azurerm_resource_group.example.id
  location  = "westus2"

  body = {
    properties = {
      cidr          = "10.0.0.0/24"
      signedMessage = "Sample Message for WAN"
    }
  }
}
The following code snippet configures a preview property for an existing resource from AzureRM:
resource "azapi_update_resource" "test" {
  type        = "Microsoft.ContainerRegistry/registries@2020-11-01-preview"
  resource_id = azurerm_container_registry.acr.id

  body = {
    properties = {
      anonymousPullEnabled = var.bool_anonymous_pull
    }
  }
}
resource "azapi_update_resource" "test" {
  type        = "Microsoft.ContainerRegistry/registries@2020-11-01-preview"
  resource_id = azurerm_container_registry.acr.id

  body = {
    properties = {
      anonymousPullEnabled = var.bool_anonymous_pull
    }
  }
}
The following code snippet configures a resource action on an existing AzureRM resource:
resource "azapi_resource_action" "vm_shutdown" {
  type = "Microsoft.Compute/virtualMachines@2023-07-01"
  resource_id = azurerm_linux_virtual_machine.example.id
  action = "powerOffâ
}
resource "azapi_resource_action" "vm_shutdown" {
  type = "Microsoft.Compute/virtualMachines@2023-07-01"
  resource_id = azurerm_linux_virtual_machine.example.id
  action = "powerOffâ
}
The following code snippet configures a resource that doesn't currently exist in the AzureRM provider due to being provisioned on the data plane:
resource "azapi_data_plane_resource" "dataset" {
  type      = "Microsoft.Synapse/workspaces/datasets@2020-12-01"
  parent_id = trimprefix(data.azurerm_synapse_workspace.example.connectivity_endpoints.dev, "https://")
  name      = "example-dataset"
  body = {
    properties = {
      type = "AzureBlob",
      typeProperties = {
        folderPath = {
          value = "@dataset().MyFolderPath"
          type  = "Expression"
        }
        fileName = {
          value = "@dataset().MyFileName"
          type  = "Expression"
        }
        format = {
          type = "TextFormat"
        }
      }
      parameters = {
        MyFolderPath = {
          type = "String"
        }
        MyFileName = {
          type = "String"
        }
      }
    }
  }
}
resource "azapi_data_plane_resource" "dataset" {
  type      = "Microsoft.Synapse/workspaces/datasets@2020-12-01"
  parent_id = trimprefix(data.azurerm_synapse_workspace.example.connectivity_endpoints.dev, "https://")
  name      = "example-dataset"
  body = {
    properties = {
      type = "AzureBlob",
      typeProperties = {
        folderPath = {
          value = "@dataset().MyFolderPath"
          type  = "Expression"
        }
        fileName = {
          value = "@dataset().MyFileName"
          type  = "Expression"
        }
        format = {
          type = "TextFormat"
        }
      }
      parameters = {
        MyFolderPath = {
          type = "String"
        }
        MyFileName = {
          type = "String"
        }
      }
    }
  }
}
Preflight usage example
The following code snippet errors duringterraform plandue to AzAPI's built-in preflight validation:
terraform plan
provider "azapi" {
  enable_preflight = true
}
resource "azapi_resource" "vnet" {
  type      = "Microsoft.Network/virtualNetworks@2024-01-01"
  parent_id = azapi_resource.resourceGroup.id
  name      = "example-vnet"
  location  = "westus"
  body = {
    properties = {
      addressSpace = {
        addressPrefixes = [
          "10.0.0.0/160", # preflight will throw an error here
        ]
      }
    }
  }
}
provider "azapi" {
  enable_preflight = true
}
resource "azapi_resource" "vnet" {
  type      = "Microsoft.Network/virtualNetworks@2024-01-01"
  parent_id = azapi_resource.resourceGroup.id
  name      = "example-vnet"
  location  = "westus"
  body = {
    properties = {
      addressSpace = {
        addressPrefixes = [
          "10.0.0.0/160", # preflight will throw an error here
        ]
      }
    }
  }
}
Preflight is hidden behind a provider flag but will help throw errors inplanstage.
plan
Data Sources
The AzAPI provider supports a variety of useful data sources:
azapi_resource
azapi_client_config
azapi_resource_action
azapi_data_plane_resource
azapi_resource_id
azapi_resource_list
Authentication using the AzAPI provider
The AzAPI provider enables the same authentication methods as the AzureRM provider. For more information on authentication options, seeAuthenticate Terraform to Azure.
Experience and lifecycle of the AzAPI provider
This section describes some tools to help you use the AzAPI provider.
VS Code extension and Language Server
TheAzAPI VS Code extensionprovides a rich authoring experience with the following benefits:
List all available resource types and API versions.
Auto-completion of the allowed properties and values for any resource.
Show hints when hovering over a property.
Syntax validation
Auto-completion with code samples.
aztfmigratemigration tool
aztfmigrate
Theaztfmigratetoolis designed to help migrate existing resources between the AzAPI and AzureRM providers.
aztfmigrate
aztfmigratehas two modes: plan and migrate:
aztfmigrate
Plan displays the AzAPI resources that can be migrated.
Migrate migrates the AzAPI resources to AzureRM resources in both the HCL files and the state.
aztfmigrateensures after migration that your Terraform configuration and state are aligned with your actual state. You can validate the update to state by runningterraform planafter completing the migration to see that nothing has changed.
aztfmigrate
terraform plan
Granular controls over infrastructure
One major benefit of AzAPI is through its ability to fine-tune your configuration to match the right design patterns. There are several ways in which you can do this:
Provider functions
AzAPI (v2.0 and newer) has a slew ofprovider functions:
build_resource_id
extension_resource_id
management_group_resource_id
parse_resource_id
resource_group_resource_id
subscription_resource_id
tenant_resource_id
User-defined retriable errors with theretryblock
retry
TheAzAPIprovider can digest errors when expected through theretryblock. For example, if a resource may run into a create timeout issue, the following block of code may help:
AzAPI
retry
resource "azapi_resource" "example" {
    # usual properties
    retry {
        interval_seconds     = 5
        randomization_factor = 0.5 # adds randomization to retry pattern
        multiplier           = 2 # if try fails, multiplies time between next try by this much
        error_message_regex  = ["ResourceNotFound"]
    }
    timeouts {
        create = "10m"
}
resource "azapi_resource" "example" {
    # usual properties
    retry {
        interval_seconds     = 5
        randomization_factor = 0.5 # adds randomization to retry pattern
        multiplier           = 2 # if try fails, multiplies time between next try by this much
        error_message_regex  = ["ResourceNotFound"]
    }
    timeouts {
        create = "10m"
}
Triggers for resource replacement
TheAzAPIprovider allows you to configure parameters for resource replacement:
AzAPI
replace_triggers_external_values
Replaces the resource if a value changes. For example, if the SKU or zones variables were to be modified, this resource would be re-created:
resource "azapi_resource" "example" {
  name      = var.name
  type      = "Microsoft.Network/publicIPAddresses@2023-11-01"
  parent_id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example"
  body      = properties = {
    sku   = var.sku
    zones = var.zones
  }
  replace_triggers_external_values = [
    var.sku,
    var.zones,
  ]
}
resource "azapi_resource" "example" {
  name      = var.name
  type      = "Microsoft.Network/publicIPAddresses@2023-11-01"
  parent_id = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example"
  body      = properties = {
    sku   = var.sku
    zones = var.zones
  }
  replace_triggers_external_values = [
    var.sku,
    var.zones,
  ]
}
This can work across a broad set of resources, i.e. a policy assignment when properties of the definition changes.
replace_triggers_refs
Replaces the resource if the referenced value changes. For example, if the SKU name or tier was modified, this resource would be re-created:
resource "azapi_resource" "example" {
  type      = "Microsoft.Relay/namespaces@2021-11-01"
  parent_id = azurerm_resource_group.example.id
  name      = "xxx"
  location  = "westus"
  body = {
    properties = {
    }
    sku = {
      name = "Standard"
      tier = "Standard"
    }
  }

  replace_triggers_refs = ["sku"]
}
resource "azapi_resource" "example" {
  type      = "Microsoft.Relay/namespaces@2021-11-01"
  parent_id = azurerm_resource_group.example.id
  name      = "xxx"
  location  = "westus"
  body = {
    properties = {
    }
    sku = {
      name = "Standard"
      tier = "Standard"
    }
  }

  replace_triggers_refs = ["sku"]
}
This would not trigger a replace if a different resource's SKU were to change.
Next steps
Deploy your first resource with the AzAPI provider
Deploy your first Update Resource with the AzAPI provider
Deploy your first resource action with the AzAPI provider
Visit the provider registry
Feedback
Was this page helpful?
Additional resources