Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Grant tenant-wide admin consent to an application
Article
2024-11-29
36 contributors
In this article
In this article, you learn how to grant tenant-wide admin consent to an application in Microsoft Entra ID. To understand how to configure individual user consent settings, seeConfigure how end-users consent to applications.
When you grant tenant-wide admin consent to an application, you give the application access to the permissions requested on behalf of the whole organization. Granting admin consent on behalf of an organization is a sensitive operation, potentially allowing the application's publisher access to significant portions of your organization's data, or the permission to do highly privileged operations. Examples of such operations might be role management, full access to all mailboxes or all sites, and full user impersonation. Therefore you need to carefully review the permissions that the application is requesting before you grant consent.
By default, granting tenant-wide admin consent to an application allows all users to access the application unless otherwise restricted. To restrict which users can sign-in to an application, configure the app torequire user assignmentand thenassign users or groups to the application.
Important
Granting tenant-wide admin consent may revoke permissions that have already been granted tenant-wide for that application. Permissions that users have already granted on their own behalf aren't affected.
Prerequisites
Granting tenant-wide admin consent requires you to sign in as a user that is authorized to consent on behalf of the organization.
To grant tenant-wide admin consent, you need:
A Microsoft Entra user account with one of the following roles:Privileged Role Administrator, for granting consent for apps requesting any permission, for any API.Cloud Application Administrator or Application Administrator, for granting consent for apps requesting any permission for any API,exceptMicrosoft Graph app roles (application permissions).A custom directory role that includes thepermission to grant permissions to applications, for the permissions required by the application.
A Microsoft Entra user account with one of the following roles:
Privileged Role Administrator, for granting consent for apps requesting any permission, for any API.
Cloud Application Administrator or Application Administrator, for granting consent for apps requesting any permission for any API,exceptMicrosoft Graph app roles (application permissions).
A custom directory role that includes thepermission to grant permissions to applications, for the permissions required by the application.
Grant tenant-wide admin consent in Enterprise apps pane
You can grant tenant-wide admin consent through theEnterprise applicationspane if the application is already provisioned in your tenant. For example, an app could be provisioned in your tenant if at least one user consents to the application. For more information, seeHow and why applications are added to Microsoft Entra ID.
To grant tenant-wide admin consent to an app listed inEnterprise applicationspane:
Sign in to theMicrosoft Entra admin centeras at least aCloud Application Administrator.
Browse toEntra ID>Enterprise apps>All applications.
Enter the name of the existing application in the search box, and then select the application from the search results.
SelectPermissionsunderSecurity.
Carefully review the permissions that the application requires. If you agree with the permissions the application requires, selectGrant admin consent.
Grant admin consent in App registrations pane
You can grant tenant-wide admin consent fromApp registrationsin the Microsoft Entra admin center for applications your organization develops and registers directly in your Microsoft Entra tenant.
To grant tenant-wide admin consent fromApp registrations:
On the Microsoft Entra admin center, browse toEntra ID>App registrations>All applications.
Enter the name of the existing application in the search box, and then select the application from the search results.
SelectAPI permissionsunderManage.
Carefully review the permissions that the application requires. If you agree, selectGrant admin consent.
Construct the URL for granting tenant-wide admin consent
When you grant tenant-wide admin consent using either method described in the previous section, a window opens from the Microsoft Entra admin center to prompt for tenant-wide admin consent. If you know the client ID (also known as the application ID) of the application, you can build the same URL to grant tenant-wide admin consent.
The tenant-wide admin consent URL follows the following format:
https://login.microsoftonline.com/{organization}/adminconsent?client_id={client-id}
https://login.microsoftonline.com/{organization}/adminconsent?client_id={client-id}
Where:
{client-id}is the application's client ID (also known as app ID).
{client-id}
{organization}is the tenant ID or any verified domain name of the tenant you want to consent the application in. You can use the valueorganizationsthat causes the consent to happen in the home tenant of the user you sign in with.
{organization}
organizations
As always, carefully review the permissions an application requests before granting consent.
For more information on constructing the tenant-wide admin consent URL, seeAdmin consent on the Microsoft identity platform.
Grant admin consent for delegated permissions using Microsoft Graph PowerShell
In this section, you grant delegated permissions to your application. Delegated permissions are permissions your application needs to access an API on behalf of a signed-in user. The permissions are defined by a resource API and granted to your enterprise application, which is the client application. This consent is granted on behalf of all users.
In the following example, the resource API is Microsoft Graph of object IDaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb. The Microsoft Graph API defines the delegated permissions,User.Read.All, andGroup.Read.All. The consentType isAllPrincipals, indicating that you're consenting on behalf of all users in the tenant. The object ID of the client enterprise application isaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb.
aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb
User.Read.All
Group.Read.All
AllPrincipals
aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb
Caution
Be careful! Permissions granted programmatically aren't subject to review or confirmation. They take effect immediately.
Connect to Microsoft Graph PowerShell and sign in as at least aCloud Application Administrator.Connect-MgGraph -Scopes "Application.ReadWrite.All", "DelegatedPermissionGrant.ReadWrite.All"
Connect to Microsoft Graph PowerShell and sign in as at least aCloud Application Administrator.
Connect-MgGraph -Scopes "Application.ReadWrite.All", "DelegatedPermissionGrant.ReadWrite.All"
Connect-MgGraph -Scopes "Application.ReadWrite.All", "DelegatedPermissionGrant.ReadWrite.All"
Retrieve all the delegated permissions defined by Microsoft graph (the resource application) in your tenant application. Identify the delegated permissions that you need to grant the client application. In this example, the delegation permissions areUser.Read.AllandGroup.Read.AllGet-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property Oauth2PermissionScopes | Select -ExpandProperty Oauth2PermissionScopes | fl
Retrieve all the delegated permissions defined by Microsoft graph (the resource application) in your tenant application. Identify the delegated permissions that you need to grant the client application. In this example, the delegation permissions areUser.Read.AllandGroup.Read.All
User.Read.All
Group.Read.All
Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property Oauth2PermissionScopes | Select -ExpandProperty Oauth2PermissionScopes | fl
Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property Oauth2PermissionScopes | Select -ExpandProperty Oauth2PermissionScopes | fl
Grant the delegated permissions to the client enterprise application by running the following request.$params = @{

"ClientId" = "00001111-aaaa-2222-bbbb-3333cccc4444"
"ConsentType" = "AllPrincipals"
"ResourceId" = "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1"
"Scope" = "User.Read.All Group.Read.All"
}

New-MgOauth2PermissionGrant -BodyParameter $params | 
Format-List Id, ClientId, ConsentType, ResourceId, Scope
Grant the delegated permissions to the client enterprise application by running the following request.
$params = @{

"ClientId" = "00001111-aaaa-2222-bbbb-3333cccc4444"
"ConsentType" = "AllPrincipals"
"ResourceId" = "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1"
"Scope" = "User.Read.All Group.Read.All"
}

New-MgOauth2PermissionGrant -BodyParameter $params | 
Format-List Id, ClientId, ConsentType, ResourceId, Scope
$params = @{

"ClientId" = "00001111-aaaa-2222-bbbb-3333cccc4444"
"ConsentType" = "AllPrincipals"
"ResourceId" = "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1"
"Scope" = "User.Read.All Group.Read.All"
}

New-MgOauth2PermissionGrant -BodyParameter $params | 
Format-List Id, ClientId, ConsentType, ResourceId, Scope
Confirm that you've granted tenant wide admin consent by running the following request.
Confirm that you've granted tenant wide admin consent by running the following request.
Get-MgOauth2PermissionGrant -Filter "clientId eq '00001111-aaaa-2222-bbbb-3333cccc4444' and consentType eq 'AllPrincipals'"
Get-MgOauth2PermissionGrant -Filter "clientId eq '00001111-aaaa-2222-bbbb-3333cccc4444' and consentType eq 'AllPrincipals'"
Grant admin consent for application permissions using Microsoft Graph PowerShell
In this section, you grant application permissions to your enterprise application. Application permissions are permissions your application needs to access a resource API. The permissions are defined by the resource API and granted to your enterprise application, which is the principal application. After you grant your application access to the resource API, it runs as a background service or daemon without a signed-in user. Application permissions are also known as app roles.
In the following example, you grant the Microsoft Graph application (the principal of IDaaaaaaaa-bbbb-cccc-1111-222222222222) an app role (application permission) of IDdf021288-bdef-4463-88db-98f22de89214that's exposed by a resource API of ID11112222-bbbb-3333-cccc-4444dddd5555.
aaaaaaaa-bbbb-cccc-1111-222222222222
df021288-bdef-4463-88db-98f22de89214
11112222-bbbb-3333-cccc-4444dddd5555
Connect to Microsoft Graph PowerShell and sign in as at least aPrivileged Role Administrator.Connect-MgGraph -Scopes "Application.ReadWrite.All", "AppRoleAssignment.ReadWrite.All"
Connect to Microsoft Graph PowerShell and sign in as at least aPrivileged Role Administrator.
Connect-MgGraph -Scopes "Application.ReadWrite.All", "AppRoleAssignment.ReadWrite.All"
Connect-MgGraph -Scopes "Application.ReadWrite.All", "AppRoleAssignment.ReadWrite.All"
Retrieve the app roles defined by Microsoft graph in your tenant. Identify the app role that you need to grant the client enterprise application. In this example, the app role ID isdf021288-bdef-4463-88db-98f22de89214.Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property AppRoles | Select -ExpandProperty appRoles |fl
Retrieve the app roles defined by Microsoft graph in your tenant. Identify the app role that you need to grant the client enterprise application. In this example, the app role ID isdf021288-bdef-4463-88db-98f22de89214.
df021288-bdef-4463-88db-98f22de89214
Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property AppRoles | Select -ExpandProperty appRoles |fl
Get-MgServicePrincipal -Filter "displayName eq 'Microsoft Graph'" -Property AppRoles | Select -ExpandProperty appRoles |fl
Grant the application permission (app role) to the principal application by running the following request.
Grant the application permission (app role) to the principal application by running the following request.
$params = @{
  "PrincipalId" ="aaaaaaaa-bbbb-cccc-1111-222222222222"
  "ResourceId" = "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1"
  "AppRoleId" = "df021288-bdef-4463-88db-98f22de89214"
}

New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId 'aaaaaaaa-bbbb-cccc-1111-222222222222' -BodyParameter $params | 
  Format-List Id, AppRoleId, CreatedDateTime, PrincipalDisplayName, PrincipalId, PrincipalType, ResourceDisplayName
$params = @{
  "PrincipalId" ="aaaaaaaa-bbbb-cccc-1111-222222222222"
  "ResourceId" = "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1"
  "AppRoleId" = "df021288-bdef-4463-88db-98f22de89214"
}

New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId 'aaaaaaaa-bbbb-cccc-1111-222222222222' -BodyParameter $params | 
  Format-List Id, AppRoleId, CreatedDateTime, PrincipalDisplayName, PrincipalId, PrincipalType, ResourceDisplayName
UseGraph Explorerto grant both delegated and application permissions.
Grant admin consent for delegated permissions using Microsoft Graph API
In this section, you grant delegated permissions to your application. Delegated permissions are permissions your application needs to access an API on behalf of a signed-in user. The permissions are defined by a resource API and granted to your enterprise application, which is the client application. This consent is granted on behalf of all users.
You need to sign in as at least aCloud Application Administrator.
In the following example, the resource API is Microsoft Graph of object IDaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb. The Microsoft Graph API defines the delegated permissions,User.Read.AllandGroup.Read.All. The consentType isAllPrincipals, indicating that you're consenting on behalf of all users in the tenant. The object ID of the client enterprise application isaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb.
aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb
User.Read.All
Group.Read.All
AllPrincipals
aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb
Caution
Be careful! Permissions granted programmatically are not subject to review or confirmation. They take effect immediately.
Retrieve all the delegated permissions defined by Microsoft graph (the resource application) in your tenant application. Identify the delegated permissions that you need to grant the client application. In this example, the delegation permissions areUser.Read.AllandGroup.Read.AllGET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,oauth2PermissionScopes
Retrieve all the delegated permissions defined by Microsoft graph (the resource application) in your tenant application. Identify the delegated permissions that you need to grant the client application. In this example, the delegation permissions areUser.Read.AllandGroup.Read.All
User.Read.All
Group.Read.All
GET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,oauth2PermissionScopes
GET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,oauth2PermissionScopes
Grant the delegated permissions to the client enterprise application by running the following request.POST https://graph.microsoft.com/v1.0/oauth2PermissionGrants

Request body
{
   "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444",
   "consentType": "AllPrincipals",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "scope": "User.Read.All Group.Read.All"
}
Grant the delegated permissions to the client enterprise application by running the following request.
POST https://graph.microsoft.com/v1.0/oauth2PermissionGrants

Request body
{
   "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444",
   "consentType": "AllPrincipals",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "scope": "User.Read.All Group.Read.All"
}
POST https://graph.microsoft.com/v1.0/oauth2PermissionGrants

Request body
{
   "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444",
   "consentType": "AllPrincipals",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "scope": "User.Read.All Group.Read.All"
}
Confirm that you've granted tenant wide admin consent by running the following request.GET https://graph.microsoft.com/v1.0/oauth2PermissionGrants?$filter=clientId eq '00001111-aaaa-2222-bbbb-3333cccc4444' and consentType eq 'AllPrincipals'
Confirm that you've granted tenant wide admin consent by running the following request.
GET https://graph.microsoft.com/v1.0/oauth2PermissionGrants?$filter=clientId eq '00001111-aaaa-2222-bbbb-3333cccc4444' and consentType eq 'AllPrincipals'
GET https://graph.microsoft.com/v1.0/oauth2PermissionGrants?$filter=clientId eq '00001111-aaaa-2222-bbbb-3333cccc4444' and consentType eq 'AllPrincipals'
Grant admin consent for application permissions using Microsoft Graph API
In this section, you grant application permissions to your enterprise application. Application permissions are permissions your application needs to access a resource API. The permissions are defined by the resource API and granted to your enterprise application, which is the principal application. After you grant your application access to the resource API, it runs as a background service or daemon without a signed-in user. Application permissions are also known as app roles.
In the following example, you grant the application, Microsoft Graph (the principal of ID00001111-aaaa-2222-bbbb-3333cccc4444) an app role (application permission) of IDdf021288-bdef-4463-88db-98f22de89214that's exposed by a resource enterprise application of ID11112222-bbbb-3333-cccc-4444dddd5555.
00001111-aaaa-2222-bbbb-3333cccc4444
df021288-bdef-4463-88db-98f22de89214
11112222-bbbb-3333-cccc-4444dddd5555
You need to sign as at least aPrivileged Role Administrator.
Retrieve the app roles defined by Microsoft graph in your tenant. Identify the app role that you need to grant the client enterprise application. In this example, the app role ID isdf021288-bdef-4463-88db-98f22de89214GET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,appRoles
Retrieve the app roles defined by Microsoft graph in your tenant. Identify the app role that you need to grant the client enterprise application. In this example, the app role ID isdf021288-bdef-4463-88db-98f22de89214
df021288-bdef-4463-88db-98f22de89214
GET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,appRoles
GET https://graph.microsoft.com/v1.0/servicePrincipals?$filter=displayName eq 'Microsoft Graph'&$select=id,displayName,appId,appRoles
Grant the application permission (app role) to the principal application by running the following request.POST https://graph.microsoft.com/v1.0/servicePrincipals/11112222-bbbb-3333-cccc-4444dddd5555/appRoleAssignedTo

Request body

{
   "principalId": "aaaaaaaa-bbbb-cccc-1111-222222222222",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "appRoleId": "df021288-bdef-4463-88db-98f22de89214"
}
Grant the application permission (app role) to the principal application by running the following request.
POST https://graph.microsoft.com/v1.0/servicePrincipals/11112222-bbbb-3333-cccc-4444dddd5555/appRoleAssignedTo

Request body

{
   "principalId": "aaaaaaaa-bbbb-cccc-1111-222222222222",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "appRoleId": "df021288-bdef-4463-88db-98f22de89214"
}
POST https://graph.microsoft.com/v1.0/servicePrincipals/11112222-bbbb-3333-cccc-4444dddd5555/appRoleAssignedTo

Request body

{
   "principalId": "aaaaaaaa-bbbb-cccc-1111-222222222222",
   "resourceId": "a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1",
   "appRoleId": "df021288-bdef-4463-88db-98f22de89214"
}
Next steps
Configure how end-users consent to applications.
Configure the admin consent workflow.
Feedback
Was this page helpful?
Additional resources