Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Author a pipeline decorator
Article
2023-01-27
12 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022
Pipeline decorators let you add steps to the beginning and end of every job.
The process of authoring a pipeline decorator is different than adding steps to a single definition because it applies to all pipelines in an organization.
Suppose your organization requires running a virus scanner on all build outputs that could be released.
Pipeline authors don't need to remember to add that step. We create a decorator that automatically injects the step. Our pipeline decorator injects a custom task that does virus scanning at the end of every pipeline job.
Tip
Check out our newest documentation on extension development using theAzure DevOps Extension SDK.
1. Add contributions to an extension
The following example assumes you're familiar with thecontribution models.
Create an extension.
Once your extension gets created, you have avss-extension.jsonfile.
vss-extension.json
Add contributions to thevss-extension.jsonfile for our new pipeline decorator.
vss-extension.json
{
    "manifestVersion": 1,
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.post-job-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml"
            }
        }
    ],
    "files": [
        {
            "path": "my-decorator.yml",
            "addressable": true,
            "contentType": "text/plain"
        }
    ]
}
{
    "manifestVersion": 1,
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.post-job-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml"
            }
        }
    ],
    "files": [
        {
            "path": "my-decorator.yml",
            "addressable": true,
            "contentType": "text/plain"
        }
    ]
}
Contribution options
Let's take a look at the properties and what they're used for:
id
type
ms.azure-pipelines.pipeline-decorator
targets
properties.template
properties.targettask
ms.azure-pipelines-agent-job.pre-task-tasks
ms.azure-pipelines-agent-job.post-task-tasks
89b8ac58-8cb7-4479-a362-1baaacc6c7ad
Targets
ms.azure-pipelines-agent-job.pre-job-tasks
ms.azure-pipelines-agent-job.post-checkout-tasks
checkout
ms.azure-pipelines-agent-job.post-job-tasks
ms.azure-pipelines-agent-job.pre-task-tasks
ms.azure-pipelines-agent-job.post-task-tasks
ms.azure-release-pipelines-agent-job.pre-task-tasks
ms.azure-release-pipelines-agent-job.post-task-tasks
ms.azure-release-pipelines-agent-job.pre-job-tasks
ms.azure-release-pipelines-agent-job.post-job-tasks
Note
Deployment jobsin a YAML pipeline only supportms.azure-pipelines-agent-job.pre-job-tasksandms.azure-pipelines-agent-job.post-job-taskstargets.Jobssupport all YAML pipeline targets.
Deployment jobs are not supported in classic release pipelines.
ms.azure-pipelines-agent-job.pre-job-tasks
ms.azure-pipelines-agent-job.post-job-tasks
In this example, we usems.azure-pipelines-agent-job.post-job-tasksbecause we want to run at the end of all build jobs.
ms.azure-pipelines-agent-job.post-job-tasks
This extension contributes a pipeline decorator.
Next, we create a template YAML file to define the decorator's behavior.
2. Create a decorator YAML file
In the extension's properties, we chose the name "my-decorator.yml".
Create that file in the root of your contribution. It holds the set of steps to run after each job.
We start with a basic example and work up to the full task.
steps:
- task: CmdLine@2
  displayName: 'Run my script (injected from decorator)'
  inputs:
    script: dir
steps:
- task: CmdLine@2
  displayName: 'Run my script (injected from decorator)'
  inputs:
    script: dir
Note
Pipeline decorator tasks with service connection usage are not supported for classic release pipelines.
3. Install the decorator
To add a pipeline decorator to your organization, you mustinstall an extension.Only private extensions can contribute pipeline decorators.The extension must be authored and shared with your organization before it can be used.
Once the extension has been shared with your organization,search for the extensionand install it.
Save the file, thenbuild and install the extension.
Create and run a basic pipeline.
The decorator automatically injects ourdirscript at the end of every job.
A pipeline run looks similar to the following example.
dir

Note
The decorator runs on every job in every pipeline in the organization.
In later steps, we add logic to control when and how the decorator runs.
4. Inject conditions
In our example, we only need to run the virus scanner if the build outputs might be released to the public. Let's say that only builds from the default branch (typicallymain) are ever released.
We should limit the decorator to jobs running against the default branch.
main
The updated file looks like this:
steps:
- ${{ if eq(resources.repositories['self'].ref, resources.repositories['self'].defaultBranch) }}:
  - script: dir
    displayName: 'Run my script (injected from decorator)'
steps:
- ${{ if eq(resources.repositories['self'].ref, resources.repositories['self'].defaultBranch) }}:
  - script: dir
    displayName: 'Run my script (injected from decorator)'
You can start to see the power of this extensibility point.
Use the context of the current job to conditionally inject steps at runtime.
UseYAML expressionsto make decisions about what steps to inject and when.
Seepipeline decorator expression contextfor a full list of available data.
There's another condition we need to consider: what if the user already included the virus scanning step?
We shouldn't waste time running it again.
In this simple example, we'll pretend that anyscripttask found in the job is running the virus scanner.
(In a real implementation, you'd have a custom task to check for that instead.)
script
The script task's ID isd9bafed4-0b18-4f58-968d-86655b4d2ce9.
If we see another script task, we shouldn't inject ours.
d9bafed4-0b18-4f58-968d-86655b4d2ce9
steps:
- ${{ if and(eq(resources.repositories['self'].ref, resources.repositories['self'].defaultBranch), not(containsValue(job.steps.*.task.id, 'd9bafed4-0b18-4f58-968d-86655b4d2ce9'))) }}:
  - script: dir
    displayName: 'Run my script (injected from decorator)'
steps:
- ${{ if and(eq(resources.repositories['self'].ref, resources.repositories['self'].defaultBranch), not(containsValue(job.steps.*.task.id, 'd9bafed4-0b18-4f58-968d-86655b4d2ce9'))) }}:
  - script: dir
    displayName: 'Run my script (injected from decorator)'
5. Specify a target task
You can specify targettask ID, and inject tasks before or after this target task.
To specify target task, you can modify vss-extension.json manifest file like the following example.
{
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.pre-task-tasks",
                "ms.azure-pipelines-agent-job.post-task-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml",
                "targettask": "target-task-id"
            }
        }
    ],
    ...
}
{
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.pre-task-tasks",
                "ms.azure-pipelines-agent-job.post-task-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml",
                "targettask": "target-task-id"
            }
        }
    ],
    ...
}
When you set up the 'targettask' property, you can specify ID of a target task.
Tasks will be injected before/after all instances of specified target task.
Specify target task's inputs injection
You can specify a list of inputs of the target task that you want to inject as inputs to the injected task.
This feature is designed to work withcustom pipeline tasks. It isn't intended to provide access to target pipeline task inputs via pipeline variables.
To get access to the target pipeline task inputs (inputs with thetarget_prefix), the injected pipeline task should use methods from theazure-pipelines-tasks-task-lib, and not the pipeline variables, for exampleconst inputString = tl.getInput('target_targetInput')).
target_
const inputString = tl.getInput('target_targetInput')
To do so, you can create your own custom pipelinetaskand use the target inputs there. If you need the functionality of one of the out-of-box tasks, likeCmdLine@2, you can create a copy of theCmdLine@2 taskand publish it with your decorator extension.
CmdLine@2
Note
This functionality is only available for tasks that are injected before or after the target task.
To specify this list of inputs, you can modify vss-extension.json manifest file like the following example.
{
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.pre-task-tasks",
                "ms.azure-pipelines-agent-job.post-task-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml",
                "targettask": "target-task-id",
                "targettaskinputs": ["target-task-input", "target-task-second-input"]
            }
        }
    ],
    ...
}
{
    "contributions": [
        {
            "id": "my-required-task",
            "type": "ms.azure-pipelines.pipeline-decorator",
            "targets": [
                "ms.azure-pipelines-agent-job.pre-task-tasks",
                "ms.azure-pipelines-agent-job.post-task-tasks"
            ],
            "properties": {
                "template": "my-decorator.yml",
                "targettask": "target-task-id",
                "targettaskinputs": ["target-task-input", "target-task-second-input"]
            }
        }
    ],
    ...
}
By setting up of 'targettaskinputs' property, you can specify the list of inputs that are expected to inject.
These inputs will be injected into the task with the prefix "target_" and will be available in the injected task liketarget_target-task-input.
target_
target_target-task-input
Note
Target task inputs that get secret values with variables or get them from other tasks won't be injected.
Debug
You might need to debug when you create your decorator. You also might want to see what data you have available in the context.
You can set thesystem.debugContextvariable totruewhen you queue a pipeline.
Then, look at the pipeline summary page.
system.debugContext
true
You see something similar to the following image.

Select the task to see the logs, which show runtime values and that the context is available.
Related articles
About YAML expression syntax
Pipeline decorator expression context
Develop a web extension
Authentication guide
Feedback
Was this page helpful?
Additional resources