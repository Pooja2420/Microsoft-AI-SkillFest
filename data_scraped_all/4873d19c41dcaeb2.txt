Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add and run JavaScript code inline with workflows for Azure Logic Apps
Article
2024-06-10
2 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
To perform custom integration tasks inline with your workflow in Azure Logic Apps, you can directly add and run simple JavaScript code snippets from your workflow in the Azure portal. For this task, use theInline Codeaction namedExecute JavaScript Code. This action returns the result from the code snippet so you can use that output in your workflow's subsequent actions. This action also hasdifferent limits, based on whether you have aConsumption or Standard workflowand works best for code snippets with the following attributes:
require()
To run code that doesn't fit these attributes, you cancreate and call a function using Azure Functions.
This guide shows how the action works in an example workflow that starts with an Office 365 Outlook trigger. The workflow runs when a new email arrives in the associated Outlook email account. The sample code snippet extracts any email addresses that exist in the email body and returns those addresses as output that you can use in a subsequent action.
The following diagram shows the highlights from an example workflow:
Consumption
Standard


Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
The logic app workflow where you want to add your code snippet. The workflow must already start with a trigger.This article's example uses the Office 365 Outlook trigger that is namedWhen a new email arrives.If you don't have a workflow, see the following documentation:Consumption:Create example Consumption logic app workflowStandard:Create example Standard logic app workflows
The logic app workflow where you want to add your code snippet. The workflow must already start with a trigger.
This article's example uses the Office 365 Outlook trigger that is namedWhen a new email arrives.
If you don't have a workflow, see the following documentation:
Consumption:Create example Consumption logic app workflow
Consumption:Create example Consumption logic app workflow
Standard:Create example Standard logic app workflows
Standard:Create example Standard logic app workflows
Based on whether you have a Consumption or Standard logic app workflow, review the following requirements:Consumption workflowNode.js version 8.11.10Link to an integration account, empty or otherwise, from your logic app resource.ImportantMake sure that you use an integration account that's appropriate for your use case or scenario.For example,Free-tierintegration accounts are meant only
for exploratory scenarios and workloads, not production scenarios, are limited in usage and throughput,
and aren't supported by a service-level agreement (SLA).Other integration account tiers incur costs, but include SLA support, offer more throughput, and have higher limits.
Learn more aboutintegration account tiers,limits, andpricing.Standard workflowNode.js versions 16.x.xNo integration account required.
Based on whether you have a Consumption or Standard logic app workflow, review the following requirements:
Consumption workflowNode.js version 8.11.10Link to an integration account, empty or otherwise, from your logic app resource.ImportantMake sure that you use an integration account that's appropriate for your use case or scenario.For example,Free-tierintegration accounts are meant only
for exploratory scenarios and workloads, not production scenarios, are limited in usage and throughput,
and aren't supported by a service-level agreement (SLA).Other integration account tiers incur costs, but include SLA support, offer more throughput, and have higher limits.
Learn more aboutintegration account tiers,limits, andpricing.
Consumption workflow
Node.js version 8.11.10
Node.js version 8.11.10
Link to an integration account, empty or otherwise, from your logic app resource.ImportantMake sure that you use an integration account that's appropriate for your use case or scenario.For example,Free-tierintegration accounts are meant only
for exploratory scenarios and workloads, not production scenarios, are limited in usage and throughput,
and aren't supported by a service-level agreement (SLA).Other integration account tiers incur costs, but include SLA support, offer more throughput, and have higher limits.
Learn more aboutintegration account tiers,limits, andpricing.
Link to an integration account, empty or otherwise, from your logic app resource.
Important
Make sure that you use an integration account that's appropriate for your use case or scenario.
For example,Free-tierintegration accounts are meant only
for exploratory scenarios and workloads, not production scenarios, are limited in usage and throughput,
and aren't supported by a service-level agreement (SLA).
Other integration account tiers incur costs, but include SLA support, offer more throughput, and have higher limits.
Learn more aboutintegration account tiers,limits, andpricing.
Standard workflowNode.js versions 16.x.xNo integration account required.
Standard workflow
Node.js versions 16.x.x
Node.js versions 16.x.x
No integration account required.
No integration account required.
Add the Execute JavaScript Code action
Consumption
Standard
In theAzure portal, open your Consumption logic app workflow in the designer.
In theAzure portal, open your Consumption logic app workflow in the designer.
In the designer,follow these general steps to add theInline Codeaction namedExecute JavaScript Codeto your workflow.This example adds the action under the Office 365 Outlook trigger. By default, the action contains some sample code, including areturnstatement.
In the designer,follow these general steps to add theInline Codeaction namedExecute JavaScript Codeto your workflow.
This example adds the action under the Office 365 Outlook trigger. By default, the action contains some sample code, including areturnstatement.
return

In theCodebox, delete the sample code, and enter your code. Write the code that you'd put inside a method, but without the method signature.TipWhen your cursor is in theCodebox, the dynamic content list appears. Although you'll
use this list later, you can ignore and leave the list open for now. Don't selectHide.If you start typing a recognized keyword, the autocomplete list appears so that you can select from available keywords, for example:The following example code snippet first creates a variable namedmyResultthat stores aregular expression, which specifies a pattern to match in input text. The code then creates a variable namedemailthat stores the email message's body content from the trigger outputs.
In theCodebox, delete the sample code, and enter your code. Write the code that you'd put inside a method, but without the method signature.
Tip
When your cursor is in theCodebox, the dynamic content list appears. Although you'll
use this list later, you can ignore and leave the list open for now. Don't selectHide.
If you start typing a recognized keyword, the autocomplete list appears so that you can select from available keywords, for example:

The following example code snippet first creates a variable namedmyResultthat stores aregular expression, which specifies a pattern to match in input text. The code then creates a variable namedemailthat stores the email message's body content from the trigger outputs.

With your cursor still in theCodebox, from the open dynamic content list, find theWhen a new email arrivessection, and select theBodyproperty, which references the email message's body.The dynamic content list shows the outputs from the trigger and any preceding actions when those outputs match the input format for the edit box that's currently in focus. This list makes these outputs easier to use and reference from your workflow. For this example, the list shows the outputs from the Outlook trigger, including the email message'sBodyproperty.After you select theBodyproperty, theExecute JavaScript Codeaction resolves the token to a read-onlyworkflowContextJSON object, which your snippet can use as input. TheworkflowContextobject includes properties that give your code access to the outputs from the trigger and preceding actions in your workflow, such as the trigger'sbodyproperty, which differs from the email message'sBodyproperty. For more information about theworkflowContextobject, seeReference trigger and action outputs using the workflowContext objectlater in this article.ImportantIf your code snippet references action names that include the dot (.) operator,
those references have to enclose these action names with square brackets ([])
and quotation marks (""), for example:// CorrectworkflowContext.actions["my.action.name"].body// IncorrectworkflowContext.actions.my.action.name.bodyAlso, in theExecute JavaScript Codeaction, you have to add theActionsparameterand then add these action names to that parameter. For more information, seeAdd dependencies as parameters to an Execute JavaScript Code actionlater in this article.
With your cursor still in theCodebox, from the open dynamic content list, find theWhen a new email arrivessection, and select theBodyproperty, which references the email message's body.

The dynamic content list shows the outputs from the trigger and any preceding actions when those outputs match the input format for the edit box that's currently in focus. This list makes these outputs easier to use and reference from your workflow. For this example, the list shows the outputs from the Outlook trigger, including the email message'sBodyproperty.
After you select theBodyproperty, theExecute JavaScript Codeaction resolves the token to a read-onlyworkflowContextJSON object, which your snippet can use as input. TheworkflowContextobject includes properties that give your code access to the outputs from the trigger and preceding actions in your workflow, such as the trigger'sbodyproperty, which differs from the email message'sBodyproperty. For more information about theworkflowContextobject, seeReference trigger and action outputs using the workflowContext objectlater in this article.
workflowContext
workflowContext
body
workflowContext
Important
If your code snippet references action names that include the dot (.) operator,
those references have to enclose these action names with square brackets ([])
and quotation marks (""), for example:
// CorrectworkflowContext.actions["my.action.name"].body
// Correct
workflowContext.actions["my.action.name"].body
// IncorrectworkflowContext.actions.my.action.name.body
// Incorrect
workflowContext.actions.my.action.name.body
Also, in theExecute JavaScript Codeaction, you have to add theActionsparameterand then add these action names to that parameter. For more information, seeAdd dependencies as parameters to an Execute JavaScript Code actionlater in this article.
To differentiate the email message'sBodyproperty that you selected from the trigger'sbodyproperty, rename the secondbodyproperty toBodyinstead. Add the closing semicolon (;) at the end to finish the code statement.TheExecute JavaScript Codeaction doesn't syntactically require areturnstatement. However, by including thereturnstatement, you can more easily reference the action results later in your workflow by using theResulttoken in later actions.In this example, the code snippet returns the result by calling thematch()function, which finds any matches in the email message body to the specified regular expression. TheCreate HTML tableaction then uses theResulttoken to reference the results from theExecute JavaScript Codeaction and creates a single result.
To differentiate the email message'sBodyproperty that you selected from the trigger'sbodyproperty, rename the secondbodyproperty toBodyinstead. Add the closing semicolon (;) at the end to finish the code statement.
body
body
Body

TheExecute JavaScript Codeaction doesn't syntactically require areturnstatement. However, by including thereturnstatement, you can more easily reference the action results later in your workflow by using theResulttoken in later actions.
return
return
In this example, the code snippet returns the result by calling thematch()function, which finds any matches in the email message body to the specified regular expression. TheCreate HTML tableaction then uses theResulttoken to reference the results from theExecute JavaScript Codeaction and creates a single result.
match()

When you're done, save your workflow.
When you're done, save your workflow.
In theAzure portal, open your Standard logic app workflow in the designer.
In theAzure portal, open your Standard logic app workflow in the designer.
In the designer,follow these general steps to add theInline Codeaction namedExecute JavaScript Codeto your workflow.
In the designer,follow these general steps to add theInline Codeaction namedExecute JavaScript Codeto your workflow.
In theCodebox, enter your code. Write the code that you'd put inside a method, but without the method signature.If you start typing a recognized keyword, the autocomplete list appears so that you can select from available keywords, for example:The following example code snippet first creates a variable namedmyResultthat stores aregular expression, which specifies a pattern to match in input text. The code then creates a variable namedemailthat stores the email message's body content from the trigger outputs.
In theCodebox, enter your code. Write the code that you'd put inside a method, but without the method signature.
If you start typing a recognized keyword, the autocomplete list appears so that you can select from available keywords, for example:

The following example code snippet first creates a variable namedmyResultthat stores aregular expression, which specifies a pattern to match in input text. The code then creates a variable namedemailthat stores the email message's body content from the trigger outputs.

With your cursor still in theCodebox, follow these steps:In theCodebox's lower right corner, selectDynamic contentto open the dynamic content list.From the opened list, find theWhen a new email arrivessection, and select theBodytoken, which references the email's message body.The dynamic content list shows the outputs from the trigger and any preceding actions where those outputs match the input format for the edit box that's currently in focus. This list makes these outputs easier to use and reference from your workflow. For this example, the list shows the outputs from the Outlook trigger, including the email message'sBodyproperty.After you select theBodyproperty, theExecute JavaScript Codeaction resolves the token to a read-onlyworkflowContextJSON object, which your snippet can use as input. TheworkflowContextobject includes properties that give your code access to the outputs from the trigger and preceding actions in your workflow, such as the trigger'sbodyproperty, which differs from the email message'sBodyproperty. For more information about theworkflowContextobject, seeReference trigger and action outputs using the workflowContext objectlater in this article.ImportantIf your code snippet references action names that include the dot (.) operator,
those references have to enclose these action names with square brackets ([])
and quotation marks (""), for example:// CorrectworkflowContext.actions["myAction.name"].body// IncorrectworkflowContext.actions.myAction.name.bodyAlso, in theExecute JavaScript Codeaction, you have to add theActionsparameter
and then add these action names to that parameter. For more information, seeAdd dependencies as parameters to an Execute JavaScript Code actionlater in this article.
With your cursor still in theCodebox, follow these steps:
In theCodebox's lower right corner, selectDynamic contentto open the dynamic content list.
In theCodebox's lower right corner, selectDynamic contentto open the dynamic content list.
From the opened list, find theWhen a new email arrivessection, and select theBodytoken, which references the email's message body.
From the opened list, find theWhen a new email arrivessection, and select theBodytoken, which references the email's message body.

The dynamic content list shows the outputs from the trigger and any preceding actions where those outputs match the input format for the edit box that's currently in focus. This list makes these outputs easier to use and reference from your workflow. For this example, the list shows the outputs from the Outlook trigger, including the email message'sBodyproperty.
After you select theBodyproperty, theExecute JavaScript Codeaction resolves the token to a read-onlyworkflowContextJSON object, which your snippet can use as input. TheworkflowContextobject includes properties that give your code access to the outputs from the trigger and preceding actions in your workflow, such as the trigger'sbodyproperty, which differs from the email message'sBodyproperty. For more information about theworkflowContextobject, seeReference trigger and action outputs using the workflowContext objectlater in this article.
workflowContext
workflowContext
body
workflowContext
Important
If your code snippet references action names that include the dot (.) operator,
those references have to enclose these action names with square brackets ([])
and quotation marks (""), for example:
// CorrectworkflowContext.actions["myAction.name"].body
// Correct
workflowContext.actions["myAction.name"].body
// IncorrectworkflowContext.actions.myAction.name.body
// Incorrect
workflowContext.actions.myAction.name.body
Also, in theExecute JavaScript Codeaction, you have to add theActionsparameter
and then add these action names to that parameter. For more information, seeAdd dependencies as parameters to an Execute JavaScript Code actionlater in this article.
To differentiate the email message'sBodyproperty that you selected from the trigger'sbodyproperty, rename the secondbodyproperty toBodyinstead. Add the closing semicolon (;) at the end to finish the code statement.TheExecute JavaScript Codedoesn't syntactically require areturnstatement. However, by including thereturnstatement, you can reference the action results later in your workflow by using theOutputstoken in later actions.In this example, the code snippet returns the result by calling thematch()function, which finds any matches in the email message body to the specified regular expression.TheCreate HTML tableaction then uses theOutputstoken to reference the results from theExecute JavaScript Codeaction and creates a single result.
To differentiate the email message'sBodyproperty that you selected from the trigger'sbodyproperty, rename the secondbodyproperty toBodyinstead. Add the closing semicolon (;) at the end to finish the code statement.
body
body
Body

TheExecute JavaScript Codedoesn't syntactically require areturnstatement. However, by including thereturnstatement, you can reference the action results later in your workflow by using theOutputstoken in later actions.
return
return
In this example, the code snippet returns the result by calling thematch()function, which finds any matches in the email message body to the specified regular expression.
match()

TheCreate HTML tableaction then uses theOutputstoken to reference the results from theExecute JavaScript Codeaction and creates a single result.

When you're done, save your workflow.
When you're done, save your workflow.

Reference trigger and action outputs using the workflowContext object
From inside your code snippet on the designer, you can use the dynamic content list to select a token that references the output from the trigger or any preceding action. When you select the token, theExecute JavaScript Codeaction resolves that token to a read-onlyworkflowContextJSON object. This object gives your code access to the outputs from the trigger, any preceding actions, and the workflow. The object uses the following structure and includes theactions,trigger, andworkflowproperties, which are also objects:
workflowContext
actions
trigger
workflow
{
   "workflowContext": {
      "actions": {
         "<action-name-1>": @actions('<action-name-1>'),
         "<action-name-2>": @actions('<action-name-2>')
      },
      "trigger": {
         @trigger()
      },
      "workflow": {
         @workflow()
      }
   }
}
{
   "workflowContext": {
      "actions": {
         "<action-name-1>": @actions('<action-name-1>'),
         "<action-name-2>": @actions('<action-name-2>')
      },
      "trigger": {
         @trigger()
      },
      "workflow": {
         @workflow()
      }
   }
}
The following table has more information about these properties:
actions
@actions('<action-name>')
trigger
workflow
In this article's example, theworkflowContextJSON object might have the following sample properties and values from the Outlook trigger:
workflowContext
{
   "workflowContext": {
      "trigger": {
         "name": "When_a_new_email_arrives",
         "inputs": {
            "host": {
               "connection": {
                  "name": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Web/connections/office365"
               }
            },
            "method": "get",
            "path": "/Mail/OnNewEmail",
            "queries": {
               "includeAttachments": "False"
            }
         },
         "outputs": {
            "headers": {
               "Pragma": "no-cache",
               "Content-Type": "application/json; charset=utf-8",
               "Expires": "-1",
               "Content-Length": "962095"
            },
            "body": {
               "Id": "AAMkADY0NGZhNjdhLTRmZTQtNGFhOC1iYjFlLTk0MjZlZjczMWRhNgBGAAAAAABmZwxUQtCGTqSPpjjMQeD",
               "DateTimeReceived": "2019-03-28T19:42:16+00:00",
               "HasAttachment": false,
               "Subject": "Hello World",
               "BodyPreview": "Hello World",
               "Importance": 1,
               "ConversationId": "AAQkADY0NGZhNjdhLTRmZTQtNGFhOC1iYjFlLTk0MjZlZjczMWRhNgAQ",
               "IsRead": false,
               "IsHtml": true,
               "Body": "Hello World",
               "From": "<sender>@<domain>.com",
               "To": "<recipient-2>@<domain>.com;<recipient-2>@<domain>.com",
               "Cc": null,
               "Bcc": null,
               "Attachments": []
            }
         },
         "startTime": "2019-05-03T14:30:45.971564Z",
         "endTime": "2019-05-03T14:30:50.1746874Z",
         "scheduledTime": "2019-05-03T14:30:45.8778117Z",
         "trackingId": "1cd5ffbd-f989-4df5-a96a-6e9ce31d03c5",
         "clientTrackingId": "08586447130394969981639729333CU06",
         "originHistoryName": "08586447130394969981639729333CU06",
         "code": "OK",
         "status": "Succeeded"
      },
      "workflow": {
         "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Logic/workflows/<logic-app-workflow-name>",
         "name": "<logic-app-workflow-name>",
         "type": "Microsoft.Logic/workflows",
         "location": "<Azure-region>",
         "run": {
            "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Logic/workflows/<logic-app-workflow-name>/runs/08586453954668694173655267965CU00",
            "name": "08586453954668694173655267965CU00",
            "type": "Microsoft.Logic/workflows/runs"
         }
      }
   }
}
{
   "workflowContext": {
      "trigger": {
         "name": "When_a_new_email_arrives",
         "inputs": {
            "host": {
               "connection": {
                  "name": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Web/connections/office365"
               }
            },
            "method": "get",
            "path": "/Mail/OnNewEmail",
            "queries": {
               "includeAttachments": "False"
            }
         },
         "outputs": {
            "headers": {
               "Pragma": "no-cache",
               "Content-Type": "application/json; charset=utf-8",
               "Expires": "-1",
               "Content-Length": "962095"
            },
            "body": {
               "Id": "AAMkADY0NGZhNjdhLTRmZTQtNGFhOC1iYjFlLTk0MjZlZjczMWRhNgBGAAAAAABmZwxUQtCGTqSPpjjMQeD",
               "DateTimeReceived": "2019-03-28T19:42:16+00:00",
               "HasAttachment": false,
               "Subject": "Hello World",
               "BodyPreview": "Hello World",
               "Importance": 1,
               "ConversationId": "AAQkADY0NGZhNjdhLTRmZTQtNGFhOC1iYjFlLTk0MjZlZjczMWRhNgAQ",
               "IsRead": false,
               "IsHtml": true,
               "Body": "Hello World",
               "From": "<sender>@<domain>.com",
               "To": "<recipient-2>@<domain>.com;<recipient-2>@<domain>.com",
               "Cc": null,
               "Bcc": null,
               "Attachments": []
            }
         },
         "startTime": "2019-05-03T14:30:45.971564Z",
         "endTime": "2019-05-03T14:30:50.1746874Z",
         "scheduledTime": "2019-05-03T14:30:45.8778117Z",
         "trackingId": "1cd5ffbd-f989-4df5-a96a-6e9ce31d03c5",
         "clientTrackingId": "08586447130394969981639729333CU06",
         "originHistoryName": "08586447130394969981639729333CU06",
         "code": "OK",
         "status": "Succeeded"
      },
      "workflow": {
         "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Logic/workflows/<logic-app-workflow-name>",
         "name": "<logic-app-workflow-name>",
         "type": "Microsoft.Logic/workflows",
         "location": "<Azure-region>",
         "run": {
            "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.Logic/workflows/<logic-app-workflow-name>/runs/08586453954668694173655267965CU00",
            "name": "08586453954668694173655267965CU00",
            "type": "Microsoft.Logic/workflows/runs"
         }
      }
   }
}

Add dependencies as parameters to an Execute JavaScript Code action
In some scenarios, you might have to explicitly require that theExecute JavaScript Codeaction includes outputs from the trigger or actions that your code references as dependencies. For example, you have to take this extra step when your code references outputs that aren't available at workflow run time. During workflow creation time, the Azure Logic Apps engine analyzes the code snippet to determine whether the code references any trigger or action outputs. If those references exist, the engine includes those outputs automatically. At workflow run time, if the referenced trigger or action output isn't found in theworkflowContextobject, the engine generates an error. To resolve this error, you have to add that trigger or action as an explicit dependency for theExecute JavaScript Codeaction. Another scenario that requires you to take this step is when theworkflowContextobject references a trigger or action name that uses the dot operator (.).
workflowContext
workflowContext
To add a trigger or action as a dependency, you add theTriggerorActionsparameters as applicable to theExecute JavaScript Codeaction. You then add the trigger or action names as they appear in your workflow's underlying JSON definition.
Note
You can't addVariablesoperations, loops such asFor eachorUntil, and iteration
indexes as explicit dependencies.
If you plan to reuse your code, make sure to always use the code snippet edit box to reference
trigger and action outputs. That way, your code includes the resolved token references, rather than
just add the trigger or action outputs as explicit dependencies.
For example, suppose the Office 365 Outlook connector'sSend approval emailaction precedes the code snippet in the sample workflow. The following example code snippet includes a reference to theSelectedOptionoutput from this action.
Consumption
Standard


For this example, you have to add only theActionsparameter, and then add the action's JSON name,Send_approval_email, to the parameter. That way, you specify that theExecute JavaScript Codeaction explicitly includes the output from theSend approval emailaction.
Send_approval_email
Find the trigger or action's JSON name
Before you start, you need the JSON name for the trigger or action in the underlying workflow definition.
Names in your workflow definition use an underscore (_), not a space.
Names in your workflow definition use an underscore (_), not a space.
If an action name uses the dot operator (.), include that operator, for example:My.Action.Name
If an action name uses the dot operator (.), include that operator, for example:
My.Action.Name
My.Action.Name
Consumption
Standard
On the workflow designer toolbar, selectCode view. In theactionsobject, find the action's name.For example,Send_approval_emailis the JSON name for theSend approval emailaction.
On the workflow designer toolbar, selectCode view. In theactionsobject, find the action's name.
actions
For example,Send_approval_emailis the JSON name for theSend approval emailaction.
Send_approval_email

To return to designer view, on the code view toolbar, selectDesigner.
To return to designer view, on the code view toolbar, selectDesigner.
Now add the JSON name to theExecute JavaScript Codeaction.
Now add the JSON name to theExecute JavaScript Codeaction.
On the workflow menu, selectCode. In theactionsobject, find the action's name.For example,Send_approval_emailis the JSON name for theSend approval emailaction.
On the workflow menu, selectCode. In theactionsobject, find the action's name.
actions
For example,Send_approval_emailis the JSON name for theSend approval emailaction.
Send_approval_email

To return to designer view, on the workflow menu, selectDesigner.
To return to designer view, on the workflow menu, selectDesigner.
Now add the JSON name to theExecute JavaScript Codeaction.
Now add the JSON name to theExecute JavaScript Codeaction.
Add the trigger or action name to the Execute JavaScript Code action
In theExecute JavaScript Codeaction, open theAdd new parameterlist.
In theExecute JavaScript Codeaction, open theAdd new parameterlist.
From the parameters list, select the following parameters as your scenario requires.ParameterDescriptionActionsInclude outputs from preceding actions as dependencies. When you select this parameter, you're prompted for the actions that you want to add.TriggerInclude outputs from the trigger as dependencies. When you select this parameter, you're prompted whether to include trigger results. So, from theTriggerlist, selectYes.
From the parameters list, select the following parameters as your scenario requires.
For this example, select theActionsparameter.
For this example, select theActionsparameter.

In theActions Item - 1box, enter the action's JSON name.
In theActions Item - 1box, enter the action's JSON name.

To add another action name, selectAdd new item.
To add another action name, selectAdd new item.
When you're done, save your workflow.
When you're done, save your workflow.
Action reference
For more information about theExecute JavaScript Codeaction's structure and syntax in your underlying workflow definition using the Workflow Definition Language, see this action'sreference section.
Next steps
Managed connectors for Azure Logic Apps
Built-in connectors for Azure Logic Apps
Feedback
Was this page helpful?
Additional resources