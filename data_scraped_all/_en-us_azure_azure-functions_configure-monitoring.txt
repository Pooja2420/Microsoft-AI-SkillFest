Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to configure monitoring for Azure Functions
Article
2024-08-06
19 contributors
In this article
Azure Functions integrates with Application Insights to better enable you to monitor your function apps. Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service that collects data generated by your function app, including information your app writes to logs. Application Insights integration is typically enabled when your function app is created. If your app doesn't have the instrumentation key set, you must firstenable Application Insights integration.
You can use Application Insights without any custom configuration. However, the default configuration can result in high volumes of data. If you're using a Visual Studio Azure subscription, you might hit your data cap for Application Insights. For information about Application Insights costs, seeApplication Insights billing. For more information, seeSolutions with high-volume of telemetry.
In this article, you learn how to configure and customize the data that your functions send to Application Insights. You can set common logging configurations in thehost.jsonfile. By default, these settings also govern custom logs emitted by your code. However, in some cases this behavior can be disabled in favor of options that give you more control over logging. For more information, seeCustom application logs.
Note
You can use specially configured application settings to represent specific settings in ahost.jsonfile for a particular environment. Doing so lets you effectively changehost.jsonsettings without needing to republish thehost.jsonfile in your project. For more information, seeOverride host.json values.
Custom application logs
By default, custom application logs you write are sent to the Functions host, which then sends them to Application Insights under theWorker category. Some language stacks allow you to instead send the logs directly to Application Insights, which gives you full control over how logs you write are emitted. In this case, the logging pipeline changes fromworker -> Functions host -> Application Insightstoworker -> Application Insights.
worker -> Functions host -> Application Insights
worker -> Application Insights
The following table summarizes the configuration options available for each stack:
host.json
host.json
host.json
host.json
host.json
host.json
When you configure custom application logs to be sent directly, the host no longer emits them, andhost.jsonno longer controls their behavior. Similarly, the options exposed by each stack apply only to custom logs, and they don't change the behavior of the other runtime logs described in this article. In this case, to control the behavior of all logs, you might need to make changes in both configurations.
host.json
Configure categories
The Azure Functions logger includes acategoryfor every log. The category indicates which part of the runtime code or your function code wrote the log. Categories differ between version 1.x and later versions.
Category names are assigned differently in Functions compared to other .NET frameworks. For example, when you useILogger<T>in ASP.NET, the category is the name of the generic type. C# functions also useILogger<T>, but instead of setting the generic type name as a category, the runtime assigns categories based on the source. For example:
ILogger<T>
ILogger<T>
Entries related to running a function are assigned a category ofFunction.<FUNCTION_NAME>.
Function.<FUNCTION_NAME>
Entries created by user code inside the function, such as when callinglogger.LogInformation(), are assigned a category ofFunction.<FUNCTION_NAME>.User.
logger.LogInformation()
Function.<FUNCTION_NAME>.User
The following table describes the main categories of logs that the runtime creates:
v2.x+
v1.x
Function
Information
Error
Warning
Function.<YOUR_FUNCTION_NAME>
Information
Error
Warning
Function.<YOUR_FUNCTION_NAME>
Function.<YOUR_FUNCTION_NAME>
Information
Error
Warning
Function.<YOUR_FUNCTION_NAME>.User
Host.Aggregator
Information
Warning
Host.Results
Information
Warning
Microsoft
Worker
Microsoft.*
Microsoft.Azure.WebJobs.Script.Workers.Rpc.RpcFunctionInvocationDispatcher
Information
Note
For .NET class library functions, these categories assume you're usingILoggerand notILogger<T>. For more information, see theFunctions ILogger documentation.
ILogger
ILogger<T>
Function
Host.Aggregator
Information
Warning
Host.Executor
Information
Error
Warning
Host.Results
Information
Warning
TheTablecolumn indicates to which table in Application Insights the log is written.
Configure log levels
Alog levelis assigned to every log. The value is an integer that indicates relative importance:
Thehost.jsonfileconfiguration determines how much logging a functions app sends to Application Insights.
For each category, you indicate the minimum log level to send. Thehost.jsonsettings vary depending on theFunctions runtime version.
The following examples define logging based on the following rules:
The default logging level is set toWarningto preventexcessive loggingfor unanticipated categories.
Warning
Host.AggregatorandHost.Resultsare set to lower levels. Setting logging levels too high (especially higher thanInformation) can result in loss of metrics and performance data.
Host.Aggregator
Host.Results
Information
Logging for function runs is set toInformation. If necessary, you canoverridethis setting in local development toDebugorTrace.
Information
Debug
Trace
v2.x+
v1.x
{
  "logging": {
    "fileLoggingMode": "debugOnly",
    "logLevel": {
      "default": "Warning",
      "Host.Aggregator": "Trace",
      "Host.Results": "Information",
      "Function": "Information"
    }
  }
}
{
  "logging": {
    "fileLoggingMode": "debugOnly",
    "logLevel": {
      "default": "Warning",
      "Host.Aggregator": "Trace",
      "Host.Results": "Information",
      "Function": "Information"
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Warning",
      "categoryLevels": {
        "Host.Results": "Information",
        "Host.Aggregator": "Trace",
        "Function": "Information"
      }
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Warning",
      "categoryLevels": {
        "Host.Results": "Information",
        "Host.Aggregator": "Trace",
        "Function": "Information"
      }
    }
  }
}
Ifhost.jsonincludes multiple logs that start with the same string, the more defined logs ones are matched first. Consider the following example that logs everything in the runtime, exceptHost.Aggregator, at theErrorlevel:
Host.Aggregator
Error
v2.x+
v1.x
{
  "logging": {
    "fileLoggingMode": "debugOnly",
    "logLevel": {
      "default": "Information",
      "Host": "Error",
      "Function": "Error",
      "Host.Aggregator": "Information"
    }
  }
}
{
  "logging": {
    "fileLoggingMode": "debugOnly",
    "logLevel": {
      "default": "Information",
      "Host": "Error",
      "Function": "Error",
      "Host.Aggregator": "Information"
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Information",
      "categoryLevels": {
        "Host": "Error",
        "Function": "Error",
        "Host.Aggregator": "Information"
      }
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Information",
      "categoryLevels": {
        "Host": "Error",
        "Function": "Error",
        "Host.Aggregator": "Information"
      }
    }
  }
}
You can use a log level setting ofNoneto prevent any logs from being written for a category.
None
Caution
Azure Functions integrates with Application Insights by storing telemetry events in Application Insights tables. If you set a category log level to any value different fromInformation, it prevents the telemetry from flowing to those tables, and you won't be able to see related data in theApplication InsightsandFunction Monitortabs.
Information
For example, for the previous samples:
If you set theHost.Resultscategory to theErrorlog level, Azure gathers only host execution telemetry events in therequeststable for failed function executions, preventing the display of host execution details of successful executions in both theApplication InsightsandFunction Monitortabs.
Host.Results
Error
requests
If you set theFunctioncategory to theErrorlog level, it stops gathering function telemetry data related todependencies,customMetrics, andcustomEventsfor all the functions, preventing you from viewing any of this data in Application Insights. Azure gathers onlytraceslogged at theErrorlevel.
Function
Error
dependencies
customMetrics
customEvents
traces
Error
In both cases, Azure continues to collect errors and exceptions data in theApplication InsightsandFunction Monitortabs. For more information, seeSolutions with high-volume of telemetry.
Configure the aggregator
As noted in the previous section, the runtime aggregates data about function executions over a period of time. The default period is 30 seconds or 1,000 runs, whichever comes first. You can configure this setting in thehost.jsonfile. For example:
{
    "aggregator": {
      "batchSize": 1000,
      "flushTimeout": "00:00:30"
    }
}
{
    "aggregator": {
      "batchSize": 1000,
      "flushTimeout": "00:00:30"
    }
}
Configure sampling
Application Insights has asamplingfeature that can protect you from producing too much telemetry data on completed executions at times of peak load. When the rate of incoming executions exceeds a specified threshold, Application Insights starts to randomly ignore some of the incoming executions. The default setting for maximum number of executions per second is 20 (five in version 1.x). You can configure sampling inhost.json. Here's an example:
v2.x+
v1.x
{
  "logging": {
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "maxTelemetryItemsPerSecond" : 20,
        "excludedTypes": "Request;Exception"
      }
    }
  }
}
{
  "logging": {
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "maxTelemetryItemsPerSecond" : 20,
        "excludedTypes": "Request;Exception"
      }
    }
  }
}
You can exclude certain types of telemetry from sampling. In this example, data of typeRequestandExceptionis excluded from sampling. It ensures thatallfunction executions (requests) and exceptions are logged while other types of telemetry remain subject to sampling.
Request
Exception
{
  "applicationInsights": {
    "sampling": {
      "isEnabled": true,
      "maxTelemetryItemsPerSecond" : 5
    }
  }
}
{
  "applicationInsights": {
    "sampling": {
      "isEnabled": true,
      "maxTelemetryItemsPerSecond" : 5
    }
  }
}
If your project uses a dependency on the Application Insights SDK to do manual telemetry tracking, you might experience unusual behavior if your sampling configuration differs from the sampling configuration in your function app. In such cases, use the same sampling configuration as the function app. For more information, seeSampling in Application Insights.
Enable SQL query collection
Application Insights automatically collects data on dependencies for HTTP requests, database calls, and for several bindings. For more information, seeDependencies. For SQL calls, the name of the server and database is always collected and stored, but SQL query text isn't collected by default. You can usedependencyTrackingOptions.enableSqlCommandTextInstrumentationto enable SQL query text logging by using the following settings (at a minimum) in yourhost.json file:
dependencyTrackingOptions.enableSqlCommandTextInstrumentation
"logging": {
    "applicationInsights": {
        "enableDependencyTracking": true,    
        "dependencyTrackingOptions": {
            "enableSqlCommandTextInstrumentation": true
        }
    }
}
"logging": {
    "applicationInsights": {
        "enableDependencyTracking": true,    
        "dependencyTrackingOptions": {
            "enableSqlCommandTextInstrumentation": true
        }
    }
}
For more information, seeAdvanced SQL tracking to get full SQL query.
Configure scale controller logs
This feature is in preview.
You can have theAzure Functions scale controlleremit logs to either Application Insights or to Blob storage to better understand the decisions the scale controller is making for your function app.
To enable this feature, add an application setting namedSCALE_CONTROLLER_LOGGING_ENABLEDto your function app settings. The following value of the setting must be in the format<DESTINATION>:<VERBOSITY>. For more information, see the following table:
SCALE_CONTROLLER_LOGGING_ENABLED
<DESTINATION>:<VERBOSITY>
<DESTINATION>
AppInsights
Blob
AppInsights
Blob
azure-functions-scale-controller
AzureWebJobsStorage
<VERBOSITY>
None
Warning
Verbose
Verbose
Tip
Keep in mind that while you leave scale controller logging enabled, it impacts thepotential costs of monitoring your function app. Consider enabling logging until you have collected enough data to understand how the scale controller is behaving, and then disabling it.
For example, the following Azure CLI command turns on verbose logging from the scale controller to Application Insights:
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings SCALE_CONTROLLER_LOGGING_ENABLED=AppInsights:Verbose
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings SCALE_CONTROLLER_LOGGING_ENABLED=AppInsights:Verbose
In this example, replace<FUNCTION_APP_NAME>and<RESOURCE_GROUP_NAME>with the name of your function app and the resource group name, respectively.
<FUNCTION_APP_NAME>
<RESOURCE_GROUP_NAME>
The following Azure CLI command disables logging by setting the verbosity toNone:
None
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings SCALE_CONTROLLER_LOGGING_ENABLED=AppInsights:None
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings SCALE_CONTROLLER_LOGGING_ENABLED=AppInsights:None
You can also disable logging by removing theSCALE_CONTROLLER_LOGGING_ENABLEDsetting using the following Azure CLI command:
SCALE_CONTROLLER_LOGGING_ENABLED
az functionapp config appsettings delete --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--setting-names SCALE_CONTROLLER_LOGGING_ENABLED
az functionapp config appsettings delete --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--setting-names SCALE_CONTROLLER_LOGGING_ENABLED
With scale controller logging enabled, you're now able toquery your scale controller logs.
Enable Application Insights integration
For a function app to send data to Application Insights, it needs to connect to the Application Insights resource usingonly oneof these application settings:
APPLICATIONINSIGHTS_CONNECTION_STRING
APPINSIGHTS_INSTRUMENTATIONKEY
When you create your function app in theAzure portalfrom the command line by usingAzure Functions Core ToolsorVisual Studio Code, Application Insights integration is enabled by default. The Application Insights resource has the same name as your function app, and is created either in the same region or in the nearest region.
Require Microsoft Entra authentication
You can use theAPPLICATIONINSIGHTS_AUTHENTICATION_STRINGsetting to enable connections to Application Insights using Microsoft Entra authentication. This creates a consistent authentication experience across all Application Insights pipelines, including Profiler and Snapshot Debugger, as well as from the Functions host and language-specific agents.
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
Note
There's no Entra authentication support for local development.
The value contains eitherAuthorization=AADfor a system-assigned managed identity orClientId=<YOUR_CLIENT_ID>;Authorization=AADfor a user-assigned managed identity. The managed identity must already be available to the function app, with an assigned role equivalent toMonitoring Metrics Publisher. For more information, seeMicrosoft Entra authentication for Application Insights.
Authorization=AAD
ClientId=<YOUR_CLIENT_ID>;Authorization=AAD
TheAPPLICATIONINSIGHTS_CONNECTION_STRINGsetting is still required.
APPLICATIONINSIGHTS_CONNECTION_STRING
Note
When usingAPPLICATIONINSIGHTS_AUTHENTICATION_STRINGto connect to Application Insights using Microsoft Entra authentication, you should alsoDisable local authentication for Application Insights. This configuration requires Microsoft Entra authentication in order for telemetry to be ingested into your workspace.
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
New function app in the portal
To review the Application Insights resource being created, select it to expand theApplication Insightswindow. You can change theNew resource nameor select a differentLocationin anAzure geographywhere you want to store your data.

When you selectCreate, an Application Insights resource is created with your function app, which has theAPPLICATIONINSIGHTS_CONNECTION_STRINGset in application settings. Everything is ready to go.
APPLICATIONINSIGHTS_CONNECTION_STRING

Add to an existing function app
If an Application Insights resource wasn't created with your function app, use the following steps to create the resource. You can then add the connection string from that resource as anapplication settingin your function app.
In theAzure portal, search for and selectfunction app, and then select your function app.
In theAzure portal, search for and selectfunction app, and then select your function app.
Select theApplication Insights is not configuredbanner at the top of the window. If you don't see this banner, then your app might already have Application Insights enabled.
Select theApplication Insights is not configuredbanner at the top of the window. If you don't see this banner, then your app might already have Application Insights enabled.

ExpandChange your resourceand create an Application Insights resource by using the settings specified in the following table:SettingSuggested valueDescriptionNew resource nameUnique app nameIt's easiest to use the same name as your function app, which must be unique in your subscription.LocationWest EuropeIf possible, use the sameregionas your function app, or the one that's close to that region.
ExpandChange your resourceand create an Application Insights resource by using the settings specified in the following table:

SelectApply.The Application Insights resource is created in the same resource group and subscription as your function app. After the resource is created, close theApplication Insightswindow.
SelectApply.
The Application Insights resource is created in the same resource group and subscription as your function app. After the resource is created, close theApplication Insightswindow.
In your function app, expandSettings, and then selectEnvironment variables. In theApp settingstab, if you see an app setting namedAPPLICATIONINSIGHTS_CONNECTION_STRING, Application Insights integration is enabled for your function app running in Azure. If this setting doesn't exist, add it by using your Application Insights connection string as the value.
In your function app, expandSettings, and then selectEnvironment variables. In theApp settingstab, if you see an app setting namedAPPLICATIONINSIGHTS_CONNECTION_STRING, Application Insights integration is enabled for your function app running in Azure. If this setting doesn't exist, add it by using your Application Insights connection string as the value.
APPLICATIONINSIGHTS_CONNECTION_STRING
Note
Older function apps might useAPPINSIGHTS_INSTRUMENTATIONKEYinstead ofAPPLICATIONINSIGHTS_CONNECTION_STRING. When possible, update your app to use the connection string instead of the instrumentation key.
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
Disable built-in logging
Early versions of Functions used built-in monitoring, which is no longer recommended. When you enable Application Insights, disable the built-in logging that uses Azure Storage. The built-in logging is useful for testing with light workloads, but isn't intended for high-load production use. For production monitoring, we recommend Application Insights. If you use built-in logging in production, the logging record might be incomplete because of throttling on Azure Storage.
To disable built-in logging, delete theAzureWebJobsDashboardapp setting. For more information about how to delete app settings in the Azure portal, see theApplication settingssection ofHow to manage a function app. Before you delete the app setting, ensure that no existing functions in the same function app use the setting for Azure Storage triggers or bindings.
AzureWebJobsDashboard
Solutions with high volume of telemetry
Function apps are an essential part of solutions that can cause high volumes of telemetry, such as IoT solutions, rapid event driven solutions, high load financial systems, and integration systems. In this case, you should consider extra configuration to reduce costs while maintaining observability.
The generated telemetry can be consumed in real-time dashboards, alerting, detailed diagnostics, and so on. Depending on how the generated telemetry is consumed, you need to define a strategy to reduce the volume of data generated. This strategy allows you to properly monitor, operate, and diagnose your function apps in production. Consider the following options:
Use sampling: As mentionedpreviously, sampling helps to dramatically reduce the volume of telemetry events ingested while maintaining a statistically correct analysis. It could happen that even using sampling you still get a high volume of telemetry. Inspect the options thatadaptive samplingprovides to you. For example, set themaxTelemetryItemsPerSecondto a value that balances the volume generated with your monitoring needs. Keep in mind that the telemetry sampling is applied per host executing your function app.
Use sampling: As mentionedpreviously, sampling helps to dramatically reduce the volume of telemetry events ingested while maintaining a statistically correct analysis. It could happen that even using sampling you still get a high volume of telemetry. Inspect the options thatadaptive samplingprovides to you. For example, set themaxTelemetryItemsPerSecondto a value that balances the volume generated with your monitoring needs. Keep in mind that the telemetry sampling is applied per host executing your function app.
maxTelemetryItemsPerSecond
Default log level: UseWarningorErroras the default value for all telemetry categories. Later, you can decide whichcategoriesyou want to set at theInformationlevel, so that you can monitor and diagnose your functions properly.
Default log level: UseWarningorErroras the default value for all telemetry categories. Later, you can decide whichcategoriesyou want to set at theInformationlevel, so that you can monitor and diagnose your functions properly.
Warning
Error
Information
Tune your functions telemetry: With the default log level set toErrororWarning, no detailed information from each function is gathered (dependencies, custom metrics, custom events, and traces). For those functions that are key for production monitoring, define an explicit entry for theFunction.<YOUR_FUNCTION_NAME>category and set it toInformation, so that you can gather detailed information. To avoid gatheringuser-generated logsat theInformationlevel, set theFunction.<YOUR_FUNCTION_NAME>.Usercategory to theErrororWarninglog level.
Tune your functions telemetry: With the default log level set toErrororWarning, no detailed information from each function is gathered (dependencies, custom metrics, custom events, and traces). For those functions that are key for production monitoring, define an explicit entry for theFunction.<YOUR_FUNCTION_NAME>category and set it toInformation, so that you can gather detailed information. To avoid gatheringuser-generated logsat theInformationlevel, set theFunction.<YOUR_FUNCTION_NAME>.Usercategory to theErrororWarninglog level.
Error
Warning
Function.<YOUR_FUNCTION_NAME>
Information
Information
Function.<YOUR_FUNCTION_NAME>.User
Error
Warning
Host.Aggregator category: As described inconfigure categories, this category provides aggregated information of function invocations. The information from this category is gathered in the Application InsightscustomMetricstable, and is shown in the functionOverviewtab in the Azure portal. Depending on how you configure the aggregator, consider that there can be a delay, determined by theflushTimeoutsetting, in the telemetry gathered. If you set this category to a value different fromInformation, you stop gathering the data in thecustomMetricstable and don't display metrics in the functionOverviewtab.The following screenshot showsHost.Aggregatortelemetry data displayed in the functionOverviewtab:The following screenshot showsHost.Aggregatortelemetry data in Application InsightscustomMetricstable:
Host.Aggregator category: As described inconfigure categories, this category provides aggregated information of function invocations. The information from this category is gathered in the Application InsightscustomMetricstable, and is shown in the functionOverviewtab in the Azure portal. Depending on how you configure the aggregator, consider that there can be a delay, determined by theflushTimeoutsetting, in the telemetry gathered. If you set this category to a value different fromInformation, you stop gathering the data in thecustomMetricstable and don't display metrics in the functionOverviewtab.
customMetrics
flushTimeout
Information
customMetrics
The following screenshot showsHost.Aggregatortelemetry data displayed in the functionOverviewtab:
Host.Aggregator

The following screenshot showsHost.Aggregatortelemetry data in Application InsightscustomMetricstable:
Host.Aggregator
customMetrics

Host.Results category: As described inconfigure categories, this category provides the runtime-generated logs indicating the success or failure of a function invocation. The information from this category is gathered in the Application Insightsrequeststable, and is shown in the functionMonitortab and in different Application Insights dashboards (Performance, Failures, and so on). If you set this category to a value different thanInformation, you gather only telemetry generated at the log level defined (or higher). For example, setting it toerrorresults in tracking requests data only for failed executions.The following screenshot shows theHost.Resultstelemetry data displayed in the functionMonitortab:The following screenshot showsHost.Resultstelemetry data displayed in Application Insights Performance dashboard:
Host.Results category: As described inconfigure categories, this category provides the runtime-generated logs indicating the success or failure of a function invocation. The information from this category is gathered in the Application Insightsrequeststable, and is shown in the functionMonitortab and in different Application Insights dashboards (Performance, Failures, and so on). If you set this category to a value different thanInformation, you gather only telemetry generated at the log level defined (or higher). For example, setting it toerrorresults in tracking requests data only for failed executions.
requests
Information
error
The following screenshot shows theHost.Resultstelemetry data displayed in the functionMonitortab:
Host.Results

The following screenshot showsHost.Resultstelemetry data displayed in Application Insights Performance dashboard:
Host.Results

Host.Aggregator vs Host.Results: Both categories provide good insights about function executions. If needed, you can remove the detailed information from one of these categories, so that you can use the other for monitoring and alerting.
Here's a sample:
Host.Aggregator vs Host.Results: Both categories provide good insights about function executions. If needed, you can remove the detailed information from one of these categories, so that you can use the other for monitoring and alerting.
Here's a sample:
v2.x+
v1.x
{
  "version": "2.0",  
  "logging": {
    "logLevel": {
      "default": "Warning",
      "Function": "Error",
      "Host.Aggregator": "Error",
      "Host.Results": "Information", 
      "Function.Function1": "Information",
      "Function.Function1.User": "Error"
    },
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "maxTelemetryItemsPerSecond": 1,
        "excludedTypes": "Exception"
      }
    }
  }
}
{
  "version": "2.0",  
  "logging": {
    "logLevel": {
      "default": "Warning",
      "Function": "Error",
      "Host.Aggregator": "Error",
      "Host.Results": "Information", 
      "Function.Function1": "Information",
      "Function.Function1.User": "Error"
    },
    "applicationInsights": {
      "samplingSettings": {
        "isEnabled": true,
        "maxTelemetryItemsPerSecond": 1,
        "excludedTypes": "Exception"
      }
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Warning",
      "categoryLevels": {
        "Function": "Error",
        "Host.Aggregator": "Error",
        "Host.Results": "Information",
        "Host.Executor": "Warning"
      }
    }
  },
  "applicationInsights": {
    "sampling": {
      "isEnabled": true,
      "maxTelemetryItemsPerSecond" : 5
    }
  }
}
{
  "logger": {
    "categoryFilter": {
      "defaultLevel": "Warning",
      "categoryLevels": {
        "Function": "Error",
        "Host.Aggregator": "Error",
        "Host.Results": "Information",
        "Host.Executor": "Warning"
      }
    }
  },
  "applicationInsights": {
    "sampling": {
      "isEnabled": true,
      "maxTelemetryItemsPerSecond" : 5
    }
  }
}
With this configuration:
The default value for all functions and telemetry categories is set toWarning(including Microsoft and Worker categories). So, by default, all errors and warnings generated by runtime and custom logging are gathered.
The default value for all functions and telemetry categories is set toWarning(including Microsoft and Worker categories). So, by default, all errors and warnings generated by runtime and custom logging are gathered.
Warning
TheFunctioncategory log level is set toError, so for all functions, by default, only exceptions and error logs are gathered. Dependencies, user-generated metrics, and user-generated events are skipped.
TheFunctioncategory log level is set toError, so for all functions, by default, only exceptions and error logs are gathered. Dependencies, user-generated metrics, and user-generated events are skipped.
Function
Error
For theHost.Aggregatorcategory, as it's set to theErrorlog level, aggregated information from function invocations isn't gathered in thecustomMetricsApplication Insights table, and information about executions counts (total, successful, and failed) aren't shown in the function overview dashboard.
For theHost.Aggregatorcategory, as it's set to theErrorlog level, aggregated information from function invocations isn't gathered in thecustomMetricsApplication Insights table, and information about executions counts (total, successful, and failed) aren't shown in the function overview dashboard.
Host.Aggregator
Error
customMetrics
For theHost.Resultscategory, all the host execution information is gathered in therequestsApplication Insights table. All the invocations results are shown in the function Monitor dashboard and in Application Insights dashboards.
For theHost.Resultscategory, all the host execution information is gathered in therequestsApplication Insights table. All the invocations results are shown in the function Monitor dashboard and in Application Insights dashboards.
Host.Results
requests
For the function calledFunction1, we set the log level toInformation. So, for this concrete function, all the telemetry is gathered (dependency, custom metrics, and custom events). For the same function, we set theFunction1.Usercategory (user-generated traces) toError, so only custom error logging is gathered.NoteConfiguration per function isn't supported in v1.x of the Functions runtime.
For the function calledFunction1, we set the log level toInformation. So, for this concrete function, all the telemetry is gathered (dependency, custom metrics, and custom events). For the same function, we set theFunction1.Usercategory (user-generated traces) toError, so only custom error logging is gathered.
Function1
Information
Function1.User
Error
Note
Configuration per function isn't supported in v1.x of the Functions runtime.
Sampling is configured to send one telemetry item per second per type, excluding the exceptions. This sampling happens for each server host running our function app. So, if we have four instances, this configuration emits four telemetry items per second per type and all the exceptions that might occur.NoteMetric counts such as request rate and exception rate are adjusted to compensate for the sampling rate, so that they show approximately correct values in Metric Explorer.
Sampling is configured to send one telemetry item per second per type, excluding the exceptions. This sampling happens for each server host running our function app. So, if we have four instances, this configuration emits four telemetry items per second per type and all the exceptions that might occur.
Note
Metric counts such as request rate and exception rate are adjusted to compensate for the sampling rate, so that they show approximately correct values in Metric Explorer.
Tip
Experiment with different configurations to ensure that you cover your requirements for logging, monitoring, and alerting. Also, ensure that you have detailed diagnostics in case of unexpected errors or malfunctioning.
Overriding monitoring configuration at runtime
Finally, there could be situations where you need to quickly change the logging behavior of a certain category in production, and you don't want to make a whole deployment just for a change in thehost.jsonfile. For such cases, you can override thehost.json values.
To configure these values at App settings level (and avoid redeployment on justhost.jsonchanges), you should override specifichost.jsonvalues by creating an equivalent value as an application setting. When the runtime finds an application setting in the formatAzureFunctionsJobHost__path__to__setting, it overrides the equivalenthost.jsonsetting located atpath.to.settingin the JSON. When expressed as an application setting, a double underscore (__) replaces the dot (.) used to indicate JSON hierarchy. For example, you can use the following app settings to configure individual function log levels inhost.json.
host.json
AzureFunctionsJobHost__path__to__setting
host.json
path.to.setting
__
.
host.json
You can override the settings directly at the Azure portal Function App Configuration pane or by using an Azure CLI or PowerShell script.
Azure CLI
PowerShell
az functionapp config appsettings set --name MyFunctionApp --resource-group MyResourceGroup --settings "AzureFunctionsJobHost__logging__logLevel__Host.Aggregator=Information"
az functionapp config appsettings set --name MyFunctionApp --resource-group MyResourceGroup --settings "AzureFunctionsJobHost__logging__logLevel__Host.Aggregator=Information"
Update-AzFunctionAppSetting -Name MyAppName -ResourceGroupName MyResourceGroupName -AppSetting @{"AzureFunctionsJobHost__logging__logLevel__Host.Aggregator" = "Information"}
Update-AzFunctionAppSetting -Name MyAppName -ResourceGroupName MyResourceGroupName -AppSetting @{"AzureFunctionsJobHost__logging__logLevel__Host.Aggregator" = "Information"}
Note
Overriding thehost.jsonthrough changing app settings will restart your function app.
App settings that contain a period aren't supported when running on Linux in an Elastic Premium plan or a Dedicated (App Service) plan. In these hosting environments, you should continue to use thehost.jsonfile.
host.json
Monitor function apps using Health check
You can use the Health Check feature to monitor function apps on the Premium (Elastic Premium) and Dedicated (App Service) plans. Health check isn't an option for the Consumption plan. To learn how to configure it, seeMonitor App Service instances using Health check. Your function app should have an HTTP trigger function that responds with an HTTP status code of 200 on the same endpoint as configured on thePathparameter of the health check. You can also have that function perform extra checks to ensure that dependent services are reachable and working.
Path
Related content
For more information about monitoring, see:
Monitor Azure Functions
Analyze Azure Functions telemetry data in Application Insights
Application Insights overview
Feedback
Was this page helpful?
Additional resources