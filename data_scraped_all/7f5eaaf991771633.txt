Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure GitHub Advanced Security for Azure DevOps
Article
2025-02-21
12 contributors
In this article
GitHub Advanced Security for Azure DevOps adds GitHub Advanced Security's suite of security features to Azure Repos and includes the following features:
Secret Scanning push protection: check if code pushes include commits that expose secrets such as credentials
Secret Scanning repo scanning: scan your repository and look for exposed secrets that were committed accidentally
Dependency Scanning â search for known vulnerabilities in open source dependencies (direct and transitive)
Code Scanning â use CodeQL static analysis engine to identify code-level application vulnerabilities such as SQL injection and authentication bypass
GitHub Advanced Security for Azure DevOps is only available for Azure DevOps Services and specifically for code Git repositories.
GitHub Advanced Security for Azure DevOps works with Azure Repos. To use GitHub Advanced Security with GitHub repositories, seeGitHub Advanced Security.
Prerequisites
For more information about Advanced Security permissions, seeManage Advanced Security permissions.
Extra prerequisites for self-hosted agents
If your organization uses self-hosted agents, add the following URLs to your Allowlist so the dependency scanning task can fetch vulnerability advisory data. For more information, seeAllowed IP addresses and domain URLs.
https://governance.dev.azure.com
https://dev.azure.com
https://advsec.dev.azure.com
https://{organization_name}.governance.visualstudio.com
https://{organization_name}.visualstudio.com
https://{organization_name}.advsec.visualstudio.com
Run a compatible version of the .NET runtime (currently .NET 8.x). If a compatible version isn't present on the agent, the dependency scanning build task downloads.NET.
Run a compatible version of the .NET runtime (currently .NET 8.x). If a compatible version isn't present on the agent, the dependency scanning build task downloads.NET.
Ensure the CodeQL bundle is installed to the agent tool cache on your agent. You might utilize theenableAutomaticCodeQLInstall: truevariable with theAdvancedSecurity-Codeql-Init@1pipeline task for YAML pipelines or select theEnable automatic CodeQL detection and installationcheckbox for classic pipelines. Alternatively, for manual installation instructions, seeCode scanning for GitHub Advanced Security for Azure DevOps.
Ensure the CodeQL bundle is installed to the agent tool cache on your agent. You might utilize theenableAutomaticCodeQLInstall: truevariable with theAdvancedSecurity-Codeql-Init@1pipeline task for YAML pipelines or select theEnable automatic CodeQL detection and installationcheckbox for classic pipelines. Alternatively, for manual installation instructions, seeCode scanning for GitHub Advanced Security for Azure DevOps.
enableAutomaticCodeQLInstall: true
AdvancedSecurity-Codeql-Init@1
Enable automatic CodeQL detection and installation
Enable GitHub Advanced Security
You can enable Advanced Security at the organization, project, or repository level. To access each of the scanning tools and results, you need to first enable Advanced Security. Once you enable Advanced Security, any future pushes containing secrets to a repository with this policy enabled are blocked, and repository secret scanning happens in the background.
Go to yourProject settingsfor your Azure DevOps project.
SelectRepos>Repositories.
Select the repository you want to enable Advanced Security for.
SelectEnableandBegin billing to activate Advanced Security. A shield icon now appears in the repository view for any repository with Advanced Security enabled.

Go to yourProject settingsfor your Azure DevOps project.
SelectRepos.
Select theSettingstab.
SelectEnable alland see an estimate for the number of active committers for your project appear.
SelectBegin billingto activate Advanced Security for every existing repository in your project.
Optionally, selectAutomatically enable Advanced Security for new repositoriesso that any newly created repositories have Advanced Security enabled upon creation.

Go to yourOrganization settingsfor your Azure DevOps organization.
SelectRepositories.
SelectEnable alland see an estimate for the number of active committers for your organization appear.
SelectBegin billingto activate Advanced Security for every existing repository in each project in your organization.
Optionally, selectAutomatically enable Advanced Security for new repositoriesso that any newly created projects have Advanced Security enabled upon creation.

Set up secret scanning
Secret scanning push protection and repository scanning are automatically enabled when you turn on Advanced Security. You can enable or disable secret push protection from the repository settings page.

As mentioned, secret scanning repository scanning is automatically kicked off upon enabling Advanced Security for a selected repository.
Set up dependency scanning
Dependency scanning is a pipeline-based scanning tool. Results are aggregated per repository. We recommend that you add the dependency scanning task to all the pipelines that you want scanned.
Tip
For the most accurate scanning results, add the dependency scanning task after the build steps or package restore step in a pipeline that builds the code you wish to scan.
YAML
Classic
Add the task Advanced Security Dependency Scanning task (AdvancedSecurity-Dependency-Scanning@1) directly to your YAML pipeline file or select theAdvanced Security Dependency Scanningtask from thetask assistant.

Add theAdvanced Security Dependency Scanningtask to your pipeline.
Advanced Security Dependency Scanning

To generate alerts, run your first scan with a pipeline with the dependency scanning task included.
Set up code scanning
Code scanning is also a pipeline-based scanning tool where results are aggregated per repository.
Tip
Code scanning can be a more time-intensive build task, so we recommend that you add the code scanning task to a separate, cloned pipeline of your main production pipeline or create a new pipeline.
YAML
Classic
Add the tasks in the following order:
Advanced Security Initialize CodeQL (AdvancedSecurity-Codeql-Init@1)
Your custom build steps
Advanced Security Perform CodeQL Analysis (AdvancedSecurity-Codeql-Analyze@1)

Also, specify which language you're analyzing in theInitialize CodeQLtask. You can use a comma separated list to analyze multiple languages at once. The supported languages arecsharp, cpp, go, java, javascript, python, ruby, swift. If you're utilizing self-hosted agents, you might also add theenableAutomaticCodeQLInstall: truevariable to automatically install the latest CodeQL bits for your agent.
Initialize CodeQL
csharp, cpp, go, java, javascript, python, ruby, swift
enableAutomaticCodeQLInstall: true
Here's an example starter pipeline:
trigger:
  - main

pool:
  # Additional hosted image options are available: https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted#software
  vmImage: ubuntu-latest

steps:

  - task: AdvancedSecurity-Codeql-Init@1
    inputs:
      languages: "java"
      # Supported languages: csharp, cpp, go, java, javascript, python, ruby, swift
      # You can customize the initialize task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-init-v1?view=azure-pipelines
      # If you're using a self-hosted agent to run CodeQL, use `enableAutomaticCodeQLInstall` to automatically use the latest CodeQL bits on your agent:
      enableAutomaticCodeQLInstall: true

#   Add your custom build steps here
# - Ensure that all code to be scanned is compiled (often using a `clean` command to ensure you're building from a clean state).
# - Disable the use of any build caching mechanisms as this can interfere with CodeQL's ability to capture all the necessary data during the build.
# - Disable the use of any distributed/multithreaded/incremental builds as CodeQL needs to monitor executions of the compiler to construct an accurate representation of the application.
# - For dependency scanning, ensure you have a package restore step for more accurate results.

# If you had a Maven app:
#   - task: Maven@4
#     inputs:
#       mavenPomFile: 'pom.xml'
#       goals: 'clean package'
#       publishJUnitResults: true
#       testResultsFiles: '**/TEST-*.xml'
#       javaHomeOption: 'JDKVersion'
#       jdkVersionOption: '1.17'
#       mavenVersionOption: 'Default'

# Or a general script:
#   - script: |
#       echo "Run, Build Application using script"
#       ./location_of_script_within_repo/buildscript.sh

  - task: AdvancedSecurity-Dependency-Scanning@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-dependency-scanning-v1?view=azure-pipelines

  - task: AdvancedSecurity-Codeql-Analyze@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-analyze-v1?view=azure-pipelines
trigger:
  - main

pool:
  # Additional hosted image options are available: https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted#software
  vmImage: ubuntu-latest

steps:

  - task: AdvancedSecurity-Codeql-Init@1
    inputs:
      languages: "java"
      # Supported languages: csharp, cpp, go, java, javascript, python, ruby, swift
      # You can customize the initialize task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-init-v1?view=azure-pipelines
      # If you're using a self-hosted agent to run CodeQL, use `enableAutomaticCodeQLInstall` to automatically use the latest CodeQL bits on your agent:
      enableAutomaticCodeQLInstall: true

#   Add your custom build steps here
# - Ensure that all code to be scanned is compiled (often using a `clean` command to ensure you're building from a clean state).
# - Disable the use of any build caching mechanisms as this can interfere with CodeQL's ability to capture all the necessary data during the build.
# - Disable the use of any distributed/multithreaded/incremental builds as CodeQL needs to monitor executions of the compiler to construct an accurate representation of the application.
# - For dependency scanning, ensure you have a package restore step for more accurate results.

# If you had a Maven app:
#   - task: Maven@4
#     inputs:
#       mavenPomFile: 'pom.xml'
#       goals: 'clean package'
#       publishJUnitResults: true
#       testResultsFiles: '**/TEST-*.xml'
#       javaHomeOption: 'JDKVersion'
#       jdkVersionOption: '1.17'
#       mavenVersionOption: 'Default'

# Or a general script:
#   - script: |
#       echo "Run, Build Application using script"
#       ./location_of_script_within_repo/buildscript.sh

  - task: AdvancedSecurity-Dependency-Scanning@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-dependency-scanning-v1?view=azure-pipelines

  - task: AdvancedSecurity-Codeql-Analyze@1 # More details on this task: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/advanced-security-codeql-analyze-v1?view=azure-pipelines
Tip
CodeQL analysis for Kotlin/Swift is currently in beta. During the beta, analysis of these languages is less comprehensive than CodeQL analysis of others.
Usejavato analyze code written in Java, Kotlin or both.
java
Usejavascriptto analyze code written in JavaScript, TypeScript, or both.
javascript
If the language specified iscpp, java, csharporswift, custom build steps are required.
cpp, java, csharp
swift
Add the tasks in the following order:
Advanced Security Initialize CodeQL
Advanced Security Initialize CodeQL
Add your own custom build steps
Advanced Security Perform CodeQL Analysis
Advanced Security Perform CodeQL Analysis

Also, specify which language you're analyzing in theInitialize CodeQLtask. If the language specified iscpp, java, csharporswift,  custom build steps are required.
Initialize CodeQL
cpp, java, csharp
swift
If you're running on a self-hosted agent, select theEnable automatic CodeQL detection and installationto automatically use the latest CodeQL bits on your agent if you didn't manually install the latest CodeQL bundle to your agent tool cache.
Enable automatic CodeQL detection and installation
To generate alerts, run your first scan with a pipeline with the code scanning tasks included.
Set up pull request annotations
For both dependency scanning and code scanning, annotations automatically configure for pull requests where a build validation policy applies with dependency scanning and/or code scanning tasks included in your pipeline. For more information on configuring build validation policies, seeBuild validation.
Pull request annotations also require an Advanced Security scan on your default branch and target branch before then scanning your source (pull request) branch. For more information on resolving alerts for pull request branches, seeManaging dependency scanning alerts on pull requestsandManaging code scanning alerts on pull requests.
To disable Advanced Security, any alerts and state of alerts get retained in the Advanced Security tab for the next time you re-enable Advanced Security for your repository.
Related articles
Code scanning alerts for GitHub Advanced Security for Azure DevOps
Dependency scanning alerts for GitHub Advanced Security for Azure DevOps
Secret scanning alerts for GitHub Advanced Security for Azure DevOps
Permissions for GitHub Advanced Security for Azure DevOps
Billing for GitHub Advanced Security for Azure DevOps
Feedback
Was this page helpful?
Additional resources