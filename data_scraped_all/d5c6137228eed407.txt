Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build and test Go projects
Article
2025-03-30
14 contributors
In this article
Azure DevOps Services
Use a pipeline to automatically build and test your Go projects.
Create your first pipeline
New to Azure Pipelines? If so, then we recommend you try this section before moving on to other sections.
Fork the following repo at GitHub:
https://github.com/MicrosoftDocs/pipelines-go
https://github.com/MicrosoftDocs/pipelines-go
Sign in to Azure Pipelines
Sign-in toAzure Pipelines. After you sign in, your browser goes tohttps://dev.azure.com/my-organization-nameand displays your Azure DevOps dashboard.
https://dev.azure.com/my-organization-name
In a browser, go todev.azure.comand sign in.
Select your organization.
Create a new project by selectingNew projectorCreate projectif creating the first project in the organization.
Enter aProject name.
Select theVisibilityfor your project.
SelectCreate.
Create the pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
When theConfiguretab appears, selectGo. Your new pipeline appears, with theazure-pipelines.ymlYAML file ready to be configured. See the following sections to learn some of the more common ways to customize your pipeline.
azure-pipelines.yml
Build environment
You can use Azure Pipelines to build your Go projects without setting up any infrastructure of your own. You can use Linux, macOS, or Windows agents to run your builds.
Update the following snippet in yourazure-pipelines.ymlfile to select the appropriate image.
azure-pipelines.yml
pool:
  vmImage: 'ubuntu-latest'
pool:
  vmImage: 'ubuntu-latest'
Modern versions of Go are pre-installed onMicrosoft-hosted agents. For the exact versions of pre-installed Go, refer toMicrosoft-hosted agents in Azure Pipelines.
Set up Go
Go 1.11+
Go < 1.11
Starting with Go 1.11, you no longer need to define a$GOPATHenvironment, set up a workspace layout, or use thedepmodule. Dependency management is now built in.
$GOPATH
dep
This YAML implements thego getcommand to download Go packages and their dependencies. It then usesgo buildto generate the content that is published withPublishBuildArtifacts@1task.
go get
go build
PublishBuildArtifacts@1
trigger: 
 - main

pool:
   vmImage: 'ubuntu-latest'

steps: 
- task: GoTool@0
  inputs:
    version: '1.13.5'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop
trigger: 
 - main

pool:
   vmImage: 'ubuntu-latest'

steps: 
- task: GoTool@0
  inputs:
    version: '1.13.5'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop
As the Go documentationdescribes, a Go workspace consists of a root directory to which the$GOPATHenvironment variable points. Within that directory, are the following standard subdirectories:
$GOPATH
binto contain executable commands
bin
pkgto contain compiled packages (.afiles)
pkg
.a
srcto contain Go source files (.go,.c,.g,.s)
src
.go
.c
.g
.s
When an Azure Pipelines build fetches code from a remote repository, it places the code in the default working directory of the build. To match the expected structure of a Go workspace, add the following snippet to yourazure-pipelines.ymlfile. This script runs in bash on Linux and macOS agents, but must be modified for Windows.
azure-pipelines.yml
variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
If your code isn't at GitHub, change themodulePathvariable's use ofgithub.comto an appropriate value for your module.
modulePath
github.com
This snippet does the following actions:
Sets$GOROOTto the version of Go that should be used.
$GOROOT
Sets other well-known Go environment variables to their proper values.
Creates a Go workspace in a subdirectory namedgopathwith child directoriesbin,pkg, andsrc.
gopath
bin
pkg
src
Moves code that was fetched from the remote repository into the workspacesrcdirectory
src
Adds the version of Go and the workspacebindirectory to the path.
bin
Install dependencies
Usego getto download the source code for a Go project or to install a tool into the Go workspace. Add the following snippet to yourazure-pipelines.ymlfile:
go get
azure-pipelines.yml
- script: go get -v -t -d ./...
  workingDirectory: '$(modulePath)'
  displayName: 'go get dependencies'
- script: go get -v -t -d ./...
  workingDirectory: '$(modulePath)'
  displayName: 'go get dependencies'
Usedep ensureif your project uses dep to download dependencies imported in your code. Runningdep ensureclones imported repositories into your project's vendor directory. ItsGopkg.lockandGopkg.tomlfiles guarantee that everyone working on the project uses the same version of dependencies as your build. Add the following snippet to yourazure-pipelines.ymlfile.
dep ensure
dep ensure
Gopkg.lock
Gopkg.toml
azure-pipelines.yml
Note
The following script runs on Linux and macOS agents and can be used for older versions of Go that require a specific folder structure. The script is written for Unix shells, and as a result cannot work with Windows agents.
- script: |
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Download dep and run `dep ensure`'
- script: |
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Download dep and run `dep ensure`'
Build
Usego buildto build your Go project. Add the following snippet to yourazure-pipelines.ymlfile:
go build
azure-pipelines.yml
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
Test
Usego testto test your Go module and its subdirectories (./...). Add the following snippet to yourazure-pipelines.ymlfile:
go test
./...
azure-pipelines.yml
- task: Go@0
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'test'
    arguments: '-v'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
When you're ready, commit a newazure-pipelines.ymlfile to your repository and update the commit message. SelectSave and run.

If you want to watch your pipeline in action, select the build in theJobsoption on your Azure Pipelines dashboard.
Because your code appeared to be a good match for theGotemplate, we automatically created your pipeline.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
azure-pipelines.yml
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
Tip
To make changes to the YAML file as described in this article, select the pipeline inPipelinespage, and then selectEditto open an editor for theazure-pipelines.ymlfile.
azure-pipelines.yml
Build an image and push to container registry
For your Go app, you can alsobuild an imageandpush it to a container registry.
Related extensions
Go extension for Visual Studio Code
Feedback
Was this page helpful?
Additional resources