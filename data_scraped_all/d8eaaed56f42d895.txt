Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy an artifact file to Azure Container Apps (preview)
Article
2025-02-05
5 contributors
In this article
In this quickstart, you learn to deploy a container app from a prebuilt artifact file. The example in this article deploys a Java application using a JAR file, which includes a Java-specific manifest file. Your job is to create a backend web API service that returns a static collection of music albums. After completing this quickstart, you can continue toCommunication between microservicesto learn how to deploy a front end application that calls the API.
The following screenshot shows the output from the album API service you deploy.

Prerequisites
Setup
To sign in to Azure from the CLI, run the following command and follow the prompts to complete the authentication process.
Bash
PowerShell
az login
az login
Connect-AzAccount
Connect-AzAccount
To ensure you're running the latest version of the CLI, run the upgrade command.
Bash
PowerShell
az upgrade
az upgrade
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
Ignore any warnings about modules currently in use.
Next, install or update the Azure Container Apps extension for the CLI.
If you receive errors about missing parameters when you runaz containerappcommands in Azure CLI or cmdlets from theAz.Appmodule in PowerShell, be sure you have the latest version of the Azure Container Apps extension installed.
az containerapp
Az.App
Bash
PowerShell
az extension add --name containerapp --upgrade
az extension add --name containerapp --upgrade
Note
Starting in May 2024, Azure CLI extensions no longer enable preview features by default. To access Container Appspreview features, install the Container Apps extension with--allow-preview true.
--allow-preview true
az extension add --name containerapp --upgrade --allow-preview true
az extension add --name containerapp --upgrade --allow-preview true
Install-Module -Name Az.App
Install-Module -Name Az.App
Make sure to update theAz.Appmodule to the latest version.
Az.App
Update-Module -Name Az.App
Update-Module -Name Az.App
Now that the current extension or module is installed, register theMicrosoft.AppandMicrosoft.OperationalInsightsnamespaces.
Microsoft.App
Microsoft.OperationalInsights
Bash
PowerShell
az provider register --namespace Microsoft.App
az provider register --namespace Microsoft.App
az provider register --namespace Microsoft.OperationalInsights
az provider register --namespace Microsoft.OperationalInsights
Register-AzResourceProvider -ProviderNamespace Microsoft.App
Register-AzResourceProvider -ProviderNamespace Microsoft.App
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationalInsights
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationalInsights
Create environment variables
Now that your Azure CLI setup is complete, you can define the environment variables that are used throughout this article.
Bash
PowerShell
Define the following variables in your bash shell.
RESOURCE_GROUP="album-containerapps"
LOCATION="canadacentral"
ENVIRONMENT="env-album-containerapps"
API_NAME="album-api"
SUBSCRIPTION=<YOUR_SUBSCRIPTION_ID>
RESOURCE_GROUP="album-containerapps"
LOCATION="canadacentral"
ENVIRONMENT="env-album-containerapps"
API_NAME="album-api"
SUBSCRIPTION=<YOUR_SUBSCRIPTION_ID>
If necessary, you can query for your subscription ID.
az account list --output table
az account list --output table
Define the following variables in your PowerShell console.
$RESOURCE_GROUP="album-containerapps"
$LOCATION="canadacentral"
$ENVIRONMENT="env-album-containerapps"
$API_NAME="album-api"
$SUBSCRIPTION=<YOUR_SUBSCRIPTION_ID>
$RESOURCE_GROUP="album-containerapps"
$LOCATION="canadacentral"
$ENVIRONMENT="env-album-containerapps"
$API_NAME="album-api"
$SUBSCRIPTION=<YOUR_SUBSCRIPTION_ID>
If necessary, you can query for your subscription ID.
az account list --output table
az account list --output table
Prepare the GitHub repository
Begin by cloning the sample repository.
Use the following git command to clone the sample app into thecode-to-cloudfolder:
git clone https://github.com/azure-samples/containerapps-albumapi-java code-to-cloud
git clone https://github.com/azure-samples/containerapps-albumapi-java code-to-cloud
cd code-to-cloud
cd code-to-cloud
Build a JAR file
Note
The Java sample only supports a Maven build, which results in an executable JAR file. The build uses default settings as passing in environment variables is unsupported.
Build the project withMaven.
Bash
PowerShell
mvn clean package -DskipTests
mvn clean package -DskipTests
mvn clean package -DskipTests
mvn clean package -DskipTests
Run the project locally
Bash
PowerShell
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
To verify application is running, open a browser and go tohttp://localhost:8080/albums. The page returns a list of the JSON objects.
http://localhost:8080/albums
Deploy the artifact
Build and deploy your first container app from your local JAR file with thecontainerapp upcommand.
containerapp up
This command:
Creates the resource group
Creates an Azure Container Registry
Builds the container image and push it to the registry
Creates the Container Apps environment with a Log Analytics workspace
Creates and deploys the container app using a public container image
Theupcommand uses the Docker file in the root of the repository to build the container image. TheEXPOSEinstruction in the Docker file defines the target port. A Docker file, however, isn't required to build a container app.
up
EXPOSE
Note
Note: When usingcontainerapp upin combination with a Docker-less code base, use the--locationparameter so that application runs in a location other than US East.
containerapp up
--location
Bash
PowerShell
az containerapp up \
  --name $API_NAME \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --environment $ENVIRONMENT \
  --artifact ./target/containerapps-albumapi-java-0.0.1-SNAPSHOT.jar \
  --ingress external \
  --target-port 8080 \
  --subscription $SUBSCRIPTION
az containerapp up \
  --name $API_NAME \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --environment $ENVIRONMENT \
  --artifact ./target/containerapps-albumapi-java-0.0.1-SNAPSHOT.jar \
  --ingress external \
  --target-port 8080 \
  --subscription $SUBSCRIPTION
az containerapp up `
    --name $API_NAME `
    --resource-group $RESOURCE_GROUP `
    --location $LOCATION `
    --environment $ENVIRONMENT `
    --artifact ./target/containerapps-albumapi-java-0.0.1-SNAPSHOT.jar `
    --ingress external `
    --target-port 8080 `
    --subscription $SUBSCRIPTION
az containerapp up `
    --name $API_NAME `
    --resource-group $RESOURCE_GROUP `
    --location $LOCATION `
    --environment $ENVIRONMENT `
    --artifact ./target/containerapps-albumapi-java-0.0.1-SNAPSHOT.jar `
    --ingress external `
    --target-port 8080 `
    --subscription $SUBSCRIPTION
Verify deployment
Copy the FQDN to a web browser. From your web browser, go to the/albumsendpoint of the FQDN.
/albums

Deploy a WAR file
You can also deploy your container app from aWAR file.
Clean up resources
If you're not going to continue to use this application, you can delete the Azure Container Apps instance and all the associated services by removing the resource group.
Follow these steps to remove the resources you created:
Bash
PowerShell
az group delete \
  --resource-group $RESOURCE_GROUP
az group delete \
  --resource-group $RESOURCE_GROUP
az group delete `
  --resource-group $RESOURCE_GROUP
az group delete `
  --resource-group $RESOURCE_GROUP
Tip
Having issues? Let us know on GitHub by opening an issue in theAzure Container Apps repo.
Next steps
Learn more about developing in Java on Container Apps
Feedback
Was this page helpful?
Additional resources