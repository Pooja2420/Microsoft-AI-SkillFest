Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Register an App to request authorization tokens and work with APIs
Article
2024-09-11
6 contributors
In this article
To access Azure REST APIs such as the Log analytics API, or to send custom metrics, you can generate an authorization token based on a client ID and secret. The token is then passed in your REST API request. This article shows you how to register a client app and create a client secret so that you can generate a token.
Register an App
Create a service principal and register an app using the Azure portal, Azure CLI, or PowerShell.
Azure portal
Azure CLI
PowerShell
To register an app, open the Active Directory Overview page in the Azure portal.
To register an app, open the Active Directory Overview page in the Azure portal.
SelectApp registrationsfrom the side bar.
SelectApp registrationsfrom the side bar.
SelectNew registration
SelectNew registration
On the Register an application page, enter aNamefor the application.
On the Register an application page, enter aNamefor the application.
SelectRegister
SelectRegister
On the app's overview page, selectCertificates and Secrets
On the app's overview page, selectCertificates and Secrets
Note theApplication (client) ID. It's used in the HTTP request for a token.
Note theApplication (client) ID. It's used in the HTTP request for a token.
In theClient secrets tabSelectNew client secret
In theClient secrets tabSelectNew client secret
Enter aDescriptionand selectAdd
Enter aDescriptionand selectAdd
Copy and save the client secretValue.NoteClient secret values can only be viewed immediately after creation. Be sure to save the secret before leaving the page.
Copy and save the client secretValue.
Note
Client secret values can only be viewed immediately after creation. Be sure to save the secret before leaving the page.

Run the following script to create a service principal and app.
az ad sp create-for-rbac -n <Service principal display name>
az ad sp create-for-rbac -n <Service principal display name>
The response looks as follows:
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "AzMonAPIApp",
  "password": "123456.ABCDE.~XYZ876123ABcEdB7169",
  "tenant": "aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e"
}
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "AzMonAPIApp",
  "password": "123456.ABCDE.~XYZ876123ABcEdB7169",
  "tenant": "aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e"
}
Important
The output includes credentials that you must protect. Be sure that you do not include these credentials in your code or check the credentials into your source control.
Add a role and scope for the resources that you want to access using the API
az role assignment create --assignee <`appId`> --role <Role> --scope <resource URI>
az role assignment create --assignee <`appId`> --role <Role> --scope <resource URI>
The CLI following example assigns theReaderrole to the service principal for all resources in therg-001resource group:
Reader
rg-001
az role assignment create --assignee 00001111-aaaa-2222-bbbb-3333cccc4444 --role Reader --scope '\/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/rg-001'
az role assignment create --assignee 00001111-aaaa-2222-bbbb-3333cccc4444 --role Reader --scope '\/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/rg-001'
For more information on creating a service principal using Azure CLI, seeCreate an Azure service principal with the Azure CLI.
The following sample script demonstrates creating a Microsoft Entra service principal via PowerShell. For a more detailed walkthrough, seeusing Azure PowerShell to create a service principal to access resources
$subscriptionId = "{azure-subscription-id}"
$resourceGroupName = "{resource-group-name}"

# Authenticate to a specific Azure subscription.
Connect-AzAccount -SubscriptionId $subscriptionId

# Password for the service principal
$pwd = "{service-principal-password}"
$secureStringPassword = ConvertTo-SecureString -String $pwd -AsPlainText -Force

# Create a new Azure Active Directory application
$azureAdApplication = New-AzADApplication `
                        -DisplayName "My Azure Monitor" `
                        -HomePage "https://localhost/azure-monitor" `
                        -IdentifierUris "https://localhost/azure-monitor" `
                        -Password $secureStringPassword

# Create a new service principal associated with the designated application
New-AzADServicePrincipal -ApplicationId $azureAdApplication.ApplicationId

# Assign Reader role to the newly created service principal
New-AzRoleAssignment -RoleDefinitionName Reader `
                          -ServicePrincipalName $azureAdApplication.ApplicationId.Guid
$subscriptionId = "{azure-subscription-id}"
$resourceGroupName = "{resource-group-name}"

# Authenticate to a specific Azure subscription.
Connect-AzAccount -SubscriptionId $subscriptionId

# Password for the service principal
$pwd = "{service-principal-password}"
$secureStringPassword = ConvertTo-SecureString -String $pwd -AsPlainText -Force

# Create a new Azure Active Directory application
$azureAdApplication = New-AzADApplication `
                        -DisplayName "My Azure Monitor" `
                        -HomePage "https://localhost/azure-monitor" `
                        -IdentifierUris "https://localhost/azure-monitor" `
                        -Password $secureStringPassword

# Create a new service principal associated with the designated application
New-AzADServicePrincipal -ApplicationId $azureAdApplication.ApplicationId

# Assign Reader role to the newly created service principal
New-AzRoleAssignment -RoleDefinitionName Reader `
                          -ServicePrincipalName $azureAdApplication.ApplicationId.Guid
Next steps
Before you can generate a token using your app, client ID, and secret, assign the app to a role using Access control (IAM) for resource that you want to access. The role will depend on the resource type and the API that you want to use.For example,
To grant your app read from a Log Analytics Workspace, add your app as a member to theReaderrole using Access control (IAM) for your Log Analytics Workspace. For more information, seeAccess the API
To grant your app read from a Log Analytics Workspace, add your app as a member to theReaderrole using Access control (IAM) for your Log Analytics Workspace. For more information, seeAccess the API
To grant access to send custom metrics for a resource,  add your app as a member to theMonitoring Metrics Publisherrole using Access control (IAM) for your resource. For more information, seeSend metrics to the Azure Monitor metric database using REST API
To grant access to send custom metrics for a resource,  add your app as a member to theMonitoring Metrics Publisherrole using Access control (IAM) for your resource. For more information, seeSend metrics to the Azure Monitor metric database using REST API
For more information, seeAssign Azure roles using the Azure portal
Once you've assigned a role, you can use your app, client ID, and client secret to generate a bearer token to access the REST API.
Note
When using Microsoft Entra authentication, it may take up to 60 minutes for the Azure Application Insights REST API to recognize new role-based access control (RBAC) permissions. While permissions are propagating, REST API calls may fail with error code 403.
Feedback
Was this page helpful?
Additional resources