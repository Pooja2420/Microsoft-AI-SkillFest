Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Test network latency between Azure VMs
Article
2024-08-02
20 contributors
In this article
This article describes how to test network latency between Azure virtual machines (VMs) by using the publicly available toolsLattefor Windows orSockPerffor Linux.
For the most accurate results, you should measure VM network latency with a tool that's designed for the task and excludes other types of latency, such as application latency. Latte and SockPerf provide the most relevant network latency results by focusing on Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) traffic. Most applications use these protocols, and this traffic has the largest effect on application performance.
Many other common network latency test tools, such as Ping, don't measure TCP or UDP traffic. Tools like Ping use Internet Control Message Protocol (ICMP), which applications don't use. ICMP traffic can be treated differently from application traffic and doesn't directly affect application performance. ICMP test results don't directly apply to workloads that use TCP and UDP.
Latte and SockPerf measure only TCP or UDP payload delivery times. These tools use the following approach to measure network latency between two physical or virtual computers:
Create a two-way communication channel between the computers by designating one as sender and one as receiver.
Send and receive packets in both directions and measure the round-trip time (RTT).
Tips and best practices to optimize network latency
To optimize VMs for network latency, observe the following recommendations when you create the VMs:
Use the latest version of Windows or Linux.
EnableAccelerated Networkingfor increased performance.
Deploy VMs within anAzure proximity placement group.
Create larger VMs for better performance.
Use the following best practices to test and analyze network latency:
As soon as you finish deploying, configuring, and optimizing network VMs, take baseline network latency measurements between deployed VMs to establish benchmarks.
As soon as you finish deploying, configuring, and optimizing network VMs, take baseline network latency measurements between deployed VMs to establish benchmarks.
Test the effects on network latency of changing any of the following components:Operating system (OS) or network stack software, including configuration changes.VM deployment methods, such as deploying to an availability zone or proximity placement group (PPG).VM properties, such as Accelerated Networking or size changes.Virtual network configuration, such as routing or filtering changes.
Test the effects on network latency of changing any of the following components:
Operating system (OS) or network stack software, including configuration changes.
VM deployment methods, such as deploying to an availability zone or proximity placement group (PPG).
VM properties, such as Accelerated Networking or size changes.
Virtual network configuration, such as routing or filtering changes.
Always compare new test results to the baseline or to the latest test results before controlled changes.
Always compare new test results to the baseline or to the latest test results before controlled changes.
Repeat tests whenever you observe or deploy changes.
Repeat tests whenever you observe or deploy changes.
Test VMs with Latte or SockPerf
Use the following procedures to install and test network latency withLattefor Windows orSockPerffor Linux.
Windows
Linux
Install Latte and configure VMs
Download the latest version of latte.exeto both VMs and put it in a separate folder such asc:/tools.
Download the latest version of latte.exeto both VMs and put it in a separate folder such asc:/tools.
On thereceiverVM, create a Windows Defender Firewallallowrule to allow the Latte traffic to arrive. It's easier to allow thelatte.exeprogram by name than to allow specific inbound TCP ports. In the command, replace the<path>placeholder with the path you downloadedlatte.exeto, such asc:\tools\.netsh advfirewall firewall add rule program=<path>latte.exe name="Latte" protocol=any dir=in action=allow enable=yes profile=ANY
On thereceiverVM, create a Windows Defender Firewallallowrule to allow the Latte traffic to arrive. It's easier to allow thelatte.exeprogram by name than to allow specific inbound TCP ports. In the command, replace the<path>placeholder with the path you downloadedlatte.exeto, such asc:\tools\.
allow
<path>
netsh advfirewall firewall add rule program=<path>latte.exe name="Latte" protocol=any dir=in action=allow enable=yes profile=ANY
netsh advfirewall firewall add rule program=<path>latte.exe name="Latte" protocol=any dir=in action=allow enable=yes profile=ANY
Run Latte on the VMs
Runlatte.exefrom the Windows command line, not from PowerShell.
On the receiver VM, run the following command, replacing the<receiver IP address>,<port>, and<iterations>placeholders with your own values.latte -a <receiver IP address>:<port> -i <iterations>Around 65,000 iterations are enough to return representative results.Any available port number is fine.The following example shows the command for a VM with an IP address of10.0.0.4:latte -a 10.0.0.4:5005 -i 65100
On the receiver VM, run the following command, replacing the<receiver IP address>,<port>, and<iterations>placeholders with your own values.
<receiver IP address>
<port>
<iterations>
latte -a <receiver IP address>:<port> -i <iterations>
latte -a <receiver IP address>:<port> -i <iterations>
Around 65,000 iterations are enough to return representative results.
Any available port number is fine.
The following example shows the command for a VM with an IP address of10.0.0.4:latte -a 10.0.0.4:5005 -i 65100
10.0.0.4
latte -a 10.0.0.4:5005 -i 65100
On thesenderVM, run the same command as on the receiver, except with-cadded to indicate theclientor sender VM. Again, replace the<receiver IP address>,<port>, and<iterations>placeholders with your own values.latte -c -a <receiver IP address>:<port> -i <iterations>For example:latte -c -a 10.0.0.4:5005 -i 65100
On thesenderVM, run the same command as on the receiver, except with-cadded to indicate theclientor sender VM. Again, replace the<receiver IP address>,<port>, and<iterations>placeholders with your own values.
-c
<receiver IP address>
<port>
<iterations>
latte -c -a <receiver IP address>:<port> -i <iterations>
latte -c -a <receiver IP address>:<port> -i <iterations>
For example:
latte -c -a 10.0.0.4:5005 -i 65100
latte -c -a 10.0.0.4:5005 -i 65100
Wait for the results. Depending on how far apart the VMs are, the test could take a few minutes to finish. Consider starting with fewer iterations to test for success before running longer tests.
Wait for the results. Depending on how far apart the VMs are, the test could take a few minutes to finish. Consider starting with fewer iterations to test for success before running longer tests.
Prepare VMs
On both thesenderandreceiverLinux VMs, run the following commands to prepare for SockPerf, depending on your Linux distro.
Red Hat Enterprise Linux (RHEL):#RHEL - Install Git and other helpful tools
sudo yum install gcc -y -q
sudo yum install git -y -q
sudo yum install gcc-c++ -y
sudo yum install ncurses-devel -y
sudo yum install -y automake
sudo yum install -y autoconf
sudo yum install -y libtool
Red Hat Enterprise Linux (RHEL):
#RHEL - Install Git and other helpful tools
sudo yum install gcc -y -q
sudo yum install git -y -q
sudo yum install gcc-c++ -y
sudo yum install ncurses-devel -y
sudo yum install -y automake
sudo yum install -y autoconf
sudo yum install -y libtool
#RHEL - Install Git and other helpful tools
sudo yum install gcc -y -q
sudo yum install git -y -q
sudo yum install gcc-c++ -y
sudo yum install ncurses-devel -y
sudo yum install -y automake
sudo yum install -y autoconf
sudo yum install -y libtool
Ubuntu:#Ubuntu - Install Git and other helpful tools
sudo apt-get install build-essential -y
sudo apt-get install git -y -q
sudo apt-get install -y autotools-dev
sudo apt-get install -y automake
sudo apt-get install -y autoconf
sudo apt-get install -y libtool
sudo apt update
sudo apt upgrade
Ubuntu:
#Ubuntu - Install Git and other helpful tools
sudo apt-get install build-essential -y
sudo apt-get install git -y -q
sudo apt-get install -y autotools-dev
sudo apt-get install -y automake
sudo apt-get install -y autoconf
sudo apt-get install -y libtool
sudo apt update
sudo apt upgrade
#Ubuntu - Install Git and other helpful tools
sudo apt-get install build-essential -y
sudo apt-get install git -y -q
sudo apt-get install -y autotools-dev
sudo apt-get install -y automake
sudo apt-get install -y autoconf
sudo apt-get install -y libtool
sudo apt update
sudo apt upgrade
SUSE:#SUSE - Install Git and other helpful tools
sudo zypper install gcc
sudo zypper install git
sudo zypper install gcc-c++
sudo zypper install ncurses-devel
sudo zypper install automake
sudo zypper install autoconf
sudo zypper install libtool
sudo zypper install make
SUSE:
#SUSE - Install Git and other helpful tools
sudo zypper install gcc
sudo zypper install git
sudo zypper install gcc-c++
sudo zypper install ncurses-devel
sudo zypper install automake
sudo zypper install autoconf
sudo zypper install libtool
sudo zypper install make
#SUSE - Install Git and other helpful tools
sudo zypper install gcc
sudo zypper install git
sudo zypper install gcc-c++
sudo zypper install ncurses-devel
sudo zypper install automake
sudo zypper install autoconf
sudo zypper install libtool
sudo zypper install make
Copy, compile, and install SockPerf
Copy, compile, and install SockPerf by running the following commands:
#Bash - all distros

#From bash command line (assumes Git is installed)
git clone https://github.com/mellanox/sockperf
cd sockperf/
./autogen.sh
./configure --prefix=

#make is slow, may take several minutes
make

#make install is fast
sudo make install
#Bash - all distros

#From bash command line (assumes Git is installed)
git clone https://github.com/mellanox/sockperf
cd sockperf/
./autogen.sh
./configure --prefix=

#make is slow, may take several minutes
make

#make install is fast
sudo make install
Run SockPerf on the VMs
After the SockPerf installation is complete, start SockPerf on thereceiverVM. Any available port number is fine. The following example uses port12345. Replace the example IP address of10.0.0.4with the IP address of your receiver VM.#Server/Receiver for IP 10.0.0.4:
sudo sockperf sr --tcp -i 10.0.0.4 -p 12345
After the SockPerf installation is complete, start SockPerf on thereceiverVM. Any available port number is fine. The following example uses port12345. Replace the example IP address of10.0.0.4with the IP address of your receiver VM.
12345
10.0.0.4
#Server/Receiver for IP 10.0.0.4:
sudo sockperf sr --tcp -i 10.0.0.4 -p 12345
#Server/Receiver for IP 10.0.0.4:
sudo sockperf sr --tcp -i 10.0.0.4 -p 12345
Now that the receiver is listening, run the following command on thesenderor client computer to send packets to the receiver on the listening port, in this case12345.#Client/Sender for IP 10.0.0.4:
sockperf ping-pong -i 10.0.0.4 --tcp -m 350 -t 101 -p 12345 --full-rttThe-toption sets testing time in seconds. About 100 seconds is long enough to return representative results.The-mdenotes message size in bytes. A 350-byte message size is typical for an average packet. You can adjust the size to more accurately represent your VM's workloads.
Now that the receiver is listening, run the following command on thesenderor client computer to send packets to the receiver on the listening port, in this case12345.
12345
#Client/Sender for IP 10.0.0.4:
sockperf ping-pong -i 10.0.0.4 --tcp -m 350 -t 101 -p 12345 --full-rtt
#Client/Sender for IP 10.0.0.4:
sockperf ping-pong -i 10.0.0.4 --tcp -m 350 -t 101 -p 12345 --full-rtt
The-toption sets testing time in seconds. About 100 seconds is long enough to return representative results.
-t
The-mdenotes message size in bytes. A 350-byte message size is typical for an average packet. You can adjust the size to more accurately represent your VM's workloads.
-m
Wait for the results. Depending on how far apart the VMs are, the number of iterations varies. To test for success before you run longer tests, consider starting with shorter tests of about five seconds.
Wait for the results. Depending on how far apart the VMs are, the number of iterations varies. To test for success before you run longer tests, consider starting with shorter tests of about five seconds.
Next steps
Reduce latency with anAzure proximity placement group.
Optimize network throughput for Azure virtual machines.
Allocatevirtual machine network bandwidth.
Test bandwidth and throughput.
For more information about Azure virtual networking, seeAzure Virtual Network FAQ.
Feedback
Was this page helpful?
Additional resources