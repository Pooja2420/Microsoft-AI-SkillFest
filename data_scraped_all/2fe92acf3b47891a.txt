Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Azure Cosmos DB for Table with Azure SDK for Node.js
Article
2025-04-08
4 contributors
Applies to: â Table
In this article
.NET
Python
Node.js
Java
Go
In this quickstart, you deploy a basic Azure Cosmos DB for Table application using the Azure SDK for Node.js. Azure Cosmos DB for Table is a schemaless data store allowing applications to store structured table data in the cloud. You learn how to create tables, rows, and perform basic tasks within your Azure Cosmos DB resource using the Azure SDK for Node.js.
API reference documentation|Library source code|Package (npm)|Azure Developer CLI
Prerequisites
Azure Developer CLI
Docker Desktop
Node.js 22 or newer
If you don't have an Azure account, create afree accountbefore you begin.
Initialize the project
Use the Azure Developer CLI (azd) to create an Azure Cosmos DB for Table account and deploy a containerized sample application. The sample application uses the client library to manage, create, read, and query sample data.
azd
Open a terminal in an empty directory.
Open a terminal in an empty directory.
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.azd auth login
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.
azd auth login
azd auth login
azd auth login
Useazd initto initialize the project.azd init --template cosmos-db-table-nodejs-quickstart
Useazd initto initialize the project.
azd init
azd init --template cosmos-db-table-nodejs-quickstart
azd init --template cosmos-db-table-nodejs-quickstart
During initialization, configure a unique environment name.
During initialization, configure a unique environment name.
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.azd up
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.
azd up
azd up
azd up
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.


Install the client library
The client library is available through npm, as the@azure/data-tablespackage.
@azure/data-tables
Open a terminal and navigate to the/src/tsfolder.cd ./src/ts
Open a terminal and navigate to the/src/tsfolder.
/src/ts
cd ./src/ts
cd ./src/ts
If not already installed, install the@azure/data-tablespackage usingnpm install.npm install --save @azure/data-tables
If not already installed, install the@azure/data-tablespackage usingnpm install.
@azure/data-tables
npm install
npm install --save @azure/data-tables
npm install --save @azure/data-tables
Open and review thesrc/ts/package.jsonfile to validate that the@azure/data-tablesentry exists.
Open and review thesrc/ts/package.jsonfile to validate that the@azure/data-tablesentry exists.
@azure/data-tables
Open a terminal and navigate to the/src/jsfolder.cd ./src/js
Open a terminal and navigate to the/src/jsfolder.
/src/js
cd ./src/js
cd ./src/js
If not already installed, install the@azure/data-tablespackage usingnpm install.npm install --save @azure/data-tables
If not already installed, install the@azure/data-tablespackage usingnpm install.
@azure/data-tables
npm install
npm install --save @azure/data-tables
npm install --save @azure/data-tables
Open and review thesrc/js/package.jsonfile to validate that the@azure/data-tablesentry exists.
Open and review thesrc/js/package.jsonfile to validate that the@azure/data-tablesentry exists.
@azure/data-tables
Import libraries
Import theDefaultAzureCredential,TableServiceClient, andTableClienttypes into your application code.
DefaultAzureCredential
TableServiceClient
TableClient
import { DefaultAzureCredential } from '@azure/identity';
import { TableServiceClient, TableClient } from '@azure/data-tables';
import { DefaultAzureCredential } from '@azure/identity';
import { TableServiceClient, TableClient } from '@azure/data-tables';
Import all required types into your application code.
import { DefaultAzureCredential, TokenCredential } from '@azure/identity';
import { TableServiceClient, TableClient, TableEntityResult, GetTableEntityResponse, TableEntityResultPage, TableEntityQueryOptions } from '@azure/data-tables';
import { DefaultAzureCredential, TokenCredential } from '@azure/identity';
import { TableServiceClient, TableClient, TableEntityResult, GetTableEntityResponse, TableEntityResultPage, TableEntityQueryOptions } from '@azure/data-tables';
Object model
TableServiceClient
TableClient
Code examples
Authenticate the client
Get a table
Create an entity
Get an entity
Query entities
The sample code in the template uses a table namedcosmicworks-products. Thecosmicworks-productstable contains details such as name, category, quantity, price, a unique identifier, and a sale flag for each product. The container uses aunique identifieras the row key andcategoryas a partition key.
cosmicworks-products
cosmicworks-products
Authenticate the client
This sample creates a new instance of theTableServiceClienttype.
TableServiceClient
let client: TableServiceClient = new TableServiceClient("<azure-cosmos-db-table-account-endpoint>", "<credential>");
let client: TableServiceClient = new TableServiceClient("<azure-cosmos-db-table-account-endpoint>", "<credential>");
const credential = new DefaultAzureCredential();

let client = new TableServiceClient("<azure-cosmos-db-table-account-endpoint>", credential);
const credential = new DefaultAzureCredential();

let client = new TableServiceClient("<azure-cosmos-db-table-account-endpoint>", credential);
Get a table
This sample creates an instance of theTableClienttype using theGetTableClientfunction of theTableServiceClienttype.
TableClient
GetTableClient
TableServiceClient
let table: TableClient = new TableClient("<azure-cosmos-db-table-account-endpoint>", "<azure-cosmos-db-table-name>", credential);
let table: TableClient = new TableClient("<azure-cosmos-db-table-account-endpoint>", "<azure-cosmos-db-table-name>", credential);
let table = new TableClient("<azure-cosmos-db-table-account-endpoint>", "<azure-cosmos-db-table-name>", credential);
let table = new TableClient("<azure-cosmos-db-table-account-endpoint>", "<azure-cosmos-db-table-name>", credential);
Create an entity
The easiest way to create a new entity in a table is to derive a new interface fromTableEntityand then create a new object of that type.
TableEntity
export interface Product extends TableEntity {
    name: string;
    quantity: number;
    price: number;
    clearance: boolean;
}
export interface Product extends TableEntity {
    name: string;
    quantity: number;
    price: number;
    clearance: boolean;
}
const entity: Product = {
    rowKey: 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    partitionKey: 'gear-surf-surfboards',
    name: 'Yamba Surfboard',
    quantity: 12,
    price: 850.00,
    clearance: false
};
const entity: Product = {
    rowKey: 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    partitionKey: 'gear-surf-surfboards',
    name: 'Yamba Surfboard',
    quantity: 12,
    price: 850.00,
    clearance: false
};
The easiest way to create a new item in a table is to build a JSON object.
const entity = {
    rowKey: 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    partitionKey: 'gear-surf-surfboards',
    name: 'Yamba Surfboard',
    quantity: 12,
    price: 850.00,
    clearance: false
};
const entity = {
    rowKey: 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    partitionKey: 'gear-surf-surfboards',
    name: 'Yamba Surfboard',
    quantity: 12,
    price: 850.00,
    clearance: false
};
Create an entity in the table using theupsertEntitymethod from theTableServiceinstance.
upsertEntity
TableService
await table.upsertEntity<Product>(entity, "Replace");
await table.upsertEntity<Product>(entity, "Replace");
await table.upsertEntity(entity, "Replace");
await table.upsertEntity(entity, "Replace");
Get an entity
You can retrieve a specific entity from a table using thegetEntitymethod, therow keyfor the entity, andpartition keyof the entity.
getEntity
const response: GetTableEntityResponse<TableEntityResult<Product>> = await table.getEntity<Product>(partitionKey, rowKey);

const entity: Product = response as Product;
const response: GetTableEntityResponse<TableEntityResult<Product>> = await table.getEntity<Product>(partitionKey, rowKey);

const entity: Product = response as Product;
const entity = await table.getEntity(partitionKey, rowKey);
const entity = await table.getEntity(partitionKey, rowKey);
Query entities
After you insert an entity, you can also run a query to get all entities that match a specific filter by usinglistEntitieswith an OData filter.
listEntities
const partitionKey: string = 'gear-surf-surfboards';

const filter: string = odata`PartitionKey eq '${partitionKey}'`

const queryOptions: TableEntityQueryOptions = { filter: filter }

const entities: PagedAsyncIterableIterator<TableEntityResult<Product>, TableEntityResultPage<Product>> = table.listEntities<Product>({ queryOptions: queryOptions });
const partitionKey: string = 'gear-surf-surfboards';

const filter: string = odata`PartitionKey eq '${partitionKey}'`

const queryOptions: TableEntityQueryOptions = { filter: filter }

const entities: PagedAsyncIterableIterator<TableEntityResult<Product>, TableEntityResultPage<Product>> = table.listEntities<Product>({ queryOptions: queryOptions });
const partitionKey = 'gear-surf-surfboards';

const entities = table.listEntities({
    queryOptions: {
        filter: odata`PartitionKey eq '${partitionKey}'`
    }
});
const partitionKey = 'gear-surf-surfboards';

const entities = table.listEntities({
    queryOptions: {
        filter: odata`PartitionKey eq '${partitionKey}'`
    }
});
Parse the paginated results of the query by using an asynchronousfor awaitloop on the paginated set ofentities.
for await
entities
for await(const entity of entities) {
    // Do something
}
for await(const entity of entities) {
    // Do something
}
for await(const entity of entities) {
    // Do something
}
for await(const entity of entities) {
    // Do something
}
Clean up resources
When you no longer need the sample application or resources, remove the corresponding deployment and all resources.
azd down
azd down
Related content
.NET Quickstart
Python Quickstart
Java Quickstart
Go Quickstart
Feedback
Was this page helpful?
Additional resources