Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create your first pipeline
Article
2025-03-31
25 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
This is a step-by-step guide to using Azure Pipelines to build a sample application from a Git repository. This guide uses YAML pipelines configured with theYAML pipeline editor.
For more information on the different sections in a YAML pipeline, seepipelinein theAzure Pipelines YAML schemaandCustomize your YAML pipeline.
If you'd like to use Classic pipelines instead, seeDefine your Classic pipeline. For guidance on using TFVC, seeBuild TFVC repositories.
Prerequisites - Azure DevOps
Make sure you have the following items:
A GitHub account where you can create a repository.Create one for free.
A GitHub account where you can create a repository.Create one for free.
An Azure DevOps organization.Create one for free.
If your team already has one, then make sure you're an administrator of the Azure DevOps project that you want to use.
An Azure DevOps organization.Create one for free.
If your team already has one, then make sure you're an administrator of the Azure DevOps project that you want to use.
An ability to run pipelines on Microsoft-hosted agents. To use Microsoft-hosted agents, your Azure DevOps organization must have access to Microsoft-hosted parallel jobs. You can either purchase aparallel jobor you canrequest a free grant.
An ability to run pipelines on Microsoft-hosted agents. To use Microsoft-hosted agents, your Azure DevOps organization must have access to Microsoft-hosted parallel jobs. You can either purchase aparallel jobor you canrequest a free grant.
Create your first pipeline
Java
.NET
Python
JavaScript
Get the Java sample code
To get started, fork the following repository into your GitHub account.
https://github.com/MicrosoftDocs/pipelines-java
https://github.com/MicrosoftDocs/pipelines-java
Create your first Java pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Azure Pipelines will analyze your repository and recommend theMavenpipeline template.
Azure Pipelines will analyze your repository and recommend theMavenpipeline template.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.If you want to watch your pipeline in action, select the build job.You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theMaventemplate.You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.
azure-pipelines.yml
If you want to watch your pipeline in action, select the build job.
You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theMaventemplate.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
azure-pipelines.yml
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
Learn more aboutworking with Javain your pipeline.
Get the .NET sample code
To get started, fork the following repository into your GitHub account.
https://github.com/MicrosoftDocs/pipelines-dotnet-core
https://github.com/MicrosoftDocs/pipelines-dotnet-core
Create your first .NET Core pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Azure Pipelines will analyze your repository and recommend theASP.NET Corepipeline template.
Azure Pipelines will analyze your repository and recommend theASP.NET Corepipeline template.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.If you want to watch your pipeline in action, select the build job.You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theASP.NET Coretemplate.You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.
azure-pipelines.yml
If you want to watch your pipeline in action, select the build job.
You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theASP.NET Coretemplate.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
azure-pipelines.yml
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
Learn more aboutworking with .NET Corein your pipeline.
Get the Python sample code
To get started, fork the following repository into your GitHub account.
https://github.com/Microsoft/python-sample-vscode-flask-tutorial
https://github.com/Microsoft/python-sample-vscode-flask-tutorial
Create your first Python pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Azure Pipelines will analyze your repository and recommend thePython packagepipeline template.
Azure Pipelines will analyze your repository and recommend thePython packagepipeline template.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.If you want to watch your pipeline in action, select the build job.You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for thePython packagetemplate.You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.
azure-pipelines.yml
If you want to watch your pipeline in action, select the build job.
You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for thePython packagetemplate.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
azure-pipelines.yml
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
Learn more aboutworking with Pythonin your pipeline.
Get the JavaScript sample code
To get started, fork the following repository into your GitHub account.
https://github.com/Azure-Samples/js-e2e-express-server
https://github.com/Azure-Samples/js-e2e-express-server
Create your first JavaScript pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating your first pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Azure Pipelines will analyze your repository and recommend theNode.jspipeline template.
Azure Pipelines will analyze your repository and recommend theNode.jspipeline template.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.If you want to watch your pipeline in action, select the build job.You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theNode.jstemplate.You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
You're prompted to commit a newazure-pipelines.ymlfile to your repository. After you're happy with the message, selectSave and runagain.
azure-pipelines.yml
If you want to watch your pipeline in action, select the build job.
You just created and ran a pipeline that we automatically created for you, because your code appeared to be a good match for theNode.jstemplate.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
azure-pipelines.yml
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
When you're ready to make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
Learn more aboutworking with JavaScriptin your pipeline.
View and manage your pipelines
You can view and manage your pipelines by choosingPipelinesfrom the left-hand menu to go to the pipelines landing page.

From the pipelines landing page you can view pipelines and pipeline runs, create and import pipelines, manage security, and drill down into pipeline and run details.
ChooseRecentto view recently run pipelines (the default view), or chooseAllto view all pipelines.

Select a pipeline to manage that pipeline andview the runs. Select the build number for the last run to view the results of that build, select the branch name to view the branch for that run, or select the context menu to run the pipeline and perform other management actions.

SelectRunsto view all pipeline runs. You can optionally filter the displayed runs.

Select a pipeline run to view information about that run.
You can choose toRetainorDeletea run from the context menu. For more information on run retention, seeBuild and release retention policies.

View pipeline details
The details page for a pipeline allows you to view and manage that pipeline.

ChooseEditto edit your pipeline. For more information, seeYAML pipeline editor. You can also edit your pipeline by modifying theazure-pipelines.ymlfile directly in the repository that hosts the pipeline.
View pipeline run details
From the pipeline run summary you can view the status of your run, both while it is running and when it is complete.

From the summary pane you can view job and stage details, download artifacts, and navigate to linked commits, test results, and work items.
The jobs pane displays an overview of the status of your stages and jobs. This pane may have multiple tabs depending on whether your pipeline has stages and jobs, or just jobs. In this example, the pipeline has two stages namedBuildandDeploy. You can drill down into the pipeline steps by choosing the job from either theStagesorJobspane.

Choose a job to see the steps for that job.

From the steps view, you can review the status and details of each step. From theMore actionsyou can toggle timestamps or view a raw log of all steps in the pipeline.

If the pipeline is running, you can cancel it by choosingCancel. If the run has completed, you can re-run the pipeline by choosingRun new.


From theMore actionsmenu you can download logs, add tags, edit the pipeline, delete the run, and configureretentionfor the run.

Note
You can't delete a run if the run is retained. If you don't seeDelete, chooseStop retaining run, and then delete the run. If you see bothDeleteandView retention releases, one or more configured retention policies still apply to your run. ChooseView retention releases, delete the policies (only the policies for the selected run are removed), and then delete the run.

Add a status badge to your repository
Many developers like to show that they're keeping their code quality high by displaying a status badge in their repo.

To copy the status badge to your clipboard:
In Azure Pipelines, go to thePipelinespage to view the list of pipelines. Select the pipeline you created in the previous section.
In Azure Pipelines, go to thePipelinespage to view the list of pipelines. Select the pipeline you created in the previous section.
Select, and then selectStatus badge.
Select, and then selectStatus badge.
SelectStatus badge.
SelectStatus badge.
Copy the sample Markdown from the Sample markdown section.
Copy the sample Markdown from the Sample markdown section.
Now with the badge Markdown in your clipboard, take the following steps in GitHub:
Go to the list of files and selectReadme.md. Select the pencil icon to edit.
Go to the list of files and selectReadme.md. Select the pencil icon to edit.
Readme.md
Paste the status badge Markdown at the beginning of the file.
Paste the status badge Markdown at the beginning of the file.
Commit the change to themainbranch.
Commit the change to themainbranch.
main
Notice that the status badge appears in the description of your repository.
Notice that the status badge appears in the description of your repository.
To configure anonymous access to badges for private projects:
Navigate toProject Settingsin the bottom left corner of the page
Navigate toProject Settingsin the bottom left corner of the page
Open theSettingstab underPipelines
Open theSettingstab underPipelines
Toggle theDisable anonymous access to badgesslider underGeneral
Toggle theDisable anonymous access to badgesslider underGeneral
Note
Even in a private project, anonymous badge access is enabled by default. With anonymous badge access enabled, users outside your organization might be able to query information such as project names, branch names, job names, and build status through the badge status API.
Because you just changed theReadme.mdfile in this repository, Azure Pipelines automatically builds your code, according to the configuration in theazure-pipelines.ymlfile at the root of your repository. Back in Azure Pipelines, observe that a new run appears. Each time you make an edit, Azure Pipelines starts a new run.
Readme.md
azure-pipelines.yml
We'll show you how to use the classic editor in Azure DevOps Server 2019 to create a build and release that prints "Hello world".
Prerequisites
Aself-hosted Windows agent.

Initialize your repository
If you already have a repository in your project, you can skip to the next step:Skip to adding a script to your repo
Go toAzure Repos. (TheCodehub in the previous navigation)
Go toAzure Repos. (TheCodehub in the previous navigation)

If your project is empty, you will be greeted with a screen to help you add code to your repository. Choose the bottom choice toinitializeyour repo with areadmefile:
If your project is empty, you will be greeted with a screen to help you add code to your repository. Choose the bottom choice toinitializeyour repo with areadmefile:
readme


Add a script to your repository
Create a PowerShell script that printsHello world.
Hello world
Go toAzure Repos.
Go toAzure Repos.
Add a file.
Add a file.

In the dialog box, name your new file and create it.HelloWorld.ps1
In the dialog box, name your new file and create it.
HelloWorld.ps1
HelloWorld.ps1
Copy and paste this script.Write-Host "Hello world"
Copy and paste this script.
Write-Host "Hello world"
Write-Host "Hello world"
Commit(save) the file.
Commit(save) the file.
In this tutorial, our focus is on CI/CD, so we're keeping the code part simple. We're working in an Azure Repos Git repository directly in your web browser.
When you're ready to begin building and deploying a real app, you can use a wide range of version control clients and services with Azure Pipelines CI builds.Learn more.
Create a build pipeline
Create a build pipeline that prints "Hello world."
SelectAzure Pipelines, it should automatically take you to theBuildspage.
SelectAzure Pipelines, it should automatically take you to theBuildspage.

Create a new pipeline.For new Azure DevOps users, this will automatically take you to theYAML pipeline creation experience. To get to the classic editor and complete this guide, you must turn off thepreview featurefor theNew YAML pipeline creation experience:
Create a new pipeline.

For new Azure DevOps users, this will automatically take you to theYAML pipeline creation experience. To get to the classic editor and complete this guide, you must turn off thepreview featurefor theNew YAML pipeline creation experience:


Make sure that thesource,project,repository, and defaultbranchmatch the location in which you created the script.
Make sure that thesource,project,repository, and defaultbranchmatch the location in which you created the script.
Start with anEmpty job.
Start with anEmpty job.
On the left side, selectPipelineand specify whateverNameyou want to use. For theAgent pool, selectHosted VS2017.
On the left side, selectPipelineand specify whateverNameyou want to use. For theAgent pool, selectHosted VS2017.
On the left side, select the plus sign( + )to add a task toJob 1. On the right side, select theUtilitycategory, select thePowerShelltask from the list, and then chooseAdd.
On the left side, select the plus sign( + )to add a task toJob 1. On the right side, select theUtilitycategory, select thePowerShelltask from the list, and then chooseAdd.

On the left side, select your newPowerShellscript task.
On the left side, select your newPowerShellscript task.
For theScript Pathargument, select thebutton to browse your repository and select the script you created.
For theScript Pathargument, select thebutton to browse your repository and select the script you created.

SelectSave & queue, and then selectSave.
SelectSave & queue, and then selectSave.
A build pipeline is the entity through which you define your automated build pipeline. In the build pipeline, you compose a set of tasks, each of which perform a step in your build. The task catalog provides a rich set of tasks for you to get started. You can also add PowerShell or shell scripts to your build pipeline.
Publish an artifact from your build
A typical build produces an artifact that can then be deployed to various stages in a release. Here to demonstrate the capability in a simple way, we'll simply publish the script as the artifact.
On theTaskstab, select the plus sign( + )to add a task toJob 1.
On theTaskstab, select the plus sign( + )to add a task toJob 1.
Select theUtilitycategory, select thePublish Build Artifactstask, and then selectAdd.Path to publish: Select thebutton to browse and select the script you created.Artifact name: Enterdrop.Artifact publish location: SelectAzure Artifacts/TFS.
Select theUtilitycategory, select thePublish Build Artifactstask, and then selectAdd.

Path to publish: Select thebutton to browse and select the script you created.
Artifact name: Enterdrop.
drop
Artifact publish location: SelectAzure Artifacts/TFS.
Artifacts are the files that you want your build to produce. Artifacts can be nearly anything your team needs to test or deploy your app. For example, you've got a .DLL and .EXE executable files and .PDB symbols file of a C# or C++ .NET Windows app.
To enable you to produce artifacts, we provide tools such as copying with pattern matching, and a staging directory in which you can gather your artifacts before publishing them. SeeArtifacts in Azure Pipelines.
Enable continuous integration (CI)
Select theTriggerstab.
Select theTriggerstab.
EnableContinuous integration.
EnableContinuous integration.
A continuous integration trigger on a build pipeline indicates that the system should automatically queue a new build whenever a code change is committed. You can make the trigger more general or more specific, and also schedule your build (for example, on a nightly basis). SeeBuild triggers.
Save and queue the build
Save and queue a build manually and test your build pipeline.
SelectSave & queue, and then selectSave & queue.
SelectSave & queue, and then selectSave & queue.
On the dialog box, selectSave & queueonce more.This queues a new build on the Microsoft-hosted agent.
On the dialog box, selectSave & queueonce more.
This queues a new build on the Microsoft-hosted agent.
You see a link to the new build on the top of the page.Choose the link to watch the new build as it happens. Once the agent is allocated, you'll start seeing the live logs of the build. Notice that the PowerShell script is run as part of the build, and that "Hello world" is printed to the console.
You see a link to the new build on the top of the page.

Choose the link to watch the new build as it happens. Once the agent is allocated, you'll start seeing the live logs of the build. Notice that the PowerShell script is run as part of the build, and that "Hello world" is printed to the console.

Go to the build summary. On theArtifactstab of the build, notice that the script is published as an artifact.
Go to the build summary. On theArtifactstab of the build, notice that the script is published as an artifact.

Add some variables and commit a change to your script
We'll pass some build variables to the script to make our pipeline a bit more interesting. Then we'll commit a change to a script and watch the CI pipeline run automatically to validate the change.
Edit your build pipeline.
Edit your build pipeline.
On theTaskstab, select the PowerShell script task.
On theTaskstab, select the PowerShell script task.
Add these arguments.
Add these arguments.

Arguments
-greeter "$(Build.RequestedFor)" -trigger "$(Build.Reason)"
-greeter "$(Build.RequestedFor)" -trigger "$(Build.Reason)"
Finally, save the build pipeline.
Next you'll add the arguments to your script.
Go to yourFilesinAzure Repos(theCodehub in the previous navigation and TFS).
Go to yourFilesinAzure Repos(theCodehub in the previous navigation and TFS).
Select theHelloWorld.ps1file, and thenEditthe file.
Select theHelloWorld.ps1file, and thenEditthe file.
Change the script as follows:Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Change the script as follows:
Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Commit(save) the script.
Commit(save) the script.
Now you can see the results of your changes. Go toAzure Pipelinesand selectQueued. Notice under theQueued or runningsection that a build is automatically triggered by the change that you committed.
Select the new build that was created and view its log.
Select the new build that was created and view its log.
Notice that the person who changed the code has their name printed in the greeting message. You also see printed that this was a CI build.
Notice that the person who changed the code has their name printed in the greeting message. You also see printed that this was a CI build.

We just introduced the concept of build variables in these steps. We printed the value of a variable that is automatically predefined and initialized by the system. You can also define custom variables and use them either in arguments to your tasks, or as environment variables within your scripts. To learn more about variables, seeBuild variables.
You've got a build pipeline. What's next?
You've created a build pipeline that automatically builds and validates whatever code is checked in by your team. At this point, you can continue to the next section to learn about release pipelines. Or, if you prefer, you canskip aheadto create a build pipeline for your app.
Create a release pipeline
Define the process for running the script in two stages.
Go to thePipelinestab, and then selectReleases.
Go to thePipelinestab, and then selectReleases.
Select the action to create aNew pipeline. If a release pipeline is already created, select the plus sign( + )and then selectCreate a release pipeline.
Select the action to create aNew pipeline. If a release pipeline is already created, select the plus sign( + )and then selectCreate a release pipeline.
Select the action to start with anEmpty job.
Select the action to start with anEmpty job.
Name the stageQA.
Name the stageQA.
In the Artifacts panel, select+ Addand specify aSource (Build pipeline). SelectAdd.
In the Artifacts panel, select+ Addand specify aSource (Build pipeline). SelectAdd.
Select theLightning boltto trigger continuous deployment and then enable theContinuous deployment triggeron the right.
Select theLightning boltto trigger continuous deployment and then enable theContinuous deployment triggeron the right.

Select theTaskstab and select yourQAstage.
Select theTaskstab and select yourQAstage.
Select the plus sign( + )for the job to add a task to the job.
Select the plus sign( + )for the job to add a task to the job.
On theAdd tasksdialog box, selectUtility, locate thePowerShelltask, and then select itsAddbutton.
On theAdd tasksdialog box, selectUtility, locate thePowerShelltask, and then select itsAddbutton.
On the left side, select your newPowerShellscript task.
On the left side, select your newPowerShellscript task.
For theScript Pathargument, select thebutton to browse your artifacts and select the script you created.
For theScript Pathargument, select thebutton to browse your artifacts and select the script you created.
Add theseArguments:-greeter "$(Release.RequestedFor)" -trigger "$(Build.DefinitionName)"
Add theseArguments:
-greeter "$(Release.RequestedFor)" -trigger "$(Build.DefinitionName)"
-greeter "$(Release.RequestedFor)" -trigger "$(Build.DefinitionName)"
On thePipelinetab, select theQAstage and selectClone.
On thePipelinetab, select theQAstage and selectClone.

Rename the cloned stageProduction.
Rename the cloned stageProduction.
Rename the release pipelineHello world.
Rename the release pipelineHello world.

Save the release pipeline.
Save the release pipeline.
A release pipeline is a collection of stages to which the application build artifacts are deployed. It also defines the actual deployment pipeline for each stage, as well as how the artifacts are promoted from one stage to another.
Also, notice that we used some variables in our script arguments. In this case, we usedrelease variablesinstead of the build variables we used for the build pipeline.
Deploy a release
Run the script in each stage.
Create a new release.WhenCreate new releaseappears, selectCreate.
Create a new release.

WhenCreate new releaseappears, selectCreate.
Open the release that you created.
Open the release that you created.

View the logs to get real-time data about the release.
View the logs to get real-time data about the release.

You can track the progress of each release to see if it has been deployed to all the stages. You can track the commits that are part of each release, the associated work items, and the results of any test runs that you've added to the release pipeline.
Change your code and watch it automatically deploy to production
We'll make one more change to the script. This time it will automatically build and then get deployed all the way to the production stage.
Go to theCodehub,Filestab, edit theHelloWorld.ps1file, and change it as follows:Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Write-Host "Now that you've got CI/CD, you can automatically deploy your app every time your team checks in code."
Go to theCodehub,Filestab, edit theHelloWorld.ps1file, and change it as follows:
Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Write-Host "Now that you've got CI/CD, you can automatically deploy your app every time your team checks in code."
Param(
[string]$greeter,
[string]$trigger
)
Write-Host "Hello world" from $greeter
Write-Host Trigger: $trigger
Write-Host "Now that you've got CI/CD, you can automatically deploy your app every time your team checks in code."
Commit(save) the script.
Commit(save) the script.
Select theBuildstab to see the build queued and run.
Select theBuildstab to see the build queued and run.
After the build is completed, select theReleasestab, open the new release, and then go to theLogs.
After the build is completed, select theReleasestab, open the new release, and then go to theLogs.
Your new code automatically is deployed in theQAstage, and then in theProductionstage.

In many cases, you probably would want to edit the release pipeline so that the production deployment happens
only after some testing and approvals are in place. SeeApprovals and gates overview.

Next steps
You learned how to create your first pipeline in Azure. Now, Learn more about configuring pipelines in the language of your choice:
.NET Core
Go
Java
Node.js
Python
Containers
Or, you can proceed tocustomize the pipelineyou  created.
To run your pipeline in a container, seeContainer jobs.
For details about building GitHub repositories, seeBuild GitHub repositories.
To learn how to publish your Pipeline Artifacts, seePublish Pipeline Artifacts.
To find out what else you can do in YAML pipelines, seeYAML schema reference.
Clean up
If you created any test pipelines, they're easy to delete when you finish with them.
Azure Pipelines UI
Azure DevOps CLI
To delete a pipeline, navigate to the summary page for that pipeline, and chooseDeletefrom the...menu at the top-right of the page. Type the name of the pipeline to confirm, and chooseDelete.

To delete a pipeline using Azure CLI, you can use theaz pipeline deletecommand. This command requires theidof the pipeline to delete, which you can find using theaz pipeline listcommand.
id
List pipelines|Delete pipeline|Example
Note
If this is your first time usingaz pipelinescommands, seeGet started with Azure DevOps CLI.
List pipelines
You can list your pipelines using theaz pipelines listcommand.
az pipelines list [--detect {false, true}]
                  [--folder-path]
                  [--name]
                  [--org]
                  [--project]
                  [--query-order {ModifiedAsc, ModifiedDesc, NameAsc, NameDesc, None}]
                  [--repository]
                  [--repository-type {bitbucket, git, github, githubenterprise, svn, tfsgit, tfsversioncontrol}]
                  [--top]
az pipelines list [--detect {false, true}]
                  [--folder-path]
                  [--name]
                  [--org]
                  [--project]
                  [--query-order {ModifiedAsc, ModifiedDesc, NameAsc, NameDesc, None}]
                  [--repository]
                  [--repository-type {bitbucket, git, github, githubenterprise, svn, tfsgit, tfsversioncontrol}]
                  [--top]
detect: Automatically detect organization. Accepted values:false,true
folder-path: If specified, filters to definitions under this folder.
name: Limit results to pipelines with this name or starting with this name. Examples:FabCIorFab*.
FabCI
Fab*
orgororganization: Azure DevOps organization URL. You can configure the default organization usingaz devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example:https://dev.azure.com/MyOrganizationName/.
az devops configure -d organization=ORG_URL
https://dev.azure.com/MyOrganizationName/
projectorp: Name or ID of the project. You can configure the default project usingaz devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
az devops configure -d project=NAME_OR_ID
query-order: Order of the results. Accepted values:ModifiedAsc,ModifiedDesc,NameAsc,NameDesc,None
repository: Limit results to pipelines associated with this repository.
repository-type: Limit results to pipelines associated with this repository type. It's mandatory to passrepositoryargument along with this argument. Accepted values:bitbucket,git,github,githubenterprise,svn,tfsgit,tfsversioncontrol
top: Maximum number of pipelines to list.
Delete pipeline
You can delete a pipeline using theaz pipelines deletecommand.
az pipelines delete --id
                    [--detect {false, true}]
                    [--org]
                    [--project]
                    [--yes]
az pipelines delete --id
                    [--detect {false, true}]
                    [--org]
                    [--project]
                    [--yes]
id: (Required) ID of the pipeline.
detect: Automatically detect organization. Accepted values:false,true
orgororganization: Azure DevOps organization URL. You can configure the default organization usingaz devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example:https://dev.azure.com/MyOrganizationName/.
az devops configure -d organization=ORG_URL
https://dev.azure.com/MyOrganizationName/
projectorp: Name or ID of the project. You can configure the default project usingaz devops configure -d project=NAME_OR_ID. Required if not configured as default or picked up via git config.
az devops configure -d project=NAME_OR_ID
yesory: Don't prompt for confirmation.
Example
The following example lists pipelines in table format, and then deletes the pipeline with an ID of 6. This example uses the following default configuration:az devops configure --defaults organization=https://dev.azure.com/fabrikam-tailspin project=FabrikamFiber
az devops configure --defaults organization=https://dev.azure.com/fabrikam-tailspin project=FabrikamFiber
az pipelines list --output table

ID    Path    Name           Status    Default Queue
----  ------  -------------  --------  ------------------
6     \       FabrikamFiber  enabled   Hosted Ubuntu 1604

az pipelines delete --id 6

Are you sure you want to delete this pipeline? (y/n): y
Pipeline 6 was deleted successfully.
az pipelines list --output table

ID    Path    Name           Status    Default Queue
----  ------  -------------  --------  ------------------
6     \       FabrikamFiber  enabled   Hosted Ubuntu 1604

az pipelines delete --id 6

Are you sure you want to delete this pipeline? (y/n): y
Pipeline 6 was deleted successfully.
Azure DevOps CLI commands aren't supported for Azure DevOps Server.
You've learned the basics of creating and running a pipeline.
Now you're ready to configure your build pipeline for the programming language you're using.
Go ahead and create a new build pipeline, and this time, use one of the following templates.
FAQ
Where can I read articles about DevOps and CI/CD?
What is Continuous Integration?
What is Continuous Delivery?
What is DevOps?

What version control system can I use?
When you're ready to get going with CI/CD for your app, you can use the version control system of your choice:
ClientsVisual Studio Code for Windows, macOS, and LinuxVisual Studio with Git for WindowsorVisual Studio for MacEclipseXcodeIntelliJCommand line
Clients
Visual Studio Code for Windows, macOS, and Linux
Visual Studio with Git for WindowsorVisual Studio for Mac
Eclipse
Xcode
IntelliJ
Command line
ServicesAzure PipelinesGit service providers such as Azure Repos Git, GitHub, and Bitbucket CloudSubversion
Services
Azure Pipelines
Git service providers such as Azure Repos Git, GitHub, and Bitbucket Cloud
Subversion
ClientsVisual Studio Code for Windows, macOS, and LinuxVisual Studio with Git for WindowsorVisual Studio for MacVisual Studio with TFVCEclipseXcodeIntelliJCommand line
Clients
Visual Studio Code for Windows, macOS, and Linux
Visual Studio with Git for WindowsorVisual Studio for Mac
Visual Studio with TFVC
Eclipse
Xcode
IntelliJ
Command line
ServicesAzure PipelinesGit service providers such as GitHub and Bitbucket CloudSubversion
Services
Azure Pipelines
Git service providers such as GitHub and Bitbucket Cloud
Subversion
How do I replicate a pipeline?
If your pipeline has a pattern that you want to replicate in other pipelines, clone it, export it, or save it as a template.

After you clone a pipeline, you can make changes and then save it.
After you export a pipeline, you can import it from theAll pipelinestab.
After you create a template, your team members can use it to follow the pattern in new pipelines.
Tip
If you're using theNew Build Editor, then your custom templates are shown at the bottom of the list.
How do I work with drafts?
If you're editing a build pipeline and you want to test some changes that are not yet ready for production, you can save it as a draft.

You can edit and test your draft as needed.

When you're ready, you can publish the draft to merge the changes into your build pipeline.

Or, if you decide to discard the draft, you can delete it from theAll Pipelinetab shown above.
How can I delete a pipeline?
To delete a pipeline, navigate to the summary page for that pipeline, and chooseDeletefrom the...menu in the top-right of the page. Type the name of the pipeline to confirm, and chooseDelete.

What else can I do when I queue a build?
You can queue buildsautomaticallyor manually.
When you manually queue a build, you can, for a single run of the build:
Specify thepoolinto which the build goes.
Specify thepoolinto which the build goes.
Add and modify somevariables.
Add and modify somevariables.
Adddemands.
Adddemands.
In a Git repositoryBuild abranchor atag.Build acommit.
In a Git repository
Build abranchor atag.
Build abranchor atag.
Build acommit.
Build acommit.
In a TFVC repositorySpecify the source version as alabelorchangeset.Run a private build of ashelveset. (You can use this option on either aMicrosoft-hosted agentor aself-hosted agent.)
In a TFVC repository
Specify the source version as alabelorchangeset.
Specify the source version as alabelorchangeset.
Run a private build of ashelveset. (You can use this option on either aMicrosoft-hosted agentor aself-hosted agent.)
Run a private build of ashelveset. (You can use this option on either aMicrosoft-hosted agentor aself-hosted agent.)
You can queue buildsautomaticallyor manually.
When you manually queue a build, you can, for a single run of the build:
Specify thepoolinto which the build goes.
Specify thepoolinto which the build goes.
Add and modify somevariables.
Add and modify somevariables.
Adddemands.
Adddemands.
In a Git repositoryBuild abranchor atag.Build acommit.
In a Git repository
Build abranchor atag.
Build abranchor atag.
Build acommit.
Build acommit.
Where can I learn more about pipeline settings?
To learn more about pipeline settings, see:
Getting sources
Tasks
Variables
Triggers
Retention
History
How do I programmatically create a build pipeline?
REST API Reference: Create a build pipeline
Note
You can also manage builds and build pipelines from the command line or scripts using theAzure Pipelines CLI.
Feedback
Was this page helpful?
Additional resources