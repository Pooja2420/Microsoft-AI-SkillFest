Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure web application firewall exclusion lists
Article
2023-07-26
2 contributors
In this article
Sometimes Azure Web Application Firewall in Azure Front Door might block a legitimate request. As part of tuning your web application firewall (WAF), you can configure the WAF to allow the request for your application. WAF exclusion lists allow you to omit specific request attributes from a WAF evaluation. The rest of the request is evaluated as normal. For more information about exclusion lists, seeAzure Web Application Firewall with Azure Front Door exclusion lists.
An exclusion list can be configured by usingAzure PowerShell, theAzure CLI, theREST API, Bicep, Azure Resource Manager templates, and the Azure portal.
Scenario
Suppose you've created an API. Your clients send requests to your API that include headers with names likeuseridanduser-id.
userid
user-id
While tuning your WAF, you notice that some legitimate requests were blocked because the user headers included character sequences that the WAF detected as SQL injection attacks. Specifically, rule ID 942230 detects the request headers and blocks the requests.Rule 942230 is part of the SQLI rule group.
You decide to create an exclusion to allow these legitimate requests to pass through without the WAF blocking them.
Create an exclusion
Open your Azure Front Door WAF policy.
Open your Azure Front Door WAF policy.
SelectManaged rules>Manage exclusions.
SelectManaged rules>Manage exclusions.
SelectAdd.
SelectAdd.
Configure the exclusion'sApplies tosection:FieldValueRule setMicrosoft_DefaultRuleSet_2.0Rule groupSQLIRule942230 Detects conditional SQL injection attempts
Configure the exclusion'sApplies tosection:
Configure the exclusion match conditions:FieldValueMatch variableRequest header nameOperatorStarts withSelectorUser
Configure the exclusion match conditions:
Review the exclusion, which should look like the following screenshot:This exclusion applies to any request headers that start with the worduser. The match condition is case insensitive, so headers that start withUserare also covered by the exclusion. If WAF rule 942230 detects a risk in these header values, it ignores the header and moves on.
Review the exclusion, which should look like the following screenshot:

This exclusion applies to any request headers that start with the worduser. The match condition is case insensitive, so headers that start withUserare also covered by the exclusion. If WAF rule 942230 detects a risk in these header values, it ignores the header and moves on.
user
User
SelectSave.
SelectSave.
Define an exclusion selector
Use theNew-AzFrontDoorWafManagedRuleExclusionObjectcmdlet to define a new exclusion selector.
The following example identifies request headers that start with the worduser. The match condition is case insensitive, so headers that start withUserare also covered by the exclusion.
user
User
$exclusionSelector = New-AzFrontDoorWafManagedRuleExclusionObject `
  -Variable RequestHeaderNames `
  -Operator StartsWith `
  -Selector 'user'
$exclusionSelector = New-AzFrontDoorWafManagedRuleExclusionObject `
  -Variable RequestHeaderNames `
  -Operator StartsWith `
  -Selector 'user'
Define a per-rule exclusion
Use theNew-AzFrontDoorWafManagedRuleOverrideObjectcmdlet to define a new per-rule exclusion, which includes the selector you created in the previous step.
The following example creates an exclusion for rule ID 942230.
$exclusion = New-AzFrontDoorWafManagedRuleOverrideObject `
  -RuleId '942230' `
  -Exclusion $exclusionSelector
$exclusion = New-AzFrontDoorWafManagedRuleOverrideObject `
  -RuleId '942230' `
  -Exclusion $exclusionSelector
Apply the exclusion to the rule group
Use theNew-AzFrontDoorWafRuleGroupOverrideObjectcmdlet to create a rule group override, which applies the exclusion to the appropriate rule group.
The following example uses the SQLI rule group because that group contains rule ID 942230.
$ruleGroupOverride = New-AzFrontDoorWafRuleGroupOverrideObject `
  -RuleGroupName 'SQLI' `
  -ManagedRuleOverride $exclusion
$ruleGroupOverride = New-AzFrontDoorWafRuleGroupOverrideObject `
  -RuleGroupName 'SQLI' `
  -ManagedRuleOverride $exclusion
Configure the managed rule set
Use theNew-AzFrontDoorWafManagedRuleObjectcmdlet to configure the managed rule set, including the rule group override that you created in the previous step.
The following example configures the DRS 2.0 rule set with the rule group override and its exclusion.
$managedRuleSet = New-AzFrontDoorWafManagedRuleObject `
  -Type 'Microsoft_DefaultRuleSet' `
  -Version '2.0' `
  -Action Block `
  -RuleGroupOverride $ruleGroupOverride
$managedRuleSet = New-AzFrontDoorWafManagedRuleObject `
  -Type 'Microsoft_DefaultRuleSet' `
  -Version '2.0' `
  -Action Block `
  -RuleGroupOverride $ruleGroupOverride
Apply the managed rule set configuration to the WAF profile
Use theUpdate-AzFrontDoorWafPolicycmdlet to update your WAF policy to include the configuration you created. Ensure that you use the correct resource group name and WAF policy name for your own environment.
Update-AzFrontDoorWafPolicy `
  -ResourceGroupName 'FrontDoorWafPolicy' `
  -Name 'WafPolicy'
  -ManagedRule $managedRuleSet
Update-AzFrontDoorWafPolicy `
  -ResourceGroupName 'FrontDoorWafPolicy' `
  -Name 'WafPolicy'
  -ManagedRule $managedRuleSet
Create an exclusion
Use theaz network front-door waf-policy managed-rules exclusion addcommand to update your WAF policy to add a new exclusion.
az network front-door waf-policy managed-rules exclusion add
The exclusion identifies request headers that start with the worduser. The match condition is case insensitive, so headers that start withUserare also covered by the exclusion.
user
User
Ensure that you use the correct resource group name and WAF policy name for your own environment.
az network front-door waf-policy managed-rules exclusion add \
  --resource-group FrontDoorWafPolicy \
  --policy-name WafPolicy \
  --type Microsoft_DefaultRuleSet \
  --rule-group-id SQLI \
  --rule-id 942230 \
  --match-variable RequestHeaderNames \
  --operator StartsWith \
  --value user
az network front-door waf-policy managed-rules exclusion add \
  --resource-group FrontDoorWafPolicy \
  --policy-name WafPolicy \
  --type Microsoft_DefaultRuleSet \
  --rule-group-id SQLI \
  --rule-id 942230 \
  --match-variable RequestHeaderNames \
  --operator StartsWith \
  --value user
Example Bicep file
The following example Bicep file shows how to:
Create an Azure Front Door WAF policy.
Enable the DRS 2.0 rule set.
Configure an exclusion for rule 942230, which exists within the SQLI rule group. This exclusion applies to any request headers that start with the worduser. The match condition is case insensitive, so headers that start withUserare also covered by the exclusion. If WAF rule 942230 detects a risk in these header values, it ignores the header and moves on.
user
User
param wafPolicyName string = 'WafPolicy'

@description('The mode that the WAF should be deployed using. In "Prevention" mode, the WAF will block requests it detects as malicious. In "Detection" mode, the WAF will not block requests and will simply log the request.')
@allowed([
  'Detection'
  'Prevention'
])
param wafMode string = 'Prevention'

resource wafPolicy 'Microsoft.Network/frontDoorWebApplicationFirewallPolicies@2022-05-01' = {
  name: wafPolicyName
  location: 'Global'
  sku: {
    name: 'Premium_AzureFrontDoor'
  }
  properties: {
    policySettings: {
      enabledState: 'Enabled'
      mode: wafMode
    }
    managedRules: {
      managedRuleSets: [
        {
          ruleSetType: 'Microsoft_DefaultRuleSet'
          ruleSetVersion: '2.0'
          ruleSetAction: 'Block'
          ruleGroupOverrides: [
            {
              ruleGroupName: 'SQLI'
              rules: [
                {
                  ruleId: '942230'
                  enabledState: 'Enabled'
                  action: 'AnomalyScoring'
                  exclusions: [
                    {
                      matchVariable: 'RequestHeaderNames'
                      selectorMatchOperator: 'StartsWith'
                      selector: 'user'
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  }
}
param wafPolicyName string = 'WafPolicy'

@description('The mode that the WAF should be deployed using. In "Prevention" mode, the WAF will block requests it detects as malicious. In "Detection" mode, the WAF will not block requests and will simply log the request.')
@allowed([
  'Detection'
  'Prevention'
])
param wafMode string = 'Prevention'

resource wafPolicy 'Microsoft.Network/frontDoorWebApplicationFirewallPolicies@2022-05-01' = {
  name: wafPolicyName
  location: 'Global'
  sku: {
    name: 'Premium_AzureFrontDoor'
  }
  properties: {
    policySettings: {
      enabledState: 'Enabled'
      mode: wafMode
    }
    managedRules: {
      managedRuleSets: [
        {
          ruleSetType: 'Microsoft_DefaultRuleSet'
          ruleSetVersion: '2.0'
          ruleSetAction: 'Block'
          ruleGroupOverrides: [
            {
              ruleGroupName: 'SQLI'
              rules: [
                {
                  ruleId: '942230'
                  enabledState: 'Enabled'
                  action: 'AnomalyScoring'
                  exclusions: [
                    {
                      matchVariable: 'RequestHeaderNames'
                      selectorMatchOperator: 'StartsWith'
                      selector: 'user'
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  }
}
Next steps
Learn more aboutAzure Front Door.
Feedback
Was this page helpful?
Additional resources