Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up deployment slots to enable zero downtime deployment in Azure Logic Apps
Article
2025-03-13
2 contributors
In this article
Applies to:Azure Logic Apps (Standard)
To deploy mission-critical logic apps that are always available and responsive, even during updates or maintenance, you can enable zero downtime deployment by creating and using deployment slots. Zero downtime means that when you deploy new versions of your app, end users shouldn't experience disruption or downtime. Deployment slots are isolated nonproduction environments that host different versions of your app and provide the following benefits:
Swap a deployment slot with your production slot without interruption. That way, you can update your logic app and workflows without affecting availability or performance.
Swap a deployment slot with your production slot without interruption. That way, you can update your logic app and workflows without affecting availability or performance.
Validate any changes in a deployment slot before you apply those changes to the production slot.
Validate any changes in a deployment slot before you apply those changes to the production slot.
Roll back to a previous version, if anything goes wrong with your deployment.
Roll back to a previous version, if anything goes wrong with your deployment.
Reduce the risk of negative performance when you must exceed therecommended number of workflows per logic app.
Reduce the risk of negative performance when you must exceed therecommended number of workflows per logic app.
With deployment slots, you can achieve continuous delivery and improve your applications' quality and reliability. For more information about deployment slots in Azure and because Standard logic app workflows are based on Azure Functions extensibility, seeAzure Functions deployment slots.

Known issues and limitations
Nonproduction slots are created in read-only mode.
Nonproduction slots are created in read-only mode.
The nonproduction slots dispatcher is turned off, which means that workflows can only run when they're in the production slot.
The nonproduction slots dispatcher is turned off, which means that workflows can only run when they're in the production slot.
Traffic distribution is disabled for deployment slots in Standard logic apps.
Traffic distribution is disabled for deployment slots in Standard logic apps.
Deployment slots for Standard logic apps don't support the following scenarios:Blue-green deploymentProduct verification testing before slot swappingA/B testing
Deployment slots for Standard logic apps don't support the following scenarios:
Blue-green deployment
Product verification testing before slot swapping
A/B testing
Prerequisites
An Azure account and subscription. If you don't have a subscription,â¯sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,â¯sign up for a free Azure account.
To work in Visual Studio Code with the Azure Logic Apps (Standard) extension, you'll need to meet the prerequisites described inâ¯Create Standard workflows with Visual Studio Code. You'll also need a Standard logic app project that you want to publish to Azure.
To work in Visual Studio Code with the Azure Logic Apps (Standard) extension, you'll need to meet the prerequisites described inâ¯Create Standard workflows with Visual Studio Code. You'll also need a Standard logic app project that you want to publish to Azure.
Azure Logic Apps Standard Contributor role permissions
Azure Logic Apps Standard Contributor role permissions
An existing Standard logic app resource in Azure where you want to create your deployment slot and deploy your changes. You can create an empty Standard logic app resource without any workflows. For more information, seeCreate example Standard workflow in single-tenant Azure Logic Apps.
An existing Standard logic app resource in Azure where you want to create your deployment slot and deploy your changes. You can create an empty Standard logic app resource without any workflows. For more information, seeCreate example Standard workflow in single-tenant Azure Logic Apps.
Create a deployment slot
The following options are available for you to create a deployment slot:
Portal
Visual Studio Code
Azure CLI
InAzure portal, open your Standard logic app resource where you want to create a deployment slot.
InAzure portal, open your Standard logic app resource where you want to create a deployment slot.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On the toolbar, selectAdd.
On the toolbar, selectAdd.
In theAdd Slotpane, provide a name, which must be unique and uses only lowercase alphanumeric characters or hyphens (-), for your deployment slot.NoteAfter creation, your deployment slot name uses the following format: <logic-app-name-deployment-slot-name>.
In theAdd Slotpane, provide a name, which must be unique and uses only lowercase alphanumeric characters or hyphens (-), for your deployment slot.
Note
After creation, your deployment slot name uses the following format: <logic-app-name-deployment-slot-name>.
When you're done, selectAdd.
When you're done, selectAdd.
In Visual Studio Code, open the Standard logic app project that you want to deploy.
In Visual Studio Code, open the Standard logic app project that you want to deploy.
Open the command palette. (Keyboard: Ctrl + Shift + P)
Open the command palette. (Keyboard: Ctrl + Shift + P)
From the command list, selectAzure Logic Apps: Create Slot, and follow the prompts to provide the required information:Enter and select the name for your Azure subscription.Enter and select the name for your existing Standard logic app in Azure.Enter a name, which must be unique and uses only lowercase alphanumeric characters or hyphens (-), for your deployment slot.
From the command list, selectAzure Logic Apps: Create Slot, and follow the prompts to provide the required information:
Enter and select the name for your Azure subscription.
Enter and select the name for your Azure subscription.
Enter and select the name for your existing Standard logic app in Azure.
Enter and select the name for your existing Standard logic app in Azure.
Enter a name, which must be unique and uses only lowercase alphanumeric characters or hyphens (-), for your deployment slot.
Enter a name, which must be unique and uses only lowercase alphanumeric characters or hyphens (-), for your deployment slot.
Run the following Azure CLI command:
az functionapp deployment slot create --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name}
az functionapp deployment slot create --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name}
To enable a system-assigned managed identity on your Standard logic app deployment slot, run the following Azure CLI command:
az functionapp identity assign --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name}
az functionapp identity assign --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name}
Confirm deployment slot creation
After you create the deployment slot, confirm that the slot exists on your deployed logic app resource.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On theDeployment slotspage, underDeployment Slots, find and select your new deployment slot.NoteAfter creation, your deployment slot name uses the following format: <logic-app-name-deployment-slot-name>.
On theDeployment slotspage, underDeployment Slots, find and select your new deployment slot.
Note
After creation, your deployment slot name uses the following format: <logic-app-name-deployment-slot-name>.
Deploy logic app changes to a deployment slot
The following options are available for you to deploy logic app changes in a deployment slot:
Portal
Visual Studio Code
Azure CLI
Unavailable at this time. Please follow the steps for Visual Studio Code or Azure CLI to deploy your changes.
In Visual Studio Code, open the Standard logic app project that you want to deploy.
In Visual Studio Code, open the Standard logic app project that you want to deploy.
Open the command palette. (Keyboard: Ctrl + Shift + P)
Open the command palette. (Keyboard: Ctrl + Shift + P)
From the command list, selectAzure Logic Apps: Deploy to Slot, and follow the prompts to provide the required information:Enter and select the name for your Azure subscription.Enter and select the name for your existing Standard logic app in Azure.Select the name for your deployment slot.
From the command list, selectAzure Logic Apps: Deploy to Slot, and follow the prompts to provide the required information:
Enter and select the name for your Azure subscription.
Enter and select the name for your Azure subscription.
Enter and select the name for your existing Standard logic app in Azure.
Enter and select the name for your existing Standard logic app in Azure.
Select the name for your deployment slot.
Select the name for your deployment slot.
In the message box that appears, confirm that you want to deploy the current code in your project to the selected slot by selectingDeploy. This action overwrites any existing content in the selected slot.
In the message box that appears, confirm that you want to deploy the current code in your project to the selected slot by selectingDeploy. This action overwrites any existing content in the selected slot.
After deployment completes, you can update any settings, if necessary, by selectingUpload settingsin the message box that appears.
After deployment completes, you can update any settings, if necessary, by selectingUpload settingsin the message box that appears.
Run the following Azure CLI command:
az logicapp deployment source config-zip --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --src {deployment-package-local-path}
az logicapp deployment source config-zip --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --src {deployment-package-local-path}
Confirm deployment for your changes
After you deploy your changes, confirm that the changes appear in your deployed logic app resource.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On theDeployment slotspage, underDeployment Slots, find and select your deployment slot.
On theDeployment slotspage, underDeployment Slots, find and select your deployment slot.
On the resource menu, selectOverview. On theNotificationstab, check whether any deployment issues exist, for example, errors that might happen during app startup or around slot swapping:
On the resource menu, selectOverview. On theNotificationstab, check whether any deployment issues exist, for example, errors that might happen during app startup or around slot swapping:

To verify the changes in your workflow, underWorkflows, selectWorkflows, and then select a workflow, which appears in read-only view.
To verify the changes in your workflow, underWorkflows, selectWorkflows, and then select a workflow, which appears in read-only view.
Swap a deployment slot with the production slot
The following options are available for you to swap a deployment slot with the current production slot:
Portal
Visual Studio Code
Azure CLI
InAzure portal, open your Standard logic app resource where you want to swap slots.
InAzure portal, open your Standard logic app resource where you want to swap slots.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On the toolbar, selectSwap.
On the toolbar, selectSwap.
On theSwappane, underSource, select the deployment slot that you want to activate.
On theSwappane, underSource, select the deployment slot that you want to activate.
UnderTarget, select the production slot that you want to replace with the deployment slot.NotePerform swap with previewworks only with logic apps that enabled deployment slot settings.
UnderTarget, select the production slot that you want to replace with the deployment slot.
Note
Perform swap with previewworks only with logic apps that enabled deployment slot settings.
UnderConfig Changes, review the configuration changes for the source and target slots.
UnderConfig Changes, review the configuration changes for the source and target slots.
When you're ready, selectStart Swap.
When you're ready, selectStart Swap.
Wait for the operation to successfully complete.
Wait for the operation to successfully complete.
In Visual Studio Code, open your Standard logic app project.
In Visual Studio Code, open your Standard logic app project.
Open the command palette. (Keyboard: Ctrl + Shift + P)
Open the command palette. (Keyboard: Ctrl + Shift + P)
From the command list, selectAzure Logic Apps: Swap Slot, and follow the prompts to provide the required information:Enter and select the name for your Azure subscription.Enter and select the name for your existing Standard logic app in Azure.Select the deployment slot that you want to make as the active slot.Select the production slot that you want to swap with the deployment slot.Wait for the operation to successfully complete.
From the command list, selectAzure Logic Apps: Swap Slot, and follow the prompts to provide the required information:
Enter and select the name for your Azure subscription.
Enter and select the name for your Azure subscription.
Enter and select the name for your existing Standard logic app in Azure.
Enter and select the name for your existing Standard logic app in Azure.
Select the deployment slot that you want to make as the active slot.
Select the deployment slot that you want to make as the active slot.
Select the production slot that you want to swap with the deployment slot.
Select the production slot that you want to swap with the deployment slot.
Wait for the operation to successfully complete.
Wait for the operation to successfully complete.
Run the following Azure CLI command:
az functionapp deployment slot swap --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --target-slot production
az functionapp deployment slot swap --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --target-slot production
Confirm success for your slot swap
After you swap slots, verify that the changes from your deployment slot now appear in the production slot.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underWorkflows, selectWorkflows, and then select a workflow to review the changes.
On the resource menu, underWorkflows, selectWorkflows, and then select a workflow to review the changes.
Delete a deployment slot
The following options are available for you to delete a deployment slot from your Standard logic app resource.
Portal
Visual Studio Code
Azure CLI
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On theDeployment slotspage, underDeployment Slots, select the deployment slot that you want to delete.
On theDeployment slotspage, underDeployment Slots, select the deployment slot that you want to delete.
On the deployment slot resource menu, selectOverview.
On the deployment slot resource menu, selectOverview.
On theOverviewtoolbar, selectDelete.
On theOverviewtoolbar, selectDelete.
Confirm deletion by entering the deployment slot name, and then selectDelete.
Confirm deletion by entering the deployment slot name, and then selectDelete.

In Visual Studio Code, open your Standard logic app project.
In Visual Studio Code, open your Standard logic app project.
Open the command palette. (Keyboard: Ctrl + Shift + P)
Open the command palette. (Keyboard: Ctrl + Shift + P)
From the command list, selectAzure Logic Apps: Delete Slot, and follow the prompts to provide the required information:Enter and select the name for your Azure subscription.Enter and select the name for your existing Standard logic app in Azure.Select the deployment slot that you want to delete.
From the command list, selectAzure Logic Apps: Delete Slot, and follow the prompts to provide the required information:
Enter and select the name for your Azure subscription.
Enter and select the name for your Azure subscription.
Enter and select the name for your existing Standard logic app in Azure.
Enter and select the name for your existing Standard logic app in Azure.
Select the deployment slot that you want to delete.
Select the deployment slot that you want to delete.
In the message box that appears, confirm that you want to delete selected deployment slot by selectingDelete.
In the message box that appears, confirm that you want to delete selected deployment slot by selectingDelete.
Run the following Azure CLI command:
az functionapp deployment slot delete --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --target-slot production
az functionapp deployment slot delete --name {logic-app-name} --resource-group {resource-group-name} --slot {slot-name} --target-slot production
Confirm deployment slot deletion
After you delete a deployment slot, verify that the slot no longer exists on your deployed Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underDeployment, selectDeployment slots.
On the resource menu, underDeployment, selectDeployment slots.
On theDeployment slotspage, underDeployment Slots, confirm that the deployment slot no longer exists.
On theDeployment slotspage, underDeployment Slots, confirm that the deployment slot no longer exists.
Related content
Deployment best practices
Azure Functions deployment slots
Feedback
Was this page helpful?
Additional resources