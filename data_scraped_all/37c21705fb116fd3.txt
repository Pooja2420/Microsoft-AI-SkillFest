Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up sign-up and sign-in with a Microsoft account using Azure Active Directory B2C
Article
2023-11-07
13 contributors
In this article
Before you begin, use theChoose a policy typeselector at the top of this page to choose the type of policy youâre setting up. Azure Active Directory B2C offers two methods to define how users interact with your applications: through predefineduser flowsor through fully configurablecustom policies. The steps required in this article are different for each method.
Note
In Azure Active Directory B2C,custom policiesare designed primarily to address complex scenarios. For most scenarios, we recommend that you use built-inuser flows. If you've not done so, learn about custom policy starter pack inGet started with custom policies in Active Directory B2C.
Prerequisites
Create a user flowso users can sign up and sign in to your application.
Register a web application.
Complete the steps inGet started with custom policies in Active Directory B2C. This tutorial guides you how to update custom policy files to use your Azure AD B2C tenant configuration.
Register a web application.
Create a Microsoft account application
To enable sign-in for users with a Microsoft account in Azure Active Directory B2C (Azure AD B2C), you need to create an application in theAzure portal. For more information, seeRegister an application with the Microsoft identity platform. If you don't already have a Microsoft account, you can get one athttps://www.live.com/.
Sign in to theAzure portal.
Sign in to theAzure portal.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Microsoft Entra ID tenant from theDirectories + subscriptionsmenu.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Microsoft Entra ID tenant from theDirectories + subscriptionsmenu.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectApp registrations.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectApp registrations.
SelectNew registration.
SelectNew registration.
Enter aNamefor your application. For example,MSAapp1.
Enter aNamefor your application. For example,MSAapp1.
UnderSupported account types, selectpersonal Microsoft accounts (e.g. Skype, Xbox).For more information on the different account type selections, seeQuickstart: Register an application with the Microsoft identity platform.
UnderSupported account types, selectpersonal Microsoft accounts (e.g. Skype, Xbox).
For more information on the different account type selections, seeQuickstart: Register an application with the Microsoft identity platform.
UnderRedirect URI (optional), selectWeband enterhttps://your-tenant-name.b2clogin.com/your-tenant-name.onmicrosoft.com/oauth2/authresp. If you use acustom domain, enterhttps://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp. Replaceyour-tenant-namewith the name of your Azure AD B2C tenant, andyour-domain-namewith your custom domain.
UnderRedirect URI (optional), selectWeband enterhttps://your-tenant-name.b2clogin.com/your-tenant-name.onmicrosoft.com/oauth2/authresp. If you use acustom domain, enterhttps://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp. Replaceyour-tenant-namewith the name of your Azure AD B2C tenant, andyour-domain-namewith your custom domain.
https://your-tenant-name.b2clogin.com/your-tenant-name.onmicrosoft.com/oauth2/authresp
https://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp
your-tenant-name
your-domain-name
SelectRegister
SelectRegister
Record theApplication (client) IDshown on the application Overview page. You need the client ID when you configure the identity provider in the next section.
Record theApplication (client) IDshown on the application Overview page. You need the client ID when you configure the identity provider in the next section.
SelectCertificates & secrets
SelectCertificates & secrets
ClickNew client secret
ClickNew client secret
Enter aDescriptionfor the secret, for exampleApplication password 1, and then clickAdd.
Enter aDescriptionfor the secret, for exampleApplication password 1, and then clickAdd.
Record the application password shown in theValuecolumn. You need the client secret when you configure the identity provider in the next section.
Record the application password shown in theValuecolumn. You need the client secret when you configure the identity provider in the next section.
Configure Microsoft as an identity provider
Sign in to theAzure portalwith an account that has at leastExternal Identity Provider Administratorprivileges.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Azure AD B2C tenant from theDirectories + subscriptionsmenu.
ChooseAll servicesin the top-left corner of the Azure portal, search for and selectAzure AD B2C.
SelectIdentity providers, then selectMicrosoft Account.
Enter aName. For example,MSA.
For theClient ID, enter the Application (client) ID of the Microsoft Entra application that you created earlier.
For theClient secret, enter the client secret that you recorded.
SelectSave.
Add Microsoft identity provider to a user flow
At this point, the Microsoft identity provider has been set up, but it's not yet available in any of the sign-in pages. To add the Microsoft identity provider to a user flow:
In your Azure AD B2C tenant, selectUser flows.
Click the user flow that you want to add the Microsoft identity provider.
Under theSocial identity providers, selectMicrosoft Account.
SelectSave.
To test your policy, selectRun user flow.
ForApplication, select the web application namedtestapp1that you previously registered. TheReply URLshould showhttps://jwt.ms.
https://jwt.ms
Select theRun user flowbutton.
From the sign-up or sign-in page, selectMicrosoftto sign in with Microsoft account.
If the sign-in process is successful, your browser is redirected tohttps://jwt.ms, which displays the contents of the token returned by Azure AD B2C.
https://jwt.ms
Configuring optional claims
If you want to get thefamily_nameandgiven_nameclaims from Microsoft Entra ID, you can configure optional claims for your application in the Azure portal UI or application manifest. For more information, seeHow to provide optional claims to your Microsoft Entra app.
family_name
given_name
Sign in to theAzure portal. Search for and selectMicrosoft Entra ID.
From theManagesection, selectApp registrations.
Select the application you want to configure optional claims for in the list.
From theManagesection, selectToken configuration (preview).
SelectAdd optional claim.
Select the token type you want to configure.
Select the optional claims to add.
ClickAdd.
Create a policy key
Now that you've created the application in your Microsoft Entra tenant, you need to store that application's client secret in your Azure AD B2C tenant.
Sign in to theAzure portal.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Azure AD B2C tenant from theDirectories + subscriptionsmenu.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectAzure AD B2C.
On the Overview page, selectIdentity Experience Framework.
SelectPolicy Keysand then selectAdd.
ForOptions, chooseManual.
Manual
Enter aNamefor the policy key. For example,MSASecret. The prefixB2C_1A_is added automatically to the name of your key.
MSASecret
B2C_1A_
InSecret, enter the client secret that you recorded in the previous section.
ForKey usage, selectSignature.
Signature
ClickCreate.
Configure Microsoft as an identity provider
To enable users to sign in using a Microsoft account, you need to define the account as a claims provider that Azure AD B2C can communicate with through an endpoint. The endpoint provides a set of claims that are used by Azure AD B2C to verify that a specific user has authenticated.
You can define Microsoft Entra ID as a claims provider by adding theClaimsProviderelement in the extension file of your policy.
Open theTrustFrameworkExtensions.xmlpolicy file.
Open theTrustFrameworkExtensions.xmlpolicy file.
Find theClaimsProviderselement. If it does not exist, add it under the root element.
Find theClaimsProviderselement. If it does not exist, add it under the root element.
Add a newClaimsProvideras follows:<ClaimsProvider>
  <Domain>live.com</Domain>
  <DisplayName>Microsoft Account</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="MSA-MicrosoftAccount-OpenIdConnect">
      <DisplayName>Microsoft Account</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <Metadata>
        <Item Key="ProviderName">https://login.live.com</Item>
        <Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
        <Item Key="response_types">code</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="scope">openid profile email</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="client_id">Your Microsoft application client ID</Item>
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_MSASecret" />
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid" />
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
        <OutputClaim ClaimTypeReferenceId="email" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
Add a newClaimsProvideras follows:
<ClaimsProvider>
  <Domain>live.com</Domain>
  <DisplayName>Microsoft Account</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="MSA-MicrosoftAccount-OpenIdConnect">
      <DisplayName>Microsoft Account</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <Metadata>
        <Item Key="ProviderName">https://login.live.com</Item>
        <Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
        <Item Key="response_types">code</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="scope">openid profile email</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="client_id">Your Microsoft application client ID</Item>
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_MSASecret" />
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid" />
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
        <OutputClaim ClaimTypeReferenceId="email" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
<ClaimsProvider>
  <Domain>live.com</Domain>
  <DisplayName>Microsoft Account</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="MSA-MicrosoftAccount-OpenIdConnect">
      <DisplayName>Microsoft Account</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <Metadata>
        <Item Key="ProviderName">https://login.live.com</Item>
        <Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
        <Item Key="response_types">code</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="scope">openid profile email</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="client_id">Your Microsoft application client ID</Item>
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_MSASecret" />
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid" />
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
        <OutputClaim ClaimTypeReferenceId="email" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
Replace the value ofclient_idwith the Microsoft Entra application'sApplication (client) IDthat you recorded earlier.
Replace the value ofclient_idwith the Microsoft Entra application'sApplication (client) IDthat you recorded earlier.
Save the file.
Save the file.
You've now configured your policy so that Azure AD B2C knows how to communicate with your Microsoft account application in Microsoft Entra ID.
Add a user journey
At this point, the identity provider has been set up, but it's not yet available in any of the sign-in pages. If you don't have your own custom user journey, create a duplicate of an existing template user journey, otherwise continue to the next step.
Open theTrustFrameworkBase.xmlfile from the starter pack.
Find and copy the entire contents of theUserJourneyelement that includesId="SignUpOrSignIn".
Id="SignUpOrSignIn"
Open theTrustFrameworkExtensions.xmland find theUserJourneyselement. If the element doesn't exist, add one.
Paste the entire content of theUserJourneyelement that you copied as a child of theUserJourneyselement.
Rename the Id of the user journey. For example,Id="CustomSignUpSignIn".
Id="CustomSignUpSignIn"
Add the identity provider to a user journey
Now that you have a user journey, add the new identity provider to the user journey. You first add a sign-in button, then link the button to an action. The action is the technical profile you created earlier.
Find the orchestration step element that includesType="CombinedSignInAndSignUp", orType="ClaimsProviderSelection"in the user journey. It's usually the first orchestration step. TheClaimsProviderSelectionselement contains a list of identity providers that a user can sign in with. The order of the elements controls the order of the sign-in buttons presented to the user. Add aClaimsProviderSelectionXML element. Set the value ofTargetClaimsExchangeIdto a friendly name.
Find the orchestration step element that includesType="CombinedSignInAndSignUp", orType="ClaimsProviderSelection"in the user journey. It's usually the first orchestration step. TheClaimsProviderSelectionselement contains a list of identity providers that a user can sign in with. The order of the elements controls the order of the sign-in buttons presented to the user. Add aClaimsProviderSelectionXML element. Set the value ofTargetClaimsExchangeIdto a friendly name.
Type="CombinedSignInAndSignUp"
Type="ClaimsProviderSelection"
In the next orchestration step, add aClaimsExchangeelement. Set theIdto the value of the target claims exchange Id. Update the value ofTechnicalProfileReferenceIdto the Id of the technical profile you created earlier.
In the next orchestration step, add aClaimsExchangeelement. Set theIdto the value of the target claims exchange Id. Update the value ofTechnicalProfileReferenceIdto the Id of the technical profile you created earlier.
The following XML demonstrates the first two orchestration steps of a user journey with the identity provider:
<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
  <ClaimsProviderSelections>
    ...
    <ClaimsProviderSelection TargetClaimsExchangeId="MicrosoftAccountExchange" />
  </ClaimsProviderSelections>
  ...
</OrchestrationStep>

<OrchestrationStep Order="2" Type="ClaimsExchange">
  ...
  <ClaimsExchanges>
    <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-MicrosoftAccount-OpenIdConnect" />
  </ClaimsExchanges>
</OrchestrationStep>
<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
  <ClaimsProviderSelections>
    ...
    <ClaimsProviderSelection TargetClaimsExchangeId="MicrosoftAccountExchange" />
  </ClaimsProviderSelections>
  ...
</OrchestrationStep>

<OrchestrationStep Order="2" Type="ClaimsExchange">
  ...
  <ClaimsExchanges>
    <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-MicrosoftAccount-OpenIdConnect" />
  </ClaimsExchanges>
</OrchestrationStep>
Configure the relying party policy
The relying party policy, for exampleSignUpSignIn.xml, specifies the user journey which Azure AD B2C will execute. Find theDefaultUserJourneyelement withinrelying party. Update theReferenceIdto match the user journey ID, in which you added the identity provider.
In the following example, for theCustomSignUpSignInuser journey, theReferenceIdis set toCustomSignUpSignIn:
CustomSignUpSignIn
CustomSignUpSignIn
<RelyingParty>
  <DefaultUserJourney ReferenceId="CustomSignUpSignIn" />
  ...
</RelyingParty>
<RelyingParty>
  <DefaultUserJourney ReferenceId="CustomSignUpSignIn" />
  ...
</RelyingParty>
Upload the custom policy
Sign in to theAzure portal.
Select theDirectory + Subscriptionicon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.
In the Azure portal, search for and selectAzure AD B2C.
UnderPolicies, selectIdentity Experience Framework.
SelectUpload Custom Policy, and then upload the two policy files that you changed, in the following order: the extension policy, for exampleTrustFrameworkExtensions.xml, then the relying party policy, such asSignUpSignIn.xml.
TrustFrameworkExtensions.xml
SignUpSignIn.xml
Test your custom policy
Select your relying party policy, for exampleB2C_1A_signup_signin.
B2C_1A_signup_signin
ForApplication, select a web application that youpreviously registered. TheReply URLshould showhttps://jwt.ms.
https://jwt.ms
Select theRun nowbutton.
From the sign-up or sign-in page, selectMicrosoftto sign in with Microsoft account.
If the sign-in process is successful, your browser is redirected tohttps://jwt.ms, which displays the contents of the token returned by Azure AD B2C.
https://jwt.ms
Feedback
Was this page helpful?
Additional resources