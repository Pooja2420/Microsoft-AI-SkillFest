Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Managed identities in Microsoft Entra for Azure SQL
Article
2025-04-08
12 contributors
In this article
Applies to:Azure SQL DatabaseAzure SQL Managed Instance
Microsoft Entra ID (formerly Azure Active Directory) supports two types of managed identities: system-assigned managed identity (SMI) and user-assigned managed identity (UMI). For more information, seeManaged identity types.
An SMI is automatically assigned to Azure SQL Managed Instance when it's created. When you're using Microsoft Entra authentication with Azure SQL Database, you must assign an SMI when Azure service principals are used to create Microsoft Entra users in SQL Database.
Previously, only an SMI could be assigned to the Azure SQL Managed Instance or SQL Database server identity. Now, a UMI can be assigned to SQL Managed Instance or SQL Database as the instance or server identity.
In addition to using a UMI and an SMI as the instance or server identity, you can use them to access the database by using the SQL connection string optionAuthentication=Active Directory Managed Identity. You need to create a SQL user from the managed identity in the target database by using theCREATE USERstatement. For more information, seeUsing Microsoft Entra authentication with SqlClient.
Authentication=Active Directory Managed Identity
To retrieve the current UMIs or SMI for Azure SQL Managed instance or Azure SQL Database, seeGet or set a managed identity for a logical server or managed instancelater in this article.
Benefits of using user-assigned managed identities
There are several benefits of using a UMI as a server identity:
Users have the flexibility to create and maintain their own UMIs for a tenant. You can use UMIs as server identities for Azure SQL. A UMI is managed by the user, whereas an SMI is uniquely defined per server and assigned by the system.
Users have the flexibility to create and maintain their own UMIs for a tenant. You can use UMIs as server identities for Azure SQL. A UMI is managed by the user, whereas an SMI is uniquely defined per server and assigned by the system.
In the past, you needed the Microsoft Entra IDDirectory Readersrole when using an SMI as the server or instance identity. With the introduction of accessing Microsoft Entra ID throughMicrosoft Graph, users who are concerned with giving high-level permissions such as the Directory Readers role to the SMI or UMI can alternatively give lower-level permissions so that the server or instance identity can access Microsoft Graph.For more information on providing Directory Readers permissions and its function, seeDirectory Readers role in Microsoft Entra ID for Azure SQL.
In the past, you needed the Microsoft Entra IDDirectory Readersrole when using an SMI as the server or instance identity. With the introduction of accessing Microsoft Entra ID throughMicrosoft Graph, users who are concerned with giving high-level permissions such as the Directory Readers role to the SMI or UMI can alternatively give lower-level permissions so that the server or instance identity can access Microsoft Graph.
For more information on providing Directory Readers permissions and its function, seeDirectory Readers role in Microsoft Entra ID for Azure SQL.
Users can choose a specific UMI to be the server or instance identity for all databases or managed instances in the tenant. Or they can have multiple UMIs assigned to different servers or instances.UMIs can be used in different servers to represent different features. For example, a UMI can serve transparent data encryption (TDE) in one server, and a UMI can serve Microsoft Entra authentication in another server.
Users can choose a specific UMI to be the server or instance identity for all databases or managed instances in the tenant. Or they can have multiple UMIs assigned to different servers or instances.
UMIs can be used in different servers to represent different features. For example, a UMI can serve transparent data encryption (TDE) in one server, and a UMI can serve Microsoft Entra authentication in another server.
You need a UMI to create alogical server in Azureconfigured with TDE with customer-managed keys (CMKs). For more information, seeCustomer-managed transparent data encryption using user-assigned managed identity.
You need a UMI to create alogical server in Azureconfigured with TDE with customer-managed keys (CMKs). For more information, seeCustomer-managed transparent data encryption using user-assigned managed identity.
UMIs are independent from logical servers or managed instances. When a logical server or instance is deleted, the SMI is also deleted. UMIs aren't deleted with the server.
UMIs are independent from logical servers or managed instances. When a logical server or instance is deleted, the SMI is also deleted. UMIs aren't deleted with the server.
Note
You must enable the instance identity (SMI or UMI) to allow support for Microsoft Entra authentication in SQL Managed Instance. For SQL Database, enabling the server identity is optional and required only if a Microsoft Entra service principal (Microsoft Entra application) oversees creating and managing Microsoft Entra users, groups, or applications in the server. For more information, seeMicrosoft Entra service principal with Azure SQL.
Create a user-assigned managed identity
For information on how to create a UMI, seeManage user-assigned managed identities.
Permissions
After the UMI is created, some permissions are needed to allow the UMI to read fromMicrosoft Graphas the server identity. Grant the following permissions, or give the UMI theDirectory Readersrole.
These permissions should be granted before you provision a logical server or managed instance. After you grant the permissions to the UMI, they're enabled for all servers or instances that are created with the UMI assigned as a server identity.
Important
Only aPrivileged Role Administratoror higher role can grant these permissions.
User.Read.All: Allows access to Microsoft Entra user information.
GroupMember.Read.All: Allows access to Microsoft Entra group information.
Application.Read.ALL: Allows access to Microsoft Entra service principal (application) information.
Permissions for SMI
The same Microsoft Graph applications permissions are needed with the SMI.
Applies only toAzure SQL Database: Using an SMI gives an opportunity to not explicitly provision the Microsoft Graph permissions. The Microsoft Entra users can still be created without the needed Microsoft Graph permission by using theCREATE USERT-SQL syntax. This would require theSIDandTYPEsyntax, as described in the article,CREATE USER (Transact-SQL).
CREATE USER
SID
TYPE
CREATE USER   
    {  
    Microsoft_Entra_principal FROM EXTERNAL PROVIDER [ WITH <limited_options_list> [ ,... ] ]    
    | Microsoft_Entra_principal WITH <options_list> [ ,... ] 
    }  
 [ ; ]  
  
<limited_options_list> ::=  
      DEFAULT_SCHEMA = schema_name  
    | OBJECT_ID = 'objectid'
<options_list> ::=  
      DEFAULT_SCHEMA = schema_name  
    | SID = sid  
    | TYPE = { X | E }
CREATE USER   
    {  
    Microsoft_Entra_principal FROM EXTERNAL PROVIDER [ WITH <limited_options_list> [ ,... ] ]    
    | Microsoft_Entra_principal WITH <options_list> [ ,... ] 
    }  
 [ ; ]  
  
<limited_options_list> ::=  
      DEFAULT_SCHEMA = schema_name  
    | OBJECT_ID = 'objectid'
<options_list> ::=  
      DEFAULT_SCHEMA = schema_name  
    | SID = sid  
    | TYPE = { X | E }
The above syntax allows creation of Microsoft Entra userswithout validation.For this to work, theObject Idof the Microsoft Entra principal would have to be supplied and used as anSIDin the T-SQL statement, as explained inCreate a contained database user from a Microsoft Entra principal without validation.
Object Id
SID
The validity check of theObject Idis the responsibility of the user running the T-SQL statement.
Grant permissions
The following sample PowerShell script grants the necessary permissions for a managed identity. This sample assigns permissions to the user-assigned managed identityumiservertest.
umiservertest
To run the script, you must sign in as a user with a Privileged Role Administrator or higher role.
The script grants theUser.Read.All,GroupMember.Read.All, andApplication.Read.ALLpermissions to a managed identity to accessMicrosoft Graph.
User.Read.All
GroupMember.Read.All
Application.Read.ALL
# Script to assign permissions to an existing UMI 
# The following required Microsoft Graph permissions will be assigned: 
#   User.Read.All
#   GroupMember.Read.All
#   Application.Read.All

Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Applications

$tenantId = "<tenantId>"        # Your tenant ID
$MSIName = "<managedIdentity>"; # Name of your managed identity

# Log in as a user with the "Privileged Role Administrator" role
Connect-MgGraph -TenantId $tenantId -Scopes "AppRoleAssignment.ReadWrite.All,Application.Read.All"

# Search for Microsoft Graph
$MSGraphSP = Get-MgServicePrincipal -Filter "DisplayName eq 'Microsoft Graph'";
$MSGraphSP

# Sample Output

# DisplayName     Id                                   AppId                                SignInAudience      ServicePrincipalType
# -----------     --                                   -----                                --------------      --------------------
# Microsoft Graph 47d73278-e43c-4cc2-a606-c500b66883ef 00000003-0000-0000-c000-000000000000 AzureADMultipleOrgs Application

$MSI = Get-MgServicePrincipal -Filter "DisplayName eq '$MSIName'" 
if($MSI.Count -gt 1)
{ 
Write-Output "More than 1 principal found with that name, please find your principal and copy its object ID. Replace the above line with the syntax $MSI = Get-MgServicePrincipal -ServicePrincipalId <your_object_id>"
Exit
}

# Get required permissions
$Permissions = @(
  "User.Read.All"
  "GroupMember.Read.All"
  "Application.Read.All"
)

# Find app permissions within Microsoft Graph application
$MSGraphAppRoles = $MSGraphSP.AppRoles | Where-Object {($_.Value -in $Permissions)}

# Assign the managed identity app roles for each permission
foreach($AppRole in $MSGraphAppRoles)
{
    $AppRoleAssignment = @{
	    principalId = $MSI.Id
	    resourceId = $MSGraphSP.Id
	    appRoleId = $AppRole.Id
    }

    New-MgServicePrincipalAppRoleAssignment `
    -ServicePrincipalId $AppRoleAssignment.PrincipalId `
    -BodyParameter $AppRoleAssignment -Verbose
}
# Script to assign permissions to an existing UMI 
# The following required Microsoft Graph permissions will be assigned: 
#   User.Read.All
#   GroupMember.Read.All
#   Application.Read.All

Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Applications

$tenantId = "<tenantId>"        # Your tenant ID
$MSIName = "<managedIdentity>"; # Name of your managed identity

# Log in as a user with the "Privileged Role Administrator" role
Connect-MgGraph -TenantId $tenantId -Scopes "AppRoleAssignment.ReadWrite.All,Application.Read.All"

# Search for Microsoft Graph
$MSGraphSP = Get-MgServicePrincipal -Filter "DisplayName eq 'Microsoft Graph'";
$MSGraphSP

# Sample Output

# DisplayName     Id                                   AppId                                SignInAudience      ServicePrincipalType
# -----------     --                                   -----                                --------------      --------------------
# Microsoft Graph 47d73278-e43c-4cc2-a606-c500b66883ef 00000003-0000-0000-c000-000000000000 AzureADMultipleOrgs Application

$MSI = Get-MgServicePrincipal -Filter "DisplayName eq '$MSIName'" 
if($MSI.Count -gt 1)
{ 
Write-Output "More than 1 principal found with that name, please find your principal and copy its object ID. Replace the above line with the syntax $MSI = Get-MgServicePrincipal -ServicePrincipalId <your_object_id>"
Exit
}

# Get required permissions
$Permissions = @(
  "User.Read.All"
  "GroupMember.Read.All"
  "Application.Read.All"
)

# Find app permissions within Microsoft Graph application
$MSGraphAppRoles = $MSGraphSP.AppRoles | Where-Object {($_.Value -in $Permissions)}

# Assign the managed identity app roles for each permission
foreach($AppRole in $MSGraphAppRoles)
{
    $AppRoleAssignment = @{
	    principalId = $MSI.Id
	    resourceId = $MSGraphSP.Id
	    appRoleId = $AppRole.Id
    }

    New-MgServicePrincipalAppRoleAssignment `
    -ServicePrincipalId $AppRoleAssignment.PrincipalId `
    -BodyParameter $AppRoleAssignment -Verbose
}
Check permissions for user-assigned managed identity
To check permissions for a UMI, go to theAzure portal. In theMicrosoft Entra IDresource, go toEnterprise applications. SelectAll ApplicationsforApplication type, and search for the UMI that was created.

Select the UMI, and go to thePermissionssettings underSecurity.


Get or set a managed identity for a logical server or managed instance
To create a server by using a UMI, see the following guide:Create an Azure SQL logical server by using a user-assigned managed identity.
Get the SMI for Azure SQL Database logical server
The Azure portal displays the system-assigned managed identity (SMI) ID in thePropertiesmenu of the Azure SQL Database logical server.

To retrieve the UMIs for Azure SQL Managed Instance or Azure SQL Database, use the following PowerShell or Azure CLI examples.
To retrieve the SMI for Azure SQL Managed Instance, use the following PowerShell or Azure CLI examples.
Set a managed identity in the Azure portal
To set the user-managed identity for the Azure SQL Database logical server or Azure SQL Managed Instance in theAzure portal:
Go to yourSQL serverorSQL managed instanceresource.
UnderSecurity, select theIdentitysetting.
UnderUser assigned managed identity, selectAdd.
Select a subscription, and then forPrimary identity, select a managed identity for the subscription. Then choose theSelectbutton.

Create or set a managed identity by using the Azure CLI
The Azure CLI 2.26.0 (or later) is required to run these commands with a UMI.
To provision a new server with a user-assigned managed identity, use theaz sql server createcommand.
To provision a new server with a user-assigned managed identity, use theaz sql server createcommand.
To obtain the managed identities for a logical server, use theaz sql server showcommand.For example, to retrieve the user-assigned managed identities of a logical server, look for theprincipalIdof each:az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.userAssignedIdentitiesTo retrieve the system-assigned managed identity of an Azure SQL Database logical server:az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.principalId
To obtain the managed identities for a logical server, use theaz sql server showcommand.
For example, to retrieve the user-assigned managed identities of a logical server, look for theprincipalIdof each:az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.userAssignedIdentities
For example, to retrieve the user-assigned managed identities of a logical server, look for theprincipalIdof each:
principalId
az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.userAssignedIdentities
az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.userAssignedIdentities
To retrieve the system-assigned managed identity of an Azure SQL Database logical server:az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.principalId
To retrieve the system-assigned managed identity of an Azure SQL Database logical server:
az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.principalId
az sql server show --resource-group "resourcegroupnamehere" --name "sql-logical-server-name-here" --query identity.principalId
To update the UMI's server setting, use theaz sql server updatecommand.
To update the UMI's server setting, use theaz sql server updatecommand.
To provision a new managed instance with a UMI, use theaz sql mi createcommand.
To provision a new managed instance with a UMI, use theaz sql mi createcommand.
To obtain the system-assigned and user-assigned managed identities for managed instances, use theaz sql mi showcommand.For example, to retrieve the UMI(s) for a managed instance, look for theprincipalIdof each:az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.userAssignedIdentitiesTo retrieve the SMI of a managed instance:az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.principalId
To obtain the system-assigned and user-assigned managed identities for managed instances, use theaz sql mi showcommand.
For example, to retrieve the UMI(s) for a managed instance, look for theprincipalIdof each:az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.userAssignedIdentities
For example, to retrieve the UMI(s) for a managed instance, look for theprincipalIdof each:
principalId
az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.userAssignedIdentities
az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.userAssignedIdentities
To retrieve the SMI of a managed instance:az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.principalId
To retrieve the SMI of a managed instance:
az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.principalId
az sql mi show --resource-group "resourcegroupnamehere" --name "sql-mi-name-here" --query identity.principalId
To update the UMI's managed instance setting, use theaz sql mi updatecommand.
To update the UMI's managed instance setting, use theaz sql mi updatecommand.
Create or set a managed identity by using PowerShell
Az.Sql module 3.4or later is required for using PowerShell with a UMI. Thelatest version of PowerShellis recommended, or use theAzure Cloud Shell in the Azure portal.
To provision a new server with a UMI, use theNew-AzSqlServercommand.
To provision a new server with a UMI, use theNew-AzSqlServercommand.
To obtain the managed identities for a logical server, use theGet-AzSqlServercommand.For example, to retrieve the UMIs of a logical server, look for theprincipalIdof each:$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-JsonTo retrieve the SMI of an Azure SQL Database logical server:$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.principalId
To obtain the managed identities for a logical server, use theGet-AzSqlServercommand.
For example, to retrieve the UMIs of a logical server, look for theprincipalIdof each:$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
For example, to retrieve the UMIs of a logical server, look for theprincipalIdof each:
principalId
$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
To retrieve the SMI of an Azure SQL Database logical server:$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.principalId
To retrieve the SMI of an Azure SQL Database logical server:
$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.principalId
$MI = Get-AzSqlServer -ResourceGroupName "resourcegroupnamehere" -Name "sql-logical-server-name-here"
$MI.Identity.principalId
To update the UMI's server setting, use theSet-AzSqlServercommand.
To update the UMI's server setting, use theSet-AzSqlServercommand.
To provision a new managed instance with a UMI, use theNew-AzSqlInstancecommand.
To provision a new managed instance with a UMI, use theNew-AzSqlInstancecommand.
To obtain the managed identities for a managed instance, use theGet-AzSqlInstancecommand.For example, to retrieve the UMIs of a managed instance, look for theprincipalIdof each:$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-JsonTo retrieve the SMI of a managed instance:$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.principalId
To obtain the managed identities for a managed instance, use theGet-AzSqlInstancecommand.
For example, to retrieve the UMIs of a managed instance, look for theprincipalIdof each:$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
For example, to retrieve the UMIs of a managed instance, look for theprincipalIdof each:
principalId
$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.UserAssignedIdentities | ConvertTo-Json
To retrieve the SMI of a managed instance:$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.principalId
To retrieve the SMI of a managed instance:
$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.principalId
$MI = Get-AzSqlInstance -ResourceGroupName "resourcegroupnamehere" -Name "sql-mi-name-here"
$MI.Identity.principalId
To update the UMI's managed instance setting, use theSet-AzSqlInstancecommand.
To update the UMI's managed instance setting, use theSet-AzSqlInstancecommand.
Create or set a managed identity by using the REST API
To update the UMI settings for the server, you can also use the REST API provisioning script used inCreate a logical server by using a user-assigned managed identityorCreate a managed instance by using a user-assigned managed identity. Rerun the provisioning command in the guide with the updated user-assigned managed identity property that you want to update.
Create or set a managed identity by using an ARM template
To update the UMI settings for the server, you can also use the Azure Resource Manager template (ARM template) used inCreate a logical server by using a user-assigned managed identityorCreate a managed instance by using a user-assigned managed identity. Rerun the provisioning command in the guide with the updated user-assigned managed identity property that you want to update.
Note
You can't change the server administrator or password, or change the Microsoft Entra admin, by rerunning the provisioning command for the ARM template.
Limitations and known issues
After you create a managed instance, theMicrosoft Entra adminpage for your managed instance in the Azure portal shows a warning:Managed Instance needs permissions to access Microsoft Entra ID. Click here to grant "Read" permissions to your Managed Instance.If you gave the UMI the appropriate permissionsdiscussed earlier in this article, you can ignore this warning.
Managed Instance needs permissions to access Microsoft Entra ID. Click here to grant "Read" permissions to your Managed Instance.
If you use an SMI or a UMI as the server or instance identity, deleting the identity will make the server or instance unable to access Microsoft Graph. Microsoft Entra authentication and other functions will fail. To restore Microsoft Entra functionality, assign a new SMI or UMI to the server with appropriate permissions.
To grant permissions to access Microsoft Graph through an SMI or a UMI, you need to use PowerShell. You can't grant these permissions by using the Azure portal.
Related content
Create an Azure SQL logical server by using a user-assigned managed identity
Create a managed instance by using a user-assigned managed identity
Feedback
Was this page helpful?
Additional resources