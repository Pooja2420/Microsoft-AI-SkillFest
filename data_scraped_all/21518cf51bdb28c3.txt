Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy and configure a Java SE, Tomcat, or JBoss EAP app in Azure App Service
Article
2025-03-27
8 contributors
In this article
This article shows you the most common deployment and runtime configuration for Java apps in Azure App Service. If it's your first time using Azure App Service, you should first read through theJava quickstart. You can find the answers to general questions about using App Service that aren't specific to Java development in theApp Service FAQ.
Azure App Service runs Java web applications on a fully managed service in three variants:
Java Standard Edition (SE): Can run an app deployed as a Java Archive (JAR) package that contains an embedded server (such as Spring Boot, Quarkus, Dropwizard, or an app with an embedded Tomcat or Jetty server).
Tomcat: The built-in Tomcat server can run an app deployed as a web application archive (WAR) package.
JBoss Enterprise Application Platform (EAP): The built-in JBoss EAP server can run an app deployed as a WAR or enterprise archive (EAR) package. Supported for Linux apps in a set of pricing tiers which includes Free, Premium v3, and Isolated v2.gti
Show the Java version
Linux
Windows
To show the current Java version, run the following command inAzure Cloud Shell:
az webapp config show --resource-group <resource-group-name> --name <app-name> --query linuxFxVersion
az webapp config show --resource-group <resource-group-name> --name <app-name> --query linuxFxVersion
To show all supported Java versions, run the following command inCloud Shell:
az webapp list-runtimes --os linux | grep "JAVA\|TOMCAT\|JBOSSEAP"
az webapp list-runtimes --os linux | grep "JAVA\|TOMCAT\|JBOSSEAP"
Get the Java version in the Linux container
For more detailed version information in the Linux container,open an SSH session with the container. Here are a few examples of what you can run.
To view the Java version in the SSH session:
java -version
java -version
To view the Tomcat server version in the SSH session:
sh /usr/local/tomcat/version.sh
sh /usr/local/tomcat/version.sh
Or, if your Tomcat server is in a custom location, findversion.shwith:
version.sh
find / -name "version.sh"
find / -name "version.sh"
To view the JBoss EAP server version in the SSH session:
$JBOSS_HOME/bin/jboss-cli.sh --connect --commands=:product-info
$JBOSS_HOME/bin/jboss-cli.sh --connect --commands=:product-info
To show the current Java version, run the following command inAzure Cloud Shell:
az webapp config show --name <app-name> --resource-group <resource-group-name> --query "[javaVersion, javaContainer, javaContainerVersion]"
az webapp config show --name <app-name> --resource-group <resource-group-name> --query "[javaVersion, javaContainer, javaContainerVersion]"
To show all supported Java versions, run the following command inCloud Shell:
az webapp list-runtimes --os windows | grep java
az webapp list-runtimes --os windows | grep java
For more information on version support, seeApp Service language runtime support policy.
What happens to outdated runtimes in App Service?
Outdated runtimes are deprecated by the maintaining organization or found to have significant vulnerabilities. Accordingly, they're removed from the create and configure pages in the portal. When an outdated runtime is hidden from the portal, any app that's still using that runtime continues to run.
If you want to create an app with an outdated runtime version that's no longer shown on the portal, use the Azure CLI, ARM template, or Bicep. These deployment alternatives let you create deprecated runtimes that have been removed in the portal, but are still being supported.
If a runtime is fully removed from the App Service platform, your Azure subscription owner receives an email notice before the removal.
Deploying your app
Build tools
By using theMaven Plugin for Azure Web Apps, you can easily prepare your project with one command in your project root:
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.13.0:config
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.13.0:config
This command adds anazure-webapp-maven-pluginplugin and the related configuration by prompting you to select an existing Azure Web App or to create a new one. During configuration, it attempts to detect whether your application should be deployed to Java SE, Tomcat, or (Linux only) JBoss EAP. Then you can deploy your Java app to Azure by using the following command:
azure-webapp-maven-plugin
mvn package azure-webapp:deploy
mvn package azure-webapp:deploy
Here's a sample configuration inpom.xml:
pom.xml
<plugin> 
  <groupId>com.microsoft.azure</groupId>  
  <artifactId>azure-webapp-maven-plugin</artifactId>  
  <version>2.11.0</version>  
  <configuration>
    <subscriptionId>111111-11111-11111-1111111</subscriptionId>
    <resourceGroup>spring-boot-xxxxxxxxxx-rg</resourceGroup>
    <appName>spring-boot-xxxxxxxxxx</appName>
    <pricingTier>B2</pricingTier>
    <region>westus</region>
    <runtime>
      <os>Linux</os>      
      <webContainer>Java SE</webContainer>
      <javaVersion>Java 17</javaVersion>
    </runtime>
    <deployment>
      <resources>
        <resource>
          <type>jar</type>
          <directory>${project.basedir}/target</directory>
          <includes>
            <include>*.jar</include>
          </includes>
        </resource>
      </resources>
    </deployment>
  </configuration>
</plugin>
<plugin> 
  <groupId>com.microsoft.azure</groupId>  
  <artifactId>azure-webapp-maven-plugin</artifactId>  
  <version>2.11.0</version>  
  <configuration>
    <subscriptionId>111111-11111-11111-1111111</subscriptionId>
    <resourceGroup>spring-boot-xxxxxxxxxx-rg</resourceGroup>
    <appName>spring-boot-xxxxxxxxxx</appName>
    <pricingTier>B2</pricingTier>
    <region>westus</region>
    <runtime>
      <os>Linux</os>      
      <webContainer>Java SE</webContainer>
      <javaVersion>Java 17</javaVersion>
    </runtime>
    <deployment>
      <resources>
        <resource>
          <type>jar</type>
          <directory>${project.basedir}/target</directory>
          <includes>
            <include>*.jar</include>
          </includes>
        </resource>
      </resources>
    </deployment>
  </configuration>
</plugin>
Set up theGradle Plugin for Azure Web Appsby adding the plugin tobuild.gradle:plugins {
  id "com.microsoft.azure.azurewebapp" version "1.10.0"
}
Set up theGradle Plugin for Azure Web Appsby adding the plugin tobuild.gradle:
build.gradle
plugins {
  id "com.microsoft.azure.azurewebapp" version "1.10.0"
}
plugins {
  id "com.microsoft.azure.azurewebapp" version "1.10.0"
}
Configure your web app details. The corresponding Azure resources are created if they don't exist.
Here's a sample configuration. For details, refer tothis document.azurewebapp {
    subscription = '<your subscription id>'
    resourceGroup = '<your resource group>'
    appName = '<your app name>'
    pricingTier = '<price tier like 'P1v2'>'
    region = '<region like 'westus'>'
    runtime {
      os = 'Linux'
      webContainer = 'Tomcat 10.0' // or 'Java SE' if you want to run an executable jar
      javaVersion = 'Java 17'
    }
    appSettings {
        <key> = <value>
    }
    auth {
        type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
    }
}
Configure your web app details. The corresponding Azure resources are created if they don't exist.
Here's a sample configuration. For details, refer tothis document.
azurewebapp {
    subscription = '<your subscription id>'
    resourceGroup = '<your resource group>'
    appName = '<your app name>'
    pricingTier = '<price tier like 'P1v2'>'
    region = '<region like 'westus'>'
    runtime {
      os = 'Linux'
      webContainer = 'Tomcat 10.0' // or 'Java SE' if you want to run an executable jar
      javaVersion = 'Java 17'
    }
    appSettings {
        <key> = <value>
    }
    auth {
        type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
    }
}
azurewebapp {
    subscription = '<your subscription id>'
    resourceGroup = '<your resource group>'
    appName = '<your app name>'
    pricingTier = '<price tier like 'P1v2'>'
    region = '<region like 'westus'>'
    runtime {
      os = 'Linux'
      webContainer = 'Tomcat 10.0' // or 'Java SE' if you want to run an executable jar
      javaVersion = 'Java 17'
    }
    appSettings {
        <key> = <value>
    }
    auth {
        type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
    }
}
Deploy with one command.gradle azureWebAppDeploy
Deploy with one command.
gradle azureWebAppDeploy
gradle azureWebAppDeploy
IDEs
Azure provides seamless Java App Service development experience in popular Java Integrated Development Environments (IDEs), including:
VS Code:Java Web Apps with Visual Studio Code.
IntelliJ IDEA:Create a Hello World web app for Azure App Service by using IntelliJ.
Eclipse IDE:Create a Hello World web app for Azure App Service by using Eclipse.
Kudu API
To deploy Java Archive (JAR) files to Java SE, use the/api/publishendpoint of the Kudu site. For more information on this API, seethis documentation.
/api/publish
Note
Your JAR application must be namedapp.jarfor App Service to identify and run your application. TheMaven pluginautomatically names the application for you during deployment. If you don't wish to rename your JAR toapp.jar, you can upload a shell script with the command to run your JAR app. Paste the absolute path to this script in theStartup Filetext box in theConfigurationsection of the portal. The startup script doesn't run from the directory it's in. Therefore, always use absolute paths to reference files in your startup script (for example:java -jar /home/myapp/myapp.jar).
app.jar
app.jar
java -jar /home/myapp/myapp.jar
To deploy WAR files to Tomcat, use the/api/wardeploy/endpoint toPOSTyour archive file. For more information on this API, seethis documentation.
/api/wardeploy/
POST
To deploy WAR files to JBoss EAP, use the/api/wardeploy/endpoint toPOSTyour archive file. For more information on this API, seethis documentation.
/api/wardeploy/
POST
To deploy EAR files,use FTP. Your EAR application is deployed to the context root defined in your application's configuration. For example, if the context root of your app is<context-root>myapp</context-root>, then you can browse the site at the/myapppath:http://my-app-name.azurewebsites.net/myapp. If you want your web app to be served in the root path, ensure that your app sets the context root to the root path:<context-root>/</context-root>. For more information, seeSetting the context root of a web application.
<context-root>myapp</context-root>
/myapp
http://my-app-name.azurewebsites.net/myapp
<context-root>/</context-root>
Don't deploy your WAR or JAR by using FTP. The FTP tool is designed to upload startup scripts, dependencies, or other runtime files. It's not the optimal choice for deploying web apps.
Rewrite or redirect a URL
To rewrite or redirect a URL, use one of the available URL rewriters, such asUrlRewriteFilter.
Tomcat also provides arewrite valve.
JBoss EAP also provides arewrite valve.
Logging and debugging apps
Performance reports, traffic visualizations, and health checkups are available for each app through the Azure portal. For more information, seeAzure App Service diagnostics overview.
Stream diagnostic logs
Linux
Windows
You can access the console logs generated from inside the container.
To turn on container logging, run the following command:
az webapp log config --name <app-name> --resource-group <resource-group-name> --docker-container-logging filesystem
az webapp log config --name <app-name> --resource-group <resource-group-name> --docker-container-logging filesystem
Replace<app-name>and<resource-group-name>with names that are appropriate for your web app.
<app-name>
<resource-group-name>
After you turn on container logging, run the following command to see the log stream:
az webapp log tail --name <app-name> --resource-group <resource-group-name>
az webapp log tail --name <app-name> --resource-group <resource-group-name>
If console logs don't appear immediately, check again in 30 seconds.
To stop log streaming at any time, selectCtrl+C.
You can also inspect the log files in a browser athttps://<app-name>.scm.azurewebsites.net/api/logs/docker. For recently created apps, usehttps://<app-name>-<random-hash>.scm.<region>.azurewebsites.net/.
https://<app-name>.scm.azurewebsites.net/api/logs/docker
https://<app-name>-<random-hash>.scm.<region>.azurewebsites.net/
To access the console logs generated from inside your application code in App Service, turn on diagnostic logging by running the following command inCloud Shell:
az webapp log config --resource-group <resource-group-name> --name <app-name> --docker-container-logging filesystem --level Verbose
az webapp log config --resource-group <resource-group-name> --name <app-name> --docker-container-logging filesystem --level Verbose
Possible values for--levelareError,Warning,Info, andVerbose. Each subsequent level includes the previous level. For example,Errorincludes only error messages.Verboseincludes all messages.
--level
Error
Warning
Info
Verbose
Error
Verbose
After you turn on diagnostic logging, run the following command to see the log stream:
az webapp log tail --resource-group <resource-group-name> --name <app-name>
az webapp log tail --resource-group <resource-group-name> --name <app-name>
If console logs don't appear immediately, check again in 30 seconds.
Note
You can also inspect the log files from the browser athttps://<app-name>.scm.azurewebsites.net/api/logs/docker. For recently created apps, usehttps://<app-name>-<random-hash>.scm.<region>.azurewebsites.net/.
https://<app-name>.scm.azurewebsites.net/api/logs/docker
https://<app-name>-<random-hash>.scm.<region>.azurewebsites.net/
To stop log streaming at any time, selectCtrl+C.
For more information, seeStream logs in Cloud Shell.
SSH console access in Linux
To open a direct SSH session with your container, your app should be running.
Paste the following URL into your browser and replace<app-name>with your app name:
https://<app-name>.scm.azurewebsites.net/webssh/host
https://<app-name>.scm.azurewebsites.net/webssh/host
If you're not yet authenticated, you're required to authenticate with your Azure subscription to connect. Once authenticated, you see an in-browser shell, where you can run commands inside your container.

Note
Any changes that you make outside the/homedirectory are stored in the container itself and don't persist beyond an app restart.
/home
To open a remote SSH session from your local machine, seeOpen SSH session from remote shell.
Linux troubleshooting tools
The built-in Java images are based on theAlpine Linuxoperating system. Use theapkpackage manager to install any troubleshooting tools or commands.
apk
Java profiler
All Java runtimes on Azure App Service come with the Java Development Kit (JDK) Flight Recorder for profiling Java workloads. You can use it to record Java Virtual Machine (JVM), system, and application events, and to troubleshoot problems in your applications.
To learn more about the Java profiler, visit theAzure Application Insights documentation.
Java Flight Recorder
All Java runtimes on App Service come with the Java Flight Recorder. You can use it to record JVM, system, and application events and to troubleshoot problems in your Java applications.
Linux
Windows
SSH into App Service and run thejcmdcommand to see a list of all the Java processes running. In addition tojcmditself, you should see your Java application running with a process ID (PID) number.
jcmd
jcmd
078990bbcd11:/home# jcmd
Picked up JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true
147 sun.tools.jcmd.JCmd
116 /home/site/wwwroot/app.jar
078990bbcd11:/home# jcmd
Picked up JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true
147 sun.tools.jcmd.JCmd
116 /home/site/wwwroot/app.jar
Execute the following command to start a 30-second recording of the JVM. It profiles the JVM and creates a Java Flight Recorder (JFR) file namedjfr_example.jfrin the home directory. Replace116with the PID of your Java app.
jfr_example.jfr
116
jcmd 116 JFR.start name=MyRecording settings=profile duration=30s filename="/home/jfr_example.jfr"
jcmd 116 JFR.start name=MyRecording settings=profile duration=30s filename="/home/jfr_example.jfr"
During the 30-second interval, you can validate the recording is taking place by runningjcmd 116 JFR.check. The command shows all recordings for the given Java process.
jcmd 116 JFR.check
You can use Java Flight Recorder to continuously profile your Java application with minimal impact on runtime performance. To do so, run the following Azure CLI command to create an app setting namedJAVA_OPTSwith the necessary configuration. The contents of theJAVA_OPTSapp setting are passed to thejavacommand when your app starts.
JAVA_OPTS
JAVA_OPTS
java
az webapp config appsettings set -g <your_resource_group> -n <your_app_name> --settings JAVA_OPTS=-XX:StartFlightRecording=disk=true,name=continuous_recording,dumponexit=true,maxsize=1024m,maxage=1d
az webapp config appsettings set -g <your_resource_group> -n <your_app_name> --settings JAVA_OPTS=-XX:StartFlightRecording=disk=true,name=continuous_recording,dumponexit=true,maxsize=1024m,maxage=1d
After the recording starts, you can dump the current recording data at any time by using theJFR.dumpcommand.
JFR.dump
jcmd <pid> JFR.dump name=continuous_recording filename="/home/recording1.jfr"
jcmd <pid> JFR.dump name=continuous_recording filename="/home/recording1.jfr"
To take a timed recording, you need the process ID (PID) of the Java application. To find the PID, open a browser to your web app's SCM site athttps://<your-site-name>.scm.azurewebsites.net/ProcessExplorer/. This page shows the running processes in your web app. Find the process named "java" in the table and copy the corresponding PID.
https://<your-site-name>.scm.azurewebsites.net/ProcessExplorer/
Next, open theDebug Consolein the top toolbar of the SCM site and run the following command. Replace<pid>with the PID you copied earlier. This command starts a 30-second profiler recording of your Java application and generates a file namedtimed_recording_example.jfrin theC:\homedirectory.
<pid>
timed_recording_example.jfr
C:\home
jcmd <pid> JFR.start name=TimedRecording settings=profile duration=30s filename="C:\home\timed_recording_example.JFR"
jcmd <pid> JFR.start name=TimedRecording settings=profile duration=30s filename="C:\home\timed_recording_example.JFR"
UseFTPSto download your JFR file to your local machine. To analyze the JFR file, download and installJava Mission Control (JMC). For instructions on how to use Java Mission Control, see theJMC documentationand theinstallation instructions.
App logging
Linux
Windows
To configure App Service to write your application's standard console output and standard console error streams to the local file system or Azure Blob Storage, do the following. Enableapplication loggingthrough the Azure portal or in theAzure CLI. If you need longer retention, configure the application to write output to a Blob Storage container.
Your Java and Tomcat app logs can be found in the/home/LogFiles/Application/directory.
/home/LogFiles/Application/
Azure Blob Storage logging for Linux-based apps can be configured only by usingAzure Monitor.
To configure App Service to write your application's standard console output and standard console error streams to the local file system or Azure Blob Storage, do the following. Enableapplication loggingthrough the Azure portal or in theAzure CLI. Twelve hours after you enable application logging, logging to the local App Service file system instance is disabled. If you need longer retention, configure the application to write output to a Blob Storage container.
Your Java and Tomcat app logs can be found in the/home/LogFiles/Application/directory.
/home/LogFiles/Application/
If your application usesLogbackorLog4jfor tracing, you can forward these traces for review into Azure Application Insights. Use the logging framework configuration instructions inExplore Java trace logs in Application Insights.
Note
Due to known vulnerabilityCVE-2021-44228, be sure to use Log4j version 2.16 or later.
CVE-2021-44228
Customization and tuning
Azure App Service supports out-of-the-box tuning and customization through the Azure portal and the Azure CLI. Review the following articles for non-Java-specific web app configuration:
Configure app settings
Set up a custom domain
Configure TLS/SSL bindings
Add a CDN
Configure the Kudu site
Copy app content locally
Set the app settingJAVA_COPY_ALLtotrueto copy your app contents to the local worker from the shared file system. This setting helps address file-locking issues.
JAVA_COPY_ALL
true
Set Java runtime options
To set allocated memory or other JVM runtime options, create anapp settingnamedJAVA_OPTSwith the options. App Service passes this setting as an environment variable to the Java runtime when it starts.
JAVA_OPTS
In the Azure portal, underApplication Settingsfor the web app, create a new app setting namedJAVA_OPTSthat includes other settings, such as-Xms512m -Xmx1204m.
JAVA_OPTS
-Xms512m -Xmx1204m
In the Azure portal, underApplication Settingsfor the web app, create a new app setting namedCATALINA_OPTSthat includes other settings, such as-Xms512m -Xmx1204m.
CATALINA_OPTS
-Xms512m -Xmx1204m
To configure the app setting from the Maven plugin, add setting/value tags in the Azure plugin section. The following example sets a specific minimum and maximum Java heap size:
<appSettings>
    <property>
        <name>JAVA_OPTS</name>
        <value>-Xms1024m -Xmx1024m</value>
    </property>
</appSettings>
<appSettings>
    <property>
        <name>JAVA_OPTS</name>
        <value>-Xms1024m -Xmx1024m</value>
    </property>
</appSettings>
Note
You don't need to create a web.config file when using Tomcat on Windows App Service.
Developers running a single application with one deployment slot in their App Service plan can use the following options:
B1 and S1 instances:-Xms1024m -Xmx1024m
-Xms1024m -Xmx1024m
B2 and S2 instances:-Xms3072m -Xmx3072m
-Xms3072m -Xmx3072m
B3 and S3 instances:-Xms6144m -Xmx6144m
-Xms6144m -Xmx6144m
P1v2 instances:-Xms3072m -Xmx3072m
-Xms3072m -Xmx3072m
P2v2 instances:-Xms6144m -Xmx6144m
-Xms6144m -Xmx6144m
P3v2 instances:-Xms12800m -Xmx12800m
-Xms12800m -Xmx12800m
P1v3 instances:-Xms6656m -Xmx6656m
-Xms6656m -Xmx6656m
P2v3 instances:-Xms14848m -Xmx14848m
-Xms14848m -Xmx14848m
P3v3 instances:-Xms30720m -Xmx30720m
-Xms30720m -Xmx30720m
I1 instances:-Xms3072m -Xmx3072m
-Xms3072m -Xmx3072m
I2 instances:-Xms6144m -Xmx6144m
-Xms6144m -Xmx6144m
I3 instances:-Xms12800m -Xmx12800m
-Xms12800m -Xmx12800m
I1v2 instances:-Xms6656m -Xmx6656m
-Xms6656m -Xmx6656m
I2v2 instances:-Xms14848m -Xmx14848m
-Xms14848m -Xmx14848m
I3v2 instances:-Xms30720m -Xmx30720m
-Xms30720m -Xmx30720m
When tuning application heap settings, review your App Service plan details. Consider the needs of multiple applications and deployment slots to find the optimal allocation of memory.
Turn on web sockets
Turn on support for web sockets in the Azure portal in theApplication settingsfor the application. You need to restart the application for the setting to take effect.
Turn on web socket support by using the Azure CLI with the following command:
az webapp config set --name <app-name> --resource-group <resource-group-name> --web-sockets-enabled true
az webapp config set --name <app-name> --resource-group <resource-group-name> --web-sockets-enabled true
Then restart your application:
az webapp stop --name <app-name> --resource-group <resource-group-name>
az webapp start --name <app-name> --resource-group <resource-group-name>
az webapp stop --name <app-name> --resource-group <resource-group-name>
az webapp start --name <app-name> --resource-group <resource-group-name>
Set default character encoding
In the Azure portal, underApplication Settingsfor the web app, create a new app setting namedJAVA_OPTSwith value-Dfile.encoding=UTF-8.
JAVA_OPTS
-Dfile.encoding=UTF-8
Alternatively, you can configure the app setting by using the App Service Maven plugin. Add the setting name and value tags in the plugin configuration:
<appSettings>
    <property>
        <name>JAVA_OPTS</name>
        <value>-Dfile.encoding=UTF-8</value>
    </property>
</appSettings>
<appSettings>
    <property>
        <name>JAVA_OPTS</name>
        <value>-Dfile.encoding=UTF-8</value>
    </property>
</appSettings>
Precompile JSP files
To improve performance of Tomcat applications, you can compile your JSP files before deploying to App Service. You can use theMaven pluginprovided by Apache Sling, or usethis Ant build file.
Ignore the robots933456 message in logs
You might see the following message in the container logs:
2019-04-08T14:07:56.641002476Z "-" - - [08/Apr/2019:14:07:56 +0000] "GET /robots933456.txt HTTP/1.1" 404 415 "-" "-"
2019-04-08T14:07:56.641002476Z "-" - - [08/Apr/2019:14:07:56 +0000] "GET /robots933456.txt HTTP/1.1" 404 415 "-" "-"
You can safely ignore this message./robots933456.txtis a dummy URL path that App Service uses to check if the container is capable of serving requests. A 404 response indicates that the path doesn't exist, and it signals to App Service that the container is healthy and ready to respond to requests.
/robots933456.txt
Choose a Java runtime version
App Service allows users to choose the major version of the JVM, such as Java 8 or Java 11, and the patch version, like 1.8.0_232 or 11.0.5. You can also choose to have the patch version update automatically as new minor versions become available. In most cases, production apps should use pinned patch JVM versions, which prevent unanticipated outages during a patch version autoupdate. All Java web apps use 64-bit JVMs, and it's not configurable.
If you're using Tomcat, you can choose to pin the patch version of Tomcat. On Windows, you can pin the patch versions of the JVM and Tomcat independently. On Linux, you can pin the patch version of Tomcat. The patch version of the JVM is also pinned but isn't separately configurable.
If you choose to pin the minor version, you need to periodically update the JVM minor version on the app. To ensure that your application runs on the newer minor version, create a staging slot and increment the minor version on the staging slot. After you confirm that the application runs correctly on the new minor version, you can swap the staging and production slots.
Run the JBoss CLI
In your JBoss EAP app's SSH session, you can run the JBoss CLI with the following command:
$JBOSS_HOME/bin/jboss-cli.sh --connect
$JBOSS_HOME/bin/jboss-cli.sh --connect
Depending on where JBoss EAP is in the server lifecycle, you might not be able to connect. Wait a few minutes and try again. This approach is useful for quick checks of your current server state (for example, to see if a data source is properly configured).
Also, changes you make to the server with the JBoss CLI in the SSH session don't persist after the app restarts. Each time the app starts, the JBoss EAP server begins with a clean installation. During thestartup lifecycle, App Service makes the necessary server configurations and deploys the app. To make any persistent changes in the JBoss EAP server, use acustom startup script or a startup command. For an end-to-end example, seeConfigure data sources for a Java SE, Tomcat, or JBoss EAP app in Azure App Service.
Alternatively, you can manually configure App Service to run any file on startup. For example:
az webapp config set --resource-group <group-name> --name <app-name> --startup-file /home/site/scripts/foo.sh
az webapp config set --resource-group <group-name> --name <app-name> --startup-file /home/site/scripts/foo.sh
For more information about the CLI commands that you can run, see:
Red Hat JBoss EAP documentation
WildFly CLI Recipes
Clustering
App Service supports clustering for JBoss EAP versions 7.4.1 and greater. To enable clustering, your web app must beintegrated with a virtual network. When the web app is integrated with a virtual network, it restarts, and the JBoss EAP installation automatically starts up with a clustered configuration. When yourun multiple instances with autoscaling, the JBoss EAP instances communicate with each other over the subnet specified in the virtual network integration. You can disable clustering by creating an app setting namedWEBSITE_DISABLE_CLUSTERINGwith any value.
WEBSITE_DISABLE_CLUSTERING

Note
If you're enabling your virtual network integration with an ARM template, you need to manually set the propertyvnetPrivatePortsto a value of2. If you enable virtual network integration from the CLI or portal, this property is set for you automatically.
vnetPrivatePorts
2
When clustering is enabled, the JBoss EAP instances use theFILE_PINGJGroups discovery protocol to discover new instances and persist cluster information (for example: the cluster members, their identifiers, and their IP addresses). On App Service, these files are under/home/clusterinfo/. The first EAP instance to start obtains read/write permissions on the cluster membership file. Other instances read the file, find the primary node, and coordinate with that node to be included in the cluster and added to the file.
FILE_PING
/home/clusterinfo/
Note
You can avoid JBoss EAP clustering timeouts bycleaning up obsolete discovery files during your app startup.
The Premium V3 and Isolated V2 App Service Plan types can optionally be distributed across availability zones to improve resiliency and reliability for your business-critical workloads. This architecture is also known aszone redundancy. The JBoss EAP clustering feature is compatible with the zone redundancy feature.
Autoscale rules
When you're configuring autoscale rules for horizontal scaling, it's important to remove instances incrementally (one at a time) to ensure that each removed instance can transfer its activity (such as handling a database transaction) to another member of the cluster. When you're configuring your autoscale rules in the portal to scale down, use the following options:
Operation: "Decrease count by"
Cool down: "5 minutes" or greater
Instance count: 1
You don't need to incrementally add instances (scaling out). You can add multiple instances to the cluster at a time.
App Service plans

JBoss EAP is available in the following pricing tiers: F1, P0v3, P1mv3, P2mv3, P3mv3, P4mv3, and P5mv3.
JBoss EAP server lifecycle
A JBoss EAP app in App Service goes through five distinct phases before launching the server:
Environment setup phase
Server launch phase
Server configuration phase
App deployment phase
Server reload phase
See the following sections for details and opportunities to customize (such as throughapp settings).
1. Environment setup phase
The SSH service is started to enablesecure SSH sessionswith the container.
The Java runtime keystore is updated with any public and private certificates that are defined in the Azure portal.Public certificates are provided by the platform in the/var/ssl/certsdirectory, and they're loaded to$JRE_HOME/lib/security/cacerts.Private certificates are provided by the platform in the/var/ssl/privatedirectory, and they're loaded to$JRE_HOME/lib/security/client.jks.
Public certificates are provided by the platform in the/var/ssl/certsdirectory, and they're loaded to$JRE_HOME/lib/security/cacerts.
/var/ssl/certs
$JRE_HOME/lib/security/cacerts
Private certificates are provided by the platform in the/var/ssl/privatedirectory, and they're loaded to$JRE_HOME/lib/security/client.jks.
/var/ssl/private
$JRE_HOME/lib/security/client.jks
If any certificates are loaded in the Java keystore in this step, the propertiesjavax.net.ssl.keyStore,javax.net.ssl.keyStorePassword, andjavax.net.ssl.keyStoreTypeare added to theJAVA_OPTSenvironment variable.
javax.net.ssl.keyStore
javax.net.ssl.keyStorePassword
javax.net.ssl.keyStoreType
JAVA_OPTS
Some initial JVM configuration is determined, like logging directories and Java memory heap parameters:If you provide theâXmsorâXmxflags for memory in the app settingJAVA_OPTS, these values override the ones provided by the platform.If you configure the app settingWEBSITES_CONTAINER_STOP_TIME_LIMIT, the value is passed to the runtime propertyorg.wildfly.sigterm.suspend.timeout, which controls the maximum shutdown wait time (in seconds) when JBoss EAP is being stopped.
If you provide theâXmsorâXmxflags for memory in the app settingJAVA_OPTS, these values override the ones provided by the platform.
âXms
âXmx
JAVA_OPTS
If you configure the app settingWEBSITES_CONTAINER_STOP_TIME_LIMIT, the value is passed to the runtime propertyorg.wildfly.sigterm.suspend.timeout, which controls the maximum shutdown wait time (in seconds) when JBoss EAP is being stopped.
WEBSITES_CONTAINER_STOP_TIME_LIMIT
org.wildfly.sigterm.suspend.timeout
If the app is integrated with a virtual network, the App Service runtime passes a list of ports to be used for inter-server communication in the environment variableWEBSITE_PRIVATE_PORTSand launches JBoss EAP by using theclusteringconfiguration. Otherwise, thestandaloneconfiguration is used.For theclusteringconfiguration, the server configuration filestandalone-azure-full-ha.xmlis used.For thestandaloneconfiguration, the server configuration filestandalone-full.xmlis used.
WEBSITE_PRIVATE_PORTS
clustering
standalone
For theclusteringconfiguration, the server configuration filestandalone-azure-full-ha.xmlis used.
clustering
standalone-azure-full-ha.xml
For thestandaloneconfiguration, the server configuration filestandalone-full.xmlis used.
standalone
standalone-full.xml
2. Server launch phase
If JBoss EAP is launched in theclusteringconfiguration:Each JBoss EAP instance receives an internal identifier between 0 and the number of instances that the app is scaled out to.If some files are found in the transaction store path for this server instance (by using its internal identifier), it means this server instance is taking the place of an identical service instance. The other service instance previously crashed and left uncommitted transactions behind. The server is configured to resume the work on these transactions.
clustering
Each JBoss EAP instance receives an internal identifier between 0 and the number of instances that the app is scaled out to.
If some files are found in the transaction store path for this server instance (by using its internal identifier), it means this server instance is taking the place of an identical service instance. The other service instance previously crashed and left uncommitted transactions behind. The server is configured to resume the work on these transactions.
Regardless of whether JBoss EAP starts in theclusteringorstandaloneconfiguration, if the server version is 7.4 or later and the runtime uses Java 17, then the configuration is updated to enable the Elytron subsystem for security.
clustering
standalone
If you configure the app settingWEBSITE_JBOSS_OPTS, the value is passed to the JBoss launcher script. This setting can be used to provide paths to property files and more flags that influence the startup of JBoss EAP.
WEBSITE_JBOSS_OPTS
3. Server configuration phase
At the start of this phase, App Service first waits for both the JBoss EAP server and the admin interface to be ready to receive requests before continuing. This process can take a few more seconds if Application Insights is enabled.
At the start of this phase, App Service first waits for both the JBoss EAP server and the admin interface to be ready to receive requests before continuing. This process can take a few more seconds if Application Insights is enabled.
When both JBoss EAP Server and the admin interface are ready, App Service takes the following actions:Adds the JBoss EAP moduleazure.appservice, which provides utility classes for logging and integration with App Service.Updates the console logger to use a colorless mode so that log files aren't full of color-escaping sequences.Sets up the integration with Azure Monitor logs.Updates the binding IP addresses of the Web Services Description Language (WSDL) and management interfaces.Adds the JBoss EAP moduleazure.appservice.easyauthfor integration withApp Service authenticationand Microsoft Entra ID.Updates the logging configuration of access logs and the name and rotation of the main server log file.
When both JBoss EAP Server and the admin interface are ready, App Service takes the following actions:
Adds the JBoss EAP moduleazure.appservice, which provides utility classes for logging and integration with App Service.
azure.appservice
Updates the console logger to use a colorless mode so that log files aren't full of color-escaping sequences.
Sets up the integration with Azure Monitor logs.
Updates the binding IP addresses of the Web Services Description Language (WSDL) and management interfaces.
Adds the JBoss EAP moduleazure.appservice.easyauthfor integration withApp Service authenticationand Microsoft Entra ID.
azure.appservice.easyauth
Updates the logging configuration of access logs and the name and rotation of the main server log file.
Unless the app settingWEBSITE_SKIP_AUTOCONFIGURE_DATABASEis defined, App Service autodetects Java Database Connectivity (JDBC) URLs in the App Service app settings. If valid JDBC URLs exist for PostgreSQL, MySQL, MariaDB, Oracle, SQL Server, or Azure SQL Database, it adds the corresponding drivers to the server, adds a data source for each of the JDBC URLs, and sets the Java Naming and Directory Interface (JNDI) name for each data source tojava:jboss/env/jdbc/<app-setting-name>_DS, where<app-setting-name>is the name of the app setting.
Unless the app settingWEBSITE_SKIP_AUTOCONFIGURE_DATABASEis defined, App Service autodetects Java Database Connectivity (JDBC) URLs in the App Service app settings. If valid JDBC URLs exist for PostgreSQL, MySQL, MariaDB, Oracle, SQL Server, or Azure SQL Database, it adds the corresponding drivers to the server, adds a data source for each of the JDBC URLs, and sets the Java Naming and Directory Interface (JNDI) name for each data source tojava:jboss/env/jdbc/<app-setting-name>_DS, where<app-setting-name>is the name of the app setting.
WEBSITE_SKIP_AUTOCONFIGURE_DATABASE
java:jboss/env/jdbc/<app-setting-name>_DS
<app-setting-name>
If theclusteringconfiguration is enabled, the console logger to be configured is checked.
If theclusteringconfiguration is enabled, the console logger to be configured is checked.
clustering
If there are JAR files deployed to the/home/site/libsdirectory, a new global module is created with all of these JAR files.
If there are JAR files deployed to the/home/site/libsdirectory, a new global module is created with all of these JAR files.
/home/site/libs
At the end of the phase, App Service runs the custom startup script, if one exists. The search logic for the custom startup script is defined as follows:If you configured a startup command (for example, through the Azure portal or the Azure CLI), run it; otherwise,If the path/home/site/scripts/startup.shexists, use it; otherwise,If the path/home/startup.shexists, use it.
At the end of the phase, App Service runs the custom startup script, if one exists. The search logic for the custom startup script is defined as follows:
If you configured a startup command (for example, through the Azure portal or the Azure CLI), run it; otherwise,
If the path/home/site/scripts/startup.shexists, use it; otherwise,
/home/site/scripts/startup.sh
If the path/home/startup.shexists, use it.
/home/startup.sh
The custom startup command or script runs as the root user (no need forsudo), so they can install Linux packages or launch the JBoss CLI to perform more JBoss EAP install/customization commands like creating data sources and installing resource adapters. For information on Ubuntu package management commands, see theUbuntu Server documentation. For JBoss CLI commands, see theJBoss Management CLI Guide.
sudo
4. App deployment phase
The startup script deploys apps to JBoss EAP by looking in the following locations, in order of precedence:
If you configured the app settingWEBSITE_JAVA_WAR_FILE_NAME, deploy the file designated by it.
WEBSITE_JAVA_WAR_FILE_NAME
If/home/site/wwwroot/app.warexists, deploy it.
/home/site/wwwroot/app.war
If any other EAR and WAR files exist in/home/site/wwwroot, deploy them.
/home/site/wwwroot
If/home/site/wwwroot/webappsexists, deploy the files and directories in it. WAR files are deployed as applications themselves, and directories are deployed as "exploded" (uncompressed) web apps.
/home/site/wwwroot/webapps
If any standalone JSP pages exist in/home/site/wwwroot, copy them to the web server root and deploy them as one web app.
/home/site/wwwroot
If no deployable files are found, deploy the default welcome page (parking page) in the root context.
5. Server reload phase
After the deployment steps are complete, the JBoss EAP server is reloaded to apply any changes that require a server reload.
After the server reloads, the applications deployed to the JBoss EAP server should be ready to respond to requests.
The server runs until the App Service app is stopped or restarted. You can manually stop or restart the App Service app, or you trigger a restart when you deploy files or make configuration changes to the App Service app.
If the JBoss EAP server exits abnormally in theclusteringconfiguration, a final function calledemit_alert_tx_store_not_emptyis executed. The function checks if the JBoss EAP process left a nonempty transaction store file in disk. If so, an error is logged in the console:Error: finishing server with non-empty store for node XXXX. When a new server instance is started, it looks for these nonempty transaction store files to resume the work (see2. Server launch phase).
clustering
emit_alert_tx_store_not_empty
Error: finishing server with non-empty store for node XXXX
Tomcat baseline configuration
Note
This section applies to Linux only.
Java developers can customize the server settings, troubleshoot issues, and deploy applications to Tomcat with confidence if they know about the server.xml file and configuration details of Tomcat. Possible customizations include:
Customizing Tomcat configuration: When you understand the server.xml file and Tomcat's configuration details, you can fine-tune the server settings to match the needs of their applications.
Debugging: When an application is deployed on a Tomcat server, developers need to know the server configuration to debug any issues that might arise. This process includes checking the server logs, examining the configuration files, and identifying any errors that might be occurring.
Troubleshooting Tomcat issues: Inevitably, Java developers encounter issues with their Tomcat server, such as performance problems or configuration errors. When you understand the server.xml file and Tomcat's configuration details, developers can quickly diagnose and troubleshoot these issues, which can save time and effort.
Deploying applications to Tomcat: To deploy a Java web application to Tomcat, developers need to know how to configure the server.xml file and other Tomcat settings. You need to understand these details to deploy applications successfully and ensure that they run smoothly on the server.
When you create an app with built-in Tomcat to host your Java workload (a WAR file or a JAR file), there are certain settings that you get out of the box for Tomcat configuration. You can refer to theofficial Apache Tomcat documentationfor detailed information, including the default configuration for Tomcat Web Server.
Additionally, there are certain transformations that are applied on top of the server.xml for Tomcat distribution upon start. These transformations include changes to theConnector,Host, andValvesettings.
The latest versions of Tomcat have server.xml (8.5.58 and 9.0.38 onward). Older versions of Tomcat don't use transforms and might have different behavior as a result.
Connector
<Connector port="${port.http}" address="127.0.0.1" maxHttpHeaderSize="16384" compression="on" URIEncoding="UTF-8" connectionTimeout="${site.connectionTimeout}" maxThreads="${catalina.maxThreads}" maxConnections="${catalina.maxConnections}" protocol="HTTP/1.1" redirectPort="8443"/>
<Connector port="${port.http}" address="127.0.0.1" maxHttpHeaderSize="16384" compression="on" URIEncoding="UTF-8" connectionTimeout="${site.connectionTimeout}" maxThreads="${catalina.maxThreads}" maxConnections="${catalina.maxConnections}" protocol="HTTP/1.1" redirectPort="8443"/>
maxHttpHeaderSizeis set to16384.
maxHttpHeaderSize
16384
URIEncodingis set toUTF-8.
URIEncoding
UTF-8
connectionTimeoutis set toWEBSITE_TOMCAT_CONNECTION_TIMEOUT, which defaults to240000.
connectionTimeout
WEBSITE_TOMCAT_CONNECTION_TIMEOUT
240000
maxThreadsis set toWEBSITE_CATALINA_MAXTHREADS, which defaults to200.
maxThreads
WEBSITE_CATALINA_MAXTHREADS
200
maxConnectionsis set toWEBSITE_CATALINA_MAXCONNECTIONS, which defaults to10000.
maxConnections
WEBSITE_CATALINA_MAXCONNECTIONS
10000
Note
TheconnectionTimeout,maxThreads, andmaxConnectionssettings can be tuned with app settings.
connectionTimeout
maxThreads
maxConnections
Following are example CLI commands that you might use to alter the values ofconnectionTimeout,maxThreads, ormaxConnections:
connectionTimeout
maxThreads
maxConnections
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_TOMCAT_CONNECTION_TIMEOUT=120000
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_TOMCAT_CONNECTION_TIMEOUT=120000
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_CATALINA_MAXTHREADS=100
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_CATALINA_MAXTHREADS=100
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_CATALINA_MAXCONNECTIONS=5000
az webapp config appsettings set --resource-group myResourceGroup --name myApp --settings WEBSITE_CATALINA_MAXCONNECTIONS=5000
Connector uses the address of the container instead of 127.0.0.1.
Host
<Host appBase="${site.appbase}" xmlBase="${site.xmlbase}" unpackWARs="${site.unpackwars}" workDir="${site.tempdir}" errorReportValveClass="com.microsoft.azure.appservice.AppServiceErrorReportValve" name="localhost" autoDeploy="true">
<Host appBase="${site.appbase}" xmlBase="${site.xmlbase}" unpackWARs="${site.unpackwars}" workDir="${site.tempdir}" errorReportValveClass="com.microsoft.azure.appservice.AppServiceErrorReportValve" name="localhost" autoDeploy="true">
appBaseis set toAZURE_SITE_APP_BASE, which defaults to localWebappsLocalPath.
appBase
AZURE_SITE_APP_BASE
WebappsLocalPath
xmlBaseis set toAZURE_SITE_HOME, which defaults to/site/wwwroot.
xmlBase
AZURE_SITE_HOME
/site/wwwroot
unpackWARsis set toAZURE_UNPACK_WARS, which defaults totrue.
unpackWARs
AZURE_UNPACK_WARS
true
workDiris set toJAVA_TMP_DIR, which defaultsTMP.
workDir
JAVA_TMP_DIR
TMP
errorReportValveClassuses our custom error report valve.
errorReportValveClass
Valve
<Valve prefix="site_access_log.${catalina.instance.name}" pattern="%h %l %u %t &quot;%r&quot; %s %b %D %{x-arr-log-id}i" directory="${site.logdir}/http/RawLogs" maxDays="${site.logRetentionDays}" className="org.apache.catalina.valves.AccessLogValve" suffix=".txt"/>
<Valve prefix="site_access_log.${catalina.instance.name}" pattern="%h %l %u %t &quot;%r&quot; %s %b %D %{x-arr-log-id}i" directory="${site.logdir}/http/RawLogs" maxDays="${site.logRetentionDays}" className="org.apache.catalina.valves.AccessLogValve" suffix=".txt"/>
directoryis set toAZURE_LOGGING_DIR, which defaults tohome\logFiles.
directory
AZURE_LOGGING_DIR
home\logFiles
maxDaysis set toWEBSITE_HTTPLOGGING_RETENTION_DAYS, which defaults to7. This value aligns with the application-logging platform default.
maxDays
WEBSITE_HTTPLOGGING_RETENTION_DAYS
7
On Linux, it has all of the same customization, and it adds some error and reporting pages to the valve:
<xsl:attribute name="appServiceErrorPage">
    <xsl:value-of select="'${appService.valves.appServiceErrorPage}'"/>
</xsl:attribute>

<xsl:attribute name="showReport">
    <xsl:value-of select="'${catalina.valves.showReport}'"/>
</xsl:attribute>

<xsl:attribute name="showServerInfo">
    <xsl:value-of select="'${catalina.valves.showServerInfo}'"/>
</xsl:attribute>
<xsl:attribute name="appServiceErrorPage">
    <xsl:value-of select="'${appService.valves.appServiceErrorPage}'"/>
</xsl:attribute>

<xsl:attribute name="showReport">
    <xsl:value-of select="'${catalina.valves.showReport}'"/>
</xsl:attribute>

<xsl:attribute name="showServerInfo">
    <xsl:value-of select="'${catalina.valves.showServerInfo}'"/>
</xsl:attribute>
Related content
Visit theAzure for Java Developerscenter to find Azure quickstarts, tutorials, and Java reference documentation.
App Service Linux FAQ
Environment variables and app settings reference
Feedback
Was this page helpful?
Additional resources