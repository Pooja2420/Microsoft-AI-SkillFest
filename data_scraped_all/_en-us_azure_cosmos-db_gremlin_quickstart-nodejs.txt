Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Cosmos DB for Apache Gremlin library for Node.js
Article
2024-08-22
3 contributors
In this article
APPLIES TO:Gremlin
Console
Python
Node.js
.NET
Azure Cosmos DB for Apache Gremlin is a fully managed graph database service implementing the popularApache Tinkerpop, a graph computing framework using the Gremlin query language. The API for Gremlin gives you a low-friction way to get started using Gremlin with a service that can grow and scale out as much as you need with minimal management.
Apache Tinkerpop
In this quickstart, you use thegremlinlibrary to connect to a newly created Azure Cosmos DB for Gremlin account.
gremlin
Library source code|Package (npm)
Prerequisites
An Azure account with an active subscription.No Azure subscription?Sign up for a free Azure account.Don't want an Azure subscription? You cantry Azure Cosmos DB freewith no subscription required.
No Azure subscription?Sign up for a free Azure account.
Don't want an Azure subscription? You cantry Azure Cosmos DB freewith no subscription required.
Node.js (LTS)Don't have Node.js installed? Try this quickstart inGitHub Codespaces.codespaces.new/github/codespaces-blank?quickstart=1)
Don't have Node.js installed? Try this quickstart inGitHub Codespaces.codespaces.new/github/codespaces-blank?quickstart=1)
Azure Command-Line Interface (CLI)
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
Setting up
This section walks you through creating an API for Gremlin account and setting up a Node.js project to use the library to connect to the account.
Create an API for Gremlin account
The API for Gremlin account should be created prior to using the Node.js library. Additionally, it helps to also have the database and graph in place.
Create shell variables foraccountName,resourceGroupName, andlocation.# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
location="westus"

# Variable for account name with a randomly generated suffix

let suffix=$RANDOM*$RANDOM
accountName="msdocs-gremlin-$suffix"
Create shell variables foraccountName,resourceGroupName, andlocation.
# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
location="westus"

# Variable for account name with a randomly generated suffix

let suffix=$RANDOM*$RANDOM
accountName="msdocs-gremlin-$suffix"
# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
location="westus"

# Variable for account name with a randomly generated suffix

let suffix=$RANDOM*$RANDOM
accountName="msdocs-gremlin-$suffix"
If you haven't already, sign in to the Azure CLI usingaz login.
If you haven't already, sign in to the Azure CLI usingaz login.
az login
Useaz group createto create a new resource group in your subscription.az group create \
    --name $resourceGroupName \
    --location $location
Useaz group createto create a new resource group in your subscription.
az group create
az group create \
    --name $resourceGroupName \
    --location $location
az group create \
    --name $resourceGroupName \
    --location $location
Useaz cosmosdb createto create a new API for Gremlin account with default settings.az cosmosdb create \
    --resource-group $resourceGroupName \
    --name $accountName \
    --capabilities "EnableGremlin" \
    --locations regionName=$location \
    --enable-free-tier trueNoteYou can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt-in when creating the account. If this command fails to apply the free tier discount, this means another account in the subscription has already been enabled with free tier.
Useaz cosmosdb createto create a new API for Gremlin account with default settings.
az cosmosdb create
az cosmosdb create \
    --resource-group $resourceGroupName \
    --name $accountName \
    --capabilities "EnableGremlin" \
    --locations regionName=$location \
    --enable-free-tier true
az cosmosdb create \
    --resource-group $resourceGroupName \
    --name $accountName \
    --capabilities "EnableGremlin" \
    --locations regionName=$location \
    --enable-free-tier true
Note
You can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt-in when creating the account. If this command fails to apply the free tier discount, this means another account in the subscription has already been enabled with free tier.
Get the API for Gremlin endpointNAMEfor the account usingaz cosmosdb show.az cosmosdb show \
    --resource-group $resourceGroupName \
    --name $accountName \
    --query "name"
Get the API for Gremlin endpointNAMEfor the account usingaz cosmosdb show.
az cosmosdb show
az cosmosdb show \
    --resource-group $resourceGroupName \
    --name $accountName \
    --query "name"
az cosmosdb show \
    --resource-group $resourceGroupName \
    --name $accountName \
    --query "name"
Find theKEYfrom the list of keys for the account withaz-cosmosdb-keys-list.az cosmosdb keys list \
    --resource-group $resourceGroupName \
    --name $accountName \
    --type "keys" \
    --query "primaryMasterKey"
Find theKEYfrom the list of keys for the account withaz-cosmosdb-keys-list.
az-cosmosdb-keys-list
az cosmosdb keys list \
    --resource-group $resourceGroupName \
    --name $accountName \
    --type "keys" \
    --query "primaryMasterKey"
az cosmosdb keys list \
    --resource-group $resourceGroupName \
    --name $accountName \
    --type "keys" \
    --query "primaryMasterKey"
Record theNAMEandKEYvalues. You use these credentials later.
Record theNAMEandKEYvalues. You use these credentials later.
Create adatabasenamedcosmicworksusingaz cosmosdb gremlin database create.az cosmosdb gremlin database create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --name "cosmicworks"
Create adatabasenamedcosmicworksusingaz cosmosdb gremlin database create.
cosmicworks
az cosmosdb gremlin database create
az cosmosdb gremlin database create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --name "cosmicworks"
az cosmosdb gremlin database create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --name "cosmicworks"
Create agraphusingaz cosmosdb gremlin graph create. Name the graphproducts, then set the throughput to400, and finally set the partition key path to/category.az cosmosdb gremlin graph create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --database-name "cosmicworks" \
    --name "products" \
    --partition-key-path "/category" \
    --throughput 400
Create agraphusingaz cosmosdb gremlin graph create. Name the graphproducts, then set the throughput to400, and finally set the partition key path to/category.
az cosmosdb gremlin graph create
products
400
/category
az cosmosdb gremlin graph create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --database-name "cosmicworks" \
    --name "products" \
    --partition-key-path "/category" \
    --throughput 400
az cosmosdb gremlin graph create \
    --resource-group $resourceGroupName \
    --account-name $accountName \
    --database-name "cosmicworks" \
    --name "products" \
    --partition-key-path "/category" \
    --throughput 400
Create a new Node.js console application
Create a Node.js console application in an empty folder using your preferred terminal.
Open your terminal in an empty folder.
Open your terminal in an empty folder.
Initialize a new modulenpm init es6 --yes
Initialize a new module
npm init es6 --yes
npm init es6 --yes
Create theapp.jsfiletouch app.js
Create theapp.jsfile
touch app.js
touch app.js
Install the npm package
Add thegremlinnpm package to the Node.js project.
gremlin
Open thepackage.jsonfile and replace the contents with this JSON configuration.{
  "main": "app.js",
  "type": "module",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "gremlin": "^3.*"
  }
}
Open thepackage.jsonfile and replace the contents with this JSON configuration.
{
  "main": "app.js",
  "type": "module",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "gremlin": "^3.*"
  }
}
{
  "main": "app.js",
  "type": "module",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "gremlin": "^3.*"
  }
}
Use thenpm installcommand to install all packages specified in thepackage.jsonfile.npm install
Use thenpm installcommand to install all packages specified in thepackage.jsonfile.
npm install
npm install
npm install
Configure environment variables
To use theNAMEandURIvalues obtained earlier in this quickstart, persist them to new environment variables on the local machine running the application.
To set the environment variable, use your terminal to persist the values asCOSMOS_ENDPOINTandCOSMOS_KEYrespectively.export COSMOS_GREMLIN_ENDPOINT="<account-name>"
export COSMOS_GREMLIN_KEY="<account-key>"
To set the environment variable, use your terminal to persist the values asCOSMOS_ENDPOINTandCOSMOS_KEYrespectively.
COSMOS_ENDPOINT
COSMOS_KEY
export COSMOS_GREMLIN_ENDPOINT="<account-name>"
export COSMOS_GREMLIN_KEY="<account-key>"
export COSMOS_GREMLIN_ENDPOINT="<account-name>"
export COSMOS_GREMLIN_KEY="<account-key>"
Validate that the environment variables were set correctly.printenv COSMOS_GREMLIN_ENDPOINT
printenv COSMOS_GREMLIN_KEY
Validate that the environment variables were set correctly.
printenv COSMOS_GREMLIN_ENDPOINT
printenv COSMOS_GREMLIN_KEY
printenv COSMOS_GREMLIN_ENDPOINT
printenv COSMOS_GREMLIN_KEY
Code examples
Authenticate the client
Create vertices
Create edges
Query vertices & edges
The code in this article connects to a database namedcosmicworksand a graph namedproducts. The code then adds vertices and edges to the graph before traversing the added items.
cosmicworks
products
Authenticate the client
Application requests to most Azure services must be authorized. For the API for Gremlin, use theNAMEandURIvalues obtained earlier in this quickstart.
Open theapp.jsfile.
Open theapp.jsfile.
Import thegremlinmodule.import gremlin from 'gremlin'
Import thegremlinmodule.
gremlin
import gremlin from 'gremlin'
import gremlin from 'gremlin'
CreateaccountNameandaccountKeyvariables. Store theCOSMOS_GREMLIN_ENDPOINTandCOSMOS_GREMLIN_KEYenvironment variables as the values for each respective variable.const accountName = process.env.COSMOS_GREMLIN_ENDPOINT
const accountKey = process.env.COSMOS_GREMLIN_KEY
CreateaccountNameandaccountKeyvariables. Store theCOSMOS_GREMLIN_ENDPOINTandCOSMOS_GREMLIN_KEYenvironment variables as the values for each respective variable.
accountName
accountKey
COSMOS_GREMLIN_ENDPOINT
COSMOS_GREMLIN_KEY
const accountName = process.env.COSMOS_GREMLIN_ENDPOINT
const accountKey = process.env.COSMOS_GREMLIN_KEY
const accountName = process.env.COSMOS_GREMLIN_ENDPOINT
const accountKey = process.env.COSMOS_GREMLIN_KEY
UsePlainTextSaslAuthenticatorto create a new object for the account's credentials.const credentials = new gremlin.driver.auth.PlainTextSaslAuthenticator(
  '/dbs/cosmicworks/colls/products',
  `${accountKey}`
)
UsePlainTextSaslAuthenticatorto create a new object for the account's credentials.
PlainTextSaslAuthenticator
const credentials = new gremlin.driver.auth.PlainTextSaslAuthenticator(
  '/dbs/cosmicworks/colls/products',
  `${accountKey}`
)
const credentials = new gremlin.driver.auth.PlainTextSaslAuthenticator(
  '/dbs/cosmicworks/colls/products',
  `${accountKey}`
)
UseClientto connect using the remote server credentials and theGraphSON 2.0serializer. Then, useOpento create a new connection to the server.const client = new gremlin.driver.Client(
  `wss://${accountName}.gremlin.cosmos.azure.com:443/`,
  {
    credentials,
    traversalsource: 'g',
    rejectUnauthorized: true,
    mimeType: 'application/vnd.gremlin-v2.0+json'
  }
)

client.open()
UseClientto connect using the remote server credentials and theGraphSON 2.0serializer. Then, useOpento create a new connection to the server.
Client
Open
const client = new gremlin.driver.Client(
  `wss://${accountName}.gremlin.cosmos.azure.com:443/`,
  {
    credentials,
    traversalsource: 'g',
    rejectUnauthorized: true,
    mimeType: 'application/vnd.gremlin-v2.0+json'
  }
)

client.open()
const client = new gremlin.driver.Client(
  `wss://${accountName}.gremlin.cosmos.azure.com:443/`,
  {
    credentials,
    traversalsource: 'g',
    rejectUnauthorized: true,
    mimeType: 'application/vnd.gremlin-v2.0+json'
  }
)

client.open()
Create vertices
Now that the application is connected to the account, use the standard Gremlin syntax to create vertices.
Usesubmitto run a command server-side on the API for Gremlin account. Create aproductvertex with the following properties:Valuelabelproductid68719518371nameKiama classic surfboardprice285.55categorysurfboardsawait client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518371',
    prop_name: 'Kiama classic surfboard',
    prop_price: 285.55,
    prop_partition_key: 'surfboards'
  }
)
Usesubmitto run a command server-side on the API for Gremlin account. Create aproductvertex with the following properties:
submit
product
68719518371
name
Kiama classic surfboard
price
285.55
category
surfboards
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518371',
    prop_name: 'Kiama classic surfboard',
    prop_price: 285.55,
    prop_partition_key: 'surfboards'
  }
)
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518371',
    prop_name: 'Kiama classic surfboard',
    prop_price: 285.55,
    prop_partition_key: 'surfboards'
  }
)
Create a secondproductvertex with these properties:Valuelabelproductid68719518403nameMontau Turtle Surfboardprice600.00categorysurfboardsawait client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518403',
    prop_name: 'Montau Turtle Surfboard',
    prop_price: 600.00,
    prop_partition_key: 'surfboards'
  }
)
Create a secondproductvertex with these properties:
product
68719518403
name
Montau Turtle Surfboard
price
600.00
category
surfboards
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518403',
    prop_name: 'Montau Turtle Surfboard',
    prop_price: 600.00,
    prop_partition_key: 'surfboards'
  }
)
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518403',
    prop_name: 'Montau Turtle Surfboard',
    prop_price: 600.00,
    prop_partition_key: 'surfboards'
  }
)
Create a thirdproductvertex with these properties:Valuelabelproductid68719518409nameBondi Twin Surfboardprice585.50categorysurfboardsawait client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518409',
    prop_name: 'Bondi Twin Surfboard',
    prop_price: 585.50,
    prop_partition_key: 'surfboards'
  }
)
Create a thirdproductvertex with these properties:
product
68719518409
name
Bondi Twin Surfboard
price
585.50
category
surfboards
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518409',
    prop_name: 'Bondi Twin Surfboard',
    prop_price: 585.50,
    prop_partition_key: 'surfboards'
  }
)
await client.submit(
  'g.addV(\'product\').property(\'id\', prop_id).property(\'name\', prop_name).property(\'price\', prop_price).property(\'category\', prop_partition_key)', {
    prop_id: '68719518409',
    prop_name: 'Bondi Twin Surfboard',
    prop_price: 585.50,
    prop_partition_key: 'surfboards'
  }
)
Create edges
Create edges using the Gremlin syntax to define relationships between vertices.
Create an edge from theMontau Turtle Surfboardproduct namedreplacesto theKiama classic surfboardproduct.await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518371'
  }
)TipThis edge defintion uses theg.V(['<partition-key>', '<id>'])syntax. Alternatively, you can useg.V('<id>').has('category', '<partition-key>').
Create an edge from theMontau Turtle Surfboardproduct namedreplacesto theKiama classic surfboardproduct.
Montau Turtle Surfboard
Kiama classic surfboard
await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518371'
  }
)
await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518371'
  }
)
Tip
This edge defintion uses theg.V(['<partition-key>', '<id>'])syntax. Alternatively, you can useg.V('<id>').has('category', '<partition-key>').
g.V(['<partition-key>', '<id>'])
g.V('<id>').has('category', '<partition-key>')
Create anotherreplacesedge from the same product to theBondi Twin Surfboard.await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518409'
  }
)
Create anotherreplacesedge from the same product to theBondi Twin Surfboard.
Bondi Twin Surfboard
await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518409'
  }
)
await client.submit(
  'g.V([prop_partition_key, prop_source_id]).addE(\'replaces\').to(g.V([prop_partition_key, prop_target_id]))', {
    prop_partition_key: 'surfboards',
    prop_source_id: '68719518403',
    prop_target_id: '68719518409'
  }
)
Query vertices & edges
Use the Gremlin syntax to traverse the graph and discover relationships between vertices.
Traverse the graph and find all vertices thatMontau Turtle Surfboardreplaces.const result = await client.submit(
  'g.V().hasLabel(\'product\').has(\'category\', prop_partition_key).has(\'name\', prop_name).outE(\'replaces\').inV()', {
    prop_partition_key: 'surfboards',
    prop_name: 'Montau Turtle Surfboard'
  }
)
Traverse the graph and find all vertices thatMontau Turtle Surfboardreplaces.
Montau Turtle Surfboard
const result = await client.submit(
  'g.V().hasLabel(\'product\').has(\'category\', prop_partition_key).has(\'name\', prop_name).outE(\'replaces\').inV()', {
    prop_partition_key: 'surfboards',
    prop_name: 'Montau Turtle Surfboard'
  }
)
const result = await client.submit(
  'g.V().hasLabel(\'product\').has(\'category\', prop_partition_key).has(\'name\', prop_name).outE(\'replaces\').inV()', {
    prop_partition_key: 'surfboards',
    prop_name: 'Montau Turtle Surfboard'
  }
)
Write to the console the result of this traversal.console.dir(result)
Write to the console the result of this traversal.
console.dir(result)
console.dir(result)
Run the code
Validate that your application works as expected by running the application. The application should execute with no errors or warnings. The output of the application includes data about the created and queried items.
Open the terminal in the Node.js project folder.
Open the terminal in the Node.js project folder.
Usenpm <script>to run the application. Observe the output from the application.npm start
Usenpm <script>to run the application. Observe the output from the application.
npm <script>
npm start
npm start
Clean up resources
When you no longer need the API for Gremlin account, delete the corresponding resource group.
Create a shell variable forresourceGroupNameif it doesn't already exist.# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
Create a shell variable forresourceGroupNameif it doesn't already exist.
# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
# Variable for resource group name
resourceGroupName="msdocs-cosmos-gremlin-quickstart"
Useaz group deleteto delete the resource group.az group delete \
    --name $resourceGroupName
Useaz group deleteto delete the resource group.
az group delete
az group delete \
    --name $resourceGroupName
az group delete \
    --name $resourceGroupName
Next step
Create and query data using Azure Cosmos DB for Apache Gremlin
Feedback
Was this page helpful?
Additional resources