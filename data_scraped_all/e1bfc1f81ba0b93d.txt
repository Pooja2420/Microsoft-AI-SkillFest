Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Traffic splitting in Azure Container Apps
Article
2023-03-30
4 contributors
In this article
By default, when ingress is enabled, all traffic is routed to the latest deployed revision. When you enablemultiple revision modein your container app, you can split incoming traffic between active revisions.
Traffic splitting is useful for testing updates to your container app.  You can use traffic splitting to gradually phase in a new revision inblue-green deploymentsor inA/B testing.
Traffic splitting is based on the weight (percentage) of traffic that is routed to each revision.  The combined weight of all traffic split rules must equal 100%.  You can specify revision by revision name orrevision label.
This article shows you how to configure traffic splitting rules for your container app.
To run the following examples, you need a container app with multiple revisions.
Configure traffic splitting
Configure traffic splitting between revisions using theaz containerapp ingress traffic setcommand.  You can specify the revisions by name with the--revision-weightparameter or by revision label with the--label-weightparameter.
az containerapp ingress traffic set
--revision-weight
--label-weight
The following command sets the traffic weight for each revision to 50%:
az containerapp ingress traffic set \
    --name <APP_NAME> \
    --resource-group <RESOURCE_GROUP> \
    --revision-weight <REVISION_1>=50 <REVISION_2>=50
az containerapp ingress traffic set \
    --name <APP_NAME> \
    --resource-group <RESOURCE_GROUP> \
    --revision-weight <REVISION_1>=50 <REVISION_2>=50
Make sure to replace the placeholder values surrounded by<>with your own values.
<>
This command sets the traffic weight for revision <LABEL_1> to 80% and revision <LABEL_2> to 20%:
az containerapp ingress traffic set \
    --name <APP_NAME> \
    --resource-group <RESOURCE_GROUP> \
    --label-weight <LABEL_1>=80 <LABEL_2>=20
az containerapp ingress traffic set \
    --name <APP_NAME> \
    --resource-group <RESOURCE_GROUP> \
    --label-weight <LABEL_1>=80 <LABEL_2>=20
Go to your container app in theAzure portal.
SelectRevision managementfrom the left side menu.
If the revision mode isSingle, set the mode tomultiple.SelectChoose revision mode.SelectMultiple: Several revisions active simultaneously.SelectApply.Wait for theRevision Modeto update toMultiple.
SelectChoose revision mode.
SelectMultiple: Several revisions active simultaneously.
SelectApply.
Wait for theRevision Modeto update toMultiple.
SelectShow inactive revisions.
If you don't have multiple revisions, you can create a new revision.SelectCreate new revision.You can use the default settings or customize the revision.Enter aName/Suffixfor the revision.SelectCreate.Wait for the revision to deploy.
SelectCreate new revision.
You can use the default settings or customize the revision.
Enter aName/Suffixfor the revision.
SelectCreate.
Wait for the revision to deploy.
SelectActivefor the revisions you want to route traffic to.
Enter the percentage of traffic you want to route to each revision in theTrafficcolumn. The combined percentage of all traffic must equal 100%.
SelectSave.
Enable traffic splitting by  adding theconfiguration.ingress.trafficproperties to theingresssection of your container app template.  You can specify the revisions by name with therevisionNameproperty or by revision label with thelabelproperty.
configuration.ingress.traffic
ingress
revisionName
label
The following example sets 100% of traffic to the latest deployed revision:
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
        {
          "latestRevision": true,
          "weight": 100
        }
      ]
    },
  },
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
        {
          "latestRevision": true,
          "weight": 100
        }
      ]
    },
  },
The following example shows traffic splitting between two revisions by name:
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
          {
              "revisionName": "my-example-app--5g3ty20",
              "weight": 50
          },
          {
              "revisionName": "my-example-app--qcfkbsv",
              "weight": 50
            }
        ],
    },
  },
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
          {
              "revisionName": "my-example-app--5g3ty20",
              "weight": 50
          },
          {
              "revisionName": "my-example-app--qcfkbsv",
              "weight": 50
            }
        ],
    },
  },
The following example shows traffic splitting between two revisions by label:
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
          {
              "weight": 50,
              "label": "v-2"
          },
          {
              "weight": 50,
              "label": "v-1"
          }
        ],
    },
  },
{
  ...
  "configuration": {
    "ingress": {
      "external": true,
      "targetPort": 80,
      "allowInsecure": false,
      "traffic": [
          {
              "weight": 50,
              "label": "v-2"
          },
          {
              "weight": 50,
              "label": "v-1"
          }
        ],
    },
  },
Use cases
The following scenarios describe configuration settings for common use cases.  The examples are shown in JSON format, but you can also use the Azure portal or Azure CLI to configure traffic splitting.
Rapid iteration
In situations where you're frequently iterating development of your container app, you can set traffic rules to always shift all traffic to the latest deployed revision.
The following example template routes all traffic to the latest deployed revision:
"ingress": { 
  "traffic": [
    {
      "latestRevision": true,
      "weight": 100
    }
  ]
}
"ingress": { 
  "traffic": [
    {
      "latestRevision": true,
      "weight": 100
    }
  ]
}
Once you're satisfied with the latest revision, you can lock traffic to that revision by updating theingresssettings to:
ingress
"ingress": { 
  "traffic": [
    {
      "latestRevision": false, // optional
      "revisionName": "myapp--knowngoodrevision",
      "weight": 100
    }
  ]
}
"ingress": { 
  "traffic": [
    {
      "latestRevision": false, // optional
      "revisionName": "myapp--knowngoodrevision",
      "weight": 100
    }
  ]
}
Update existing revision
Consider a situation where you have a known good revision that's serving 100% of your traffic, but you want to issue an update to your app. You can deploy and test new revisions using their direct endpoints without affecting the main revision serving the app.
Once you're satisfied with the updated revision, you can shift a portion of traffic to the new revision for testing and verification.
The following template moves 20% of traffic over to the updated revision:
"ingress": {
  "traffic": [
    {
      "revisionName": "myapp--knowngoodrevision",
      "weight": 80
    },
    {
      "revisionName": "myapp--newerrevision",
      "weight": 20
    }
  ]
}
"ingress": {
  "traffic": [
    {
      "revisionName": "myapp--knowngoodrevision",
      "weight": 80
    },
    {
      "revisionName": "myapp--newerrevision",
      "weight": 20
    }
  ]
}
Staging microservices
When building microservices, you might want to maintain production and staging endpoints for the same app. Use labels to ensure that traffic doesn't switch between different revisions.
The following example template applies labels to different revisions.
"ingress": { 
  "traffic": [
    {
      "revisionName": "myapp--knowngoodrevision",
      "weight": 100
    },
    {
      "revisionName": "myapp--98fdgt",
      "weight": 0,
      "label": "staging"
    }
  ]
}
"ingress": { 
  "traffic": [
    {
      "revisionName": "myapp--knowngoodrevision",
      "weight": 100
    },
    {
      "revisionName": "myapp--98fdgt",
      "weight": 0,
      "label": "staging"
    }
  ]
}
Next steps
Blue-green deployment
Feedback
Was this page helpful?
Additional resources