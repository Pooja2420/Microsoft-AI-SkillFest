Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up sign-in for multitenant Microsoft Entra ID using custom policies in Azure Active Directory B2C
Article
2024-11-16
10 contributors
In this article
Before you begin, use theChoose a policy typeselector at the top of this page to choose the type of policy youâre setting up. Azure Active Directory B2C offers two methods to define how users interact with your applications: through predefineduser flowsor through fully configurablecustom policies. The steps required in this article are different for each method.
This feature is available only for custom policies. For setup steps, selectCustom policyin the preceding selector.
This article shows you how to enable sign-in for users using the multitenant endpoint for Microsoft Entra ID, allowing users from multiple Microsoft Entra tenants to sign in using Azure AD B2C, without you having to configure an identity provider for each tenant. However, guest members in any of these tenantswill notbe able to sign in. For that, you need toindividually configure each tenant.
Prerequisites
Create a user flowso users can sign up and sign in to your application.
Register a web application.
Complete the steps inGet started with custom policies in Active Directory B2C. This tutorial guides you how to update custom policy files to use your Azure AD B2C tenant configuration.
Register a web application.
Note
In this article, it is assumed that theSocialAndLocalAccountsstarter pack is used in the previous steps mentioned in the pre-requisite.
Register a Microsoft Entra app
To enable users to sign in to Azure AD B2C with a Microsoft Entra account, you first need to create an application in the Microsoft Entra tenant from theAzure portal. For more information, seeRegister an application with the Microsoft identity platform.
Sign in to theAzure portal.
Sign in to theAzure portal.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Microsoft Entra tenant from theDirectories + subscriptionsmenu.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Microsoft Entra tenant from theDirectories + subscriptionsmenu.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectApp registrations.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectApp registrations.
SelectNew registration.
SelectNew registration.
Enter aNamefor your application. For example,Azure AD B2C App.
Enter aNamefor your application. For example,Azure AD B2C App.
Azure AD B2C App
SelectAccounts in any organizational directory (Any Microsoft Entra directory â Multitenant)for this application.
SelectAccounts in any organizational directory (Any Microsoft Entra directory â Multitenant)for this application.
For theRedirect URI, accept the value ofWeb, and enter the following URL in all lowercase letters, whereyour-B2C-tenant-nameis replaced with the name of your Azure AD B2C tenant.https://your-B2C-tenant-name.b2clogin.com/your-B2C-tenant-name.onmicrosoft.com/oauth2/authrespFor example,https://fabrikam.b2clogin.com/fabrikam.onmicrosoft.com/oauth2/authresp.If you use acustom domain, enterhttps://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp. Replaceyour-domain-namewith your custom domain, andyour-tenant-namewith the name of your tenant.
For theRedirect URI, accept the value ofWeb, and enter the following URL in all lowercase letters, whereyour-B2C-tenant-nameis replaced with the name of your Azure AD B2C tenant.
your-B2C-tenant-name
https://your-B2C-tenant-name.b2clogin.com/your-B2C-tenant-name.onmicrosoft.com/oauth2/authresp
https://your-B2C-tenant-name.b2clogin.com/your-B2C-tenant-name.onmicrosoft.com/oauth2/authresp
For example,https://fabrikam.b2clogin.com/fabrikam.onmicrosoft.com/oauth2/authresp.
https://fabrikam.b2clogin.com/fabrikam.onmicrosoft.com/oauth2/authresp
If you use acustom domain, enterhttps://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp. Replaceyour-domain-namewith your custom domain, andyour-tenant-namewith the name of your tenant.
https://your-domain-name/your-tenant-name.onmicrosoft.com/oauth2/authresp
your-domain-name
your-tenant-name
SelectRegister. Record theApplication (client) IDfor use in a later step.
SelectRegister. Record theApplication (client) IDfor use in a later step.
SelectCertificates & secrets, and then selectNew client secret.
SelectCertificates & secrets, and then selectNew client secret.
Enter aDescriptionfor the secret, select an expiration, and then selectAdd. Record theValueof the secret for use in a later step.
Enter aDescriptionfor the secret, select an expiration, and then selectAdd. Record theValueof the secret for use in a later step.
Note
The client secret will not be shown again after this point. If you do not make a record of it, you will have to create a new one.
[Optional] Configuring optional claims
If you want to get thefamily_name, andgiven_nameclaims from Microsoft Entra ID, you can configure optional claims for your application in the Azure portal UI or application manifest. For more information, seeHow to provide optional claims to your Microsoft Entra app.
family_name
given_name
Sign in to theAzure portal. Search for and selectMicrosoft Entra ID.
From theManagesection, selectApp registrations.
Select the application you want to configure optional claims for in the list.
From theManagesection, selectToken configuration.
SelectAdd optional claim.
For theToken type, selectID.
Select the optional claims to add,family_name, andgiven_name.
family_name
given_name
SelectAdd. IfTurn on the Microsoft Graph email permission (required for claims to appear in token)appears, enable it, and then selectAddagain.
[Optional] Verify your app authenticity
Publisher verificationhelps your users understand the authenticity of the app you registered. A verified app means that the publisher of the app hasverifiedtheir identity using their Microsoft Partner Network (MPN). Learn how tomark your app as publisher verified.
Create a policy key
You now need to store the application key that you created in your Azure AD B2C tenant.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Azure AD B2C tenant from theDirectories + subscriptionsmenu.
ChooseAll servicesin the top-left corner of the Azure portal, and then search for and selectAzure AD B2C.
UnderPolicies, selectIdentity Experience Framework.
SelectPolicy keysand then selectAdd.
ForOptions, chooseManual.
Manual
Enter aNamefor the policy key. For example,AADAppSecret.  The prefixB2C_1A_is added automatically to the name of your key when it's created, so its reference in the XML in following section is toB2C_1A_AADAppSecret.
AADAppSecret
B2C_1A_
InSecret, enter your client secret that you recorded earlier.
ForKey usage, selectSignature.
Signature
SelectCreate.
Configure Microsoft Entra ID as an identity provider
To enable users to sign in using a Microsoft Entra account, you need to define Microsoft Entra ID as a claims provider that Azure AD B2C can communicate with through an endpoint. The endpoint provides a set of claims that are used by Azure AD B2C to verify that a specific user has authenticated.
You can define Microsoft Entra ID as a claims provider by adding Microsoft Entra ID to theClaimsProviderelement in the extension file of your policy.
Open theSocialAndLocalAccounts/TrustFrameworkExtensions.xmlfile (see the files you've used in the prerequisites).
Open theSocialAndLocalAccounts/TrustFrameworkExtensions.xmlfile (see the files you've used in the prerequisites).
Find theClaimsProviderselement. If it does not exist, add it under the root element.
Find theClaimsProviderselement. If it does not exist, add it under the root element.
Add a newClaimsProvideras follows:<ClaimsProvider>
  <Domain>commonaad</Domain>
  <DisplayName>Common AAD</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="AADCommon-OpenIdConnect">
      <DisplayName>Multi-Tenant AAD</DisplayName>
      <Description>Login with your Contoso account</Description>
      <Protocol Name="OpenIdConnect"/>
      <Metadata>
        <Item Key="METADATA">https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration</Item>
        <!-- Update the Client ID below to the Application ID -->
        <Item Key="client_id">00001111-aaaa-2222-bbbb-3333cccc4444</Item>
        <Item Key="response_types">code</Item>
        <Item Key="scope">openid profile</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
        <!-- The key below allows you to specify each of the Azure AD tenants that can be used to sign in. Update the GUIDs below for each tenant. -->
        <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000,https://login.microsoftonline.com/11111111-1111-1111-1111-111111111111</Item>
        <!-- The commented key below specifies that users from any tenant can sign-in. Uncomment if you would like anyone with an Azure AD account to be able to sign in. -->
        <!-- <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/</Item> -->
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_AADAppSecret"/>
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
Add a newClaimsProvideras follows:
<ClaimsProvider>
  <Domain>commonaad</Domain>
  <DisplayName>Common AAD</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="AADCommon-OpenIdConnect">
      <DisplayName>Multi-Tenant AAD</DisplayName>
      <Description>Login with your Contoso account</Description>
      <Protocol Name="OpenIdConnect"/>
      <Metadata>
        <Item Key="METADATA">https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration</Item>
        <!-- Update the Client ID below to the Application ID -->
        <Item Key="client_id">00001111-aaaa-2222-bbbb-3333cccc4444</Item>
        <Item Key="response_types">code</Item>
        <Item Key="scope">openid profile</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
        <!-- The key below allows you to specify each of the Azure AD tenants that can be used to sign in. Update the GUIDs below for each tenant. -->
        <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000,https://login.microsoftonline.com/11111111-1111-1111-1111-111111111111</Item>
        <!-- The commented key below specifies that users from any tenant can sign-in. Uncomment if you would like anyone with an Azure AD account to be able to sign in. -->
        <!-- <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/</Item> -->
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_AADAppSecret"/>
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
<ClaimsProvider>
  <Domain>commonaad</Domain>
  <DisplayName>Common AAD</DisplayName>
  <TechnicalProfiles>
    <TechnicalProfile Id="AADCommon-OpenIdConnect">
      <DisplayName>Multi-Tenant AAD</DisplayName>
      <Description>Login with your Contoso account</Description>
      <Protocol Name="OpenIdConnect"/>
      <Metadata>
        <Item Key="METADATA">https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration</Item>
        <!-- Update the Client ID below to the Application ID -->
        <Item Key="client_id">00001111-aaaa-2222-bbbb-3333cccc4444</Item>
        <Item Key="response_types">code</Item>
        <Item Key="scope">openid profile</Item>
        <Item Key="response_mode">form_post</Item>
        <Item Key="HttpBinding">POST</Item>
        <Item Key="UsePolicyInRedirectUri">false</Item>
        <Item Key="DiscoverMetadataByTokenIssuer">true</Item>
        <!-- The key below allows you to specify each of the Azure AD tenants that can be used to sign in. Update the GUIDs below for each tenant. -->
        <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000,https://login.microsoftonline.com/11111111-1111-1111-1111-111111111111</Item>
        <!-- The commented key below specifies that users from any tenant can sign-in. Uncomment if you would like anyone with an Azure AD account to be able to sign in. -->
        <!-- <Item Key="ValidTokenIssuerPrefixes">https://login.microsoftonline.com/</Item> -->
      </Metadata>
      <CryptographicKeys>
        <Key Id="client_secret" StorageReferenceId="B2C_1A_AADAppSecret"/>
      </CryptographicKeys>
      <OutputClaims>
        <OutputClaim ClaimTypeReferenceId="issuerUserId" PartnerClaimType="oid"/>
        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
        <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
        <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
        <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
        <OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="iss" />
      </OutputClaims>
      <OutputClaimsTransformations>
        <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
        <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
        <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
        <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
      </OutputClaimsTransformations>
      <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin"/>
    </TechnicalProfile>
  </TechnicalProfiles>
</ClaimsProvider>
Under theClaimsProviderelement, update the value forDomainto a unique value that can be used to distinguish it from other identity providers.
Under theClaimsProviderelement, update the value forDomainto a unique value that can be used to distinguish it from other identity providers.
Under theTechnicalProfileelement, update the value forDisplayName, for example,Multi-Tenant AAD. This value is displayed on the sign-in button on your sign-in page.
Under theTechnicalProfileelement, update the value forDisplayName, for example,Multi-Tenant AAD. This value is displayed on the sign-in button on your sign-in page.
Multi-Tenant AAD
Setclient_idto the application ID of the Microsoft Entra multitenant application that you registered earlier.
Setclient_idto the application ID of the Microsoft Entra multitenant application that you registered earlier.
UnderCryptographicKeys, update the value ofStorageReferenceIdto the name of the policy key that you created earlier. For example,B2C_1A_AADAppSecret.
UnderCryptographicKeys, update the value ofStorageReferenceIdto the name of the policy key that you created earlier. For example,B2C_1A_AADAppSecret.
B2C_1A_AADAppSecret
Restrict access
Usinghttps://login.microsoftonline.com/as the value forValidTokenIssuerPrefixesallows all Microsoft Entra users to sign in to your application. Update the list of valid token issuers and restrict access to a specific list of Microsoft Entra tenant users who can sign in.
https://login.microsoftonline.com/
To obtain the values, look at the OpenID Connect discovery metadata for each of the Microsoft Entra tenants that you would like to have users sign in from. The format of the metadata URL is similar tohttps://login.microsoftonline.com/your-tenant/v2.0/.well-known/openid-configuration, whereyour-tenantis your Microsoft Entra tenant name. For example:
https://login.microsoftonline.com/your-tenant/v2.0/.well-known/openid-configuration
your-tenant
https://login.microsoftonline.com/fabrikam.onmicrosoft.com/v2.0/.well-known/openid-configuration
https://login.microsoftonline.com/fabrikam.onmicrosoft.com/v2.0/.well-known/openid-configuration
Perform these steps for each Microsoft Entra tenant that should be used to sign in:
Open your browser and go to the OpenID Connect metadata URL for the tenant. Find theissuerobject and record its value. It should look similar tohttps://login.microsoftonline.com/ aaaabbbb-0000-cccc-1111-dddd2222eeee/v2.0.
issuer
https://login.microsoftonline.com/ aaaabbbb-0000-cccc-1111-dddd2222eeee/v2.0
Copy and paste the value into theValidTokenIssuerPrefixeskey. Separate multiple issuers with a comma. An example with two issuers appears in the previousClaimsProviderXML sample.
ClaimsProvider
Add a user journey
At this point, the identity provider has been set up, but it's not yet available in any of the sign-in pages. If you don't have your own custom user journey, create a duplicate of an existing template user journey, otherwise continue to the next step.
Open theTrustFrameworkBase.xmlfile from the starter pack.
Find and copy the entire contents of theUserJourneyelement that includesId="SignUpOrSignIn".
Id="SignUpOrSignIn"
Open theTrustFrameworkExtensions.xmland find theUserJourneyselement. If the element doesn't exist, add one.
Paste the entire content of theUserJourneyelement that you copied as a child of theUserJourneyselement.
Rename the Id of the user journey. For example,Id="CustomSignUpSignIn".
Id="CustomSignUpSignIn"
Add the identity provider to a user journey
Now that you have a user journey, add the new identity provider to the user journey. You first add a sign-in button, then link the button to an action. The action is the technical profile you created earlier.
Find the orchestration step element that includesType="CombinedSignInAndSignUp", orType="ClaimsProviderSelection"in the user journey. It's usually the first orchestration step. TheClaimsProviderSelectionselement contains a list of identity providers that a user can sign in with. The order of the elements controls the order of the sign-in buttons presented to the user. Add aClaimsProviderSelectionXML element. Set the value ofTargetClaimsExchangeIdto a friendly name.
Find the orchestration step element that includesType="CombinedSignInAndSignUp", orType="ClaimsProviderSelection"in the user journey. It's usually the first orchestration step. TheClaimsProviderSelectionselement contains a list of identity providers that a user can sign in with. The order of the elements controls the order of the sign-in buttons presented to the user. Add aClaimsProviderSelectionXML element. Set the value ofTargetClaimsExchangeIdto a friendly name.
Type="CombinedSignInAndSignUp"
Type="ClaimsProviderSelection"
In the next orchestration step, add aClaimsExchangeelement. Set theIdto the value of the target claims exchange Id. Update the value ofTechnicalProfileReferenceIdto the Id of the technical profile you created earlier.
In the next orchestration step, add aClaimsExchangeelement. Set theIdto the value of the target claims exchange Id. Update the value ofTechnicalProfileReferenceIdto the Id of the technical profile you created earlier.
The following XML demonstrates the first two orchestration steps of a user journey with the identity provider:
<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
  <ClaimsProviderSelections>
    ...
    <ClaimsProviderSelection TargetClaimsExchangeId="AzureADCommonExchange" />
  </ClaimsProviderSelections>
  ...
</OrchestrationStep>

<OrchestrationStep Order="2" Type="ClaimsExchange">
  ...
  <ClaimsExchanges>
    <ClaimsExchange Id="AzureADCommonExchange" TechnicalProfileReferenceId="AADCommon-OpenIdConnect" />
  </ClaimsExchanges>
</OrchestrationStep>
<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
  <ClaimsProviderSelections>
    ...
    <ClaimsProviderSelection TargetClaimsExchangeId="AzureADCommonExchange" />
  </ClaimsProviderSelections>
  ...
</OrchestrationStep>

<OrchestrationStep Order="2" Type="ClaimsExchange">
  ...
  <ClaimsExchanges>
    <ClaimsExchange Id="AzureADCommonExchange" TechnicalProfileReferenceId="AADCommon-OpenIdConnect" />
  </ClaimsExchanges>
</OrchestrationStep>
Configure the relying party policy
The relying party policy, for exampleSignUpSignIn.xml, specifies the user journey which Azure AD B2C will execute. Find theDefaultUserJourneyelement withinrelying party. Update theReferenceIdto match the user journey ID, in which you added the identity provider.
In the following example, for theCustomSignUpSignInuser journey, theReferenceIdis set toCustomSignUpSignIn:
CustomSignUpSignIn
CustomSignUpSignIn
<RelyingParty>
  <DefaultUserJourney ReferenceId="CustomSignUpSignIn" />
  ...
</RelyingParty>
<RelyingParty>
  <DefaultUserJourney ReferenceId="CustomSignUpSignIn" />
  ...
</RelyingParty>
Upload the custom policy
Sign in to theAzure portal.
Select theDirectory + Subscriptionicon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.
In the Azure portal, search for and selectAzure AD B2C.
UnderPolicies, selectIdentity Experience Framework.
SelectUpload Custom Policy, and then upload the two policy files that you changed, in the following order: the extension policy, for exampleTrustFrameworkExtensions.xml, then the relying party policy, such asSignUpSignIn.xml.
TrustFrameworkExtensions.xml
SignUpSignIn.xml
Test your custom policy
Select your relying party policy, for exampleB2C_1A_signup_signin.
B2C_1A_signup_signin
ForApplication, select a web application that youpreviously registered. TheReply URLshould showhttps://jwt.ms.
https://jwt.ms
Select theRun nowbutton.
From the sign-up or sign-in page, selectCommon Microsoft Entra IDto sign in with Microsoft Entra account.
To test the multitenant sign-in capability, perform the last two steps using the credentials for a user that exists with another Microsoft Entra tenant. Copy theRun now endpointand open it in a private browser window, for example, Incognito Mode in Google Chrome or an InPrivate window in Microsoft Edge. Opening in a private browser window allows you to test the full user journey by not using any currently cached Microsoft Entra credentials.
If the sign-in process is successful, your browser is redirected tohttps://jwt.ms, which displays the contents of the token returned by Azure AD B2C.
https://jwt.ms
See also
Learn how topass the Microsoft Entra token to your application.
Check out the Microsoft Entra multitenant federationLive demo, and how to pass Microsoft Entra access tokenLive demo
Feedback
Was this page helpful?
Additional resources