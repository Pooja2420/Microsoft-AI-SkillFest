Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Use a NAT gateway with a hub and spoke network
Article
2025-03-06
2 contributors
In this article
A hub and spoke network is one of the building blocks of a highly available multiple location network infrastructure. The most common deployment of a hub and spoke network is done with the intention of routing all inter-spoke and outbound internet traffic through the central hub. The purpose is to inspect all of the traffic traversing the network with a Network Virtual Appliance (NVA) for security scanning and packet inspection.
For outbound traffic to the internet, the network virtual appliance would typically have one network interface with an assigned public IP address. The NVA after inspecting the outbound traffic forwards the traffic out the public interface and to the internet. Azure NAT Gateway eliminates the need for the public IP address assigned to the NVA. Associating a NAT gateway with the public subnet of the NVA changes the routing for the public interface to route all outbound internet traffic through the NAT gateway. The elimination of the public IP address increases security and allows for the scaling of outbound source network address translation (SNAT) with multiple public IP addresses and or public IP prefixes.
Important
The NVA used in this article is for demonstration purposes only and is simulated with an Ubuntu virtual machine. The solution doesn't include a load balancer for high availability of the NVA deployment. Replace the Ubuntu virtual machine in this article with an NVA of your choice. Consult the vendor of the chosen NVA for routing and configuration instructions. A load balancer and availability zones are recommended for a highly available NVA infrastructure.
In this tutorial, you learn how to:
Create a NAT gateway.
Create a hub and spoke virtual network.
Create a simulated Network Virtual Appliance (NVA).
Force all traffic from the spokes through the hub.
Force all internet traffic in the hub and the spokes out the NAT gateway.
Test the NAT gateway and inter-spoke routing.
Prerequisites
Portal
Powershell
CLI
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription. You cancreate an account for free.
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
If you choose to install and use PowerShell locally, this article requires the Azure PowerShell module version 1.0.0 or later. RunGet-Module -ListAvailable Azto find the installed version. If you need to upgrade, seeInstall Azure PowerShell module. If you're running PowerShell locally, you also need to runConnect-AzAccountto create a connection with Azure.
Get-Module -ListAvailable Az
Connect-AzAccount
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.0.28 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.
Create a NAT gateway
All outbound internet traffic traverses the NAT gateway to the internet. Use the following example to create a NAT gateway for the hub and spoke network.
Portal
Powershell
CLI
Sign in to theAzure portal.
Sign in to theAzure portal.
In the search box at the top of the portal, enterNAT gateway. SelectNAT gatewaysin the search results.
In the search box at the top of the portal, enterNAT gateway. SelectNAT gatewaysin the search results.
Select+ Create.
Select+ Create.
In theBasicstab ofCreate network address translation (NAT) gatewayenter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelectCreate new.Entertest-rginName.SelectOK.Instance detailsNAT gateway nameEnternat-gateway.RegionSelectEast US 2.Availability zoneSelect aZoneorNo zone.TCP idle timeout (minutes)Leave the default of4.
In theBasicstab ofCreate network address translation (NAT) gatewayenter or select the following information:
SelectNext: Outbound IP.
SelectNext: Outbound IP.
InOutbound IPinPublic IP addresses, selectCreate a new public IP address.
InOutbound IPinPublic IP addresses, selectCreate a new public IP address.
Enterpublic-ip-natinName.
Enterpublic-ip-natinName.
SelectOK.
SelectOK.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
UseNew-AzResourceGroupto create a resource group.
$rgParams = @{
    Name = "test-rg"
    Location = "eastus2"
}
New-AzResourceGroup @rgParams
$rgParams = @{
    Name = "test-rg"
    Location = "eastus2"
}
New-AzResourceGroup @rgParams
UseNew-AzPublicIpAddressto create a public IP address for the NAT gateway.
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-nat"
    Sku = "Standard"
    AllocationMethod = "Static"
    Location = "eastus2"
    Zone = 1,2,3
}
$publicIp = New-AzPublicIpAddress @publicIpParams
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-nat"
    Sku = "Standard"
    AllocationMethod = "Static"
    Location = "eastus2"
    Zone = 1,2,3
}
$publicIp = New-AzPublicIpAddress @publicIpParams
UseNew-AzNatGatewayto create the NAT gateway.
$natGatewayParams = @{
    ResourceGroupName = "test-rg"
    Name = "nat-gateway"
    PublicIpAddress = $publicIp
    Sku = 'Standard'
    IdleTimeoutInMinutes = 4
    Location = "eastus2"
}
New-AzNatGateway @natGatewayParams
$natGatewayParams = @{
    ResourceGroupName = "test-rg"
    Name = "nat-gateway"
    PublicIpAddress = $publicIp
    Sku = 'Standard'
    IdleTimeoutInMinutes = 4
    Location = "eastus2"
}
New-AzNatGateway @natGatewayParams
Useaz group createto create a resource group.
az group create \
    --name test-rg \
    --location eastus2
az group create \
    --name test-rg \
    --location eastus2
Useaz network public-ip createto create a public IP address for the NAT gateway.
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-nat \
    --sku Standard \
    --allocation-method Static \
    --zone 1 2 3
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-nat \
    --sku Standard \
    --allocation-method Static \
    --zone 1 2 3
Useaz network nat gateway createto create the NAT gateway.
az network nat gateway create \
    --resource-group test-rg \
    --name nat-gateway \
    --public-ip-addresses public-ip-nat \
    --idle-timeout 4 \
    --location eastus2
az network nat gateway create \
    --resource-group test-rg \
    --name nat-gateway \
    --public-ip-addresses public-ip-nat \
    --idle-timeout 4 \
    --location eastus2
Create hub virtual network
The hub virtual network is the central network of the solution. The hub network contains the NVA appliance and a public and private subnet. The NAT gateway is assigned to the public subnet during the creation of the virtual network. An Azure Bastion host is configured as part of the following example. The bastion host is used to securely connect to the NVA virtual machine and the test virtual machines deployed in the spokes later in the article.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Select+ Create.
Select+ Create.
In theBasicstab ofCreate virtual network, enter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsNameEntervnet-hub.RegionSelectEast US 2.
In theBasicstab ofCreate virtual network, enter or select the following information:
SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theSecuritytab.
SelectEnable Azure Bastionin theAzure Bastionsection of theSecuritytab.Azure Bastion uses your browser to connect to VMs in your virtual network over secure shell (SSH) or remote desktop protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information about Azure Bastion, seeAzure BastionNoteHourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
SelectEnable Azure Bastionin theAzure Bastionsection of theSecuritytab.
Azure Bastion uses your browser to connect to VMs in your virtual network over secure shell (SSH) or remote desktop protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information about Azure Bastion, seeAzure Bastion
Note
Hourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
Enter or select the following information inAzure Bastion:SettingValueAzure Bastion host nameEnterbastion.Azure Bastion public IP addressSelectCreate a public IP address.Enterpublic-ip-bastionin Name.SelectOK.
Enter or select the following information inAzure Bastion:
SelectNextto proceed to theIP Addressestab.
SelectNextto proceed to theIP Addressestab.
In the address space box inSubnets, select thedefaultsubnet.
In the address space box inSubnets, select thedefaultsubnet.
InEdit subnet, enter or select the following information:SettingValueSubnet purposeLeave the defaultDefault.NameEntersubnet-private.IPv4IPv4 address rangeLeave the default of10.0.0.0/16.Starting addressLeave the default of10.0.0.0.SizeLeave the default of/24(256 addresses).
InEdit subnet, enter or select the following information:
SelectSave.
SelectSave.
Select+ Add a subnet.
Select+ Add a subnet.
InAdd subnet, enter or select the following information:SettingValueSubnet purposeLeave the defaultDefault.NameEntersubnet-public.IPv4IPv4 address rangeLeave the default of10.0.0.0/16.Starting addressEnter10.0.253.0.SizeSelect/28(16 addresses).SecurityNAT gatewaySelectnat-gateway.
InAdd subnet, enter or select the following information:
SelectAdd.
SelectAdd.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
It takes a few minutes for the bastion host to deploy. When the virtual network is created as part of the deployment, you can proceed to the next steps.
UseNew-AzVirtualNetworkSubnetConfigto create the subnets.
$subnetPrivateParams = @{
    Name = "subnet-private"
    AddressPrefix = "10.0.0.0/24"
}
$privateSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetPrivateParams

$subnetBastionParams = @{
    Name = "AzureBastionSubnet"
    AddressPrefix = "10.0.1.0/26"
}
$bastionSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetBastionParams

$subnetPublicParams = @{
    Name = "subnet-public"
    AddressPrefix = "10.0.253.0/28"
    NatGateway = (Get-AzNatGateway -ResourceGroupName "test-rg" -Name "nat-gateway")
}
$publicSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetPublicParams
$subnetPrivateParams = @{
    Name = "subnet-private"
    AddressPrefix = "10.0.0.0/24"
}
$privateSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetPrivateParams

$subnetBastionParams = @{
    Name = "AzureBastionSubnet"
    AddressPrefix = "10.0.1.0/26"
}
$bastionSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetBastionParams

$subnetPublicParams = @{
    Name = "subnet-public"
    AddressPrefix = "10.0.253.0/28"
    NatGateway = (Get-AzNatGateway -ResourceGroupName "test-rg" -Name "nat-gateway")
}
$publicSubnetConfig = New-AzVirtualNetworkSubnetConfig @subnetPublicParams
UseNew-AzVirtualNetworkto create the virtual network.
$vNetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
    AddressPrefix = "10.0.0.0/16"
    Location = "eastus2"
    Subnet = $privateSubnetConfig, $bastionSubnetConfig, $publicSubnetConfig
}
$vNet = New-AzVirtualNetwork @vNetParams
$vNetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
    AddressPrefix = "10.0.0.0/16"
    Location = "eastus2"
    Subnet = $privateSubnetConfig, $bastionSubnetConfig, $publicSubnetConfig
}
$vNet = New-AzVirtualNetwork @vNetParams
UseNew-AzPublicIpAddressto create a public IP address for the Azure Bastion host.
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-bastion"
    Sku = "Standard"
    AllocationMethod = "Static"
    Location = "eastus2"
    Zone = 1,2,3
}
New-AzPublicIpAddress @publicIpParams
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-bastion"
    Sku = "Standard"
    AllocationMethod = "Static"
    Location = "eastus2"
    Zone = 1,2,3
}
New-AzPublicIpAddress @publicIpParams
UseNew-AzBastionto create the Azure Bastion host.
$bastionParams = @{
    ResourceGroupName = "test-rg"
    Name = "bastion"
    VirtualNetworkName = "vnet-hub"
    PublicIpAddressName = "public-ip-bastion"
    PublicIPAddressRgName = "test-rg"
    VirtualNetworkRgName = "test-rg"
}
New-AzBastion @bastionParams
$bastionParams = @{
    ResourceGroupName = "test-rg"
    Name = "bastion"
    VirtualNetworkName = "vnet-hub"
    PublicIpAddressName = "public-ip-bastion"
    PublicIPAddressRgName = "test-rg"
    VirtualNetworkRgName = "test-rg"
}
New-AzBastion @bastionParams
Useaz network vnet createto create the virtual network.
az network vnet create \
    --resource-group test-rg \
    --name vnet-hub \
    --address-prefix 10.0.0.0/16 \
    --location eastus2
az network vnet create \
    --resource-group test-rg \
    --name vnet-hub \
    --address-prefix 10.0.0.0/16 \
    --location eastus2
Useaz network vnet subnet createto create the subnets.
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-private \
    --address-prefix 10.0.0.0/24

az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name AzureBastionSubnet \
    --address-prefix 10.0.1.0/26

az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-public \
    --address-prefix 10.0.253.0/28 \
    --nat-gateway nat-gateway
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-private \
    --address-prefix 10.0.0.0/24

az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name AzureBastionSubnet \
    --address-prefix 10.0.1.0/26

az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-public \
    --address-prefix 10.0.253.0/28 \
    --nat-gateway nat-gateway
Useaz network public-ip createto create a public IP address for the Azure Bastion host.
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-bastion \
    --sku Standard \
    --allocation-method Static \
    --zone 1 2 3
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-bastion \
    --sku Standard \
    --allocation-method Static \
    --zone 1 2 3
Useaz network bastion createto create the Azure Bastion host.
az network bastion create \
    --resource-group test-rg \
    --name bastion \
    --vnet-name vnet-hub \
    --public-ip-address public-ip-bastion \
    --location eastus2
az network bastion create \
    --resource-group test-rg \
    --name bastion \
    --vnet-name vnet-hub \
    --public-ip-address public-ip-bastion \
    --location eastus2
Create simulated NVA virtual machine
The simulated NVA acts as a virtual appliance to route all traffic between the spokes and hub and traffic outbound to the internet. An Ubuntu virtual machine is used for the simulated NVA. Use the following example to create the simulated NVA and configure the network interfaces.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Select+ CreatethenAzure virtual machine.
Select+ CreatethenAzure virtual machine.
InCreate a virtual machineenter or select the following information in theBasicstab:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsVirtual machine nameEntervm-nva.RegionSelect(US) East US 2.Availability optionsSelectNo infrastructure redundancy required.Security typeSelectStandard.ImageSelectUbuntu Server 24.04 LTS - x64 Gen2.VM architectureLeave the default ofx64.SizeSelect a size.Administrator accountAuthentication typeSelectSSH public key.UsernameEnter a username.SSH public key sourceSelectGenerate new key pair.SSH Key TypeLeave the default ofRSA SSH Format.Key pair nameEnterssh-key.Inbound port rulesPublic inbound portsSelectNone.
InCreate a virtual machineenter or select the following information in theBasicstab:
SelectNext: DisksthenNext: Networking.
SelectNext: DisksthenNext: Networking.
In the Networking tab, enter or select the following information:SettingValueNetwork interfaceVirtual networkSelectvnet-hub.SubnetSelectsubnet-public (10.0.253.0/28).Public IPSelectNone.NIC network security groupSelectAdvanced.Configure network security groupSelectCreate new.InNameenternsg-nva.SelectOK.
In the Networking tab, enter or select the following information:
Leave the rest of the options at the defaults and selectReview + create.
Leave the rest of the options at the defaults and selectReview + create.
SelectCreate.
SelectCreate.
TheGenerate new key pairdialog box appears. SelectDownload private key and create resource.
TheGenerate new key pairdialog box appears. SelectDownload private key and create resource.
The private key will download to your local machine. The private key is needed in later steps for connecting to the virtual machine with Azure Bastion. The name of the private key file is the name you entered in theKey pair namefield. In this example, the private key file is namedssh-key.
UseNew-AzNetworkSecurityGroupto create the network security group.
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-nva"
    Location = "eastus2"
}
New-AzNetworkSecurityGroup @nsgParams
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-nva"
    Location = "eastus2"
}
New-AzNetworkSecurityGroup @nsgParams
UseNew-AzNetworkInterfaceto create the network interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-hub").Subnets[1].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-nva").Id
    Location = "eastus2"
}
New-AzNetworkInterface @nicParams
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-hub").Subnets[1].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-nva").Id
    Location = "eastus2"
}
New-AzNetworkInterface @nicParams
UseGet-Credentialto set a user name and password for the VM and store them in the$credvariable.
$cred
$cred = Get-Credential
$cred = Get-Credential
Note
A username is required for the VM. The password is optional and won't be used if set. SSH key configuration is recommended for Linux VMs.
UseNew-AzVMConfigto define a VM.
$vmConfigParams = @{
    VMName = "vm-nva"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
$vmConfigParams = @{
    VMName = "vm-nva"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
UseSet-AzVMOperatingSystemandSet-AzVMSourceImageto create the rest of the VM configuration. The following example creates an Ubuntu Server virtual machine:
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-nva"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Linux -DisablePasswordAuthentication

$imageParams = @{
    VM = $vmConfig
    PublisherName = "Canonical"
    Offer = "ubuntu-24_04-lts"
    Skus = "server"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-nva"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Linux -DisablePasswordAuthentication

$imageParams = @{
    VM = $vmConfig
    PublisherName = "Canonical"
    Offer = "ubuntu-24_04-lts"
    Skus = "server"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
UseAdd-AzVMNetworkInterfaceto attach the NIC that you previously created to the VM.
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
UseNew-AzVMto create the VM. The command will generate SSH keys for the virtual machine for login. Make note of the location of the private key. The private key is needed in later steps for connecting to the virtual machine with Azure Bastion.
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "eastus2"
    SshKeyName = "ssh-key"
    }
New-AzVM @vmParams -GenerateSshKey
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "eastus2"
    SshKeyName = "ssh-key"
    }
New-AzVM @vmParams -GenerateSshKey
Useaz network nsg createto create the network security group.
az network nsg create \
    --resource-group test-rg \
    --name nsg-nva \
    --location eastus2
az network nsg create \
    --resource-group test-rg \
    --name nsg-nva \
    --location eastus2
Useaz network nic createto create the network interface.
az network nic create \
    --resource-group test-rg \
    --name nic-public \
    --vnet-name vnet-hub \
    --subnet subnet-public \
    --network-security-group nsg-nva
az network nic create \
    --resource-group test-rg \
    --name nic-public \
    --vnet-name vnet-hub \
    --subnet subnet-public \
    --network-security-group nsg-nva
Useaz vm createto create the virtual machine. The command will generate SSH keys for the virtual machine for login. Make note of the location of the private key. The private key is needed in later steps for connecting to the virtual machine with Azure Bastion.
az vm create \
   --resource-group test-rg \
   --name vm-nva \
   --image Ubuntu2204 \
   --size Standard_DS4_v2\
   --admin-username azureuser \
   --generate-ssh-keys \
   --nics nic-public
az vm create \
   --resource-group test-rg \
   --name vm-nva \
   --image Ubuntu2204 \
   --size Standard_DS4_v2\
   --admin-username azureuser \
   --generate-ssh-keys \
   --nics nic-public
Configure virtual machine network interfaces
The IP configuration of the primary network interface of the virtual machine is set to dynamic by default. Use the following example to change the primary network interface IP configuration to static and add a secondary network interface for the private interface of the NVA.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-nva.
Selectvm-nva.
In theOverviewselectStopif the virtual machine is running.
In theOverviewselectStopif the virtual machine is running.
ExpandNetworkingthen selectNetwork settings.
ExpandNetworkingthen selectNetwork settings.
InNetwork settingsselect the network interface name next toNetwork Interface:. The interface name is the virtual machine name and random numbers and letters. In this example, the interface name isvm-nva271.
InNetwork settingsselect the network interface name next toNetwork Interface:. The interface name is the virtual machine name and random numbers and letters. In this example, the interface name isvm-nva271.
In the network interface properties, selectIP configurationsinSettings.
In the network interface properties, selectIP configurationsinSettings.
Select the box next toEnable IP forwarding.
Select the box next toEnable IP forwarding.
SelectApply.
SelectApply.
When the apply action completes, selectipconfig1.
When the apply action completes, selectipconfig1.
InPrivate IP address settingsinipconfig1selectStatic.
InPrivate IP address settingsinipconfig1selectStatic.
InPrivate IP addressenter10.0.253.10.
InPrivate IP addressenter10.0.253.10.
SelectSave.
SelectSave.
When the save action completes, return to the networking configuration forvm-nva.
When the save action completes, return to the networking configuration forvm-nva.
InNetwork settingsofvm-nvaselectAttach network interface.
InNetwork settingsofvm-nvaselectAttach network interface.
SelectCreate and attach network interface.
SelectCreate and attach network interface.
InCreate network interfaceenter or select the following information:SettingValueProject detailsResource groupSelecttest-rg.Network interfaceNameEnternic-private.SubnetSelectsubnet-private (10.0.0.0/24).NIC network security groupSelectAdvanced.Configure network security groupSelectnsg-nva.Private IP address assignmentSelectStatic.Private IP addressEnter10.0.0.10.
InCreate network interfaceenter or select the following information:
SelectCreate.
SelectCreate.
Start the virtual machine.
Start the virtual machine.
UseSet-AzNetworkInterfaceto enable IP forwarding on the primary network interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams
$nic.EnableIPForwarding = $true
Set-AzNetworkInterface -NetworkInterface $nic
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams
$nic.EnableIPForwarding = $true
Set-AzNetworkInterface -NetworkInterface $nic
UseSet-AzNetworkInterfaceIpConfigto statically set the private IP address of the virtual machine for the public interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams
$nic.IpConfigurations[0].PrivateIpAllocationMethod = "Static"
$nic.IpConfigurations[0].PrivateIpAddress = "10.0.253.10"
Set-AzNetworkInterface -NetworkInterface $nic
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams
$nic.IpConfigurations[0].PrivateIpAllocationMethod = "Static"
$nic.IpConfigurations[0].PrivateIpAddress = "10.0.253.10"
Set-AzNetworkInterface -NetworkInterface $nic
UseUpdate-AzVMto designate thenic-publicinterface as the primary interface.
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
$vm = Get-AzVM @vmParams

$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams

$vm.NetworkProfile.NetworkInterfaces | ForEach-Object {
    $_.Primary = $false
}
$vm.NetworkProfile.NetworkInterfaces | Where-Object { $_.Id -eq $nic.Id } | ForEach-Object {
    $_.Primary = $true
}

$updateParams = @{
    ResourceGroupName = "test-rg"
    VM = $vm
}
Update-AzVM @updateParams
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
$vm = Get-AzVM @vmParams

$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-public"
}
$nic = Get-AzNetworkInterface @nicParams

$vm.NetworkProfile.NetworkInterfaces | ForEach-Object {
    $_.Primary = $false
}
$vm.NetworkProfile.NetworkInterfaces | Where-Object { $_.Id -eq $nic.Id } | ForEach-Object {
    $_.Primary = $true
}

$updateParams = @{
    ResourceGroupName = "test-rg"
    VM = $vm
}
Update-AzVM @updateParams
UseNew-AzNetworkInterfaceto create the secondary network interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-private"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-hub").Subnets[0].Id
    PrivateIpAddress = "10.0.0.10"
    Location = "eastus2"
}
New-AzNetworkInterface @nicParams
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-private"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-hub").Subnets[0].Id
    PrivateIpAddress = "10.0.0.10"
    Location = "eastus2"
}
New-AzNetworkInterface @nicParams
UseStop-AzVMto shutdown and deallocate the virtual machine.
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
    Force = $true
}
Stop-AzVM @vmParams
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
    Force = $true
}
Stop-AzVM @vmParams
UseAdd-AzVMNetworkInterfaceto attach the secondary network interface to the virtual machine.
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
$vm = Get-AzVM @vmParams

$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-private"
}
$nic = Get-AzNetworkInterface @nicParams

$vm = Add-AzVMNetworkInterface -VM $vm -Id $nic.Id

$updateParams = @{
    ResourceGroupName = "test-rg"
    VM = $vm
}
Update-AzVM @updateParams
$vmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
$vm = Get-AzVM @vmParams

$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-private"
}
$nic = Get-AzNetworkInterface @nicParams

$vm = Add-AzVMNetworkInterface -VM $vm -Id $nic.Id

$updateParams = @{
    ResourceGroupName = "test-rg"
    VM = $vm
}
Update-AzVM @updateParams
UseStart-AzVMto start the virtual machine.
$startVmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
Start-AzVM @startVmParams
$startVmParams = @{
    ResourceGroupName = "test-rg"
    Name = "vm-nva"
}
Start-AzVM @startVmParams
Useaz network nic updateto enable IP forwarding on the primary network interface.
az network nic update \
    --resource-group test-rg \
    --name nic-public \
    --ip-forwarding true
az network nic update \
    --resource-group test-rg \
    --name nic-public \
    --ip-forwarding true
Useaz network nic ip-config updateto statically set the private IP address of the virtual machine.
az network nic ip-config update \
    --resource-group test-rg \
    --nic-name nic-public \
    --name ipconfig1 \
    --private-ip-address 10.0.253.10 \
    --private-ip-address-version IPv4
az network nic ip-config update \
    --resource-group test-rg \
    --nic-name nic-public \
    --name ipconfig1 \
    --private-ip-address 10.0.253.10 \
    --private-ip-address-version IPv4
Useaz network nic createto create the secondary network interface.
az network nic create \
    --resource-group test-rg \
    --name nic-private \
    --vnet-name vnet-hub \
    --subnet subnet-private \
    --private-ip-address 10.0.0.10
az network nic create \
    --resource-group test-rg \
    --name nic-private \
    --vnet-name vnet-hub \
    --subnet subnet-private \
    --private-ip-address 10.0.0.10
Useaz vm deallocateto shutdown and deallocate the virtual machine.
az vm deallocate \
    --resource-group test-rg \
    --name vm-nva
az vm deallocate \
    --resource-group test-rg \
    --name vm-nva
Useaz vm nic addto attach the secondary network interface to the virtual machine.
az vm nic add \
    --resource-group test-rg \
    --vm-name vm-nva \
    --nics nic-private
az vm nic add \
    --resource-group test-rg \
    --vm-name vm-nva \
    --nics nic-private
Useaz vm startto start the virtual machine.
az vm start \
    --resource-group test-rg \
    --name vm-nva
az vm start \
    --resource-group test-rg \
    --name vm-nva
Configure virtual machine software
The routing for the simulated NVA uses IP tables and internal NAT in the Ubuntu virtual machine. Connect to the NVA virtual machine with Azure Bastion to configure IP tables and the routing configuration.
In theAzure portal, search for and selectvirtual machines.
In theAzure portal, search for and selectvirtual machines.
On theVirtual machinespage, selectvm-nva.
On theVirtual machinespage, selectvm-nva.
On the VM'sOverviewpage, selectConnectthenConnect via Bastion.
On the VM'sOverviewpage, selectConnectthenConnect via Bastion.
In the Bastion connection screen, changeAuthentication TypetoSSH Private Key from Local File.
In the Bastion connection screen, changeAuthentication TypetoSSH Private Key from Local File.
Enter theUsernamethat you used when creating the virtual machine. In this example, the user is namedazureuser, replace with the username you created.
Enter theUsernamethat you used when creating the virtual machine. In this example, the user is namedazureuser, replace with the username you created.
InLocal File, select the folder icon and browse to the private key file that was generated when you created the VM. The private key file is typically namedid_rsaorid_rsa.pemorssh-key.pem.
InLocal File, select the folder icon and browse to the private key file that was generated when you created the VM. The private key file is typically namedid_rsaorid_rsa.pemorssh-key.pem.
id_rsa
id_rsa.pem
ssh-key.pem
SelectConnect.
SelectConnect.
Enter the following information at the prompt of the virtual machine to enable IP forwarding:sudo nano /etc/sysctl.conf
Enter the following information at the prompt of the virtual machine to enable IP forwarding:
sudo nano /etc/sysctl.conf
sudo nano /etc/sysctl.conf
In the Nano editor, remove the#from the linenet.ipv4.ip_forward=1:# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1PressCtrl + Oto save the file.PressCtrl + Xto exit the editor.
In the Nano editor, remove the#from the linenet.ipv4.ip_forward=1:
#
net.ipv4.ip_forward=1
# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1
# Uncomment the next line to enable packet forwarding for IPv4
net.ipv4.ip_forward=1
PressCtrl + Oto save the file.
PressCtrl + Xto exit the editor.
Enter the following information to enable internal NAT in the virtual machine:sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo apt-get update
sudo apt install iptables-persistentSelectYestwice.sudo su
iptables-save > /etc/iptables/rules.v4
exit
Enter the following information to enable internal NAT in the virtual machine:
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo apt-get update
sudo apt install iptables-persistent
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo apt-get update
sudo apt install iptables-persistent
SelectYestwice.
sudo su
iptables-save > /etc/iptables/rules.v4
exit
sudo su
iptables-save > /etc/iptables/rules.v4
exit
Use Nano to edit the configuration with the following information:sudo nano /etc/rc.localAdd the following line to the configuration file:/sbin/iptables-restore < /etc/iptables/rules.v4PressCtrl + Oto save the file.PressCtrl + Xto exit the editor.
Use Nano to edit the configuration with the following information:
sudo nano /etc/rc.local
sudo nano /etc/rc.local
Add the following line to the configuration file:
/sbin/iptables-restore < /etc/iptables/rules.v4
/sbin/iptables-restore < /etc/iptables/rules.v4
PressCtrl + Oto save the file.
PressCtrl + Xto exit the editor.
Reboot the virtual machine:sudo reboot
Reboot the virtual machine:
sudo reboot
sudo reboot
Create hub network route table
Route tables are used to overwrite Azure's default routing. Create a route table to force all traffic within the hub private subnet through the simulated NVA.
Portal
Powershell
CLI
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Select+ Create.
Select+ Create.
InCreate Route tableenter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsRegionSelectEast US 2.NameEnterroute-table-nat-hub.Propagate gateway routesLeave the default ofYes.
InCreate Route tableenter or select the following information:
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Selectroute-table-nat-hub.
Selectroute-table-nat-hub.
ExpandSettingsthen selectRoutes.
ExpandSettingsthen selectRoutes.
Select+ AddinRoutes.
Select+ AddinRoutes.
Enter or select the following information inAdd route:SettingValueRoute nameEnterdefault-via-nat-hub.Destination typeSelectIP Addresses.Destination IP addresses/CIDR rangesEnter0.0.0.0/0.Next hop typeSelectVirtual appliance.Next hop addressEnter10.0.0.10.This is the IP address you added to the private interface of the NVA in the previous steps..
Enter or select the following information inAdd route:
SelectAdd.
SelectAdd.
SelectSubnetsinSettings.
SelectSubnetsinSettings.
Select+ Associate.
Select+ Associate.
Enter or select the following information inAssociate subnet:SettingValueVirtual networkSelectvnet-hub (test-rg).SubnetSelectsubnet-private.
Enter or select the following information inAssociate subnet:
SelectOK.
SelectOK.
UseNew-AzRouteTableto create the route table.
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-hub"
    Location = "eastus2"
}
New-AzRouteTable @routeTableParams
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-hub"
    Location = "eastus2"
}
New-AzRouteTable @routeTableParams
UseAdd-AzRouteConfigto create the route in the route table.
$routeConfigParams = @{
    Name = "default-via-nat-hub"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-hub"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeConfigParams | Set-AzRouteTable
$routeConfigParams = @{
    Name = "default-via-nat-hub"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-hub"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeConfigParams | Set-AzRouteTable
UseSet-AzVirtualNetworkSubnetConfigto associate the route table with the subnet.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
Useaz network route-table createto create the route table.
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-hub \
    --location eastus2
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-hub \
    --location eastus2
Useaz network route-table route createto create the route in the route table.
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-hub \
    --name default-via-nat-hub \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-hub \
    --name default-via-nat-hub \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
Useaz network vnet subnet updateto associate the route table with the subnet.
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-private \
    --route-table route-table-nat-hub
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --name subnet-private \
    --route-table route-table-nat-hub
Create spoke one virtual network
Create another virtual network in a different region for the first spoke of the hub and spoke network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Select+ Create.
Select+ Create.
In theBasicstab ofCreate virtual network, enter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsNameEntervnet-spoke-1.RegionSelect(US) South Central US.
In theBasicstab ofCreate virtual network, enter or select the following information:
SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theIP addressestab.
SelectNextto proceed to theIP addressestab.
In theIP Addressestab inIPv4 address space, selectDelete address spaceto delete the address space that is auto populated.
In theIP Addressestab inIPv4 address space, selectDelete address spaceto delete the address space that is auto populated.
SelectAdd IPv4 address space.
SelectAdd IPv4 address space.
InIPv4 address spaceenter10.1.0.0. Leave the default of/16 (65,536 addresses)in the mask selection.
InIPv4 address spaceenter10.1.0.0. Leave the default of/16 (65,536 addresses)in the mask selection.
Select+ Add a subnet.
Select+ Add a subnet.
InAdd a subnetenter or select the following information:SettingValueSubnet purposeLeave the defaultDefault.NameEntersubnet-private.IPv4IPv4 address rangeLeave the default of10.1.0.0/16.Starting addressLeave the default of10.1.0.0.SizeLeave the default of/24(256 addresses).
InAdd a subnetenter or select the following information:
SelectAdd.
SelectAdd.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
UseNew-AzVirtualNetworkto create the virtual network.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
    AddressPrefix = "10.1.0.0/16"
    Location = "southcentralus"
}
New-AzVirtualNetwork @vnetParams
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
    AddressPrefix = "10.1.0.0/16"
    Location = "southcentralus"
}
New-AzVirtualNetwork @vnetParams
UseAdd-AzVirtualNetworkSubnetConfigto create the subnet.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
    AddressPrefix = "10.1.0.0/24"
}
Add-AzVirtualNetworkSubnetConfig @subnetParams

Set-AzVirtualNetwork -VirtualNetwork $vnet
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
    AddressPrefix = "10.1.0.0/24"
}
Add-AzVirtualNetworkSubnetConfig @subnetParams

Set-AzVirtualNetwork -VirtualNetwork $vnet
Useaz network vnet createto create the virtual network.
az network vnet create \
    --resource-group test-rg \
    --name vnet-spoke-1 \
    --address-prefix 10.1.0.0/16 \
    --location southcentralus
az network vnet create \
    --resource-group test-rg \
    --name vnet-spoke-1 \
    --address-prefix 10.1.0.0/16 \
    --location southcentralus
Useaz network vnet subnet createto create the subnet.
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --name subnet-private \
    --address-prefix 10.1.0.0/24
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --name subnet-private \
    --address-prefix 10.1.0.0/24
Create peering between hub and spoke one
A virtual network peering is used to connect the hub to spoke one and spoke one to the hub. Use the following example to create a two-way network peering between the hub and spoke one.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Selectvnet-hub.
Selectvnet-hub.
ExpandSettings, then selectPeerings.
ExpandSettings, then selectPeerings.
Select+ Add.
Select+ Add.
Enter or select the following information inAdd peering:SettingValueRemote virtual network summaryPeering link nameEntervnet-spoke-1-to-vnet-hub.Virtual network deployment modelLeave the default ofResource manager.SubscriptionSelect your subscription.Virtual networkSelectvnet-spoke-1 (test-rg).Remote virtual network peering settingsAllow 'vnet-spoke-1' to access 'vnet-hub'Leave the default ofSelected.Allow 'vnet-spoke-1' to receive forwarded traffic from 'vnet-hub'Select the checkbox.Allow gateway or route server in 'vnet-spoke-1' to forward traffic to 'vnet-hub'Leave the default ofUnselected.Enable 'vnet-spoke-1' to use 'vnet-hub's' remote gateway or route serverLeave the default ofUnselected.Local virtual network summaryPeering link nameEntervnet-hub-to-vnet-spoke-1.Local virtual network peering settingsAllow 'vnet-hub' to access 'vnet-spoke-1'Leave the default ofSelected.Allow 'vnet-hub' to receive forwarded traffic from 'vnet-spoke-1'Select the checkbox.Allow gateway or route server in 'vnet-hub' to forward traffic to 'vnet-spoke-1'Leave the default ofUnselected.Enable 'vnet-hub' to use 'vnet-spoke-1's' remote gateway or route serverLeave the default ofUnselected.
Enter or select the following information inAdd peering:
SelectAdd.
SelectAdd.
SelectRefreshand verifyPeering statusisConnected.
SelectRefreshand verifyPeering statusisConnected.
UseAdd-AzVirtualNetworkPeeringto create the peering from the hub to spoke one.
# Create peering from hub to spoke one
$hubVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$hubVnet = Get-AzVirtualNetwork @hubVnetParams

$spokeVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$spokeVnet = Get-AzVirtualNetwork @spokeVnetParams

$hubToSpokeParams = @{
    Name = "vnet-hub-to-vnet-spoke-1"
    VirtualNetwork = $hubVnet
    RemoteVirtualNetworkId = $spokeVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @hubToSpokeParams

# Create peering from spoke one to hub
$spokeToHubParams = @{
    Name = "vnet-spoke-1-to-vnet-hub"
    VirtualNetwork = $spokeVnet
    RemoteVirtualNetworkId = $hubVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @spokeToHubParams
# Create peering from hub to spoke one
$hubVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$hubVnet = Get-AzVirtualNetwork @hubVnetParams

$spokeVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$spokeVnet = Get-AzVirtualNetwork @spokeVnetParams

$hubToSpokeParams = @{
    Name = "vnet-hub-to-vnet-spoke-1"
    VirtualNetwork = $hubVnet
    RemoteVirtualNetworkId = $spokeVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @hubToSpokeParams

# Create peering from spoke one to hub
$spokeToHubParams = @{
    Name = "vnet-spoke-1-to-vnet-hub"
    VirtualNetwork = $spokeVnet
    RemoteVirtualNetworkId = $hubVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @spokeToHubParams
Useaz network vnet peering createto create the peering from the hub to spoke one.
# Create peering from hub to spoke one
az network vnet peering create \
    --name vnet-hub-to-vnet-spoke-1 \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --remote-vnet vnet-spoke-1 \
    --allow-vnet-access \
    --allow-forwarded-traffic

# Create peering from spoke one to hub
az network vnet peering create \
    --name vnet-spoke-1-to-vnet-hub \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --remote-vnet vnet-hub \
    --allow-vnet-access \
    --allow-forwarded-traffic
# Create peering from hub to spoke one
az network vnet peering create \
    --name vnet-hub-to-vnet-spoke-1 \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --remote-vnet vnet-spoke-1 \
    --allow-vnet-access \
    --allow-forwarded-traffic

# Create peering from spoke one to hub
az network vnet peering create \
    --name vnet-spoke-1-to-vnet-hub \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --remote-vnet vnet-hub \
    --allow-vnet-access \
    --allow-forwarded-traffic
Create spoke one network route table
Create a route table to force all inter-spoke and internet egress traffic through the simulated NVA in the hub virtual network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Select+ Create.
Select+ Create.
InCreate Route tableenter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsRegionSelectSouth Central US.NameEnterroute-table-nat-spoke-1.Propagate gateway routesLeave the default ofYes.
InCreate Route tableenter or select the following information:
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Selectroute-table-nat-spoke-1.
Selectroute-table-nat-spoke-1.
ExpandSettings, then selectRoutes.
ExpandSettings, then selectRoutes.
Select+ AddinRoutes.
Select+ AddinRoutes.
Enter or select the following information inAdd route:SettingValueRoute nameEnterdefault-via-nat-spoke-1.Destination typeSelectIP Addresses.Destination IP addresses/CIDR rangesEnter0.0.0.0/0.Next hop typeSelectVirtual appliance.Next hop addressEnter10.0.0.10.This is the IP address you added to the private interface of the NVA in the previous steps..
Enter or select the following information inAdd route:
SelectAdd.
SelectAdd.
SelectSubnetsinSettings.
SelectSubnetsinSettings.
Select+ Associate.
Select+ Associate.
Enter or select the following information inAssociate subnet:SettingValueVirtual networkSelectvnet-spoke-1 (test-rg).SubnetSelectsubnet-private.
Enter or select the following information inAssociate subnet:
SelectOK.
SelectOK.
UseNew-AzRouteTableto create the route table.
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-1"
    Location = "southcentralus"
}
New-AzRouteTable @routeTableParams
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-1"
    Location = "southcentralus"
}
New-AzRouteTable @routeTableParams
UseAdd-AzRouteConfigto create the route in the route table.
$routeConfigParams = @{
    Name = "default-via-nat-spoke-1"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-1"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeConfigParams | Set-AzRouteTable
$routeConfigParams = @{
    Name = "default-via-nat-spoke-1"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-1"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeConfigParams | Set-AzRouteTable
UseSet-AzVirtualNetworkSubnetConfigto associate the route table with the subnet.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-1"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
Useaz network route-table createto create the route table.
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-spoke-1 \
    --location southcentralus
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-spoke-1 \
    --location southcentralus
Useaz network route-table route createto create the route in the route table.
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-spoke-1 \
    --name default-via-nat-spoke-1 \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-spoke-1 \
    --name default-via-nat-spoke-1 \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
Useaz network vnet subnet updateto associate the route table with the subnet.
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --name subnet-private \
    --route-table route-table-nat-spoke-1
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-spoke-1 \
    --name subnet-private \
    --route-table route-table-nat-spoke-1
Create spoke one test virtual machine
A Windows Server 2022 virtual machine is used to test the outbound internet traffic through the NAT gateway and inter-spoke traffic in the hub and spoke network. Use the following example to create a Windows Server 2022 virtual machine.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Select+ CreatethenAzure virtual machine.
Select+ CreatethenAzure virtual machine.
InCreate a virtual machineenter or select the following information in theBasicstab:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsVirtual machine nameEntervm-spoke-1.RegionSelect(US) South Central US.Availability optionsSelectNo infrastructure redundancy required.Security typeSelectStandard.ImageSelectWindows Server 2022 Datacenter - x64 Gen2.VM architectureLeave the default ofx64.SizeSelect a size.Administrator accountAuthentication typeSelectPassword.UsernameEnter a username.PasswordEnter a password.Confirm passwordReenter password.Inbound port rulesPublic inbound portsSelectNone.
InCreate a virtual machineenter or select the following information in theBasicstab:
SelectNext: DisksthenNext: Networking.
SelectNext: DisksthenNext: Networking.
In the Networking tab, enter or select the following information:SettingValueNetwork interfaceVirtual networkSelectvnet-spoke-1.SubnetSelectsubnet-private (10.1.0.0/24).Public IPSelectNone.NIC network security groupSelectAdvanced.Configure network security groupSelectCreate new.Enternsg-spoke-1.Inbound rulesSelect+ Add an inbound rule.SelectHTTPinService.SelectAdd.SelectOK.
In the Networking tab, enter or select the following information:
SelectOK.
SelectOK.
Leave the rest of the options at the defaults and selectReview + create.
Leave the rest of the options at the defaults and selectReview + create.
SelectCreate.
SelectCreate.
UseNew-AzNetworkSecurityGroupto create the network security group.
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-1"
    Location = "southcentralus"
}
New-AzNetworkSecurityGroup @nsgParams
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-1"
    Location = "southcentralus"
}
New-AzNetworkSecurityGroup @nsgParams
UseNew-AzNetworkSecurityRuleConfigto create an inbound NSG rule for HTTP.
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-1"
}
$nsg = Get-AzNetworkSecurityGroup @nsgParams

$ruleParams = @{
    Name = "allow-http"
    Priority = 1000
    Direction = "Inbound"
    Access = "Allow"
    Protocol = "Tcp"
    SourceAddressPrefix = "*"
    SourcePortRange = "*"
    DestinationAddressPrefix = "*"
    DestinationPortRange = "80"
}
$nsg | Add-AzNetworkSecurityRuleConfig @ruleParams

Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-1"
}
$nsg = Get-AzNetworkSecurityGroup @nsgParams

$ruleParams = @{
    Name = "allow-http"
    Priority = 1000
    Direction = "Inbound"
    Access = "Allow"
    Protocol = "Tcp"
    SourceAddressPrefix = "*"
    SourcePortRange = "*"
    DestinationAddressPrefix = "*"
    DestinationPortRange = "80"
}
$nsg | Add-AzNetworkSecurityRuleConfig @ruleParams

Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
UseNew-AzNetworkInterfaceto create the network interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-1"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-spoke-1").Subnets[0].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-1").Id
    Location = "southcentralus"
}
New-AzNetworkInterface @nicParams
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-1"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-spoke-1").Subnets[0].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-1").Id
    Location = "southcentralus"
}
New-AzNetworkInterface @nicParams
UseGet-Credentialto set a user name and password for the VM and store them in the$credvariable.
$cred
$cred = Get-Credential
$cred = Get-Credential
UseNew-AzVMConfigto define a VM.
$vmConfigParams = @{
    VMName = "vm-spoke-1"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
$vmConfigParams = @{
    VMName = "vm-spoke-1"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
UseSet-AzVMOperatingSystemandSet-AzVMSourceImageto create the rest of the VM configuration. The following example creates a Windows Server virtual machine:
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-spoke-1"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Windows

$imageParams = @{
    VM = $vmConfig
    PublisherName = "MicrosoftWindowsServer"
    Offer = "WindowsServer"
    Skus = "2022-Datacenter"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-spoke-1"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Windows

$imageParams = @{
    VM = $vmConfig
    PublisherName = "MicrosoftWindowsServer"
    Offer = "WindowsServer"
    Skus = "2022-Datacenter"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
UseAdd-AzVMNetworkInterfaceto attach the NIC that you previously created to the VM.
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-1"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-1"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
UseNew-AzVMto create the VM.
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "southcentralus"
    }
New-AzVM @vmParams
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "southcentralus"
    }
New-AzVM @vmParams
Useaz network nsg createto create the network security group.
az network nsg create \
    --resource-group test-rg \
    --name nsg-spoke-1 \
    --location eastus2
az network nsg create \
    --resource-group test-rg \
    --name nsg-spoke-1 \
    --location eastus2
Useaz network nsg rule createto create an inbound NSG rule for HTTP.
az network nsg rule create \
    --resource-group test-rg \
    --nsg-name nsg-spoke-1 \
    --name allow-http \
    --priority 1000 \
    --direction Inbound \
    --access Allow \
    --protocol Tcp \
    --destination-port-ranges 80
az network nsg rule create \
    --resource-group test-rg \
    --nsg-name nsg-spoke-1 \
    --name allow-http \
    --priority 1000 \
    --direction Inbound \
    --access Allow \
    --protocol Tcp \
    --destination-port-ranges 80
Useaz network nic createto create the network interface.
az network nic create \
    --resource-group test-rg \
    --name nic-1 \
    --vnet-name vnet-1 \
    --subnet subnet-private \
    --network-security-group nsg-spoke-1
az network nic create \
    --resource-group test-rg \
    --name nic-1 \
    --vnet-name vnet-1 \
    --subnet subnet-private \
    --network-security-group nsg-spoke-1
Useaz vm createto create the Windows Server 2022 virtual machine.
az vm create \
    --resource-group test-rg \
    --name vm-spoke-1 \
    --image Win2022Datacenter \
    --size Standard_DS2_v2 \
    --admin-username azureuser \
    --nics nic-1
az vm create \
    --resource-group test-rg \
    --name vm-spoke-1 \
    --image Win2022Datacenter \
    --size Standard_DS2_v2 \
    --admin-username azureuser \
    --nics nic-1
Wait for the virtual machine to finishing deploying before continuing to the next steps.
Install IIS on spoke one test virtual machine
IIS is installed on the Windows Server 2022 virtual machine to test outbound internet traffic through the NAT gateway and inter-spoke traffic in the hub and spoke network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-spoke-1.
Selectvm-spoke-1.
ExpandOperationsthen selectRun command.
ExpandOperationsthen selectRun command.
SelectRunPowerShellScript.
SelectRunPowerShellScript.
Enter the following script inRun Command Script:# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
Enter the following script inRun Command Script:
# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
SelectRun.
SelectRun.
Wait for the script to complete before continuing to the next step. It can take a few minutes for the script to complete.
Wait for the script to complete before continuing to the next step. It can take a few minutes for the script to complete.
When the script completes, theOutputdisplays the following:Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
When the script completes, theOutputdisplays the following:
Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
UseSet-AzVMExtensionto install IIS on the virtual machine.
$vmExtensionParams = @{
    ResourceGroupName = "test-rg"
    VMName = "vm-spoke-1"
    Name = "CustomScriptExtension"
    Publisher = "Microsoft.Compute"
    Type = "CustomScriptExtension"
    TypeHandlerVersion = "1.10"
    Settings = @{
        "commandToExecute" = "powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path 'C:\inetpub\wwwroot\default.htm' -Value vm-spoke-1"
    }
}
Set-AzVMExtension @vmExtensionParams
$vmExtensionParams = @{
    ResourceGroupName = "test-rg"
    VMName = "vm-spoke-1"
    Name = "CustomScriptExtension"
    Publisher = "Microsoft.Compute"
    Type = "CustomScriptExtension"
    TypeHandlerVersion = "1.10"
    Settings = @{
        "commandToExecute" = "powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path 'C:\inetpub\wwwroot\default.htm' -Value vm-spoke-1"
    }
}
Set-AzVMExtension @vmExtensionParams
Useaz vm extension setto install IIS on the virtual machine.
az vm extension set \
    --publisher Microsoft.Compute \
    --version 1.8 \
    --name CustomScriptExtension \
    --vm-name vm-spoke-1 \
    --resource-group test-rg \
    --settings '{"commandToExecute":"powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path \"C:\\inetpub\\wwwroot\\default.htm\" -Value $($env:computername)"}'
az vm extension set \
    --publisher Microsoft.Compute \
    --version 1.8 \
    --name CustomScriptExtension \
    --vm-name vm-spoke-1 \
    --resource-group test-rg \
    --settings '{"commandToExecute":"powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path \"C:\\inetpub\\wwwroot\\default.htm\" -Value $($env:computername)"}'
Create the second spoke virtual network
Create the second virtual network for the second spoke of the hub and spoke network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Select+ Create.
Select+ Create.
In theBasicstab ofCreate virtual network, enter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsNameEntervnet-spoke-2.RegionSelect(US) West US 2.
In theBasicstab ofCreate virtual network, enter or select the following information:
SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theIP addressestab.
SelectNextto proceed to theIP addressestab.
In theIP Addressestab inIPv4 address space, selectDelete address spaceto delete the address space that is auto populated.
In theIP Addressestab inIPv4 address space, selectDelete address spaceto delete the address space that is auto populated.
SelectAdd IPv4 address space.
SelectAdd IPv4 address space.
InIPv4 address spaceenter10.2.0.0. Leave the default of/16 (65,536 addresses)in the mask selection.
InIPv4 address spaceenter10.2.0.0. Leave the default of/16 (65,536 addresses)in the mask selection.
Select+ Add a subnet.
Select+ Add a subnet.
InAdd a subnetenter or select the following information:SettingValueSubnet purposeLeave the defaultDefault.NameEntersubnet-private.IPv4IPv4 address rangeLeave the default of10.2.0.0/16.Starting addressLeave the default of10.2.0.0.SizeLeave the default of/24(256 addresses).
InAdd a subnetenter or select the following information:
SelectAdd.
SelectAdd.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
UseNew-AzVirtualNetworkto create the virtual network.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
    AddressPrefix = "10.2.0.0/16"
    Location = "westus2"
}
New-AzVirtualNetwork @vnetParams
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
    AddressPrefix = "10.2.0.0/16"
    Location = "westus2"
}
New-AzVirtualNetwork @vnetParams
UseAdd-AzVirtualNetworkSubnetConfigto create the subnet.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
    AddressPrefix = "10.2.0.0/24"
}
Add-AzVirtualNetworkSubnetConfig @subnetParams

Set-AzVirtualNetwork -VirtualNetwork $vnet
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
    AddressPrefix = "10.2.0.0/24"
}
Add-AzVirtualNetworkSubnetConfig @subnetParams

Set-AzVirtualNetwork -VirtualNetwork $vnet
Useaz network vnet createto create the virtual network.
az network vnet create \
    --resource-group test-rg \
    --name vnet-spoke-2 \
    --address-prefix 10.2.0.0/16 \
    --location westus2
az network vnet create \
    --resource-group test-rg \
    --name vnet-spoke-2 \
    --address-prefix 10.2.0.0/16 \
    --location westus2
Useaz network vnet subnet createto create the subnet.
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --name subnet-private \
    --address-prefix 10.2.0.0/24
az network vnet subnet create \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --name subnet-private \
    --address-prefix 10.2.0.0/24
Create peering between hub and spoke two
Create a two-way virtual network peer between the hub and spoke two.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Selectvnet-hub.
Selectvnet-hub.
SelectPeeringsinSettings.
SelectPeeringsinSettings.
Select+ Add.
Select+ Add.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Selectvnet-hub.
Selectvnet-hub.
SelectPeeringsinSettings.
SelectPeeringsinSettings.
Select+ Add.
Select+ Add.
Enter or select the following information inAdd peering:SettingValueRemote virtual network summaryPeering link nameEntervnet-spoke-2-to-vnet-hub.Virtual network deployment modelLeave the default ofResource manager.SubscriptionSelect your subscription.Virtual networkSelectvnet-spoke-2 (test-rg).Remote virtual network peering settingsAllow 'vnet-spoke-2' to access 'vnet-hub'Leave the default ofSelected.Allow 'vnet-spoke-2' to receive forwarded traffic from 'vnet-hub'Select the checkbox.Allow gateway or route server in 'vnet-spoke-2' to forward traffic to 'vnet-hub'Leave the default ofUnselected.Enable 'vnet-spoke-2' to use 'vnet-hub's' remote gateway or route serverLeave the default ofUnselected.Local virtual network summaryPeering link nameEntervnet-hub-to-vnet-spoke-2.Local virtual network peering settingsAllow 'vnet-hub' to access 'vnet-spoke-2'Leave the default ofSelected.Allow 'vnet-hub' to receive forwarded traffic from 'vnet-spoke-2'Select the checkbox.Allow gateway or route server in 'vnet-hub' to forward traffic to 'vnet-spoke-2'Leave the default ofUnselected.Enable 'vnet-hub' to use 'vnet-spoke-2's' remote gateway or route serverLeave the default ofUnselected.
Enter or select the following information inAdd peering:
SelectAdd.
SelectAdd.
SelectRefreshand verifyPeering statusisConnected.
SelectRefreshand verifyPeering statusisConnected.
UseAdd-AzVirtualNetworkPeeringto create the peering from the hub to spoke two.
# Create peering from hub to spoke two
$hubVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$hubVnet = Get-AzVirtualNetwork @hubVnetParams

$spokeVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$spokeVnet = Get-AzVirtualNetwork @spokeVnetParams

$hubToSpokeParams = @{
    Name = "vnet-hub-to-vnet-spoke-2"
    VirtualNetwork = $hubVnet
    RemoteVirtualNetworkId = $spokeVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @hubToSpokeParams

# Create peering from spoke two to hub
$spokeToHubParams = @{
    Name = "vnet-spoke-2-to-vnet-hub"
    VirtualNetwork = $spokeVnet
    RemoteVirtualNetworkId = $hubVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @spokeToHubParams
# Create peering from hub to spoke two
$hubVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-hub"
}
$hubVnet = Get-AzVirtualNetwork @hubVnetParams

$spokeVnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$spokeVnet = Get-AzVirtualNetwork @spokeVnetParams

$hubToSpokeParams = @{
    Name = "vnet-hub-to-vnet-spoke-2"
    VirtualNetwork = $hubVnet
    RemoteVirtualNetworkId = $spokeVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @hubToSpokeParams

# Create peering from spoke two to hub
$spokeToHubParams = @{
    Name = "vnet-spoke-2-to-vnet-hub"
    VirtualNetwork = $spokeVnet
    RemoteVirtualNetworkId = $hubVnet.Id
    AllowForwardedTraffic = $true
}
Add-AzVirtualNetworkPeering @spokeToHubParams
Useaz network vnet peering createto create the peering from the hub to spoke two.
# Create peering from hub to spoke two
az network vnet peering create \
    --name vnet-hub-to-vnet-spoke-2 \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --remote-vnet vnet-spoke-2 \
    --allow-vnet-access \
    --allow-forwarded-traffic

# Create peering from spoke two to hub
az network vnet peering create \
    --name vnet-spoke-2-to-vnet-hub \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --remote-vnet vnet-hub \
    --allow-vnet-access \
    --allow-forwarded-traffic
# Create peering from hub to spoke two
az network vnet peering create \
    --name vnet-hub-to-vnet-spoke-2 \
    --resource-group test-rg \
    --vnet-name vnet-hub \
    --remote-vnet vnet-spoke-2 \
    --allow-vnet-access \
    --allow-forwarded-traffic

# Create peering from spoke two to hub
az network vnet peering create \
    --name vnet-spoke-2-to-vnet-hub \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --remote-vnet vnet-hub \
    --allow-vnet-access \
    --allow-forwarded-traffic
Create spoke two network route table
Create a route table to force all outbound internet and inter-spoke traffic through the simulated NVA in the hub virtual network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Select+ Create.
Select+ Create.
InCreate Route tableenter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsRegionSelectWest US 2.NameEnterroute-table-nat-spoke-2.Propagate gateway routesLeave the default ofYes.
InCreate Route tableenter or select the following information:
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
In the search box at the top of the portal, enterRoute table. SelectRoute tablesin the search results.
Selectroute-table-nat-spoke-2.
Selectroute-table-nat-spoke-2.
InSettingsselectRoutes.
InSettingsselectRoutes.
Select+ AddinRoutes.
Select+ AddinRoutes.
Enter or select the following information inAdd route:SettingValueRoute nameEnterdefault-via-nat-spoke-2.Destination typeSelectIP Addresses.Destination IP addresses/CIDR rangesEnter0.0.0.0/0.Next hop typeSelectVirtual appliance.Next hop addressEnter10.0.0.10.This is the IP address you added to the private interface of the NVA in the previous steps..
Enter or select the following information inAdd route:
SelectAdd.
SelectAdd.
SelectSubnetsinSettings.
SelectSubnetsinSettings.
Select+ Associate.
Select+ Associate.
Enter or select the following information inAssociate subnet:SettingValueVirtual networkSelectvnet-spoke-2 (test-rg).SubnetSelectsubnet-private.
Enter or select the following information inAssociate subnet:
SelectOK.
SelectOK.
UseNew-AzRouteTableto create the route table.
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-2"
    Location = "westus2"
}
New-AzRouteTable @routeTableParams
$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-2"
    Location = "westus2"
}
New-AzRouteTable @routeTableParams
UseAdd-AzRouteConfigto create the route in the route table.
$routeParams = @{
    Name = "default-via-nat-spoke-2"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-2"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeParams | Set-AzRouteTable
$routeParams = @{
    Name = "default-via-nat-spoke-2"
    AddressPrefix = "0.0.0.0/0"
    NextHopType = "VirtualAppliance"
    NextHopIpAddress = "10.0.0.10"
}

$routeTableParams = @{
    ResourceGroupName = "test-rg"
    Name = "route-table-nat-spoke-2"
}
$routeTable = Get-AzRouteTable @routeTableParams

$routeTable | Add-AzRouteConfig @routeParams | Set-AzRouteTable
UseSet-AzVirtualNetworkSubnetConfigto associate the route table with the subnet.
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
$vnetParams = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-spoke-2"
}
$vnet = Get-AzVirtualNetwork @vnetParams

$subnetParams = @{
    VirtualNetwork = $vnet
    Name = "subnet-private"
}
$subnet = Get-AzVirtualNetworkSubnetConfig @subnetParams

$subnet.RouteTable = $routeTable

Set-AzVirtualNetwork -VirtualNetwork $vnet
Useaz network route-table createto create the route table.
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-spoke-2 \
    --location westus2
az network route-table create \
    --resource-group test-rg \
    --name route-table-nat-spoke-2 \
    --location westus2
Useaz network route-table route createto create the route in the route table.
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-spoke-2 \
    --name default-via-nat-spoke-2 \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
az network route-table route create \
    --resource-group test-rg \
    --route-table-name route-table-nat-spoke-2 \
    --name default-via-nat-spoke-2 \
    --address-prefix 0.0.0.0/0 \
    --next-hop-type VirtualAppliance \
    --next-hop-ip-address 10.0.0.10
Useaz network vnet subnet updateto associate the route table with the subnet.
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --name subnet-private \
    --route-table route-table-nat-spoke-2
az network vnet subnet update \
    --resource-group test-rg \
    --vnet-name vnet-spoke-2 \
    --name subnet-private \
    --route-table route-table-nat-spoke-2
Create spoke two test virtual machine
Create a Windows Server 2022 virtual machine for the test virtual machine in spoke two.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Select+ CreatethenAzure virtual machine.
Select+ CreatethenAzure virtual machine.
InCreate a virtual machineenter or select the following information in theBasicstab:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsVirtual machine nameEntervm-spoke-2.RegionSelect(US) West US 2.Availability optionsSelectNo infrastructure redundancy required.Security typeSelectStandard.ImageSelectWindows Server 2022 Datacenter - x64 Gen2.VM architectureLeave the default ofx64.SizeSelect a size.Administrator accountAuthentication typeSelectPassword.UsernameEnter a username.PasswordEnter a password.Confirm passwordReenter password.Inbound port rulesPublic inbound portsSelectNone.
InCreate a virtual machineenter or select the following information in theBasicstab:
SelectNext: DisksthenNext: Networking.
SelectNext: DisksthenNext: Networking.
In the Networking tab, enter or select the following information:SettingValueNetwork interfaceVirtual networkSelectvnet-spoke-2.SubnetSelectsubnet-private (10.2.0.0/24).Public IPSelectNone.NIC network security groupSelectAdvanced.Configure network security groupSelectCreate new.Enternsg-spoke-2.Inbound rulesSelect+ Add an inbound rule.SelectHTTPinService.SelectAdd.SelectOK.
In the Networking tab, enter or select the following information:
Leave the rest of the options at the defaults and selectReview + create.
Leave the rest of the options at the defaults and selectReview + create.
SelectCreate.
SelectCreate.
UseNew-AzNetworkSecurityGroupto create the network security group.
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-2"
    Location = "westus2"
}
New-AzNetworkSecurityGroup @nsgParams
$nsgParams = @{
    ResourceGroupName = "test-rg"
    Name = "nsg-spoke-2"
    Location = "westus2"
}
New-AzNetworkSecurityGroup @nsgParams
UseNew-AzNetworkSecurityRuleConfigto create an inbound NSG rule for HTTP.
$ruleParams = @{
    Name = "allow-http"
    Priority = 1000
    Direction = "Inbound"
    Access = "Allow"
    Protocol = "Tcp"
    SourceAddressPrefix = "*"
    SourcePortRange = "*"
    DestinationAddressPrefix = "*"
    DestinationPortRange = "80"
}
$nsg = Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-2"

$nsg | Add-AzNetworkSecurityRuleConfig @ruleParams

Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
$ruleParams = @{
    Name = "allow-http"
    Priority = 1000
    Direction = "Inbound"
    Access = "Allow"
    Protocol = "Tcp"
    SourceAddressPrefix = "*"
    SourcePortRange = "*"
    DestinationAddressPrefix = "*"
    DestinationPortRange = "80"
}
$nsg = Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-2"

$nsg | Add-AzNetworkSecurityRuleConfig @ruleParams

Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
UseNew-AzNetworkInterfaceto create the network interface.
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-2"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-spoke-2").Subnets[0].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-2").Id
    Location = "westus2"
}
New-AzNetworkInterface @nicParams
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-2"
    SubnetId = (Get-AzVirtualNetwork -ResourceGroupName "test-rg" -Name "vnet-spoke-2").Subnets[0].Id
    NetworkSecurityGroupId = (Get-AzNetworkSecurityGroup -ResourceGroupName "test-rg" -Name "nsg-spoke-2").Id
    Location = "westus2"
}
New-AzNetworkInterface @nicParams
UseGet-Credentialto set a user name and password for the VM and store them in the$credvariable.
$cred
$cred = Get-Credential
$cred = Get-Credential
UseNew-AzVMConfigto define a VM.
$vmConfigParams = @{
    VMName = "vm-spoke-2"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
$vmConfigParams = @{
    VMName = "vm-spoke-2"
    VMSize = "Standard_DS4_v2"
    }
$vmConfig = New-AzVMConfig @vmConfigParams
UseSet-AzVMOperatingSystemandSet-AzVMSourceImageto create the rest of the VM configuration. The following example creates a Windows Server virtual machine:
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-spoke-2"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Windows

$imageParams = @{
    VM = $vmConfig
    PublisherName = "MicrosoftWindowsServer"
    Offer = "WindowsServer"
    Skus = "2022-Datacenter"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
$osParams = @{
    VM = $vmConfig
    ComputerName = "vm-spoke-2"
    Credential = $cred
    }
$vmConfig = Set-AzVMOperatingSystem @osParams -Windows

$imageParams = @{
    VM = $vmConfig
    PublisherName = "MicrosoftWindowsServer"
    Offer = "WindowsServer"
    Skus = "2022-Datacenter"
    Version = "latest"
    }
$vmConfig = Set-AzVMSourceImage @imageParams
UseAdd-AzVMNetworkInterfaceto attach the NIC that you previously created to the VM.
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-2"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
# Get the network interface object
$nicParams = @{
    ResourceGroupName = "test-rg"
    Name = "nic-2"
    }
$nic = Get-AzNetworkInterface @nicParams

$vmConfigParams = @{
    VM = $vmConfig
    Id = $nic.Id
    }
$vmConfig = Add-AzVMNetworkInterface @vmConfigParams
UseNew-AzVMto create the VM.
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "westus2"
    }
New-AzVM @vmParams
$vmParams = @{
    VM = $vmConfig
    ResourceGroupName = "test-rg"
    Location = "westus2"
    }
New-AzVM @vmParams
Useaz network nsg createto create the network security group.
az network nsg create \
    --resource-group test-rg \
    --name nsg-spoke-2 \
    --location eastus2
az network nsg create \
    --resource-group test-rg \
    --name nsg-spoke-2 \
    --location eastus2
Useaz network nsg rule createto create an inbound NSG rule for HTTP.
az network nsg rule create \
    --resource-group test-rg \
    --nsg-name nsg-spoke-2 \
    --name allow-http \
    --priority 1000 \
    --direction Inbound \
    --access Allow \
    --protocol Tcp \
    --destination-port-ranges 80
az network nsg rule create \
    --resource-group test-rg \
    --nsg-name nsg-spoke-2 \
    --name allow-http \
    --priority 1000 \
    --direction Inbound \
    --access Allow \
    --protocol Tcp \
    --destination-port-ranges 80
Useaz network nic createto create the network interface.
az network nic create \
    --resource-group test-rg \
    --name nic-2 \
    --vnet-name vnet-1 \
    --subnet subnet-private \
    --network-security-group nsg-spoke-2
az network nic create \
    --resource-group test-rg \
    --name nic-2 \
    --vnet-name vnet-1 \
    --subnet subnet-private \
    --network-security-group nsg-spoke-2
Useaz vm createto create the Windows Server 2022 virtual machine.
az vm create \
    --resource-group test-rg \
    --name vm-spoke-2 \
    --image Win2022Datacenter \
    --size Standard_DS2_v2 \
    --admin-username azureuser \
    --nics nic-2
az vm create \
    --resource-group test-rg \
    --name vm-spoke-2 \
    --image Win2022Datacenter \
    --size Standard_DS2_v2 \
    --admin-username azureuser \
    --nics nic-2
Wait for the virtual machine to finish deploying before continuing to the next steps.
Install IIS on spoke two test virtual machine
IIS is installed on the Windows Server 2022 virtual machine to test outbound internet traffic through the NAT gateway and inter-spoke traffic in the hub and spoke network.
Portal
Powershell
CLI
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-spoke-2.
Selectvm-spoke-2.
InOperations, selectRun command.
InOperations, selectRun command.
SelectRunPowerShellScript.
SelectRunPowerShellScript.
Enter the following script inRun Command Script:# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
Enter the following script inRun Command Script:
# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
# Install IIS server role
Install-WindowsFeature -name Web-Server -IncludeManagementTools

# Remove default htm file
Remove-Item  C:\inetpub\wwwroot\iisstart.htm

# Add a new htm file that displays server name
Add-Content -Path "C:\inetpub\wwwroot\iisstart.htm" -Value $("Hello World from " + $env:computername)
SelectRun.
SelectRun.
Wait for the script to complete before continuing to the next step. It can take a few minutes for the script to complete.
Wait for the script to complete before continuing to the next step. It can take a few minutes for the script to complete.
When the script completes, theOutput* displays the following:Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
When the script completes, theOutput* displays the following:
Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
Success Restart Needed Exit Code      Feature Result                               
------- -------------- ---------      --------------                               
True    No             Success        {Common HTTP Features, Default Document, D...
UseSet-AzVMExtensionto install IIS on the virtual machine.
$vmExtensionParams = @{
    ResourceGroupName = "test-rg"
    VMName = "vm-spoke-2"
    Name = "CustomScriptExtension"
    Publisher = "Microsoft.Compute"
    Type = "CustomScriptExtension"
    TypeHandlerVersion = "1.10"
    Settings = @{
        "commandToExecute" = "powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path 'C:\inetpub\wwwroot\default.htm' -Value vm-spoke-2"
    }
}
Set-AzVMExtension @vmExtensionParams
$vmExtensionParams = @{
    ResourceGroupName = "test-rg"
    VMName = "vm-spoke-2"
    Name = "CustomScriptExtension"
    Publisher = "Microsoft.Compute"
    Type = "CustomScriptExtension"
    TypeHandlerVersion = "1.10"
    Settings = @{
        "commandToExecute" = "powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path 'C:\inetpub\wwwroot\default.htm' -Value vm-spoke-2"
    }
}
Set-AzVMExtension @vmExtensionParams
Useaz vm extension setto install IIS on the virtual machine.
az vm extension set \
    --publisher Microsoft.Compute \
    --version 1.8 \
    --name CustomScriptExtension \
    --vm-name vm-spoke-2 \
    --resource-group test-rg \
    --settings '{"commandToExecute":"powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path \"C:\\inetpub\\wwwroot\\Default.htm\" -Value $($env:computername)"}'
az vm extension set \
    --publisher Microsoft.Compute \
    --version 1.8 \
    --name CustomScriptExtension \
    --vm-name vm-spoke-2 \
    --resource-group test-rg \
    --settings '{"commandToExecute":"powershell Add-WindowsFeature Web-Server; powershell Add-Content -Path \"C:\\inetpub\\wwwroot\\Default.htm\" -Value $($env:computername)"}'
Test NAT gateway
To verify that the outbound internet traffic is leaving the NAT gateway, connect to the Windows Server 2022 virtual machines you created in the previous steps.
Obtain NAT gateway public IP address
Obtain the NAT gateway public IP address for verification of the steps later in the article.
Sign in to the Azure portal athttps://portal.azure.com.
Sign in to the Azure portal athttps://portal.azure.com.
In the search box at the top of the portal, enterPublic IP. SelectPublic IP addressesin the search results.
In the search box at the top of the portal, enterPublic IP. SelectPublic IP addressesin the search results.
Selectpublic-ip-nat.
Selectpublic-ip-nat.
Make note of value inIP address. The example used in this article is203.0.113.25.
Make note of value inIP address. The example used in this article is203.0.113.25.
Test NAT gateway from spoke one
Use Microsoft Edge on the Windows Server 2022 virtual machine to connect tohttps://whatsmyip.comto verify the functionality of the NAT gateway.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-spoke-1.
Selectvm-spoke-1.
InOverview, selectConnectthenConnect via Bastion.
InOverview, selectConnectthenConnect via Bastion.
Enter the username and password you entered when the virtual machine was created.
Enter the username and password you entered when the virtual machine was created.
SelectConnect.
SelectConnect.
OpenMicrosoft Edgewhen the desktop finishes loading.
OpenMicrosoft Edgewhen the desktop finishes loading.
In the address bar, enterhttps://whatsmyip.com.
In the address bar, enterhttps://whatsmyip.com.
Verify the outbound IP address displayed is the same as the IP of the NAT gateway you obtained previously.
Verify the outbound IP address displayed is the same as the IP of the NAT gateway you obtained previously.

Leave the bastion connection open tovm-spoke-1.
Leave the bastion connection open tovm-spoke-1.
Test NAT gateway from spoke two
Use Microsoft Edge on the Windows Server 2022 virtual machine to connect tohttps://whatsmyip.comto verify the functionality of the NAT gateway.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-spoke-2.
Selectvm-spoke-2.
InOverview, selectConnectthenConnect via Bastion.
InOverview, selectConnectthenConnect via Bastion.
Enter the username and password you entered when the virtual machine was created.
Enter the username and password you entered when the virtual machine was created.
SelectConnect.
SelectConnect.
OpenMicrosoft Edgewhen the desktop finishes loading.
OpenMicrosoft Edgewhen the desktop finishes loading.
In the address bar, enterhttps://whatsmyip.com.
In the address bar, enterhttps://whatsmyip.com.
Verify the outbound IP address displayed is the same as the IP of the NAT gateway you obtained previously.
Verify the outbound IP address displayed is the same as the IP of the NAT gateway you obtained previously.

Leave the bastion connection open tovm-spoke-2.
Leave the bastion connection open tovm-spoke-2.
Test routing between the spokes
Traffic from spoke one to spoke two and spoke two to spoke one route through the simulated NVA in the hub virtual network. Use the following examples to verify the routing between spokes of the hub and spoke network.
Test routing from spoke one to spoke two
Use Microsoft Edge to connect to the web server onvm-spoke-2you installed in the previous steps.
Return to the open bastion connection tovm-spoke-1.
Return to the open bastion connection tovm-spoke-1.
OpenMicrosoft Edgeif it's not open.
OpenMicrosoft Edgeif it's not open.
In the address bar, enter10.2.0.4.
In the address bar, enter10.2.0.4.
Verify the IIS page is displayed fromvm-spoke-2.
Verify the IIS page is displayed fromvm-spoke-2.

Close the bastion connection tovm-spoke-1.
Close the bastion connection tovm-spoke-1.
Test routing from spoke two to spoke one
Use Microsoft Edge to connect to the web server onvm-spoke-1you installed in the previous steps.
Return to the open bastion connection tovm-spoke-2.
Return to the open bastion connection tovm-spoke-2.
OpenMicrosoft Edgeif it's not open.
OpenMicrosoft Edgeif it's not open.
In the address bar, enter10.1.0.4.
In the address bar, enter10.1.0.4.
Verify the IIS page is displayed fromvm-spoke-1.
Verify the IIS page is displayed fromvm-spoke-1.

Close the bastion connection tovm-spoke-1.
Close the bastion connection tovm-spoke-1.
Portal
Powershell
CLI
When you finish using the resources that you created, you can delete the resource group and all its resources.
In the Azure portal, search for and selectResource groups.
In the Azure portal, search for and selectResource groups.
On theResource groupspage, select thetest-rgresource group.
On theResource groupspage, select thetest-rgresource group.
On thetest-rgpage, selectDelete resource group.
On thetest-rgpage, selectDelete resource group.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
UseRemove-AzResourceGroupto delete the resource group.
$rgParams = @{
    Name = "test-rg"
    Force = $true
}
Remove-AzResourceGroup @rgParams
$rgParams = @{
    Name = "test-rg"
    Force = $true
}
Remove-AzResourceGroup @rgParams
Useaz group deleteto delete the resource group.
az group delete \
    --name test-rg \
    --yes \
    --no-wait
az group delete \
    --name test-rg \
    --yes \
    --no-wait
Next steps
Advance to the next article to learn how to use an Azure Gateway Load Balancer for highly available network virtual appliances:
Gateway Load Balancer
Feedback
Was this page helpful?
Additional resources