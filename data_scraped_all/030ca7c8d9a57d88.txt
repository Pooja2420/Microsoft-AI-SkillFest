Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use an Azure managed identity to authenticate to an Azure container registry
Article
2024-09-19
16 contributors
In this article
Use amanaged identity for Azure resourcesto authenticate to an Azure container registry from another Azure resource, without needing to provide or manage registry credentials. For example, set up a user-assigned or system-assigned managed identity on a Linux VM to access container images from your container registry, as easily as you use a public registry. Or, set up an Azure Kubernetes Service cluster to use itsmanaged identityto pull container images from Azure Container Registry for pod deployments.
For this article, you learn more about managed identities and how to:
Enable a user-assigned or system-assigned identity on an Azure VM
Grant the identity access to an Azure container registry
Use the managed identity to access the registry and pull a container image
Azure CLI
Azure PowerShell
To create the Azure resources, this article requires that you run the Azure CLI version 2.0.55 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
To create the Azure resources, this article requires that you run the Azure PowerShell module version 7.5.0 or later. RunGet-Module Az -ListAvailableto find the version. If you need to install or upgrade, seeInstall Azure PowerShell module.
Get-Module Az -ListAvailable
To set up a container registry and push a container image to it, you must also have Docker installed locally. Docker provides packages that easily configure Docker on anymacOS,Windows, orLinuxsystem.
Why use a managed identity?
If you're not familiar with the managed identities for Azure resources feature, see thisoverview.
After you set up selected Azure resources with a managed identity, give the identity the access you want to another resource, just like any security principal. For example, assign a managed identity a role with pull, push and pull, or other permissions to a private registry in Azure. (For a complete list of registry roles, seeAzure Container Registry roles and permissions.) You can give an identity access to one or more resources.
Then, use the identity to authenticate to anyservice that supports Microsoft Entra authentication, without any credentials in your code. Choose how to authenticate using the managed identity, depending on your scenario. To use the identity to access an Azure container registry from a virtual machine, you authenticate with Azure Resource Manager.
Create a container registry
Azure CLI
Azure PowerShell
If you don't already have an Azure container registry, create a registry and push a sample container image to it. For steps, seeQuickstart: Create a private container registry using the Azure CLI.
This article assumes you have theaci-helloworld:v1container image stored in your registry. The examples use a registry name ofmyContainerRegistry. Replace with your own registry and image names in later steps.
aci-helloworld:v1
If you don't already have an Azure container registry, create a registry and push a sample container image to it. For steps, seeQuickstart: Create a private container registry using Azure PowerShell.
This article assumes you have theaci-helloworld:v1container image stored in your registry. The examples use a registry name ofmyContainerRegistry. Replace with your own registry and image names in later steps.
aci-helloworld:v1
Create a Docker-enabled VM
Azure CLI
Azure PowerShell
Create a Docker-enabled Ubuntu virtual machine. You also need to install theAzure CLIon the virtual machine. If you already have an Azure virtual machine, skip this step to create the virtual machine.
Deploy a default Ubuntu Azure virtual machine withaz vm create. The following example creates a VM namedmyDockerVMin an existing resource group namedmyResourceGroup:
az vm create \
    --resource-group myResourceGroup \
    --name myDockerVM \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys
az vm create \
    --resource-group myResourceGroup \
    --name myDockerVM \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys
It takes a few minutes for the VM to be created. When the command completes, take note of thepublicIpAddressdisplayed by the Azure CLI. Use this address to make SSH connections to the VM.
publicIpAddress
Create a Docker-enabled Ubuntu virtual machine. You also need to install theAzure PowerShellon the virtual machine. If you already have an Azure virtual machine, skip this step to create the virtual machine.
Deploy a default Ubuntu Azure virtual machine withNew-AzVM. The following example creates a VM namedmyDockerVMin an existing resource group namedmyResourceGroup. You will be prompted for a user name that will be used when you connect to the VM. Specifyazureuseras the user name. You will also be asked for a password, which you can leave blank. Password login for the VM is disabled when using an SSH key.
$vmParams = @{
    ResourceGroupName   = 'MyResourceGroup'
    Name                = 'myDockerVM'
    Image               = 'UbuntuLTS'
    PublicIpAddressName = 'myPublicIP'
    GenerateSshKey      = $true
    SshKeyName          = 'mySSHKey'
}
New-AzVM @vmParams
$vmParams = @{
    ResourceGroupName   = 'MyResourceGroup'
    Name                = 'myDockerVM'
    Image               = 'UbuntuLTS'
    PublicIpAddressName = 'myPublicIP'
    GenerateSshKey      = $true
    SshKeyName          = 'mySSHKey'
}
New-AzVM @vmParams
It takes a few minutes for the VM to be created. When the command completes, run the following command to get the public IP address. Use this address to make SSH connections to the VM.
Get-AzPublicIpAddress -Name myPublicIP -ResourceGroupName myResourceGroup | Select-Object -ExpandProperty IpAddress
Get-AzPublicIpAddress -Name myPublicIP -ResourceGroupName myResourceGroup | Select-Object -ExpandProperty IpAddress
Install Docker on the VM
To run Docker containers on your virtual machine, you need to install Docker. This section provides the steps to install Docker on an Ubuntu VM, ensuring that your VM is ready to pull and run container images from your Azure Container Registry.
After the VM is running, make an SSH connection to the VM. ReplacepublicIpAddresswith the public IP address of your VM.
ssh azureuser@publicIpAddress
ssh azureuser@publicIpAddress
Run the following command to install Docker on the VM:
sudo apt update
sudo apt install docker.io -y
sudo apt update
sudo apt install docker.io -y
After installation, run the following command to verify that Docker is running properly on the VM:
sudo docker run -it mcr.microsoft.com/hello-world
sudo docker run -it mcr.microsoft.com/hello-world
Hello from Docker!
This message shows that your installation appears to be working correctly.
[...]
Hello from Docker!
This message shows that your installation appears to be working correctly.
[...]
Azure CLI
Azure PowerShell
Install the Azure CLI
Follow the steps inInstall Azure CLI with aptto install the Azure CLI on your Ubuntu virtual machine. For this article, ensure that you install version 2.0.55 or later.
Install the Azure PowerShell
Follow the steps inInstalling PowerShell on UbuntuandInstall the Azure Az PowerShell moduleto install PowerShell and Azure PowerShell on your Ubuntu virtual machine. For this article, ensure that you install Azure PowerShell version 7.5.0 or later.
Exit the SSH session.
Example 1: Access with a user-assigned identity
Create an identity
Azure CLI
Azure PowerShell
Create an identity in your subscription using theaz identity createcommand. You can use the same resource group you used previously to create the container registry or virtual machine, or a different one.
az identity create --resource-group myResourceGroup --name myACRId
az identity create --resource-group myResourceGroup --name myACRId
To configure the identity in the following steps, use theaz identity showcommand to store the identity's resource ID and service principal ID in variables.
# Get resource ID of the user-assigned identity
userID=$(az identity show --resource-group myResourceGroup --name myACRId --query id --output tsv)

# Get service principal ID of the user-assigned identity
spID=$(az identity show --resource-group myResourceGroup --name myACRId --query principalId --output tsv)
# Get resource ID of the user-assigned identity
userID=$(az identity show --resource-group myResourceGroup --name myACRId --query id --output tsv)

# Get service principal ID of the user-assigned identity
spID=$(az identity show --resource-group myResourceGroup --name myACRId --query principalId --output tsv)
Because you need the identity's ID in a later step when you sign in to the CLI from your virtual machine, show the value:
echo $userID
echo $userID
The ID is of the form:
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myACRId
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myACRId
Create an identity in your subscription using theNew-AzUserAssignedIdentitycmdlet. You can use the same resource group you used previously to create the container registry or virtual machine, or a different one.
New-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Location eastus -Name myACRId
New-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Location eastus -Name myACRId
To configure the identity in the following steps, use theGet-AzUserAssignedIdentitycmdlet to store the identity's resource ID and service principal ID in variables.
# Get resource ID of the user-assigned identity
$userID = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).Id

# Get service principal ID of the user-assigned identity
$spID = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).PrincipalId
# Get resource ID of the user-assigned identity
$userID = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).Id

# Get service principal ID of the user-assigned identity
$spID = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).PrincipalId
Because you need the identity's ID in a later step when you sign in to the Azure PowerShell from your virtual machine, show the value:
$userID
$userID
The ID is of the form:
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myACRId
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myACRId
Configure the VM with the identity
Azure CLI
Azure PowerShell
The followingaz vm identity assigncommand configures your Docker VM with the user-assigned identity:
az vm identity assign --resource-group myResourceGroup --name myDockerVM --identities $userID
az vm identity assign --resource-group myResourceGroup --name myDockerVM --identities $userID
The followingUpdate-AzVMcommand configures your Docker VM with the user-assigned identity:
$vm = Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM
Update-AzVM -ResourceGroupName myResourceGroup -VM $vm -IdentityType UserAssigned -IdentityID $userID
$vm = Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM
Update-AzVM -ResourceGroupName myResourceGroup -VM $vm -IdentityType UserAssigned -IdentityID $userID
Grant identity access to the container registry
Azure CLI
Azure PowerShell
Now configure the identity to access your container registry. First use theaz acr showcommand to get the resource ID of the registry:
resourceID=$(az acr show --resource-group myResourceGroup --name myContainerRegistry --query id --output tsv)
resourceID=$(az acr show --resource-group myResourceGroup --name myContainerRegistry --query id --output tsv)
Use theaz role assignment createcommand to assign the AcrPull role to the identity. This role providespull permissionsto the registry. To provide both pull and push permissions, assign the AcrPush role.
az role assignment create --assignee $spID --scope $resourceID --role acrpull
az role assignment create --assignee $spID --scope $resourceID --role acrpull
Now configure the identity to access your container registry. First use theGet-AzContainerRegistrycommand to get the resource ID of the registry:
$resourceID = (Get-AzContainerRegistry -ResourceGroupName myResourceGroup -Name myContainerRegistry).Id
$resourceID = (Get-AzContainerRegistry -ResourceGroupName myResourceGroup -Name myContainerRegistry).Id
Use theNew-AzRoleAssignmentcmdlet to assign the AcrPull role to the identity. This role providespull permissionsto the registry. To provide both pull and push permissions, assign the AcrPush role.
New-AzRoleAssignment -ObjectId $spID -Scope $resourceID -RoleDefinitionName AcrPull
New-AzRoleAssignment -ObjectId $spID -Scope $resourceID -RoleDefinitionName AcrPull
Use the identity to access the registry
Azure CLI
Azure PowerShell
SSH into the Docker virtual machine that's configured with the identity. Run the following Azure CLI commands, using the Azure CLI installed on the VM.
First, authenticate to the Azure CLI withaz login, using the identity you configured on the VM. For<userID>, substitute the ID of the identity you retrieved in a previous step.
<userID>
az login --identity --username <userID>
az login --identity --username <userID>
Then, authenticate to the registry withaz acr login. When you use this command, the CLI uses the Active Directory token created when you ranaz loginto seamlessly authenticate your session with the container registry. (Depending on your VM's setup, you might need to run this command and docker commands withsudo.)
az login
sudo
az acr login --name myContainerRegistry
az acr login --name myContainerRegistry
You should see aLogin succeededmessage. You can then rundockercommands without providing credentials. For example, rundocker pullto pull theaci-helloworld:v1image, specifying the login server name of your registry. The login server name consists of your container registry name (all lowercase) followed by.azurecr.io- for example,mycontainerregistry.azurecr.io.
Login succeeded
docker
aci-helloworld:v1
.azurecr.io
mycontainerregistry.azurecr.io
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
SSH into the Docker virtual machine that's configured with the identity. Run the following Azure PowerShell commands, using the Azure PowerShell installed on the VM.
First, authenticate to the Azure PowerShell withConnect-AzAccount, using the identity you configured on the VM. For-AccountIdspecify a client ID of the identity.
-AccountId
$clientId = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).ClientId
Connect-AzAccount -Identity -AccountId $clientId
$clientId = (Get-AzUserAssignedIdentity -ResourceGroupName myResourceGroup -Name myACRId).ClientId
Connect-AzAccount -Identity -AccountId $clientId
Then, authenticate to the registry withConnect-AzContainerRegistry. When you use this command, the Azure PowerShell uses the Active Directory token created when you ranConnect-AzAccountto seamlessly authenticate your session with the container registry. (Depending on your VM's setup, you might need to run this command and docker commands withsudo.)
Connect-AzAccount
sudo
sudo pwsh -command Connect-AzContainerRegistry -Name myContainerRegistry
sudo pwsh -command Connect-AzContainerRegistry -Name myContainerRegistry
You should see aLogin succeededmessage. You can then rundockercommands without providing credentials. For example, rundocker pullto pull theaci-helloworld:v1image, specifying the login server name of your registry. The login server name consists of your container registry name (all lowercase) followed by.azurecr.io- for example,mycontainerregistry.azurecr.io.
Login succeeded
docker
aci-helloworld:v1
.azurecr.io
mycontainerregistry.azurecr.io
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
Configure the VM with a system-managed identity
A system-assigned managed identity is a feature of Azure that allows your virtual machine to automatically manage its own identity in Azure Active Directory. This section explains how to configure your VM with a system-assigned identity to securely access your Azure Container Registry.
Configure the VM with a system-managed identity
Azure CLI
Azure PowerShell
The followingaz vm identity assigncommand configures your Docker VM with a system-assigned identity:
az vm identity assign --resource-group myResourceGroup --name myDockerVM
az vm identity assign --resource-group myResourceGroup --name myDockerVM
Use theaz vm showcommand to set a variable to the value ofprincipalId(the service principal ID) of the VM's identity, to use in later steps.
principalId
spID=$(az vm show --resource-group myResourceGroup --name myDockerVM --query identity.principalId --out tsv)
spID=$(az vm show --resource-group myResourceGroup --name myDockerVM --query identity.principalId --out tsv)
The followingUpdate-AzVMcommand configures your Docker VM with a system-assigned identity:
$vm = Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM
Update-AzVM -ResourceGroupName myResourceGroup -VM $vm -IdentityType SystemAssigned
$vm = Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM
Update-AzVM -ResourceGroupName myResourceGroup -VM $vm -IdentityType SystemAssigned
Use theGet-AzVMcommand to set a variable to the value ofprincipalId(the service principal ID) of the VM's identity, to use in later steps.
principalId
$spID = (Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM).Identity.PrincipalId
$spID = (Get-AzVM -ResourceGroupName myResourceGroup -Name myDockerVM).Identity.PrincipalId
Grant identity access to the container registry
Azure CLI
Azure PowerShell
Now configure the identity to access your container registry. First use theaz acr showcommand to get the resource ID of the registry:
resourceID=$(az acr show --resource-group myResourceGroup --name myContainerRegistry --query id --output tsv)
resourceID=$(az acr show --resource-group myResourceGroup --name myContainerRegistry --query id --output tsv)
Use theaz role assignment createcommand to assign the AcrPull role to the identity. This role providespull permissionsto the registry. To provide both pull and push permissions, assign the AcrPush role.
az role assignment create --assignee $spID --scope $resourceID --role acrpull
az role assignment create --assignee $spID --scope $resourceID --role acrpull
Now configure the identity to access your container registry. First use the [Get-AzContainerRegistrycommand to get the resource ID of the registry:
$resourceID = (Get-AzContainerRegistry -ResourceGroupName myResourceGroup -Name myContainerRegistry).Id
$resourceID = (Get-AzContainerRegistry -ResourceGroupName myResourceGroup -Name myContainerRegistry).Id
Use theNew-AzRoleAssignmentcmdlet to assign the AcrPull role to the identity. This role providespull permissionsto the registry. To provide both pull and push permissions, assign the AcrPush role.
New-AzRoleAssignment -ObjectId $spID -Scope $resourceID -RoleDefinitionName AcrPull
New-AzRoleAssignment -ObjectId $spID -Scope $resourceID -RoleDefinitionName AcrPull
Use the identity to access the registry
Azure CLI
Azure PowerShell
SSH into the Docker virtual machine that's configured with the identity. Run the following Azure CLI commands, using the Azure CLI installed on the VM.
First, authenticate the Azure CLI withaz login, using the system-assigned identity on the VM.
az login --identity
az login --identity
Then, authenticate to the registry withaz acr login. When you use this command, the CLI uses the Active Directory token created when you ranaz loginto seamlessly authenticate your session with the container registry. (Depending on your VM's setup, you might need to run this command and docker commands withsudo.)
az login
sudo
az acr login --name myContainerRegistry
az acr login --name myContainerRegistry
You should see aLogin succeededmessage. You can then rundockercommands without providing credentials. For example, rundocker pullto pull theaci-helloworld:v1image, specifying the login server name of your registry. The login server name consists of your container registry name (all lowercase) followed by.azurecr.io- for example,mycontainerregistry.azurecr.io.
Login succeeded
docker
aci-helloworld:v1
.azurecr.io
mycontainerregistry.azurecr.io
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
SSH into the Docker virtual machine that's configured with the identity. Run the following Azure PowerShell commands, using the Azure PowerShell installed on the VM.
First, authenticate the Azure PowerShell withConnect-AzAccount, using the system-assigned identity on the VM.
Connect-AzAccount -Identity
Connect-AzAccount -Identity
Then, authenticate to the registry withConnect-AzContainerRegistry. When you use this command, the PowerShell uses the Active Directory token created when you ranConnect-AzAccountto seamlessly authenticate your session with the container registry. (Depending on your VM's setup, you might need to run this command and docker commands withsudo.)
Connect-AzAccount
sudo
sudo pwsh -command Connect-AzContainerRegistry -Name myContainerRegistry
sudo pwsh -command Connect-AzContainerRegistry -Name myContainerRegistry
You should see aLogin succeededmessage. You can then rundockercommands without providing credentials. For example, rundocker pullto pull theaci-helloworld:v1image, specifying the login server name of your registry. The login server name consists of your container registry name (all lowercase) followed by.azurecr.io- for example,mycontainerregistry.azurecr.io.
Login succeeded
docker
aci-helloworld:v1
.azurecr.io
mycontainerregistry.azurecr.io
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
docker pull mycontainerregistry.azurecr.io/aci-helloworld:v1
Next steps
In this article, you learned about using managed identities with Azure Container Registry and how to:
Enable a user-assigned or system-assigned identity in an Azure VM
Grant the identity access to an Azure container registry
Use the managed identity to access the registry and pull a container image
Learn more aboutmanaged identities for Azure resources.
Learn how to use asystem-assignedoruser-assignedmanaged identity with App Service and Azure Container Registry.
Learn how todeploy a container image from Azure Container Registry using a managed identity.
Feedback
Was this page helpful?
Additional resources