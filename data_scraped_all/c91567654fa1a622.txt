Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Transfer data with the Data Movement library
Article
2025-02-11
13 contributors
In this article
The Azure Storage Data Movement library is a cross-platform open source library that is designed for high performance uploading, downloading, and copying of blobs and files. The Data Movement library provides convenient methods that aren't available in the Azure Storage client library for .NET. These methods allow you to set the number of parallel operations, track transfer progress, resume a canceled transfer, and more.
The Data Movement library is only available for .NET, and only supports Azure Blob Storage and Azure Files. You should consider these limitations and otherknown issueswhen deciding whether to use the Data Movement library.
If you're migrating code from the olderMicrosoft.Azure.Storage.DataMovementlibrary (version 2.X.X) to the currentAzure.Storage.DataMovementlibrary (version 12.X.X), see theMigration guide.
API reference docs|Source code|Package (NuGet)| Samples:Blobs/Files.Shares
Prerequisites
Azure subscription -create one for free
Azure storage account -create a storage account
Latest.NET SDKfor your operating system. Be sure to get the SDK and not the runtime.
Set up your environment
If you don't have an existing project, this section shows you how to set up a project to work with the Azure Blob Storage client library for .NET. The steps include package installation, addingusingdirectives, and creating an authorized client object.
using
From your project directory, install packages for the Azure Storage Data Movement client library and the Azure Identity client library using thedotnet add packagecommand. TheAzure.Identitypackage is needed for passwordless connections to Azure services.
dotnet add package
dotnet add package Azure.Storage.DataMovement
dotnet add package Azure.Storage.DataMovement.Blobs
dotnet add package Azure.Identity
dotnet add package Azure.Storage.DataMovement
dotnet add package Azure.Storage.DataMovement.Blobs
dotnet add package Azure.Identity
To work with extension library for Azure Files, install theAzure.Storage.DataMovement.Files.Sharespackage:
dotnet add package Azure.Storage.DataMovement.Files.Shares
dotnet add package Azure.Storage.DataMovement.Files.Shares
using
To run the code examples in this article, add the followingusingdirectives:
using
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.Storage.DataMovement;
using Azure.Storage.DataMovement.Blobs;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.Storage.DataMovement;
using Azure.Storage.DataMovement.Blobs;
If you're using the extension library for Azure Files, add the followingusingdirective:
using
using Azure.Storage.DataMovement.Files.Shares;
using Azure.Storage.DataMovement.Files.Shares;
The authorization mechanism must have the necessary permissions to perform upload, download, or copy operations. For authorization with Microsoft Entra ID (recommended), you need Azure RBAC built-in roleStorage Blob Data Contributoror higher.
About the Data Movement library
The Azure Storage Data Movement library consists of a common client library, and extension libraries for Azure Blob Storage and Azure Files. The common library provides the core functionality for transferring data, while the extension libraries provide functionality specific to Blob Storage and Azure Files. To learn more, see the following resources:
Azure.Storage.DataMovement
Azure.Storage.DataMovement.Blobs
Azure.Storage.DataMovement.Files.Shares
Create aTransferManagerobject
TransferManager
TransferManageris the main class for starting and controlling all types of transfers, including upload, download, and copy. In this section, you learn how to create aTransferManagerobject to work with a local file system, Blob Storage, or Azure Files.
TransferManager
Note
A best practice for Azure SDK client management is to treat a client as a singleton, meaning that a class only has one object at a time. There's no need to keep more than one instance of a client for a given set of constructor parameters or client options.
The following code shows how to create aTransferManagerobject:
TransferManager
TransferManager transferManager = new(new TransferManagerOptions());
TransferManager transferManager = new(new TransferManagerOptions());
You can optionally provide an instance ofTransferManagerOptionsto the constructor, which applies certain configuration options to all transfers started by theTransferManagerobject. The following configuration options are available:
TransferManager
CheckpointStoreOptions: Optional. Defines the options for creating a checkpoint used for saving transfer state so transfers can be resumed.
Diagnostics: Gets the transfer manager diagnostic options.
ErrorHandling: Optional. Defines how errors are handled during a transfer. Default isStopOnAnyFailure.
StopOnAnyFailure
MaximumConcurrency: The maximum number of workers that can be used in a parallel transfer.
ProvidersForResuming: Resource providers for the transfer manager to use in resuming a transfer. Expects one provider for each storage provider in use. To learn more, seeResume an existing transfer.
Create aStorageResourceobject
StorageResource
StorageResourceis the base class for all storage resources, including blobs and files. To create aStorageResourceobject, use one of the following provider classes:
StorageResource
BlobsStorageResourceProvider: Use this class to createStorageResourceinstances for a blob container, block blob, append blob, or page blob.
StorageResource
ShareFilesStorageResourceProvider: Use this class to createStorageResourceinstances for a file or directory.
StorageResource
LocalFilesStorageResourceProvider: Use this class to createStorageResourceinstances for a local file system.
StorageResource
Create aStorageResourceobject for Blob Storage
StorageResource
The following code shows how to create aStorageResourceobject for blob containers and blobs using aUri:
StorageResource
Uri
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobsStorageResourceProvider blobsProvider = new(tokenCredential);

// Get a container resource
StorageResource container = await blobsProvider.FromContainerAsync(
    new Uri("http://<storage-account-name>.blob.core.windows.net/sample-container"));

// Get a block blob resource - default is block blob
StorageResource blockBlob = await blobsProvider.FromBlobAsync(
    new Uri("http://<storage-account-name>.blob.core.windows.net/sample-container/sample-block-blob"),
    new BlockBlobStorageResourceOptions());

// Use a similar approach to get a page blob or append blob resource
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobsStorageResourceProvider blobsProvider = new(tokenCredential);

// Get a container resource
StorageResource container = await blobsProvider.FromContainerAsync(
    new Uri("http://<storage-account-name>.blob.core.windows.net/sample-container"));

// Get a block blob resource - default is block blob
StorageResource blockBlob = await blobsProvider.FromBlobAsync(
    new Uri("http://<storage-account-name>.blob.core.windows.net/sample-container/sample-block-blob"),
    new BlockBlobStorageResourceOptions());

// Use a similar approach to get a page blob or append blob resource
You can also create aStorageResourceobject using a client object fromAzure.Storage.Blobs.
StorageResource
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobContainerClient blobContainerClient = new(
    new Uri("https://<storage-account-name>.blob.core.windows.net/sample-container"),
    tokenCredential);
StorageResource containerResource = BlobsStorageResourceProvider.FromClient(blobContainerClient);

BlockBlobClient blockBlobClient = blobContainerClient.GetBlockBlobClient("sample-block-blob");
StorageResource blockBlobResource = BlobsStorageResourceProvider.FromClient(blockBlobClient);

// Use a similar approach to get a page blob or append blob resource
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobContainerClient blobContainerClient = new(
    new Uri("https://<storage-account-name>.blob.core.windows.net/sample-container"),
    tokenCredential);
StorageResource containerResource = BlobsStorageResourceProvider.FromClient(blobContainerClient);

BlockBlobClient blockBlobClient = blobContainerClient.GetBlockBlobClient("sample-block-blob");
StorageResource blockBlobResource = BlobsStorageResourceProvider.FromClient(blockBlobClient);

// Use a similar approach to get a page blob or append blob resource
Start a new transfer
All transfers need to specify a source and a destination. Both the source and destination are typeStorageResource, which can be eitherStorageResourceContainerorStorageResourceItem. For a given transfer, the source and destination must be of the same kind. For example, if the source is a blob container, the destination must be a blob container.
StorageResource
StorageResourceContainer
StorageResourceItem
You can start a new transfer by calling the following method:
TransferManager.StartTransferAsync
This method returns aTransferOperationobject that represents the transfer. You can use theTransferOperationobject to monitor the transfer progress or obtain the transfer ID. The transfer ID is a unique identifier for the transfer that's needed toresume a transferor pause a transfer.
TransferOperation
You can optionally provide an instance ofTransferOptionstoStartTransferAsyncorResumeTransferAsync, which applies certain configuration options to a specific transfer. The following configuration options are available:
StartTransferAsync
ResumeTransferAsync
CreationMode: Configures the behavior when a transfer encounters a resource that already exists. Defaults toFailIfExistswhen starting a new transfer. When you resume a transfer, the defaults can vary. For all resources successfully enumerated when the transfer started,CreationModedefaults to the initial value used. For any remaining resources, the regular default value applies.
FailIfExists
CreationMode
InitialTransferSize: The size of the first range request in bytes. Single transfer sizes smaller than this limit are uploaded or downloaded in a single request. Transfers larger than this limit continue being downloaded or uploaded in chunks of sizeMaximumTransferChunkSize. The default value is 32 MiB. When you resume a transfer, the default value is the value specified when the transfer first started.
MaximumTransferChunkSize: The maximum size to use for each chunk when transferring data in chunks. The default value is 4 MiB. When you resume a transfer, the default value is the value specified when the transfer first started.
ProgressHandlerOptions: Optional. Options for changing behavior of the ProgressHandler.
Example: Upload a local directory to a blob container
The following code example shows how to start a new transfer to upload a local directory to a blob container:
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

TransferManager transferManager = new(new TransferManagerOptions());

BlobsStorageResourceProvider blobsProvider = new(tokenCredential);

string localDirectoryPath = "C:/path/to/directory";
Uri blobContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/sample-container");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: LocalFilesStorageResourceProvider.FromDirectory(localDirectoryPath),
    destinationResource: await blobsProvider.FromContainerAsync(blobContainerUri));
await transferOperation.WaitForCompletionAsync();
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

TransferManager transferManager = new(new TransferManagerOptions());

BlobsStorageResourceProvider blobsProvider = new(tokenCredential);

string localDirectoryPath = "C:/path/to/directory";
Uri blobContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/sample-container");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: LocalFilesStorageResourceProvider.FromDirectory(localDirectoryPath),
    destinationResource: await blobsProvider.FromContainerAsync(blobContainerUri));
await transferOperation.WaitForCompletionAsync();
Example: Copy a container or blob
You can use the Data Movement library to copy between twoStorageResourceinstances. For blob resources, the transfer uses thePut Blob From URLoperation, which performs a server-to-server copy.
StorageResource
The following code example shows how to start a new transfer to copy all blobs in a source blob container to a destination blob container. The destination container must already exist. In this example, we setCreationModetoOverwriteIfExiststo overwrite any destination blobs that already exist. You can adjust theCreationModeproperty based on the needs of your app.
OverwriteIfExists
CreationMode
Uri sourceContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/source-container");
Uri destinationContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/dest-container");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: await blobsProvider.FromContainerAsync(
        sourceContainerUri,
        new BlobStorageResourceContainerOptions()
        {
            BlobPrefix = "source/directory/prefix"
        }),
    destinationResource: await blobsProvider.FromContainerAsync(
        destinationContainerUri,
        new BlobStorageResourceContainerOptions()
        {
            // All source blobs are copied as a single type of destination blob
            // Defaults to block blob, if not specified
            BlobType = BlobType.Block,
            BlobPrefix = "destination/directory/prefix"
        }),
    transferOptions: new TransferOptions()
    {
        CreationMode = StorageResourceCreationMode.OverwriteIfExists,
    }
);
await transferOperation.WaitForCompletionAsync();
Uri sourceContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/source-container");
Uri destinationContainerUri = new Uri("https://<storage-account-name>.blob.core.windows.net/dest-container");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: await blobsProvider.FromContainerAsync(
        sourceContainerUri,
        new BlobStorageResourceContainerOptions()
        {
            BlobPrefix = "source/directory/prefix"
        }),
    destinationResource: await blobsProvider.FromContainerAsync(
        destinationContainerUri,
        new BlobStorageResourceContainerOptions()
        {
            // All source blobs are copied as a single type of destination blob
            // Defaults to block blob, if not specified
            BlobType = BlobType.Block,
            BlobPrefix = "destination/directory/prefix"
        }),
    transferOptions: new TransferOptions()
    {
        CreationMode = StorageResourceCreationMode.OverwriteIfExists,
    }
);
await transferOperation.WaitForCompletionAsync();
The following code example shows how to start a new transfer to copy a source blob to a destination blob. In this example, we setCreationModetoOverwriteIfExiststo overwrite the destination blob if it already exists. You can adjust theCreationModeproperty based on the needs of your app.
OverwriteIfExists
CreationMode
Uri sourceBlobUri = new Uri(
    "https://<storage-account-name>.blob.core.windows.net/source-container/source-blob");
Uri destinationBlobUri = new Uri(
    "https://<storage-account-name>.blob.core.windows.net/dest-container/dest-blob");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: await blobsProvider.FromBlobAsync(sourceBlobUri),
    destinationResource: await blobsProvider.FromBlobAsync(destinationBlobUri, new BlockBlobStorageResourceOptions()),
    transferOptions: new TransferOptions()
    {
        CreationMode = StorageResourceCreationMode.OverwriteIfExists,
    }
);
await transferOperation.WaitForCompletionAsync();
Uri sourceBlobUri = new Uri(
    "https://<storage-account-name>.blob.core.windows.net/source-container/source-blob");
Uri destinationBlobUri = new Uri(
    "https://<storage-account-name>.blob.core.windows.net/dest-container/dest-blob");

TransferOperation transferOperation = await transferManager.StartTransferAsync(
    sourceResource: await blobsProvider.FromBlobAsync(sourceBlobUri),
    destinationResource: await blobsProvider.FromBlobAsync(destinationBlobUri, new BlockBlobStorageResourceOptions()),
    transferOptions: new TransferOptions()
    {
        CreationMode = StorageResourceCreationMode.OverwriteIfExists,
    }
);
await transferOperation.WaitForCompletionAsync();
Resume an existing transfer
By persisting transfer progress to disk, the Data Movement library allows you to resume a transfer that failed before completion, or was otherwise canceled or paused. To resume a transfer, theTransferManagerobject must be configured withStorageResourceProviderinstances that are capable of reassembling the transfer from the persisted data. You can use theProvidersForResumingproperty of theTransferManagerOptionsclass to specify the providers.
TransferManager
StorageResourceProvider
ProvidersForResuming
The following code example shows how to initialize aTransferManagerobject that's capable of resuming a transfer between the local file system and Blob Storage:
TransferManager
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

TransferManager transferManager = new(new TransferManagerOptions()
{
    ProvidersForResuming = new List<StorageResourceProvider>()
    {
        new BlobsStorageResourceProvider(tokenCredential)
    }
});
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

TransferManager transferManager = new(new TransferManagerOptions()
{
    ProvidersForResuming = new List<StorageResourceProvider>()
    {
        new BlobsStorageResourceProvider(tokenCredential)
    }
});
To resume a transfer, call the following method:
TransferManager.ResumeTransferAsync
Provide the transfer ID of the transfer that you want to resume. The transfer ID is a unique identifier for the transfer that's returned as part of theTransferOperationobject when the transfer is started. If you don't know the transfer ID value, you can callTransferManager.GetTransfersAsyncto find the transfer and its corresponding ID.
TransferOperation
The following code example shows how to resume a transfer:
TransferOperation resumedTransfer = await transferManager.ResumeTransferAsync(transferId: ID);
TransferOperation resumedTransfer = await transferManager.ResumeTransferAsync(transferId: ID);
Note
The location of the persisted transfer data is different than the default location ifTransferCheckpointStoreOptionsis set as part ofTransferManagerOptions. To resume transfers recorded with a custom checkpoint store, you must provide the same checkpoint store options for theTransferManagerobject that resumes the transfer.
TransferManagerOptions
TransferManager
Monitor transfer progress
Transfers can be monitored and observed through several mechanisms, depending on the needs of your app. In this section, you learn how to monitor transfer progress using theTransferOperationobject, and how to monitor a transfer usingTransferOptionsevents.
TransferOperation
TransferOptions
Example: Monitor transfer progress using theTransferOperationobject
TransferOperation
You can monitor transfer progress using theTransferOperationobject returned by theStartTransferAsyncmethod. You can also callTransferManager.GetTransfersAsyncto enumerate all transfers for aTransferManagerobject.
TransferOperation
StartTransferAsync
TransferManager
The following code example shows how to iterate over all transfers and write the state of each transfer to a log file:
async Task CheckTransfersAsync(TransferManager transferManager)
{
    await foreach (TransferOperation transfer in transferManager.GetTransfersAsync())
    {
        using StreamWriter logStream = File.AppendText("path/to/log/file");
        logStream.WriteLine(Enum.GetName(typeof(TransferState), transfer.Status.State));
    }
}
async Task CheckTransfersAsync(TransferManager transferManager)
{
    await foreach (TransferOperation transfer in transferManager.GetTransfersAsync())
    {
        using StreamWriter logStream = File.AppendText("path/to/log/file");
        logStream.WriteLine(Enum.GetName(typeof(TransferState), transfer.Status.State));
    }
}
TransferStatusdefines the status of the transfer job.TransferStatusincludes the following properties:
TransferStatus
HasCompletedSuccessfully
HasFailedItems
true
false
HasSkippedItems
true
false
SkipIfExists
State
Example: Monitor transfer progress usingTransferOptionsevents
TransferOptions
You can monitor transfer progress by listening for events provided by theTransferOptionsclass. TheTransferOptionsinstance is passed to theStartTransferAsyncmethod and provideseventsthat are triggered when a transfer completes, fails, is skipped, or changes status.
TransferOptions
StartTransferAsync
The following code example shows how to listen for a transfer completion event usingTransferOptions:
TransferOptions
async Task<TransferOperation> ListenToTransfersAsync(
    TransferManager transferManager,
    StorageResource source,
    StorageResource destination)
{
    TransferOptions transferOptions = new();
    transferOptions.ItemTransferCompleted += (TransferItemCompletedEventArgs args) =>
    {
        using (StreamWriter logStream = File.AppendText("path/to/log/file"))
        {
            logStream.WriteLine($"File Completed Transfer: {args.Source.Uri.AbsoluteUri}");
        }
        return Task.CompletedTask;
    };
    return await transferManager.StartTransferAsync(
        source,
        destination,
        transferOptions);
}
async Task<TransferOperation> ListenToTransfersAsync(
    TransferManager transferManager,
    StorageResource source,
    StorageResource destination)
{
    TransferOptions transferOptions = new();
    transferOptions.ItemTransferCompleted += (TransferItemCompletedEventArgs args) =>
    {
        using (StreamWriter logStream = File.AppendText("path/to/log/file"))
        {
            logStream.WriteLine($"File Completed Transfer: {args.Source.Uri.AbsoluteUri}");
        }
        return Task.CompletedTask;
    };
    return await transferManager.StartTransferAsync(
        source,
        destination,
        transferOptions);
}
Use extension methods forBlobContainerClient
BlobContainerClient
For applications with existing code that uses theBlobContainerClientclass fromAzure.Storage.Blobs, you can use extension methods to start transfers directly from aBlobContainerClientobject. The extension methods are provided in theBlobContainerClientExtensionsclass (orShareDirectoryClientExtensionsfor Azure Files), and provide some of the benefits of usingTransferManagerwith minimal code changes. In this section, you learn how to use the extension methods to perform transfers from aBlobContainerClientobject.
BlobContainerClient
BlobContainerClient
TransferManager
BlobContainerClient
Install theAzure.Storage.Blobspackage if you don't have it already:
dotnet add package Azure.Storage.Blobs
dotnet add package Azure.Storage.Blobs
Add the followingusingdirectives to the top of your code file:
using
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
The following code example shows how to instantiate aBlobContainerClientfor a blob container namedsample-container:
BlobContainerClient
sample-container
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobServiceClient client = new BlobServiceClient(
    new Uri("https://<storage-account-name>.blob.core.windows.net"),
    tokenCredential);

BlobContainerClient containerClient = client.GetBlobContainerClient("sample-container");
// Create a token credential
TokenCredential tokenCredential = new DefaultAzureCredential();

BlobServiceClient client = new BlobServiceClient(
    new Uri("https://<storage-account-name>.blob.core.windows.net"),
    tokenCredential);

BlobContainerClient containerClient = client.GetBlobContainerClient("sample-container");
The following code example shows how to upload local directory contents tosample-containerusingUploadDirectoryAsync:
sample-container
UploadDirectoryAsync
TransferOperation transfer = await containerClient
    .UploadDirectoryAsync(WaitUntil.Started, "local/directory/path");

await transfer.WaitForCompletionAsync();
TransferOperation transfer = await containerClient
    .UploadDirectoryAsync(WaitUntil.Started, "local/directory/path");

await transfer.WaitForCompletionAsync();
The following code example shows how to download the contents ofsample-containerto a local directory usingDownloadToDirectoryAsync:
sample-container
DownloadToDirectoryAsync
TransferOperation transfer = await containerClient
    .DownloadToDirectoryAsync(WaitUntil.Started, "local/directory/path");

await transfer.WaitForCompletionAsync();
TransferOperation transfer = await containerClient
    .DownloadToDirectoryAsync(WaitUntil.Started, "local/directory/path");

await transfer.WaitForCompletionAsync();
To learn more about the extension methods forBlobContainerClient, seeExtensions on BlobContainerClient.
BlobContainerClient
Next step
Code samples forDataMovement.BlobsandDataMovement.Files.Sharesare available in the Azure SDK for .NET GitHub repository.
Feedback
Was this page helpful?
Additional resources