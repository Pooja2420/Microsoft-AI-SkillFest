Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create and manage custom locations on Azure Arc-enabled Kubernetes
Article
2025-04-16
14 contributors
In this article
Thecustom locationsfeature provides a way to configure your Azure Arc-enabled Kubernetes clusters as target locations for deploying instances of Azure offerings. Examples of Azure offerings that can be deployed on top of custom locations include databases, such as SQL Managed Instance enabled by Azure Arc and Azure Arc-enabled PostgreSQL server, or application instances, such as Container Apps, Logic Apps, Event Grid, Logic Apps, and API Management.
Acustom locationhas a one-to-one mapping to a namespace within the Azure Arc-enabled Kubernetes cluster. The custom location Azure resource combined with Azure role-based access control (Azure RBAC) can be used to grant granular permissions to application developers or database admins, enabling them to deploy resources such as databases or application instances on top of Arc-enabled Kubernetes clusters in a multitenant environment.
In this article, you learn how to enable custom locations on an Arc-enabled Kubernetes cluster, and how to create a custom location.
Prerequisites
Install or upgrade Azure CLIto the latest version.
Install or upgrade Azure CLIto the latest version.
Install the latest versions of the following Azure CLI extensions:connectedk8sk8s-extensioncustomlocationaz extension add --name connectedk8s
az extension add --name k8s-extension
az extension add --name customlocationIf you have already installed theconnectedk8s,k8s-extension, andcustomlocationextensions, update to thelatest versionby using the following command:az extension update --name connectedk8s
az extension update --name k8s-extension
az extension update --name customlocation
Install the latest versions of the following Azure CLI extensions:
connectedk8s
connectedk8s
connectedk8s
k8s-extension
k8s-extension
k8s-extension
customlocationaz extension add --name connectedk8s
az extension add --name k8s-extension
az extension add --name customlocationIf you have already installed theconnectedk8s,k8s-extension, andcustomlocationextensions, update to thelatest versionby using the following command:az extension update --name connectedk8s
az extension update --name k8s-extension
az extension update --name customlocation
customlocation
customlocation
az extension add --name connectedk8s
az extension add --name k8s-extension
az extension add --name customlocation
az extension add --name connectedk8s
az extension add --name k8s-extension
az extension add --name customlocation
If you have already installed theconnectedk8s,k8s-extension, andcustomlocationextensions, update to thelatest versionby using the following command:
connectedk8s
k8s-extension
customlocation
az extension update --name connectedk8s
az extension update --name k8s-extension
az extension update --name customlocation
az extension update --name connectedk8s
az extension update --name k8s-extension
az extension update --name customlocation
Verify completed provider registration forMicrosoft.ExtendedLocation.Enter the following commands:az provider register --namespace Microsoft.ExtendedLocationMonitor the registration process. Registration may take up to 10 minutes.az provider show -n Microsoft.ExtendedLocation -o tableOnce registered, theRegistrationStatestate will have theRegisteredvalue.
Verify completed provider registration forMicrosoft.ExtendedLocation.
Microsoft.ExtendedLocation
Enter the following commands:az provider register --namespace Microsoft.ExtendedLocation
Enter the following commands:
az provider register --namespace Microsoft.ExtendedLocation
az provider register --namespace Microsoft.ExtendedLocation
Monitor the registration process. Registration may take up to 10 minutes.az provider show -n Microsoft.ExtendedLocation -o tableOnce registered, theRegistrationStatestate will have theRegisteredvalue.
Monitor the registration process. Registration may take up to 10 minutes.
az provider show -n Microsoft.ExtendedLocation -o table
az provider show -n Microsoft.ExtendedLocation -o table
Once registered, theRegistrationStatestate will have theRegisteredvalue.
RegistrationState
Registered
Verify you have an existingAzure Arc-enabled Kubernetes connected cluster, andupgrade your agentsto the latest version. Confirm that the machine on which you will run the commands described in this article has akubeconfigfile that points to this cluster.
Verify you have an existingAzure Arc-enabled Kubernetes connected cluster, andupgrade your agentsto the latest version. Confirm that the machine on which you will run the commands described in this article has akubeconfigfile that points to this cluster.
kubeconfig
Enable custom locations on your cluster
Important
The custom locations feature is dependent on thecluster connectfeature. Both features must be enabled in the cluster for custom locations to function.
The Custom Location Object ID (OID) is needed to enable custom location. If your user account has the required permissions, the OID is automatically retrieved during feature enablement. If you do not have a valid user account, then the manually passed OID is used but the OID can't be validated. If the OID is invalid, then custom location may not be properly enabled.
The custom locations feature must be enabled before creating the custom locations because the enablement provides the required permissions to create the custom locations namespace on the Kubernetes cluster.
To enable the custom locations feature as a Microsoft Entra user, follow the steps below:
Sign into Azure CLI as a Microsoft Entra user and run the following command:
az connectedk8s enable-features -n <clusterName> -g <resourceGroupName> --features cluster-connect custom-locations
az connectedk8s enable-features -n <clusterName> -g <resourceGroupName> --features cluster-connect custom-locations
To enable the custom locations feature with a service principal, follow the steps below:
Manually retrieve the custom location OID by following these steps:
Sign in to Azure CLI as a Microsoft Entra user.
Sign in to Azure CLI as a Microsoft Entra user.
Run the following command to fetch the custom locationoid(object ID), where--idrefers to the Custom Location service app itself, and is predefined and set tobc313c14-388c-4e7d-a58e-70017303ee3b:Important!Copy and run the command exactly as it is shown below. Do not replace the value passed to the--idparameter with a different value.az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id -o tsv
Run the following command to fetch the custom locationoid(object ID), where--idrefers to the Custom Location service app itself, and is predefined and set tobc313c14-388c-4e7d-a58e-70017303ee3b:
oid
--id
bc313c14-388c-4e7d-a58e-70017303ee3b
Important!Copy and run the command exactly as it is shown below. Do not replace the value passed to the--idparameter with a different value.
--id
az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id -o tsv
az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id -o tsv
Sign in to Azure CLI using the service principal. Run the following command to enable the custom locations feature on the cluster, using theoid(object ID) value from the previous step for the--custom-locations-oidparameter:az connectedk8s enable-features -n <cluster-name> -g <resource-group-name> --custom-locations-oid <cl-oid> --features cluster-connect custom-locations
Sign in to Azure CLI using the service principal. Run the following command to enable the custom locations feature on the cluster, using theoid(object ID) value from the previous step for the--custom-locations-oidparameter:
oid
--custom-locations-oid
az connectedk8s enable-features -n <cluster-name> -g <resource-group-name> --custom-locations-oid <cl-oid> --features cluster-connect custom-locations
az connectedk8s enable-features -n <cluster-name> -g <resource-group-name> --custom-locations-oid <cl-oid> --features cluster-connect custom-locations
Create custom location
Deploy the Azure service cluster extension of the Azure service instance you want to install on your cluster:Azure Arc-enabled data servicesNoteOutbound proxy without authentication and outbound proxy with basic authentication are supported by the Azure Arc-enabled data services cluster extension. Outbound proxy that expects trusted certificates is currently not supported.Azure Container Apps on Azure ArcEvent Grid on Kubernetes
Deploy the Azure service cluster extension of the Azure service instance you want to install on your cluster:
Azure Arc-enabled data servicesNoteOutbound proxy without authentication and outbound proxy with basic authentication are supported by the Azure Arc-enabled data services cluster extension. Outbound proxy that expects trusted certificates is currently not supported.
Azure Arc-enabled data services
Note
Outbound proxy without authentication and outbound proxy with basic authentication are supported by the Azure Arc-enabled data services cluster extension. Outbound proxy that expects trusted certificates is currently not supported.
Azure Container Apps on Azure Arc
Azure Container Apps on Azure Arc
Event Grid on Kubernetes
Event Grid on Kubernetes
Get the Azure Resource Manager identifier of the Azure Arc-enabled Kubernetes cluster, referenced in later steps asconnectedClusterId:az connectedk8s show -n <clusterName> -g <resourceGroupName>  --query id -o tsv
Get the Azure Resource Manager identifier of the Azure Arc-enabled Kubernetes cluster, referenced in later steps asconnectedClusterId:
connectedClusterId
az connectedk8s show -n <clusterName> -g <resourceGroupName>  --query id -o tsv
az connectedk8s show -n <clusterName> -g <resourceGroupName>  --query id -o tsv
Get the Azure Resource Manager identifier of the cluster extension you deployed to the Azure Arc-enabled Kubernetes cluster, referenced in later steps asextensionId:az k8s-extension show --name <extensionInstanceName> --cluster-type connectedClusters -c <clusterName> -g <resourceGroupName>  --query id -o tsv
Get the Azure Resource Manager identifier of the cluster extension you deployed to the Azure Arc-enabled Kubernetes cluster, referenced in later steps asextensionId:
extensionId
az k8s-extension show --name <extensionInstanceName> --cluster-type connectedClusters -c <clusterName> -g <resourceGroupName>  --query id -o tsv
az k8s-extension show --name <extensionInstanceName> --cluster-type connectedClusters -c <clusterName> -g <resourceGroupName>  --query id -o tsv
Create the custom location by referencing the Azure Arc-enabled Kubernetes cluster and the extension:az customlocation create -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionId>Required parameters:Parameter nameDescription--name, --nName of the custom location.--resource-group, --gResource group of the custom location.--namespaceNamespace in the cluster bound to the custom location being created.--host-resource-idAzure Resource Manager identifier of the Azure Arc-enabled Kubernetes cluster (connected cluster).--cluster-extension-idsAzure Resource Manager identifier of a cluster extension instance installed on the connected cluster. For multiple extensions, provide a space-separated list of cluster extension IDsOptional parameters:Parameter nameDescription--location, --lLocation of the custom location Azure Resource Manager resource in Azure. If not specified, the location of the connected cluster is used.--tagsSpace-separated list of tags in the formatkey[=value]. Use '' to clear existing tags.--kubeconfigAdminkubeconfigof cluster.
Create the custom location by referencing the Azure Arc-enabled Kubernetes cluster and the extension:
az customlocation create -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionId>
az customlocation create -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionId>
Required parameters:Parameter nameDescription--name, --nName of the custom location.--resource-group, --gResource group of the custom location.--namespaceNamespace in the cluster bound to the custom location being created.--host-resource-idAzure Resource Manager identifier of the Azure Arc-enabled Kubernetes cluster (connected cluster).--cluster-extension-idsAzure Resource Manager identifier of a cluster extension instance installed on the connected cluster. For multiple extensions, provide a space-separated list of cluster extension IDs
Required parameters:
--name, --n
--resource-group, --g
--namespace
--host-resource-id
--cluster-extension-ids
Optional parameters:Parameter nameDescription--location, --lLocation of the custom location Azure Resource Manager resource in Azure. If not specified, the location of the connected cluster is used.--tagsSpace-separated list of tags in the formatkey[=value]. Use '' to clear existing tags.--kubeconfigAdminkubeconfigof cluster.
Optional parameters:
--location, --l
--tags
key[=value]
--kubeconfig
kubeconfig
Confirm that custom location was successfully enabled by running the following command and checking thatProvisioningStateisSucceeded:
Confirm that custom location was successfully enabled by running the following command and checking thatProvisioningStateisSucceeded:
ProvisioningState
Succeeded
az customlocation show -n <customLocationName> -g <resourceGroupName>
az customlocation show -n <customLocationName> -g <resourceGroupName>
Show details of a custom location
To show the details of a custom location, use the following command:
az customlocation show -n <customLocationName> -g <resourceGroupName>
az customlocation show -n <customLocationName> -g <resourceGroupName>
List custom locations
To list all custom locations in a resource group, use the following command:
az customlocation list -g <resourceGroupName>
az customlocation list -g <resourceGroupName>
Update a custom location
Use theupdatecommand to add new values for--tagsor associate new--cluster-extension-idsto the custom location, while retaining existing values for tags and associated cluster extensions.
update
--tags
--cluster-extension-ids
az customlocation update -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionIds>
az customlocation update -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionIds>
Patch a custom location
Use thepatchcommand to replace existing values for--cluster-extension-idsor--tags. Previous values are not retained.
patch
--cluster-extension-ids
--tags
az customlocation patch -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionIds>
az customlocation patch -n <customLocationName> -g <resourceGroupName> --namespace <name of namespace> --host-resource-id <connectedClusterId> --cluster-extension-ids <extensionIds>
Delete a custom location
To delete a custom location, use the following command:
az customlocation delete -n <customLocationName> -g <resourceGroupName>
az customlocation delete -n <customLocationName> -g <resourceGroupName>
Troubleshooting
Get login credentials error on Azure CLI v2.70.0
You may encounter an error that contains:TypeError: get_login_credentials() got an unexpected keyword argument 'resource'. Azure CLI v2.70.0 released a breaking change which triggers this error. A fix is available in customlocation Az CLI extension v0.1.4 for compatibility with Azure CLI v2.70.0 and higher. If you are using a customlocation Az CLI extension below v0.1.4, you need to downgrade Azure CLI to version 2.69.0. If you used the Azure CLI installer, you can uninstall the current version and install Azure CLI v2.69.0 from theAzure CLI installation page. If you used the pip installer, you can run the following command to downgrade:pip install azure-cli==2.69.0.
TypeError: get_login_credentials() got an unexpected keyword argument 'resource'
Azure CLI installation page
pip install azure-cli==2.69.0
Unknown proxy error
If custom location creation fails with the errorUnknown proxy error occurred, modify your network policy to allow pod-to-pod internal communication within theazure-arcnamespace. Be sure to also add theazure-arcnamespace as part of the no-proxy exclusion list for your configured policy.
Unknown proxy error occurred
azure-arc
azure-arc
Service principal warning
If you try to enable custom location while logged into Azure CLI using a service principal, you may observe the following warning:
Unable to fetch oid of 'custom-locations' app. Proceeding without enabling the feature. Insufficient privileges to complete the operation.
Unable to fetch oid of 'custom-locations' app. Proceeding without enabling the feature. Insufficient privileges to complete the operation.
This warning occurs because the service principal lacks the necessary permissions to retrieve theoid(object ID) of the custom location used by the Azure Arc service. Follow the instructions provided above to enable the custom location feature using a service principal.
oid
Resource Provider does not have required permissions
If you try to create the custom location before the custom location feature has been enabled on the Kubernetes cluster, you may receive the following error message:
Deployment failed. Correlation ID: ... "Microsoft.ExtendedLocation" resource provider does not have the required permissions to create a namespace on the cluster. Refer to https://aka.ms/ArcK8sCustomLocationsDocsEnableFeature to provide the required permissions to the resource provider.
Deployment failed. Correlation ID: ... "Microsoft.ExtendedLocation" resource provider does not have the required permissions to create a namespace on the cluster. Refer to https://aka.ms/ArcK8sCustomLocationsDocsEnableFeature to provide the required permissions to the resource provider.
First, follow the instructions above to enable the custom location feature on the Kubernetes cluster. After the feature is enabled, you can follow the steps to create the custom location.
Next steps
Securely connect to the cluster usingCluster Connect.
Continue withAzure Container Apps on Azure Arcfor end-to-end instructions on installing extensions, creating custom locations, and creating the Azure Container Apps connected environment.
Create an Event Grid topic and an event subscription forEvent Grid on Kubernetes.
Learn more about currently availableAzure Arc-enabled Kubernetes extensions.
Feedback
Was this page helpful?
Additional resources