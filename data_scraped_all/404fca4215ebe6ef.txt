Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Manage tag governance with Azure Policy
Article
2025-03-04
5 contributors
In this article
Tagsare a crucial part of organizing your Azure resources into a taxonomy. When followingbest practices for tag management, tags can be the basis for applying your business policies with Azure Policy ortracking costs with Cost Management. No matter how or why you use tags, it's important that you can quickly add, change, and remove those tags on your Azure resources. To see whether your Azure resource supports tagging, seeTag support.
Azure Policy'smodifyeffect is designed to aid in the governance of tags no matter what stage of resource governance you are in.Modifyhelps when:
Modify
You're new to the cloud and have no tag governance.
Already have thousands of resources with no tag governance.
Already have an existing taxonomy that you need changed.
In this tutorial, you complete the following tasks:
Identify your business requirements
Map each requirement to a policy definition
Group the tag policies into an initiative
Prerequisites
To complete this tutorial, you need an Azure subscription. If you don't have one, create afree accountbefore you begin.
Identify requirements
Like any good implementation of governance controls, the requirements should come from your business needs and be well understood before creating technical controls. For this scenario tutorial, the following items are our business requirements:
Two required tags on all resources:CostCenterandEnv.
Env
CostCentermust exist on all containers and individual resources.Resources inherit from the container they're in, but might be individually overridden.
Resources inherit from the container they're in, but might be individually overridden.
Envmust exist on all containers and individual resources.Resources determine environment by container naming scheme and might not be overridden.All resources in a container are part of the same environment.
Env
Resources determine environment by container naming scheme and might not be overridden.
All resources in a container are part of the same environment.
Configure the CostCenter tag
In terms specific to an Azure environment managed by Azure Policy, theCostCentertag requirements
call for the following outcomes:
Deny resource groups missing theCostCentertag.
Modify resources to add theCostCentertag from the parent resource group when missing.
Deny resource groups missing the CostCenter tag
Because theCostCenterfor a resource group can't be determined by the name of the resource group, it must have the tag defined on the request to create the resource group. The following policy rule with thedenyeffect prevents the creation or updating of resource groups that don't have theCostCentertag:
"if": {
  "allOf": [
    {
      "field": "type",
      "equals": "Microsoft.Resources/subscriptions/resourceGroups"
    },
    {
      "field": "tags['CostCenter']",
      "exists": false
    }
  ]
},
"then": {
  "effect": "deny"
}
"if": {
  "allOf": [
    {
      "field": "type",
      "equals": "Microsoft.Resources/subscriptions/resourceGroups"
    },
    {
      "field": "tags['CostCenter']",
      "exists": false
    }
  ]
},
"then": {
  "effect": "deny"
}
Note
As this policy rule targets a resource group, themodeon the policy definition must beAllinstead ofIndexed.
mode
All
Indexed
Modify resources to inherit the CostCenter tag when missing
The secondCostCenterneed is for any resources to inherit the tag from the parent resource group
when it's missing. If the tag is already defined on the resource, even if different from the parent
resource group, it must be left alone. The following policy rule usesmodify:
"policyRule": {
  "if": {
    "field": "tags['CostCenter']",
    "exists": "false"
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "add",
          "field": "tags['CostCenter']",
          "value": "[resourcegroup().tags['CostCenter']]"
        }
      ]
    }
  }
}
"policyRule": {
  "if": {
    "field": "tags['CostCenter']",
    "exists": "false"
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "add",
          "field": "tags['CostCenter']",
          "value": "[resourcegroup().tags['CostCenter']]"
        }
      ]
    }
  }
}
This policy rule uses theaddoperation instead ofaddOrReplaceas we don't want to alter
the tag value if it's present whenremediatingexisting
resources. It also uses the[resourcegroup()]template function to get the tag value from the
parent resource group.
add
addOrReplace
[resourcegroup()]
Note
As this policy rule targets resources that support tags, themodeon the policy definition must
be 'Indexed'. This configuration also ensures this policy skips resource groups.
Configure the Env tag
In terms specific to an Azure environment managed by Azure Policy, theEnvtag requirements call
for the following outcomes:
Env
Modify theEnvtag on the resource group based on the naming scheme of the resource group
Env
Modify theEnvtag on all resources in the resource group to the same as the parent resource
group
Env
Modify resource groups Env tag based on name
Amodifypolicy is required for each environment that exists in
your Azure environment. Themodifypolicy for each looks something like this policy definition:
modify
"policyRule": {
  "if": {
    "allOf": [
      {
        "field": "type",
        "equals": "Microsoft.Resources/subscriptions/resourceGroups"
      },
      {
        "field": "name",
        "like": "prd-*"
      },
      {
        "field": "tags['Env']",
        "notEquals": "Production"
      }
    ]
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "addOrReplace",
          "field": "tags['Env']",
          "value": "Production"
        }
      ]
    }
  }
}
"policyRule": {
  "if": {
    "allOf": [
      {
        "field": "type",
        "equals": "Microsoft.Resources/subscriptions/resourceGroups"
      },
      {
        "field": "name",
        "like": "prd-*"
      },
      {
        "field": "tags['Env']",
        "notEquals": "Production"
      }
    ]
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "addOrReplace",
          "field": "tags['Env']",
          "value": "Production"
        }
      ]
    }
  }
}
Note
As this policy rule targets a resource group, themodeon the policy definition must beAllinstead ofIndexed.
mode
All
Indexed
This policy only matches resource groups with the sample naming scheme used for production resources
ofprd-. More complex naming scheme's can be achieved with severalmatchconditions instead of
the singlelikein this example.
prd-
match
like
Modify resources to inherit the Env tag
The business requirement calls for all resources to have theEnvtag that their parent resource
group does. This tag can't be overridden, so use theaddOrReplaceoperation with themodifyeffect. The samplemodifypolicy looks like the following
rule:
Env
addOrReplace
modify
"policyRule": {
  "if": {
    "anyOf": [
      {
        "field": "tags['Env']",
        "notEquals": "[resourcegroup().tags['Env']]"
      },
      {
        "field": "tags['Env']",
        "exists": false
      }
    ]
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "addOrReplace",
          "field": "tags['Env']",
          "value": "[resourcegroup().tags['Env']]"
        }
      ]
    }
  }
}
"policyRule": {
  "if": {
    "anyOf": [
      {
        "field": "tags['Env']",
        "notEquals": "[resourcegroup().tags['Env']]"
      },
      {
        "field": "tags['Env']",
        "exists": false
      }
    ]
  },
  "then": {
    "effect": "modify",
    "details": {
      "roleDefinitionIds": [
        "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "operations": [
        {
          "operation": "addOrReplace",
          "field": "tags['Env']",
          "value": "[resourcegroup().tags['Env']]"
        }
      ]
    }
  }
}
Note
As this policy rule targets resources that support tags, themodeon the policy definition must
beIndexed. This configuration also ensures this policy skips resource groups.
mode
Indexed
This policy rule looks for any resource that doesn't have its parent resource groups value for theEnvtag or is missing theEnvtag. Matching resources have theirEnvtag set to the parent
resource groups value, even if the tag already existed on the resource but with a different value.
Env
Env
Env
Assign the initiative and remediate resources
After the tag policies are created, join them into a single initiative for tag governance and
assign them to a management group or subscription. The initiative and included policies then
evaluate compliance of existing resources and alters requests for new or updated resources that
match theifproperty in the policy rule. However, the policy doesn't automatically update
existing non-compliant resources with the defined tag changes.
if
LikedeployIfNotExistspolicies, themodifypolicy
uses remediation tasks to alter existing non-compliant resources. Follow the directions onHow-to remediate resourcesto identify your non-compliantmodifyresources and correct the tags to your defined taxonomy.
modify
modify
Clean up resources
If you're done working with resources from this tutorial, use the following steps to delete any of
the assignments or definitions you created:
SelectDefinitions(orAssignmentsif you're trying to delete an assignment) underAuthoringin the left side of the Azure Policy page.
SelectDefinitions(orAssignmentsif you're trying to delete an assignment) underAuthoringin the left side of the Azure Policy page.
Search for the new initiative or policy definition (or assignment) you want to remove.
Search for the new initiative or policy definition (or assignment) you want to remove.
Right-click the row or select the ellipses at the end of the definition or assignment, and
selectDelete definitionorDelete assignment.
Right-click the row or select the ellipses at the end of the definition or assignment, and
selectDelete definitionorDelete assignment.
Review
In this tutorial, you learned about the following tasks:
Identified your business requirements
Mapped each requirement to a policy definition
Grouped the tag policies into an initiative
Next steps
To learn more about the structures of policy definitions, look at this article:
Azure Policy definition structure
Feedback
Was this page helpful?
Additional resources