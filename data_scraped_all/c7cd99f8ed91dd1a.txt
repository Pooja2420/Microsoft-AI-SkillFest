Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft identity platform and the OAuth 2.0 device authorization grant flow
Article
2025-01-04
21 contributors
In this article
The Microsoft identity platform supports thedevice authorization grant, which allows users to sign in to input-constrained devices such as a smart TV, IoT device, or a printer. To enable this flow, the device has the user visit a webpage in a browser on another device to sign in. Once the user signs in, the device is able to get access tokens and refresh tokens as needed.
This article describes how to program directly against the protocol in your application.  When possible, we recommend you use the supported Microsoft Authentication Libraries (MSAL) instead toacquire tokens and call secured web APIs. You can refer tosample apps that use MSALfor examples.
Protocol diagram
The entire device code flow is shown in the following diagram. Each step is explained throughout this article.

Device authorization request
The client must first check with the authentication server for a device and user code used to initiate authentication. The client collects this request from the/devicecodeendpoint. In the request, the client should also include the permissions it needs to acquire from the user.
/devicecode
From the moment the request is sent, the user has 15 minutes to sign in. This is the default value forexpires_in. The request should only be made when the user indicates they're ready to sign in.
expires_in
// Line breaks are for legibility only.

POST https://login.microsoftonline.com/{tenant}/oauth2/v2.0/devicecode
Content-Type: application/x-www-form-urlencoded

client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=user.read%20openid%20profile
// Line breaks are for legibility only.

POST https://login.microsoftonline.com/{tenant}/oauth2/v2.0/devicecode
Content-Type: application/x-www-form-urlencoded

client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=user.read%20openid%20profile
tenant
/common
/consumers
/organizations
client_id
scope
Device authorization response
A successful response is a JSON object containing the required information to allow the user to sign in.
device_code
user_code
verification_uri
user_code
expires_in
device_code
user_code
interval
message
?mkt=xx-XX
Note
Theverification_uri_completeresponse field is not included or supported at this time.  We mention this because if you read thestandardyou see thatverification_uri_completeis listed as an optional part of the device code flow standard.
verification_uri_complete
verification_uri_complete
Authenticating the user
After the client receivesuser_codeandverification_uri, the values are displayed and the user is directed to sign in via their mobile or PC browser.
user_code
verification_uri
If the user authenticates with a personal account, using/commonor/consumers, they're asked to sign in again in order to transfer authentication state to the device. This is because the device is unable to access the user's cookies. They're asked to consent to the permissions requested by the client. However, this doesn't apply to work or school accounts used to authenticate.
/common
/consumers
While the user is authenticating at theverification_uri, the client should be polling the/tokenendpoint for the requested token using thedevice_code.
verification_uri
/token
device_code
POST https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:device_code&client_id=00001111-aaaa-2222-bbbb-3333cccc4444&device_code=GMMhmHCXhWEzkobqIHGG_EnNYYsAkukHspeYUk9E8...
POST https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:device_code&client_id=00001111-aaaa-2222-bbbb-3333cccc4444&device_code=GMMhmHCXhWEzkobqIHGG_EnNYYsAkukHspeYUk9E8...
tenant
grant_type
urn:ietf:params:oauth:grant-type:device_code
client_id
client_id
device_code
device_code
Expected errors
The device code flow is a polling protocol so errors served to the client must be expected prior to completion of user authentication.
authorization_pending
interval
authorization_declined
bad_verification_code
device_code
/token
device_code
expired_token
expires_in
device_code
Successful authentication response
A successful token response looks like:
{
    "token_type": "Bearer",
    "scope": "User.Read profile openid email",
    "expires_in": 3599,
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "refresh_token": "AwABAAAAvPM1KaPlrEqdFSBzjqfTGAMxZGUTdM0t4B4...",
    "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIyZDRkMTFhMi1mODE0LTQ2YTctOD..."
}
{
    "token_type": "Bearer",
    "scope": "User.Read profile openid email",
    "expires_in": 3599,
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "refresh_token": "AwABAAAAvPM1KaPlrEqdFSBzjqfTGAMxZGUTdM0t4B4...",
    "id_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIyZDRkMTFhMi1mODE0LTQ2YTctOD..."
}
token_type
Bearer
scope
expires_in
access_token
id_token
scope
openid
refresh_token
scope
offline_access
You can use the refresh token to acquire new access tokens and refresh tokens using the same flow documented in theOAuth Code flow documentation.
Warning
Don't attempt to validate or read tokens for any API you don't own, including the tokens in this example, in your code. Tokens for Microsoft services can use a special format that will not validate as a JWT, and may also be encrypted for consumer (Microsoft account) users. While reading tokens is a useful debugging and learning tool, do not take dependencies on this in your code or assume specifics about tokens that aren't for an API you control.
Feedback
Was this page helpful?
Additional resources