Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure managed identities in Unity Catalog to access storage
Article
2025-01-28
6 contributors
In this article
This article describes how to use Azure managed identities for connecting to storage containers on behalf of Unity Catalog users.
What are Azure managed identities?
Unity Catalogcan be configured to use anAzure managed identityto access storage containers on behalf of Unity Catalog users. Managed identities provide an identity for applications to use when they connect to resources that support Microsoft Entra ID authentication.
You can use managed identities in Unity Catalog to support two primary use cases:
As an identity to connect to the metastoreâs managed storage accounts (where managed tables are stored).
As an identity to connect to other external storage accounts (either for file-based access or for accessing existing datasets through external tables).
Configuring Unity Catalog with a managed identity has the following benefits over configuring Unity Catalog with a service principal:
Managed identities do not require you to maintain credentials or rotate secrets.
Managed identities do not require you to maintain credentials or rotate secrets.
If your Azure Databricks workspace is deployed in your own VNet (also known as VNet injection) and you use a storage firewall to protect an Azure Data Lake Storage account, you can use the managed identity to connect the workspace to that account. See(Recommended for VNet-injected workspaces) Configure trusted access to Azure Storage based on your managed identity.NoteYou cannot use a storage firewall in a standard Azure Databricks deployment.
If your Azure Databricks workspace is deployed in your own VNet (also known as VNet injection) and you use a storage firewall to protect an Azure Data Lake Storage account, you can use the managed identity to connect the workspace to that account. See(Recommended for VNet-injected workspaces) Configure trusted access to Azure Storage based on your managed identity.
Note
You cannot use a storage firewall in a standard Azure Databricks deployment.
Configure a managed identity for Unity Catalog
To configure a managed identity to use with Unity Catalog, you first create an access connector for Azure Databricks in Azure. By default, the access connector will deploy with a system-assigned managed identity. You can choose instead to attach a user-assigned managed identity. You then grant the managed identity access to your Azure Data Lake Storage account and use the access connector when you create a Unity Catalog metastore or storage credential.
Requirements
The Azure user or service principal who creates the access connector must:
Be a Contributor or Owner of an Azure resource group.
The Azure user or service principal who grants the managed identity to the storage account must:
Be an Owner or a user with the User Access Administrator Azure RBAC role on the storage account.
Step 1: Create an access connector for Azure Databricks
The Access Connector for Azure Databricks is a first-party Azure resource that lets you connect managed identities to an Azure Databricks account. Each access connector for Azure Databricks can include a system-assigned managed identity, one or more user-assigned managed identities, or both.
Log in to the Azure Portal as a Contributor or Owner of a resource group.
Log in to the Azure Portal as a Contributor or Owner of a resource group.
Click+ CreateorCreate a new resource.
Click+ CreateorCreate a new resource.
Search forAccess Connector for Azure Databricksand select it.
Search forAccess Connector for Azure Databricksand select it.
ClickCreate.
ClickCreate.
On theBasicstab, accept, select, or enter values for the following fields:Subscription: This is the Azure subscription that the access connector will be created in. The default is the Azure subscription you are currently using. It can be any subscription in the tenant.Resource group: This is the Azure resource group that the access connector will be created in.Name: Enter a name that indicates the purpose of the connector.Region: This should be the same region as the storage account that you will connect to.
On theBasicstab, accept, select, or enter values for the following fields:
Subscription: This is the Azure subscription that the access connector will be created in. The default is the Azure subscription you are currently using. It can be any subscription in the tenant.
Resource group: This is the Azure resource group that the access connector will be created in.
Name: Enter a name that indicates the purpose of the connector.
Region: This should be the same region as the storage account that you will connect to.
ClickNext, enter tags, and clickNext.
ClickNext, enter tags, and clickNext.
On theManaged Identitytab, create the managed identities as follows:To use a system-assigned managed identity, setStatustoOnTo add user-assigned managed identities, click+ Addand select one or more user-assigned managed identities.
On theManaged Identitytab, create the managed identities as follows:
To use a system-assigned managed identity, setStatustoOn
To add user-assigned managed identities, click+ Addand select one or more user-assigned managed identities.

ClickReview + create.
ClickReview + create.
When you see theValidation Passedmessage, clickCreate.
When you see theValidation Passedmessage, clickCreate.
When the deployment is complete, clickGo to resource.
When the deployment is complete, clickGo to resource.
Make a note of theResource ID.The resource ID is in the format:/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
Make a note of theResource ID.
The resource ID is in the format:
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
Step 2: Grant the managed identity access to the storage account
To grant the permissions in this step, you must have the Owner or User Access Administrator Azure RBAC role on your storage account.
Log in to your Azure Data Lake Storage account.
Go toAccess Control (IAM), click+ Add, and selectAdd role assignment.
Select theStorage Blob Data Contributorrole and clickNext.
UnderAssign access to, selectManaged identity.
Click+Select Members, and select eitherAccess connector for Azure DatabricksorUser-assigned managed identity.
Search for your connector name or user-assigned identity, select it, and clickReview and Assign.
Alternatively, you can limit access to the storage account by granting the managed identity access to a specific container. Follow the same steps above, but grant theStorage Blob Delegator roleon the storage account and theStorage Blob Data Contributor roleon the container.
Step 3: Grant the managed identity access to file events
Granting your managed identity access to file events allows Azure Databricks to subscribe to file event notifications emitted by cloud providers. This makes file processing more efficient. To grant the permissions in this step, you must have the Owner or User Access Administrator Azure RBAC role on your storage account.
Log in to your Azure Data Lake Storage account.
Go toAccess Control (IAM), click+ Add, and selectAdd role assignment.
Select theStorage Queue Data Contributorrole, and clickNext.
UnderAssign access to, selectManaged identity.
Click+Select Members, and select eitherAccess connector for Azure DatabricksorUser-assigned managed identity.
Search for your connector name or user-assigned identity, select it, and clickReview and Assign.
Step 4: Grant Azure Databricks access to configure file events on your behalf
Note
This step is optional but highly recommended. If you do not grant Azure Databricks access to configure file events on your behalf, you must configure file events manually for each location. If you do not, you will have limited access to critical features that Databricks may release in the future.
This step allows Azure Databricks to set up file events automatically. To grant the permissions in this step, you must have the Owner or User Access Administrator Azure RBAC roles on your managed identity and the resource group that your Azure Data Lake Storage account is in.
Follow the instructions inStep 3: Grant the managed identity access to file eventsand assign theStorage Account Contributor, alongside theStorage Queue Data Contributorrole, to your managed identity.
Navigate to the Azure resource group that your Azure Data Lake Storage account is in.
Go toAccess Control (IAM), click+ Add, and selectAdd role assignment.
Select theEventGrid EventSubscription Contributorrole and clickNext.
UnderAssign access to, selectManaged identity.
Click+Select Members, and select eitherAccess connector for Azure DatabricksorUser-assigned managed identity.
Search for your connector name or user-assigned identity, select it, and clickReview and Assign.
Use a managed identity to access the Unity Catalog root storage account
This section describes how to give the managed identity access to the root storage account when you create a Unity Catalog metastore.
To learn how to upgrade an existing Unity Catalog metastore to use a managed identity, seeUpgrade your existing Unity Catalog metastore to use a managed identity to access its root storage.
As an Azure Databricks account admin, log in to theAzure Databricks account console.
As an Azure Databricks account admin, log in to theAzure Databricks account console.
ClickCatalog.
ClickCatalog.
ClickCreate Metastore.
ClickCreate Metastore.
Enter values for the following fields:Namefor the metastore.Regionwhere the metastore will be deployed.For best performance, co-locate the access connector, workspaces, metastore and cloud storage location in the same cloud region.ADLS Gen 2 path: enter the path to the storage container that you will use as root storage for the metastore.Theabfss://prefix is added automatically.Access Connector ID: enter the Azure Databricks access connectorâs resource ID in the format:/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>(Optional)Managed Identity ID: If you created the access connector using a user-assigned managed identity, enter the resource ID of the managed identity.
Enter values for the following fields:
Namefor the metastore.
Namefor the metastore.
Regionwhere the metastore will be deployed.For best performance, co-locate the access connector, workspaces, metastore and cloud storage location in the same cloud region.
Regionwhere the metastore will be deployed.
For best performance, co-locate the access connector, workspaces, metastore and cloud storage location in the same cloud region.
ADLS Gen 2 path: enter the path to the storage container that you will use as root storage for the metastore.Theabfss://prefix is added automatically.
ADLS Gen 2 path: enter the path to the storage container that you will use as root storage for the metastore.
Theabfss://prefix is added automatically.
abfss://
Access Connector ID: enter the Azure Databricks access connectorâs resource ID in the format:/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
Access Connector ID: enter the Azure Databricks access connectorâs resource ID in the format:
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
(Optional)Managed Identity ID: If you created the access connector using a user-assigned managed identity, enter the resource ID of the managed identity.
(Optional)Managed Identity ID: If you created the access connector using a user-assigned managed identity, enter the resource ID of the managed identity.
ClickCreate.
ClickCreate.
When prompted, select workspaces to link to the metastore.
When prompted, select workspaces to link to the metastore.
Use a managed identity to access external storage managed in Unity Catalog
Unity Catalog gives you the ability to access existing data in storage accounts using storage credentials and external locations. Storage credentials store the managed identity, and external locations define a path to storage along with a reference to the storage credential. You can use this approach to grant and control access to existing data in cloud storage and to register external tables in Unity Catalog.
A storage credential can hold a managed identity or service principal. Using a managed identity has the benefit of allowing Unity Catalog to access storage accounts protected by network rules, which isnât possible using service principals, and it removes the need to manage and rotate secrets.
To create a storage credential using a managed identity and assign that storage credential to an external location, follow the instructions inConnect to cloud object storage and services using Unity Catalog.
(Recommended for VNet-injected workspaces) Configure trusted access to Azure Storage based on your managed identity
If your Azure Databricks workspace is deployed in your own Azure virtual network, also known asâVNet injectionâ, and you use a storage firewall to protect an Azure Data Lake Storage account, you must:
Enable your Azure Databricks workspace to access Azure Storage.
Enable your managed identity to access Azure Storage.
Step 1. Enable your Azure Databricks workspace to access Azure Storage
You must configure network settings to allow your Azure Databricks workspace to access Azure Data Lake Storage. You can configure either private endpoints or access from your virtual network on Azure Data Lake Storage to allow connections from your subnets to your Azure Data Lake Storage account.
For instructions, seeGrant your Azure Databricks workspace access to Azure Data Lake Storage.
Step 2: Enable your managed identity to access Azure Storage
This step is necessary only if âAllow Azure services on the trusted services list to access this storage accountâ is disabled for your Azure Storage account. If that configuration is enabled:
Any access connector for Azure Databricks in the same tenant as the storage account can access the storage account.
Any Azure trusted service can access the storage account. SeeGrant access to trusted Azure services.
The instructions below include a step in which you disable this configuration. You can use the Azure Portal or the Azure CLI.
Log in to the Azure Portal, find and select the Azure Storage account, and go to theNetworkingtab.
Log in to the Azure Portal, find and select the Azure Storage account, and go to theNetworkingtab.
SetPublic Network AccesstoEnabled from selected virtual networks and IP addresses.As an option, you can instead setPublic Network AccesstoDisabled. The managed identity can be used to bypass the check on public network access.
SetPublic Network AccesstoEnabled from selected virtual networks and IP addresses.
As an option, you can instead setPublic Network AccesstoDisabled. The managed identity can be used to bypass the check on public network access.
UnderResource instances, select aResource typeofMicrosoft.Databricks/accessConnectorsand select your Azure Databricks access connector.
UnderResource instances, select aResource typeofMicrosoft.Databricks/accessConnectorsand select your Azure Databricks access connector.
UnderExceptions, clear theAllow Azure services on the trusted services list to access this storage accountcheckbox.
UnderExceptions, clear theAllow Azure services on the trusted services list to access this storage accountcheckbox.
Install the Azure CLIandsign in.To sign in by using a Microsoft Entra ID service principal, seeAzure CLI login with a Microsoft Entra ID service principal.To sign in by using an Azure Databricks user account, seeAzure CLI login with an Azure Databricks user account.
Install the Azure CLIandsign in.
To sign in by using a Microsoft Entra ID service principal, seeAzure CLI login with a Microsoft Entra ID service principal.
To sign in by using an Azure Databricks user account, seeAzure CLI login with an Azure Databricks user account.
Add a network rule to the storage account:az storage account network-rule add \
-âsubscription <subscription id of the resource group> \
-âresource-id <resource Id of the access connector for Azure Databricks> \
-âtenant-id <tenant Id> \
-g <name of the Azure Storage resource group> \
-âaccount-name <name of the Azure Storage resource> \Add the resource ID in the format:/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
Add a network rule to the storage account:
az storage account network-rule add \
-âsubscription <subscription id of the resource group> \
-âresource-id <resource Id of the access connector for Azure Databricks> \
-âtenant-id <tenant Id> \
-g <name of the Azure Storage resource group> \
-âaccount-name <name of the Azure Storage resource> \
az storage account network-rule add \
-âsubscription <subscription id of the resource group> \
-âresource-id <resource Id of the access connector for Azure Databricks> \
-âtenant-id <tenant Id> \
-g <name of the Azure Storage resource group> \
-âaccount-name <name of the Azure Storage resource> \
Add the resource ID in the format:
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
After you create the network rule, go to your Azure Storage account in the Azure Portal and view the managed identity in theNetworkingtab underResource instances, resource typeMicrosoft.Databricks/accessConnectors.
After you create the network rule, go to your Azure Storage account in the Azure Portal and view the managed identity in theNetworkingtab underResource instances, resource typeMicrosoft.Databricks/accessConnectors.
Microsoft.Databricks/accessConnectors
UnderExceptions, clear theAllow Azure services on the trusted services list to access this storage accountcheckbox.
UnderExceptions, clear theAllow Azure services on the trusted services list to access this storage accountcheckbox.
Optionally, setPublic Network AccesstoDisabled. The managed identity can be used to bypass the check on public network access.The standard approach is to keep this value set toEnabled from selected virtual networks and IP addresses.
Optionally, setPublic Network AccesstoDisabled. The managed identity can be used to bypass the check on public network access.
The standard approach is to keep this value set toEnabled from selected virtual networks and IP addresses.
(Recommended) Configure Azure storage firewalls to allow access from serverless SQL warehouses
Serverless SQL warehousesare compute resources that run in the Azure subscription for Azure Databricks, not your Azure subscription. If you configure a firewall on Azure Data Lake Storage and you plan to use serverless SQL warehouses, you must configure the firewall to allow access from serverless SQL warehouses.
For instructions, seeConfigure a firewall for serverless compute access.
Upgrade your existing Unity Catalog metastore to use a managed identity to access its root storage
If you have a Unity Catalog metastore that was created using a service principal and you would like to upgrade it to use a managed identity, you can update it using an API call.
Create an Access Connector for Azure Databricks and assign it permissions to the storage container that is being used for your Unity Catalog metastore root storage, using the instructions inConfigure a managed identity for Unity Catalog.You can create the access connector with either a system-assigned managed identity or a user-assigned managed identity.Make a note of the access connectorâs resource ID. If you use a user-assigned managed identity, also make a note of its resource ID.
Create an Access Connector for Azure Databricks and assign it permissions to the storage container that is being used for your Unity Catalog metastore root storage, using the instructions inConfigure a managed identity for Unity Catalog.
You can create the access connector with either a system-assigned managed identity or a user-assigned managed identity.
Make a note of the access connectorâs resource ID. If you use a user-assigned managed identity, also make a note of its resource ID.
As an account admin, log in to an Azure Databricks workspace that is assigned to the metastore.You do not have to be a workspace admin.
As an account admin, log in to an Azure Databricks workspace that is assigned to the metastore.
You do not have to be a workspace admin.
Generate a personal access token.
Generate a personal access token.
Create an Azure Databricks authentication configuration profile in your local environment that contains the following:The workspace instance name and workspace ID of the workspace where you generated your personal access token.The personal access token value.SeeAzure Databricks personal access token authentication.
Create an Azure Databricks authentication configuration profile in your local environment that contains the following:
The workspace instance name and workspace ID of the workspace where you generated your personal access token.
The personal access token value.
SeeAzure Databricks personal access token authentication.
Use theDatabricks CLIto run the following command to recreate the storage credential.Replace the placeholder values:<credential-name>: A name for the storage credential.<access-connector-id>: Resource ID for the Azure Databricks access connector in the format/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name><managed-identity-id>: If you created the access connector using a user-assigned managed identity, specify the resource ID of the managed identity.<profile-name>: The name of your Azure Databricks authentication configuration profile.databricks storage-credentials create --json '{
  "name\": "<credential-name>",
  "azure_managed_identity": {
    "access_connector_id": "<access-connector-id>",
    "managed_identity_id": "<managed-identity-id>"
  }
}' --profile <profile-name>
Use theDatabricks CLIto run the following command to recreate the storage credential.
Replace the placeholder values:
<credential-name>: A name for the storage credential.
<credential-name>
<access-connector-id>: Resource ID for the Azure Databricks access connector in the format/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
<access-connector-id>
/subscriptions/12f34567-8ace-9c10-111c-aea8eba12345c/resourceGroups/<resource-group>/providers/Microsoft.Databricks/accessConnectors/<connector-name>
<managed-identity-id>: If you created the access connector using a user-assigned managed identity, specify the resource ID of the managed identity.
<managed-identity-id>
<profile-name>: The name of your Azure Databricks authentication configuration profile.
<profile-name>
databricks storage-credentials create --json '{
  "name\": "<credential-name>",
  "azure_managed_identity": {
    "access_connector_id": "<access-connector-id>",
    "managed_identity_id": "<managed-identity-id>"
  }
}' --profile <profile-name>
databricks storage-credentials create --json '{
  "name\": "<credential-name>",
  "azure_managed_identity": {
    "access_connector_id": "<access-connector-id>",
    "managed_identity_id": "<managed-identity-id>"
  }
}' --profile <profile-name>
Make a note of the storage credential ID in the response.
Make a note of the storage credential ID in the response.
Run the following Databricks CLI command to retrieve themetastore_id. Replace<profile-name>with the name of your Azure Databricks authentication configuration profile.databricks metastores summary --profile <profile-name>
Run the following Databricks CLI command to retrieve themetastore_id. Replace<profile-name>with the name of your Azure Databricks authentication configuration profile.
metastore_id
<profile-name>
databricks metastores summary --profile <profile-name>
databricks metastores summary --profile <profile-name>
Run the following Databricks CLI command to update the metastore with the new root storage credential.Replace the placeholder values:<metastore-id>: The metastore ID that you retrieved in the previous step.<storage-credential-id>: The storage credential ID.<profile-name>: The name of your Azure Databricks authentication configuration profile.databricks metastores update <metastore-id> \
--storage-root-credential-id <storage-credential-id> \
--profile <profile-name>
Run the following Databricks CLI command to update the metastore with the new root storage credential.
Replace the placeholder values:
<metastore-id>: The metastore ID that you retrieved in the previous step.
<metastore-id>
<storage-credential-id>: The storage credential ID.
<storage-credential-id>
<profile-name>: The name of your Azure Databricks authentication configuration profile.
<profile-name>
databricks metastores update <metastore-id> \
--storage-root-credential-id <storage-credential-id> \
--profile <profile-name>
databricks metastores update <metastore-id> \
--storage-root-credential-id <storage-credential-id> \
--profile <profile-name>
Feedback
Was this page helpful?
Additional resources