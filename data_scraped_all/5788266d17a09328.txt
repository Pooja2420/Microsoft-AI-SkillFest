Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create an Azure storage account
Article
2025-04-11
30 contributors
In this article
An Azure storage account contains all of your Azure Storage data objects: blobs, files, queues, and tables. The storage account provides a unique namespace for your Azure Storage data that is accessible from anywhere in the world over HTTP or HTTPS. For more information about Azure storage accounts, seeStorage account overview. To create a storage account specifically for use with Azure Files, seeCreate an SMB file share.
In this how-to article, you learn to create a storage account using theAzure portal,Azure PowerShell,Azure CLI, or anAzure Resource Manager template.
Prerequisites
If you don't have an Azure subscription, create afree accountbefore you begin.
Portal
PowerShell
Azure CLI
Bicep
Template
Azure Developer CLI
Terraform
None.
To create an Azure storage account with PowerShell, make sure you have installed the latestAzure Az PowerShell module. SeeInstall the Azure PowerShell module.
You can sign in to Azure and run Azure CLI commands in one of two ways:
You can run CLI commands from within the Azure portal, in Azure Cloud Shell.
You can install the CLI and run CLI commands locally.
Use Azure Cloud Shell
Azure Cloud Shell is a free Bash shell that you can run directly within the Azure portal. The Azure CLI is preinstalled and configured to use with your account. Select theCloud Shellbutton on the menu in the upper-right section of the Azure portal:

The button launches an interactive shell that you can use to run the steps outlined in this how-to article:

Install the Azure CLI locally
You can also install and use the Azure CLI locally. If you plan to use Azure CLI locally, make sure you have installed the latest version of the Azure CLI. SeeInstall the Azure CLI.
None.
None.
The Azure Developer CLI(azd) is an open-source, command-line tool that streamlines provisioning and deploying resources to Azure using a template system.azdis available for several developmentenvironments, including the following:
azd
azd
Locally via CLI byinstalling azd.
Locally via CLI byinstalling azd.
GitHub Codespacesenvironments.
GitHub Codespacesenvironments.
The Azure portal usingCloud ShellNoteTheazdtemplate includes a.devcontainerthat already hasazdinstalled, therefore you can skip the installation step if you plan to use adevcontainereither locally or in an environment like Codespaces.
The Azure portal usingCloud Shell
Note
Theazdtemplate includes a.devcontainerthat already hasazdinstalled, therefore you can skip the installation step if you plan to use adevcontainereither locally or in an environment like Codespaces.
azd
.devcontainer
azd
devcontainer
You need an Azure account with an active subscription. You cancreate an account for free.
You need an Azure account with an active subscription. You cancreate an account for free.
Install and configure Terraform
Install and configure Terraform
Next, sign in to Azure.
Portal
PowerShell
Azure CLI
Bicep
Template
Azure Developer CLI
Terraform
Sign in to theAzure portal.
Sign in to your Azure subscription with theConnect-AzAccountcommand and follow the on-screen directions to authenticate.
Connect-AzAccount
Connect-AzAccount
Connect-AzAccount
To launch Azure Cloud Shell, sign in to theAzure portal.
To log into your local installation of the CLI, run theaz sign-incommand:
az login
az login
N/A
N/A
If you plan to useazdvia Cloud Shell:
azd
Sign-in to theAzure portal
Sign-in to theAzure portal
Launch Cloud Shell by clicking on the corresponding icon.azdis automatically available in Cloud Shell and will authenticate via the account you used to sign-in to the Azure portal.
Launch Cloud Shell by clicking on the corresponding icon.azdis automatically available in Cloud Shell and will authenticate via the account you used to sign-in to the Azure portal.
azd

To sign-in to a local installation ofazdor Codespaces environment, run theazd auth sign-incommand:
azd
azd auth login
azd auth login
azdwill launch a browser window that you can use to sign-in to Azure.
azd
Authenticate Terraform to Azure
Create a storage account
A storage account is an Azure Resource Manager resource. Resource Manager is the deployment and management service for Azure. For more information, seeAzure Resource Manager overview.
Every Resource Manager resource, including an Azure storage account, must belong to an Azure resource group. A resource group is a logical container for grouping your Azure services. When you create a storage account, you have the option to either create a new resource group, or use an existing resource group. This how-to shows how to create a new resource group.
Storage account type parameters
When you create a storage account using PowerShell, the Azure CLI, Bicep, Azure Templates, or the Azure Developer CLI, the storage account type is specified by thekindparameter (for example,StorageV2). The performance tier and redundancy configuration are specified together by theskuorSkuNameparameter (for example,Standard_GRS). The following table shows which values to use for thekindparameter and theskuorSkuNameparameter to create a particular type of storage account with the desired redundancy configuration.
kind
StorageV2
sku
SkuName
Standard_GRS
kind
sku
SkuName
Portal
PowerShell
Azure CLI
Bicep
Template
Azure Developer CLI
Terraform
To create an Azure storage account with the Azure portal, follow these steps:
From the left portal menu, selectStorage accountsto display a list of your storage accounts. If the portal menu isn't visible, select the menu button to toggle it on.
From the left portal menu, selectStorage accountsto display a list of your storage accounts. If the portal menu isn't visible, select the menu button to toggle it on.

On theStorage accountspage, selectCreate.
On theStorage accountspage, selectCreate.

Options for your new storage account are organized into tabs in theCreate a storage accountpage. The following sections describe each of the tabs and their options.
Basics tab
On theBasicstab, provide the essential information for your storage account. After you complete theBasicstab, you can choose to further customize your new storage account by setting options on the other tabs, or you can selectReview + createto accept the default options and proceed to validate and create the account.
The following table describes the fields on theBasicstab.
Block blobs
File shares
Page blobs
The following image shows a standard configuration of the basic properties for a new storage account.

Advanced tab
On theAdvancedtab, you can configure additional options and modify default settings for your new storage account. Some of these options can also be configured after the storage account is created, while others must be configured at the time of creation.
The following table describes the fields on theAdvancedtab.
From any storage account
From storage accounts in the same Azure AD tenant
From storage accounts that have a private endpoint to the same virtual network
The following image shows a standard configuration of the advanced properties for a new storage account.

Networking tab
On theNetworkingtab, you can configure network connectivity and routing preference settings for your new storage account. These options can also be configured after the storage account is created.
The following table describes the fields on theNetworkingtab.
1With a quota increase, you can create up to 500 storage accounts with standard endpoints per region in a given subscription, for a total of 5500 storage accounts per region. For more information, seeIncrease Azure Storage account quotas.
The following image shows a standard configuration of the networking properties for a new storage account.

Important
Azure DNS zone endpoints are currently in PREVIEW.
See theSupplemental Terms of Use for Microsoft Azure Previewsfor legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
Data protection tab
On theData protectiontab, you can configure data protection options for blob data in your new storage account.  These options can also be configured after the storage account is created. For an overview of data protection options in Azure Storage, seeData protection overview.
The following table describes the fields on theData protectiontab.
The following image shows a standard configuration of the data protection properties for a new storage account.

Encryption tab
On theEncryptiontab, you can configure options that relate to how your data is encrypted when it is persisted to the cloud. Some of these options can be configured only when you create the storage account.
The following image shows a standard configuration of the encryption properties for a new storage account.

Tags tab
On theTagstab, you can specify Resource Manager tags to help organize your Azure resources. For more information, seeTag resources, resource groups, and subscriptions for logical organization.
The following image shows a standard configuration of the index tag properties for a new storage account.

Review + create tab
When you navigate to theReview + createtab, Azure runs validation on the storage account settings that you have chosen. If validation passes, you can proceed to create the storage account.
If validation fails, then the portal indicates which settings need to be modified.
The following image shows theReviewtab data prior to the creation of a new storage account.

To create a general-purpose v2 storage account with PowerShell, first create a new resource group by calling theNew-AzResourceGroupcommand:
$resourceGroup = "<resource-group>"
$location = "<location>"
New-AzResourceGroup -Name $resourceGroup -Location $location
$resourceGroup = "<resource-group>"
$location = "<location>"
New-AzResourceGroup -Name $resourceGroup -Location $location
If you're not sure which region to specify for the-Locationparameter, you can retrieve a list of supported regions for your subscription with theGet-AzLocationcommand:
-Location
Get-AzLocation | select Location
Get-AzLocation | select Location
Next, create a standard general-purpose v2 storage account with read-access geo-redundant storage (RA-GRS) by using theNew-AzStorageAccountcommand. Remember that the name of your storage account must be unique across Azure, so replace the placeholder value in brackets with your own unique value:
New-AzStorageAccount -ResourceGroupName $resourceGroup `
  -Name <account-name> `
  -Location $location `
  -SkuName Standard_RAGRS `
  -Kind StorageV2 `
  -AllowBlobPublicAccess $false `
  -MinimumTlsVersion TLS1_2
New-AzStorageAccount -ResourceGroupName $resourceGroup `
  -Name <account-name> `
  -Location $location `
  -SkuName Standard_RAGRS `
  -Kind StorageV2 `
  -AllowBlobPublicAccess $false `
  -MinimumTlsVersion TLS1_2
To create an account with Azure DNS zone endpoints (preview), follow these steps:
Register for the preview as described inAzure DNS zone endpoints (preview).
Register for the preview as described inAzure DNS zone endpoints (preview).
Make sure you have the latest version of PowerShellGet installed.Install-Module PowerShellGet -Repository PSGallery -Force
Make sure you have the latest version of PowerShellGet installed.
Install-Module PowerShellGet -Repository PSGallery -Force
Install-Module PowerShellGet -Repository PSGallery -Force
Close and reopen the PowerShell console.
Close and reopen the PowerShell console.
Install version4.4.2-previewor later of the Az.Storage PowerShell module. You might need to uninstall other versions of the PowerShell module. For more information about installing Azure PowerShell, seeInstall Azure PowerShell with PowerShellGet.Install-Module Az.Storage -Repository PsGallery -RequiredVersion 4.4.2-preview -AllowClobber -AllowPrerelease -Force
Install version4.4.2-previewor later of the Az.Storage PowerShell module. You might need to uninstall other versions of the PowerShell module. For more information about installing Azure PowerShell, seeInstall Azure PowerShell with PowerShellGet.
Install-Module Az.Storage -Repository PsGallery -RequiredVersion 4.4.2-preview -AllowClobber -AllowPrerelease -Force
Install-Module Az.Storage -Repository PsGallery -RequiredVersion 4.4.2-preview -AllowClobber -AllowPrerelease -Force
Next, create the account, specifyingAzureDnsZonefor the-DnsEndpointTypeparameter. After the account is created, you can see the service endpoints by getting thePrimaryEndpointsandSecondaryEndpointsproperties for the storage account.
AzureDnsZone
-DnsEndpointType
PrimaryEndpoints
SecondaryEndpoints
$rgName = "<resource-group>"
$accountName = "<storage-account>"

$account = New-AzStorageAccount -ResourceGroupName $rgName `
          -Name $accountName `
          -SkuName Standard_RAGRS `
          -Location <location> `
          -Kind StorageV2 `
          -AllowBlobPublicAccess $false `
          -MinimumTlsVersion TLS1_2 `
          -DnsEndpointType AzureDnsZone

$account.PrimaryEndpoints
$account.SecondaryEndpoints
$rgName = "<resource-group>"
$accountName = "<storage-account>"

$account = New-AzStorageAccount -ResourceGroupName $rgName `
          -Name $accountName `
          -SkuName Standard_RAGRS `
          -Location <location> `
          -Kind StorageV2 `
          -AllowBlobPublicAccess $false `
          -MinimumTlsVersion TLS1_2 `
          -DnsEndpointType AzureDnsZone

$account.PrimaryEndpoints
$account.SecondaryEndpoints
To enable a hierarchical namespace for the storage account to useAzure Data Lake Storage, set theEnableHierarchicalNamespaceparameter to$Trueon the call to theNew-AzStorageAccountcommand.
EnableHierarchicalNamespace
$True
The following table shows which values to use for theSkuNameandKindparameters to create a particular type of storage account with the desired redundancy configuration.
SkuName
Kind
To create a general-purpose v2 storage account with Azure CLI, first create a new resource group by calling theaz group createcommand.
az group create \
  --name storage-resource-group \
  --location eastus
az group create \
  --name storage-resource-group \
  --location eastus
If you're not sure which region to specify for the--locationparameter, you can retrieve a list of supported regions for your subscription with theaz account list-locationscommand.
--location
az account list-locations \
  --query "[].{Region:name}" \
  --out table
az account list-locations \
  --query "[].{Region:name}" \
  --out table
Next, create a standard general-purpose v2 storage account with read-access geo-redundant storage by using theaz storage account createcommand. Remember that the name of your storage account must be unique across Azure, so replace the placeholder value in brackets with your own unique value:
az storage account create \
  --name <account-name> \
  --resource-group storage-resource-group \
  --location eastus \
  --sku Standard_RAGRS \
  --kind StorageV2 \
  --min-tls-version TLS1_2 \
  --allow-blob-public-access false
az storage account create \
  --name <account-name> \
  --resource-group storage-resource-group \
  --location eastus \
  --sku Standard_RAGRS \
  --kind StorageV2 \
  --min-tls-version TLS1_2 \
  --allow-blob-public-access false
To create an account with Azure DNS zone endpoints (preview), first register for the preview as described inAzure DNS zone endpoints (preview). Next, install the preview extension for the Azure CLI if it's not already installed:
az extension add --name storage-preview
az extension add --name storage-preview
Next, create the account, specifyingAzureDnsZonefor the--dns-endpoint-typeparameter. After the account is created, you can see the service endpoints by getting thePrimaryEndpointsproperty of the storage account.
AzureDnsZone
--dns-endpoint-type
PrimaryEndpoints
az storage account create \
    --name <account-name> \
    --resource-group <resource-group> \
    --location <location> \
    --min-tls-version TLS1_2 \
    --allow-blob-public-access false \
    --dns-endpoint-type AzureDnsZone
az storage account create \
    --name <account-name> \
    --resource-group <resource-group> \
    --location <location> \
    --min-tls-version TLS1_2 \
    --allow-blob-public-access false \
    --dns-endpoint-type AzureDnsZone
After the account is created, you can return the service endpoints by getting theprimaryEndpointsandsecondaryEndpointsproperties for the storage account.
primaryEndpoints
secondaryEndpoints
az storage account show \
    --resource-group <resource-group> \
    --name <account-name> \
    --query '[primaryEndpoints, secondaryEndpoints]'
az storage account show \
    --resource-group <resource-group> \
    --name <account-name> \
    --query '[primaryEndpoints, secondaryEndpoints]'
To enable a hierarchical namespace for the storage account to useAzure Data Lake Storage, set theenable-hierarchical-namespaceparameter totrueon the call to theaz storage account createcommand. Creating a hierarchical namespace requires Azure CLI version 2.0.79 or later.
enable-hierarchical-namespace
true
You can use either Azure PowerShell or Azure CLI to deploy a Bicep file to create a storage account. The Bicep file used in this how-to article is fromAzure Resource Manager quickstart templates. Bicep currently doesn't support deploying a remote file.  Download and savethe Bicep fileto your local computer, and then run the scripts.
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateFile "main.bicep"
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateFile "main.bicep"
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
echo "Enter the location (i.e. centralus):" &&
read location &&
az group create --name $resourceGroupName --location "$location" &&
az deployment group create --resource-group $resourceGroupName --template-file "main.bicep"
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
echo "Enter the location (i.e. centralus):" &&
read location &&
az group create --name $resourceGroupName --location "$location" &&
az deployment group create --resource-group $resourceGroupName --template-file "main.bicep"
Note
This Bicep file serves only as an example. There are many storage account settings that aren't configured as part of this Bicep file. For example, if you want to useData Lake Storage, you would modify this Bicep file by setting theisHnsEnabledproperty of theStorageAccountPropertiesCreateParametersobject totrue.
isHnsEnabled
StorageAccountPropertiesCreateParameters
true
To learn how to modify this Bicep file or create new ones, see:
Azure Resource Manager documentation.
Storage account template reference.
Additional storage account template samples.
You can use either Azure PowerShell or Azure CLI to deploy a Resource Manager template to create a storage account. The template used in this how-to article is fromAzure Resource Manager quickstart templates. To run the scripts, selectTry itto open the Azure Cloud Shell. To paste the script, right-click the shell, and then selectPaste.
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json"
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json"
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
echo "Enter the location (i.e. centralus):" &&
read location &&
az group create --name $resourceGroupName --location "$location" &&
az deployment group create --resource-group $resourceGroupName --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json"
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
echo "Enter the location (i.e. centralus):" &&
read location &&
az group create --name $resourceGroupName --location "$location" &&
az deployment group create --resource-group $resourceGroupName --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json"
Note
This template serves only as an example. There are many storage account settings that aren't configured as part of this template. For example, if you want to useData Lake Storage, you would modify this template by setting theisHnsEnabledproperty of theStorageAccountPropertiesCreateParametersobject totrue.
isHnsEnabled
StorageAccountPropertiesCreateParameters
true
To learn how to modify this template or create new ones, see:
Azure Resource Manager documentation.
Storage account template reference.
Additional storage account template samples.
The Azure Developer CLI (azd) is designed aroundazdtemplates. These templates leverage Bicep files, basic configurations and automation tasks to provision and deploy resources to Azure. You can also view the source code for the template in thecreate a storage account quickstartrepository.
azd
azd
Initialize and run the template for this quickstart using the following steps:
Run theazd initcommand in a local terminal or CloudShell:azd init --template https://github.com/azure-samples/azd-create-storage-account
Run theazd initcommand in a local terminal or CloudShell:
azd init
azd init --template https://github.com/azure-samples/azd-create-storage-account
azd init --template https://github.com/azure-samples/azd-create-storage-account
azdwill prompt you for an environment name, which will determine the naming of provisioned resources in Azure.  Enter the nameazdstorageand press enter.
azdwill prompt you for an environment name, which will determine the naming of provisioned resources in Azure.  Enter the nameazdstorageand press enter.
azd
azdstorage

Next, run theazd upcommand to begin the template provisioning and deployment process.azd up
Next, run theazd upcommand to begin the template provisioning and deployment process.
azd up
azd up
azd up
If you are not already authenticated to Azure,azdwill output a message instructing you to sign-in to Azure using theazd auth logincommand.azd auth login
If you are not already authenticated to Azure,azdwill output a message instructing you to sign-in to Azure using theazd auth logincommand.
azd
azd auth login
azd auth login
azd auth login
Once you are authenticated,azdwill prompt you for the Azure location to provision the storage account to from a list of regions. Select your desired location from the list and press enter.
Once you are authenticated,azdwill prompt you for the Azure location to provision the storage account to from a list of regions. Select your desired location from the list and press enter.
azd
azdwill also prompt you for a storage account type. The type is a custom parameter that was added to the azd template to add flexibility to the storage account provisioning. ChooseStandard_LRSor whatever type you would like, and then press enter.
azdwill also prompt you for a storage account type. The type is a custom parameter that was added to the azd template to add flexibility to the storage account provisioning. ChooseStandard_LRSor whatever type you would like, and then press enter.
azd
Standard_LRS
azdwill begin provisioning the storage account. The command output will provide a link to the deployment in Azure  and status details until the command finishes.
azdwill begin provisioning the storage account. The command output will provide a link to the deployment in Azure  and status details until the command finishes.
azd

When the command finishes, click the link to open the Azure portal to the provisioned resource group and storage account.
When the command finishes, click the link to open the Azure portal to the provisioned resource group and storage account.

The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform. See morearticles and sample code showing how to use Terraform to manage Azure resources
Create a directory in which to test and run the sample Terraform code, and make it the current directory.
Create a directory in which to test and run the sample Terraform code, and make it the current directory.
Create a file namedproviders.tf, and insert the following code:terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>4.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
Create a file namedproviders.tf, and insert the following code:
providers.tf
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>4.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>4.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
Create a file namedmain.tf, and insert the following code:# Create Resource Group
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

# Random String for unique naming
resource "random_string" "name" {
  length  = 8
  special = false
  upper   = false
  lower   = true
  numeric = false
}

# Create Storage Account
resource "azurerm_storage_account" "sa" {
  name                     = "sa${random_string.name.result}"
  resource_group_name      = azurerm_resource_group.rg.name
  location                 = azurerm_resource_group.rg.location
  account_tier             = "Standard"
  account_replication_type = "RAGRS"
  account_kind             = "StorageV2"
  min_tls_version          = "TLS1_2"
  allow_nested_items_to_be_public = false
}
Create a file namedmain.tf, and insert the following code:
main.tf
# Create Resource Group
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

# Random String for unique naming
resource "random_string" "name" {
  length  = 8
  special = false
  upper   = false
  lower   = true
  numeric = false
}

# Create Storage Account
resource "azurerm_storage_account" "sa" {
  name                     = "sa${random_string.name.result}"
  resource_group_name      = azurerm_resource_group.rg.name
  location                 = azurerm_resource_group.rg.location
  account_tier             = "Standard"
  account_replication_type = "RAGRS"
  account_kind             = "StorageV2"
  min_tls_version          = "TLS1_2"
  allow_nested_items_to_be_public = false
}
# Create Resource Group
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

# Random String for unique naming
resource "random_string" "name" {
  length  = 8
  special = false
  upper   = false
  lower   = true
  numeric = false
}

# Create Storage Account
resource "azurerm_storage_account" "sa" {
  name                     = "sa${random_string.name.result}"
  resource_group_name      = azurerm_resource_group.rg.name
  location                 = azurerm_resource_group.rg.location
  account_tier             = "Standard"
  account_replication_type = "RAGRS"
  account_kind             = "StorageV2"
  min_tls_version          = "TLS1_2"
  allow_nested_items_to_be_public = false
}
Create a file namedvariables.tf, and insert the following code:variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location of the resource group."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}
Create a file namedvariables.tf, and insert the following code:
variables.tf
variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location of the resource group."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}
variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location of the resource group."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}
Create a file namedoutputs.tf, and insert the following code:output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "storage_account_name" {
  value = azurerm_storage_account.sa.name
}ImportantIf you're using the 4.x azurerm provider, you mustexplicitly specify the Azure subscription IDto authenticate to Azure before running the Terraform commands.One way to specify the Azure subscription ID without putting it in theprovidersblock is to specify the subscription ID in an environment variable namedARM_SUBSCRIPTION_ID.For more information, see theAzure provider reference documentation.
Create a file namedoutputs.tf, and insert the following code:
outputs.tf
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "storage_account_name" {
  value = azurerm_storage_account.sa.name
}
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "storage_account_name" {
  value = azurerm_storage_account.sa.name
}
Important
If you're using the 4.x azurerm provider, you mustexplicitly specify the Azure subscription IDto authenticate to Azure before running the Terraform commands.
One way to specify the Azure subscription ID without putting it in theprovidersblock is to specify the subscription ID in an environment variable namedARM_SUBSCRIPTION_ID.
providers
ARM_SUBSCRIPTION_ID
For more information, see theAzure provider reference documentation.
Initialize Terraform.Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources.terraform init -upgradeKey points:The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.
Initialize Terraform.
Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources.
terraform init -upgrade
terraform init -upgrade
Key points:
The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.
-upgrade
Create a Terraform execution plan.Runterraform planto create an execution plan.terraform plan -out main.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
Create a Terraform execution plan.
Runterraform planto create an execution plan.
terraform plan -out main.tfplan
terraform plan -out main.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Apply a Terraform execution plan.Runterraform applyto apply the execution plan to your cloud infrastructure.terraform apply main.tfplanKey points:The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.If you didn't use the-outparameter, callterraform applywithout any parameters.
Apply a Terraform execution plan.
Runterraform applyto apply the execution plan to your cloud infrastructure.
terraform apply main.tfplan
terraform apply main.tfplan
Key points:
The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.
terraform apply
terraform plan -out main.tfplan
If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.
-out
terraform apply
If you didn't use the-outparameter, callterraform applywithout any parameters.
-out
terraform apply
Delete a storage account
Deleting a storage account deletes the entire account, including all data in the account. Be sure to back up any data you want to save before you delete the account.
Under certain circumstances, a deleted storage account might be recovered, but recovery is not guaranteed. For more information, seeRecover a deleted storage account.
If you try to delete a storage account associated with an Azure virtual machine, you might get an error about the storage account still being in use. For help with troubleshooting this error, seeTroubleshoot errors when you delete storage accounts.
Portal
PowerShell
Azure CLI
Bicep
Template
Azure Developer CLI
Terraform
Navigate to the storage account in theAzure portal.
SelectDelete.
To delete the storage account, use theRemove-AzStorageAccountcommand:
Remove-AzStorageAccount -Name <storage-account> -ResourceGroupName <resource-group>
Remove-AzStorageAccount -Name <storage-account> -ResourceGroupName <resource-group>
To delete the storage account, use theaz storage account deletecommand:
az storage account delete --name <storage-account> --resource-group <resource-group>
az storage account delete --name <storage-account> --resource-group <resource-group>
To delete the storage account, use either Azure PowerShell or Azure CLI.
$storageResourceGroupName = Read-Host -Prompt "Enter the resource group name"
$storageAccountName = Read-Host -Prompt "Enter the storage account name"
Remove-AzStorageAccount -Name $storageAccountName -ResourceGroupName $storageResourceGroupName
$storageResourceGroupName = Read-Host -Prompt "Enter the resource group name"
$storageAccountName = Read-Host -Prompt "Enter the storage account name"
Remove-AzStorageAccount -Name $storageAccountName -ResourceGroupName $storageResourceGroupName
echo "Enter the resource group name:" &&
read resourceGroupName &&
echo "Enter the storage account name:" &&
read storageAccountName &&
az storage account delete --name storageAccountName --resource-group resourceGroupName
echo "Enter the resource group name:" &&
read resourceGroupName &&
echo "Enter the storage account name:" &&
read storageAccountName &&
az storage account delete --name storageAccountName --resource-group resourceGroupName
To delete the storage account, use either Azure PowerShell or Azure CLI.
$storageResourceGroupName = Read-Host -Prompt "Enter the resource group name"
$storageAccountName = Read-Host -Prompt "Enter the storage account name"
Remove-AzStorageAccount -Name $storageAccountName -ResourceGroupName $storageResourceGroupName
$storageResourceGroupName = Read-Host -Prompt "Enter the resource group name"
$storageAccountName = Read-Host -Prompt "Enter the storage account name"
Remove-AzStorageAccount -Name $storageAccountName -ResourceGroupName $storageResourceGroupName
echo "Enter the resource group name:" &&
read resourceGroupName &&
echo "Enter the storage account name:" &&
read storageAccountName &&
az storage account delete --name storageAccountName --resource-group resourceGroupName
echo "Enter the resource group name:" &&
read resourceGroupName &&
echo "Enter the storage account name:" &&
read storageAccountName &&
az storage account delete --name storageAccountName --resource-group resourceGroupName
To delete the resource group and storage account created byazd, use theazd downcommand:
azd
azd down
azd down
azd down
When you no longer need the resources created via Terraform, do the following steps:
Runterraform planand specify thedestroyflag.terraform plan -destroy -out main.destroy.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
Runterraform planand specify thedestroyflag.
destroy
terraform plan -destroy -out main.destroy.tfplan
terraform plan -destroy -out main.destroy.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Runterraform applyto apply the execution plan.terraform apply main.destroy.tfplan
Runterraform applyto apply the execution plan.
terraform apply main.destroy.tfplan
terraform apply main.destroy.tfplan
Alternately, you can delete the resource group, which deletes the storage account and any other resources in that resource group. For more information about deleting a resource group, seeDelete resource group and resources.
Create a general purpose v1 storage account
Note
Although Microsoft recommends general-purpose v2 accounts for most scenarios, Microsoft will continue to support general-purpose v1 accounts for new and existing customers. You can create general-purpose v1 storage accounts in new regions whenever Azure Storage is available in those regions. Microsoft does not currently have a plan to deprecate support for general-purpose v1 accounts and will provide at least one year's advance notice before deprecating any Azure Storage feature. Microsoft will continue to provide security updates for general-purpose v1 accounts, but no new feature development is expected for this account type.
For new Azure regions that have come online after October 1, 2020, pricing for general-purpose v1 accounts has changed and is equivalent to pricing for general-purpose v2 accounts in those regions. Pricing for general-purpose v1 accounts in Azure regions that existed prior to October 1, 2020 has not changed. For pricing details for general-purpose v1 accounts in a specific region, see the Azure Storage pricing page. Choose your region, and then next toPricing offers, selectOther.
General purpose v1 (GPv1) storage accounts can no longer be created from the Azure portal. If you need to create a GPv1 storage account, follow the steps in sectionCreate a storage accountfor PowerShell, the Azure CLI, Bicep, or Azure Templates. For thekindparameter, specifyStorage, and choose askuorSkuNamefrom thetable of supported values.
kind
Storage
sku
SkuName
Next steps
Storage account overview
Upgrade to a general-purpose v2 storage account
Move a storage account to another region
Recover a deleted storage account
Migrate a classic storage account
Feedback
Was this page helpful?
Additional resources