Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a .NET app with App Configuration
Article
2024-10-09
19 contributors
In this article
In this quickstart, you incorporate Azure App Configuration into a .NET console app to centralize storage and management of application settings separate from your code.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
.NET SDK 6.0 or later- also available in theAzure Cloud Shell.
Add a key-value
Add the following key-value to the App Configuration store and leaveLabelandContent Typewith their default values. For more information about how to add key-values to a store using the Azure portal or the CLI, go toCreate a key-value.
Create a .NET console app
You can use the.NET command-line interface (CLI)to create a new .NET console app project. The advantage of using the .NET CLI over Visual Studio is that it's available across the Windows, macOS, and Linux platforms.  Alternatively, use the preinstalled tools available in theAzure Cloud Shell.
Create a new folder for your project.
Create a new folder for your project.
In the new folder, run the following command to create a new .NET console app project:dotnet new console
In the new folder, run the following command to create a new .NET console app project:
dotnet new console
dotnet new console
Connect to an App Configuration store
You can connect to your App Configuration store using Microsoft Entra ID (recommended), or a connection string.
Add NuGet package references by running the following command:Microsoft Entra ID (recommended)Connection stringdotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
dotnet add package Azure.Identitydotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
Add NuGet package references by running the following command:
Microsoft Entra ID (recommended)
Connection string
dotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
dotnet add package Azure.Identity
dotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
dotnet add package Azure.Identity
dotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
dotnet add package Microsoft.Extensions.Configuration.AzureAppConfiguration
Run the following command to restore packages for your project:dotnet restore
Run the following command to restore packages for your project:
dotnet restore
dotnet restore
Open theProgram.csfile, and add the following namespaces:Microsoft Entra ID (recommended)Connection stringusing Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
using Azure.Identity;using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
Open theProgram.csfile, and add the following namespaces:
Microsoft Entra ID (recommended)
Connection string
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
using Azure.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
using Azure.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.AzureAppConfiguration;
Connect to your App Configuration store by calling theAddAzureAppConfigurationmethod in theProgram.csfile.Microsoft Entra ID (recommended)Connection stringYou use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(options =>
{
    string endpoint = Environment.GetEnvironmentVariable("Endpoint");
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(Environment.GetEnvironmentVariable("ConnectionString"));

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");
Connect to your App Configuration store by calling theAddAzureAppConfigurationmethod in theProgram.csfile.
AddAzureAppConfiguration
Program.cs
Microsoft Entra ID (recommended)
Connection string
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.
DefaultAzureCredential
var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(options =>
{
    string endpoint = Environment.GetEnvironmentVariable("Endpoint");
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");
var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(options =>
{
    string endpoint = Environment.GetEnvironmentVariable("Endpoint");
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");
var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(Environment.GetEnvironmentVariable("ConnectionString"));

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");
var builder = new ConfigurationBuilder();
builder.AddAzureAppConfiguration(Environment.GetEnvironmentVariable("ConnectionString"));

var config = builder.Build();
Console.WriteLine(config["TestApp:Settings:Message"] ?? "Hello world!");
Build and run the app locally
Set an environment variable.Microsoft Entra ID (recommended)Connection stringSet the environment variable namedEndpointto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:setx Endpoint "<endpoint-of-your-app-configuration-store>"If you use PowerShell, run the following command:$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export Endpoint='<endpoint-of-your-app-configuration-store>'Set the environment variable namedConnectionStringto the read-only connection string of your App Configuration store found underAccess keysof your store in the Azure portal.If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:setx ConnectionString "<connection-string-of-your-app-configuration-store>"If you use PowerShell, run the following command:$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export ConnectionString='<connection-string-of-your-app-configuration-store>'
Set an environment variable.
Microsoft Entra ID (recommended)
Connection string
Set the environment variable namedEndpointto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.
If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:
setx Endpoint "<endpoint-of-your-app-configuration-store>"
setx Endpoint "<endpoint-of-your-app-configuration-store>"
If you use PowerShell, run the following command:
$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"
$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export Endpoint='<endpoint-of-your-app-configuration-store>'
export Endpoint='<endpoint-of-your-app-configuration-store>'
Set the environment variable namedConnectionStringto the read-only connection string of your App Configuration store found underAccess keysof your store in the Azure portal.
If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:
setx ConnectionString "<connection-string-of-your-app-configuration-store>"
setx ConnectionString "<connection-string-of-your-app-configuration-store>"
If you use PowerShell, run the following command:
$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"
$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export ConnectionString='<connection-string-of-your-app-configuration-store>'
export ConnectionString='<connection-string-of-your-app-configuration-store>'
Run the following command to build the console app:dotnet build
Run the following command to build the console app:
dotnet build
dotnet build
After the build successfully completes, run the following command to run the app locally:dotnet run
After the build successfully completes, run the following command to run the app locally:
dotnet run
dotnet run

Clean up resources
If you don't want to continue using the resources created in this article, delete the resource group you created here to avoid charges.
Important
Deleting a resource group is irreversible. The resource group and all the resources in it are permanently deleted. Ensure that you don't accidentally delete the wrong resource group or resources. If you created the resources for this article inside a resource group that contains other resources you want to keep, delete each resource individually from its respective pane instead of deleting the resource group.
Sign in to theAzure portal, and selectResource groups.
In theFilter by namebox, enter the name of your resource group.
In the result list, select the resource group name to see an overview.
SelectDelete resource group.
You're asked to confirm the deletion of the resource group. Enter the name of your resource group to confirm, and selectDelete.
After a few moments, the resource group and all its resources are deleted.
Next steps
In this quickstart, you created a new App Configuration store and used it with a .NET console app via theApp Configuration provider. To learn how to configure your .NET app to dynamically refresh configuration settings, continue to the next tutorial.
Enable dynamic configuration
Feedback
Was this page helpful?
Additional resources