Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Azure Blob Storage and JavaScript or TypeScript
Article
2024-11-05
5 contributors
In this article
.NET
Java
JavaScript
Python
Go
This article shows you how to connect to Azure Blob Storage by using the Azure Blob Storage client library for JavaScript. Once connected, use thedeveloper guidesto learn how your code can operate on containers, blobs, and features of the Blob Storage service.
If you're looking to start with a complete example, see the client library quickstart forJavaScriptorTypeScript.
API reference|Package (npm)|Library source code|Samples|Give feedback
Prerequisites
Azure subscription -create one for free
Azure storage account -create a storage account
Node.js LTS
TypeScript, if applicable
For client (browser) applications, you needbundling tools.

Set up your project
This section walks you through preparing a project to work with the Azure Blob Storage client library for JavaScript.
Open a command prompt and navigate to your project folder. Change<project-directory>to your folder name:
<project-directory>
cd <project-directory>
cd <project-directory>
If you don't have apackage.jsonfile already in your directory, initialize the project to create the file:
package.json
npm init -y
npm init -y
From your project directory, install packages for the Azure Blob Storage and Azure Identity client libraries using thenpm installoryarn addcommands. The@azure/identitypackage is needed for passwordless connections to Azure services.
npm install
yarn add
JavaScript
TypeScript
npm install @azure/storage-blob @azure/identity
npm install @azure/storage-blob @azure/identity
npm install typescript @azure/storage-blob @azure/identity
npm install typescript @azure/storage-blob @azure/identity
Authorize access and connect to Blob Storage
To connect an app to Blob Storage, create an instance of theBlobServiceClientclass. This object is your starting point to interact with data resources at the storage account level. You can use it to operate on the storage account and its containers. You can also use the service client to create container clients or blob clients, depending on the resource you need to work with.
To learn more about creating and managing client objects, including best practices, seeCreate and manage client objects that interact with data resources.
You can authorize aBlobServiceClientobject by using a Microsoft Entra authorization token, an account access key, or a shared access signature (SAS). For optimal security, Microsoft recommends using Microsoft Entra ID with managed identities to authorize requests against blob data. For more information, seeAuthorize access to blobs using Microsoft Entra ID.
BlobServiceClient
Microsoft Entra ID (recommended)
SAS token
Account key
To authorize with Microsoft Entra ID, you need to use asecurity principal. Which type of security principal you need depends on where your app runs. Use the following table as a guide:
An easy and secure way to authorize access and connect to Blob Storage is to obtain an OAuth token by creating aDefaultAzureCredentialinstance. You can then use that credential to create aBlobServiceClientobject.
BlobServiceClient
The following example creates aBlobServiceClientobject usingDefaultAzureCredential:
BlobServiceClient
DefaultAzureCredential
const accountName = "<account-name>";
const accountURL = `https://${accountName}.blob.core.windows.net`;
const blobServiceClient = new BlobServiceClient(
  accountURL,
  new DefaultAzureCredential()
);
const accountName = "<account-name>";
const accountURL = `https://${accountName}.blob.core.windows.net`;
const blobServiceClient = new BlobServiceClient(
  accountURL,
  new DefaultAzureCredential()
);
This code example can be used for JavaScript or TypeScript projects.
To use a shared access signature (SAS) token, append the token to the account URL string separated by a?delimiter. Then, create aBlobServiceClientobject with the URL.
?
BlobServiceClient
const accountName = "<account-name>";
const sasToken = "<sas-token>";
const accountURL = `https://${accountName}.blob.core.windows.net?${sasToken}`;
const blobServiceClient = new BlobServiceClient(accountURL);
const accountName = "<account-name>";
const sasToken = "<sas-token>";
const accountURL = `https://${accountName}.blob.core.windows.net?${sasToken}`;
const blobServiceClient = new BlobServiceClient(accountURL);
This code example can be used for JavaScript or TypeScript projects.
To learn more about generating and managing SAS tokens, see the following articles:
Grant limited access to Azure Storage resources using shared access signatures (SAS)
Create an account SAS with JavaScript
Create a service SAS with JavaScript
Create a user delegation SAS with JavaScript
Note
For scenarios where shared access signatures (SAS) are used, Microsoft recommends using a user delegation SAS. A user delegation SAS is secured with Microsoft Entra credentials instead of the account key.
To use a storage account shared key, provide the key as a string and initialize aBlobServiceClientobject.
BlobServiceClient
const credential = new StorageSharedKeyCredential(accountName, accountKey);
const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  credential
);
const credential = new StorageSharedKeyCredential(accountName, accountKey);
const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  credential
);
This code example can be used for JavaScript or TypeScript projects.
You can also create aBlobServiceClientobject using a connection string.
BlobServiceClient
const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);
const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);
For information about how to obtain account keys and best practice guidelines for properly managing and safeguarding your keys, seeManage storage account access keys.
Important
The account access key should be used with caution. If your account access key is lost or accidentally placed in an insecure location, your service may become vulnerable. Anyone who has the access key is able to authorize requests against the storage account, and effectively has access to all the data.DefaultAzureCredentialprovides enhanced security features and benefits and is the recommended approach for managing authorization to Azure services.
DefaultAzureCredential
Build your app
As you build apps to work with data resources in Azure Blob Storage, your code primarily interacts with three resource types: storage accounts, containers, and blobs. To learn more about these resource types, how they relate to one another, and how apps interact with resources, seeUnderstand how apps interact with Blob Storage data resources.
The following guides show you how to access data and perform specific actions using the Azure Storage client library for JavaScript:
Feedback
Was this page helpful?
Additional resources