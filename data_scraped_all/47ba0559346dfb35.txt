Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Customize JavaScript for Azure Pipelines
Article
2025-01-09
4 contributors
In this article
You can use Azure Pipelines to build your JavaScript apps without having to set up any infrastructure of your own. Tools that you commonly use to build, test, and run JavaScript apps - like npm, Node, Yarn, and Gulp - get pre-installed onMicrosoft-hosted agentsin Azure Pipelines.
For the version of Node.js and npm that is preinstalled, refer toMicrosoft-hosted agents. To install a specific version of these tools on Microsoft-hosted agents, add theNode Tool Installertask to the beginning of your process. You can also use aself-hostedagent.
To create your first pipeline with JavaScript, see theJavaScript quickstart.
Use a specific version of Node.js
If you need a version of Node.js and npm that isn't already installed on the Microsoft-hosted agent, use theNode tool installer task. Add the following snippet to yourazure-pipelines.ymlfile.
azure-pipelines.yml
Note
The hosted agents are regularly updated, and setting up this task results in spending significant time updating to a newer minor version every time the pipeline is run. Use this task only when you need a specific Node version in your pipeline.
- task: UseNode@1
  inputs:
    version: '16.x' # replace this value with the version that you need for your project
- task: UseNode@1
  inputs:
    version: '16.x' # replace this value with the version that you need for your project
If you need a version of Node.js/npm that isn't already installed on the agent:
In the pipeline, selectTasks, choose the phase that runs your build tasks, and then select+to add a new task to that phase.
In the pipeline, selectTasks, choose the phase that runs your build tasks, and then select+to add a new task to that phase.
In the task catalog, find and add theNode Tool Installertask.
In the task catalog, find and add theNode Tool Installertask.
Select the task and specify the version of the Node.js runtime that you want to install.
Select the task and specify the version of the Node.js runtime that you want to install.
To update just the npm tool, run thenpm i -g npm@version-numbercommand in your build process.
npm i -g npm@version-number
Use multiple node versions
You can build and test your app on multiple versions of Node with theNode tool installer task.
pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    node_16_x:
      node_version: 16.x
    node_13_x:
      node_version: 18.x

steps:
- task: UseNode@1
  inputs:
    version: $(node_version)

- script: npm install
pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    node_16_x:
      node_version: 16.x
    node_13_x:
      node_version: 18.x

steps:
- task: UseNode@1
  inputs:
    version: $(node_version)

- script: npm install
Seemulti-configuration execution.
Install tools on your build agent
If you have tools that are development dependencies in your projectpackage.jsonorpackage-lock.jsonfile, install your tools and dependencies through npm. The exact version of the tools gets defined in the project, isolated from other versions that exist on the build agent.
package.json
package-lock.json
Use ascriptor thenpm task.
Use a script to install with package.json
- script: npm install --only=dev
- script: npm install --only=dev
Use the npm task to install with package.json
- task: Npm@1
  inputs:
     command: 'install'
- task: Npm@1
  inputs:
     command: 'install'
Run tools installed this way by using the npmnpxpackage runner, which detects tools installed this way in its path resolution. The following example calls themochatest runner but looks for the version installed as a development dependency before using a globally installed (throughnpm install -g) version.
npx
mocha
npm install -g
- script: npx mocha
- script: npx mocha
To install tools that your project needs but that aren't set as development dependencies inpackage.json, callnpm install -gfrom a script stage in your pipeline.
package.json
npm install -g
The following example installs the latest version of theAngular CLIby usingnpm. The rest of the pipeline can then use thengtool from otherscriptstages.
npm
ng
script
Note
On Microsoft-hosted Linux agents, preface the command withsudo, likesudo npm install -g.
sudo
sudo npm install -g
- script: npm install -g @angular/cli
- script: npm install -g @angular/cli
Tip
These tasks run every time your pipeline runs, so be mindful of the impact that installing tools has on build times. Consider configuringself-hosted agentswith the version of the tools you need if overhead becomes a serious impact to your build performance.
Use thenpmorcommand-linetasks in your pipeline to install tools on your build agent.
Manage dependencies
In your build, useYarnor Azure Artifacts to download packages from the public npm registry. This registry is a type of private npm registry that you specify in the.npmrcfile.
.npmrc
Use npm
You can use npm in the following ways to download packages for your build:
Directly runnpm installin your pipeline, as it's the simplest way to download packages from a registry without authentication. If your build doesn't need development dependencies on the agent to run, you can speed up build times with the--only=prodoption tonpm install.
npm install
--only=prod
npm install
Use annpm task. This task is useful when you're using an authenticated registry.
Use annpm Authenticate task. This task is useful when you runnpm installfrom inside your task runners - Gulp, Grunt, or Maven.
npm install
If you want to specify an npm registry, put the URLs in an.npmrcfile in your repository.
If your feed gets authenticated, create an npm service connection on theServicestab inProject settingsto manage its credentials.
.npmrc
To install npm packages with a script in your pipeline, add the following snippet toazure-pipelines.yml.
azure-pipelines.yml
- script: npm install
- script: npm install
To use a private registry specified in your.npmrcfile, add the following snippet toazure-pipelines.yml.
.npmrc
azure-pipelines.yml
- task: Npm@1
  inputs:
    customEndpoint: <Name of npm service connection>
- task: Npm@1
  inputs:
    customEndpoint: <Name of npm service connection>
To pass registry credentials to npm commands via task runners such as Gulp, add the following task toazure-pipelines.ymlbefore you call the task runner.
azure-pipelines.yml
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>
Use thenpmornpm authenticatetask in your pipeline to download and install packages.
If your builds occasionally fail because of connection issues when you restore packages from the npm registry,
you can use Azure Artifacts withupstream sources,
and cache the packages. The credentials of the pipeline automatically get used when you connect
to Azure Artifacts. These credentials are typically derived from theProject Collection Build Serviceaccount.
If you're usingMicrosoft-hosted agents, you get a new machine every time you run a build - which means restoring the dependencies every time, which can take a significant amount of time. To mitigate, you can use Azure Artifacts or a self-hosted agent - then you get the benefit of using the package cache.
Use Yarn
Use a script stage to invokeYarnto restore dependencies.  Yarn gets preinstalled on someMicrosoft-hosted agents. You can install and configure it on self-hosted agents like any other tool.
- script: yarn install
- script: yarn install
Use theCLIorBashtask in your pipeline to invokeYarn.
Run JavaScript compilers
Use compilers such asBabeland theTypeScripttsccompiler to convert your source code into versions usable by the Node.js runtime or in web browsers.
tsc
If you have ascript objectset up in your projectpackage.jsonfile that runs your compiler, invoke it in your pipeline by using a script task.
package.json
- script: npm run compile
- script: npm run compile
You can call compilers directly from the pipeline by using the script task. These commands run from the root of the cloned source-code repository.
- script: tsc --target ES6 --strict true --project tsconfigs/production.json
- script: tsc --target ES6 --strict true --project tsconfigs/production.json
Use thenpmtask in your pipeline if you have a compile script defined in your project package.json to build the code. Use theBashtask to compile your code if you don't have a separate script defined in your project configuration.
Run unit tests
Configure your pipelines to run your JavaScript tests so that they produce results formatted in the JUnit XML format. You can then publish the results using the built-inpublish test resultstask.
If your test framework doesn't support JUnit output, add support through a partner reporting module, such asmocha-junit-reporter. You can either update your test script to use the JUnit reporter, or if the reporter supports command-line options, pass those options into the task definition.
The following table lists the most commonly used test runners and the reporters that can be used to produce XML results:
The following example uses themocha-junit-reporterand invokesmocha testdirectly by using a script. This script produces the JUnit XML output at the default location of./test-results.xml.
mocha test
./test-results.xml
- script: mocha test --reporter mocha-junit-reporter
- script: mocha test --reporter mocha-junit-reporter
If you defined atestscript in your project package.json file, you can invoke it by usingnpm test.
test
npm test
- script: npm test
- script: npm test
Publish test results
To publish the results, use thePublish Test Resultstask.
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results.xml'
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results.xml'
Publish code coverage results
If your test scripts run a code coverage tool, such asIstanbul, add thePublish Code Coverage Resultstask. When you do so, you can find coverage metrics in the build summary and download HTML reports for further analysis. The task expects Cobertura or JaCoCo reporting output, so ensure that your code coverage tool runs with the necessary options to generate the right output. For example,--report cobertura.
--report cobertura
The following example usesnyc, the Istanbul command-line interface, along withmocha-junit-reporterand invokesnpm testcommand.
npm test
- script: |
    nyc --reporter=cobertura --reporter=html \
    npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=./test-results.xml
  displayName: 'Build code coverage report'

- task: PublishCodeCoverageResults@2
  inputs: 
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
- script: |
    nyc --reporter=cobertura --reporter=html \
    npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=./test-results.xml
  displayName: 'Build code coverage report'

- task: PublishCodeCoverageResults@2
  inputs: 
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
Use thePublish Test ResultsandPublish Code Coverage Resultstasks in your pipeline to publish test results along with code coverage results by using Istanbul.
Set the Control Options for the Publish Test Results task to run the task even if a previous task has failed, unless the deployment was canceled.
Test browser end-to-end
Run tests in headless browsers as part of your pipeline with tools likeProtractororKarma. Then publish the results for the build to Azure DevOps with the following steps:
Install a headless browser testing driver, such as headless Chrome or Firefox, or a browser-mocking tool such as PhantomJS, on the build agent.
Configure your test framework to use the headless browser/driver option of your choice according to the tool's documentation.
Configure your test framework (usually with a reporter plug-in or configuration) to output JUnit-formatted test results.
Set up a script task to run any CLI commands needed to start the headless browser instances.
Run the end-to-end tests in the pipeline stages along with your unit tests.
Publish the results by using the samePublish Test Resultstask alongside your unit tests.
Package web apps
Package applications to bundle all your application modules with intermediate outputs and dependencies into static assets ready for deployment. Add a pipeline stage after your compilation and tests to run a tool likewebpackorng buildby using the Angular CLI.
The first example callswebpack. To have this work, make sure thatwebpackis configured as a development dependency in your package.json project file. This runswebpackwith the default configuration unless you have awebpack.config.jsfile in the root folder of your project.
webpack
webpack
webpack
webpack.config.js
- script: webpack
- script: webpack
The next example uses thenpmtask to callnpm run buildto call thebuildscript object defined in the project package.json. Using script objects in your project moves the logic for the build into the source code and out of the pipeline.
npm run build
build
- script: npm run build
- script: npm run build
Use theCLIorBashtask in your pipeline to invoke your packaging tool, such aswebpackor  Angular'sng build.
webpack
ng build
Implement JavaScript frameworks
Angular
For Angular apps, you can include Angular-specific commands such asng test,ng build, andng e2e. To use Angular CLI commands in your pipeline, install theangular/cli npm packageon the build agent.
Note
On Microsoft-hosted Linux agents, preface the command withsudo, likesudo npm install -g.
sudo
sudo npm install -g
- script: |
    npm install -g @angular/cli
    npm install
    ng build --prod
- script: |
    npm install -g @angular/cli
    npm install
    ng build --prod
Add the following tasks to your pipeline:
npmCommand:customCommand and arguments:install -g @angular/cli
npm
Command:custom
custom
Command and arguments:install -g @angular/cli
install -g @angular/cli
npmCommand:install
npm
Command:install
install
bashType:inlineScript:ng build --prod
bash
Type:inline
inline
Script:ng build --prod
ng build --prod
For tests in your pipeline that require a browser to run, such as theng testcommand in the starter app, which runs Karma, use a headless browser instead of a standard browser. In the Angular starter app:
Change thebrowsersentry in yourkarma.conf.jsproject file frombrowsers: ['Chrome']tobrowsers: ['ChromeHeadless'].
Change thebrowsersentry in yourkarma.conf.jsproject file frombrowsers: ['Chrome']tobrowsers: ['ChromeHeadless'].
browsers
browsers: ['Chrome']
browsers: ['ChromeHeadless']
Change thesingleRunentry in yourkarma.conf.jsproject file from a value offalsetotrue. This change helps make sure that the Karma process stops after it runs.
Change thesingleRunentry in yourkarma.conf.jsproject file from a value offalsetotrue. This change helps make sure that the Karma process stops after it runs.
singleRun
false
true
React and Vue
All the dependencies for your React and Vue apps are captured in yourpackage.jsonfile. Yourazure-pipelines.ymlfile contains the standard Node.js script:
- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'
- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'
The build files are in a new folder,dist(for Vue) orbuild(for React). This snippet builds an artifact -www- that is ready for release. It uses theNode Installer,Copy Files, andPublish Build Artifactstasks.
dist
build
www
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'

- task: CopyFiles@2
  inputs:
    Contents: 'build/**' # Pull the build directory (React)
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs: 
    PathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files
    ArtifactName: 'www' # output artifact named www
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'

- task: CopyFiles@2
  inputs:
    Contents: 'build/**' # Pull the build directory (React)
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs: 
    PathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files
    ArtifactName: 'www' # output artifact named www
To release, point your release task to thedistorbuildartifact and use theAzure Web App Deploy task.
dist
build
Webpack
You can use a webpack configuration file to specify a compiler, such as Babel or TypeScript, to transpile JSX or TypeScript to plain JavaScript, and to bundle your app.
- script: |
    npm install webpack webpack-cli --save-dev
    npx webpack --config webpack.config.js
- script: |
    npm install webpack webpack-cli --save-dev
    npx webpack --config webpack.config.js
Add the following tasks to your pipeline:
npmCommand:customCommand and arguments:install -g webpack webpack-cli --save-dev
npm
Command:custom
custom
Command and arguments:install -g webpack webpack-cli --save-dev
install -g webpack webpack-cli --save-dev
bashType:inlineScript:npx webpack --config webpack.config.js
bash
Type:inline
inline
Script:npx webpack --config webpack.config.js
npx webpack --config webpack.config.js
Build task runners
It's common to useGulporGruntas a task runner to build and test a JavaScript app.
Gulp
Gulp gets preinstalled on Microsoft-hosted agents. Run thegulpcommand in the YAML file:
gulp
- script: gulp                       # include any additional options that are needed
- script: gulp                       # include any additional options that are needed
If the steps in your gulpfile.js file require authentication with an npm registry:
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>

- script: gulp                       # include any additional options that are needed
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>

- script: gulp                       # include any additional options that are needed
Add thePublish Test Resultstask to publish JUnit or xUnit test results to the server.
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TEST-RESULTS.xml'
    testRunTitle: 'Test results for JavaScript using gulp'
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TEST-RESULTS.xml'
    testRunTitle: 'Test results for JavaScript using gulp'
Add thePublish Code Coverage Resultstask to publish code coverage results to the server. You can find coverage metrics in the build summary, and you can download HTML reports for further analysis.
- task: PublishCodeCoverageResults@1
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
- task: PublishCodeCoverageResults@1
  inputs: 
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
The simplest way to create a pipeline if your app uses Gulp is to use theNode.js with gulpbuild template when you create the pipeline. This template automatically adds various tasks to invoke Gulp commands and to publish artifacts.
In the task, selectEnable Code Coverageto enable code coverage by using Istanbul.
Grunt
Grunt gets preinstalled on Microsoft-hosted agents. To run the grunt command in the YAML file:
- script: grunt                      # include any additional options that are needed
- script: grunt                      # include any additional options that are needed
If the steps in yourGruntfile.jsfile require authentication with an npm registry:
Gruntfile.js
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>

- script: grunt                      # include any additional options that are needed
- task: npmAuthenticate@0
  inputs:
    customEndpoint: <Name of npm service connection>

- script: grunt                      # include any additional options that are needed
The simplest way to create a pipeline if your app uses Grunt is to use theNode.js with Gruntbuild template when you create the pipeline. This automatically adds various tasks to invoke Gulp commands and to publish artifacts. In the task, select thePublish to TFS/Team Servicesoption to publish test results, and selectEnable Code Coverageto enable code coverage by using Istanbul.
Package and deliver your code
After you've built and tested your app, you can upload the build output to Azure Pipelines, create and publish an npm or Maven package, or package the build output into a .zip file for deployment to a web application.
Publish files to Azure Pipelines
To upload the entire working directory of files, use thePublish Build Artifactstask and add the following to yourazure-pipelines.ymlfile.
azure-pipelines.yml
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)'
To upload a subset of files, first copy the necessary files from the working directory to a staging directory with theCopy Filestask, and then use thePublish Build Artifacts task.
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      **\*.js
      package.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      **\*.js
      package.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
Publish a module to an npm registry
If your project's output is annpmmodule for use by other projects and not a web application, use thenpmtask to publish the module to a local registry or to the public npm registry. Provide a unique name/version combination each time you publish.
npm
The first example assumes that you manage version information (such as through annpm version) through changes to yourpackage.jsonfile in version control. The following example uses the script task to publish to the public registry.
package.json
- script: npm publish
- script: npm publish
The next example publishes to a custom registry defined in your repo's.npmrcfile. Set up annpm service connectionto inject authentication credentials into the connection as the build runs.
.npmrc
- task: Npm@1
  inputs:
     command: publish
     publishRegistry: useExternalRegistry
     publishEndpoint: https://my.npmregistry.com
- task: Npm@1
  inputs:
     command: publish
     publishRegistry: useExternalRegistry
     publishEndpoint: https://my.npmregistry.com
The final example publishes the module to an Azure DevOps Services package management feed.
- task: Npm@1
  inputs:
     command: publish
     publishRegistry: useFeed
     publishFeed: https://my.npmregistry.com
- task: Npm@1
  inputs:
     command: publish
     publishRegistry: useFeed
     publishFeed: https://my.npmregistry.com
For more information about versioning and publishing npm packages, seePublish npm packagesandHow can I version my npm packages as part of the build process?.
Deploy a web app
To create a .zip file archive that is ready for publishing to a web app, use theArchive Filestask:
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
    includeRootFolder: false
To publish this archive to a web app, seeAzure web app deployment.
Publish artifacts to Azure Pipelines
Use thePublish Build Artifacts taskto publish files from your build to Azure Pipelines.
Publish to an npm registry
To create and publish an npm package, use thenpm task. For more information about versioning and publishing npm packages, seePublish npm packages.
Deploy a web app
To create a .zip file archive that is ready for publishing to a web app, use theArchive Files task. To publish this archive to a web app, seeAzure Web App deployment.
Build and push image to container registry
Once your source code builds successfully and your unit tests are in place and successful, you can alsobuild an imageandpush it to a container registry.

Troubleshoot
If you can build your project on your development machine but are having trouble building it on Azure Pipelines, explore the following potential causes and corrective actions:
Check that the versions ofNode.jsand the task runner on your development machine match those on the agent.
You can include command-line scripts such asnode --versionin your pipeline to check what is installed on the agent.
Either use theNode Tool Installer(as explained in this guidance) to deploy the same version on the agent,
or runnpm installcommands to update the tools to wanted versions.
Check that the versions ofNode.jsand the task runner on your development machine match those on the agent.
You can include command-line scripts such asnode --versionin your pipeline to check what is installed on the agent.
Either use theNode Tool Installer(as explained in this guidance) to deploy the same version on the agent,
or runnpm installcommands to update the tools to wanted versions.
node --version
npm install
If your builds fail intermittently while you restore packages, either the npm registry has issues or there are
networking problems between the Azure data center and the registry. We can't control these factors. Explore whether using Azure Artifacts with an npm registry as an upstream source improves the reliability of your builds.
If your builds fail intermittently while you restore packages, either the npm registry has issues or there are
networking problems between the Azure data center and the registry. We can't control these factors. Explore whether using Azure Artifacts with an npm registry as an upstream source improves the reliability of your builds.
If you're usingnvmto manage different versions of Node.js, consider switching to theNode Tool Installertask instead. (nvmis installed for historical reasons on the macOS image.)nvmmanages multiple Node.js versions by adding shell aliases and alteringPATH, which interacts poorly with the wayAzure Pipelines runs each task in a new process.TheNode Tool Installertask handles this model correctly. However, if your work requires the use ofnvm, you can add the following script to the beginning of each pipeline:steps:
- bash: |
    NODE_VERSION=16  # or whatever your preferred version is
    npm config delete prefix  # avoid a warning
    . ${NVM_DIR}/nvm.sh
    nvm use ${NODE_VERSION}
    nvm alias default ${NODE_VERSION}
    VERSION_PATH="$(nvm_version_path ${NODE_VERSION})"
    echo "##vso[task.prependPath]$VERSION_PATH"Then,nodeand other command-line tools work for the rest of the pipeline job. In each step where you use thenvmcommand, start the script with the following code:- bash: |
    . ${NVM_DIR}/nvm.sh
    nvm <command>
If you're usingnvmto manage different versions of Node.js, consider switching to theNode Tool Installertask instead. (nvmis installed for historical reasons on the macOS image.)nvmmanages multiple Node.js versions by adding shell aliases and alteringPATH, which interacts poorly with the wayAzure Pipelines runs each task in a new process.
nvm
nvm
nvm
PATH
TheNode Tool Installertask handles this model correctly. However, if your work requires the use ofnvm, you can add the following script to the beginning of each pipeline:
nvm
steps:
- bash: |
    NODE_VERSION=16  # or whatever your preferred version is
    npm config delete prefix  # avoid a warning
    . ${NVM_DIR}/nvm.sh
    nvm use ${NODE_VERSION}
    nvm alias default ${NODE_VERSION}
    VERSION_PATH="$(nvm_version_path ${NODE_VERSION})"
    echo "##vso[task.prependPath]$VERSION_PATH"
steps:
- bash: |
    NODE_VERSION=16  # or whatever your preferred version is
    npm config delete prefix  # avoid a warning
    . ${NVM_DIR}/nvm.sh
    nvm use ${NODE_VERSION}
    nvm alias default ${NODE_VERSION}
    VERSION_PATH="$(nvm_version_path ${NODE_VERSION})"
    echo "##vso[task.prependPath]$VERSION_PATH"
Then,nodeand other command-line tools work for the rest of the pipeline job. In each step where you use thenvmcommand, start the script with the following code:
node
nvm
- bash: |
    . ${NVM_DIR}/nvm.sh
    nvm <command>
- bash: |
    . ${NVM_DIR}/nvm.sh
    nvm <command>
FAQ
Q: Where can I learn more about Azure Artifacts and the Package Management service?
A:Package Management in Azure Artifacts
Q: Where can I learn more about tasks?
A:Build, release, and test tasks
Q: How do I fix a pipeline failure with the message 'FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory'?
A: This failure type happens when the Node.js package exceeds the memory usage limit. To resolve the issue, add a variable likeNODE_OPTIONSand assign it a value of--max_old_space_size=16384.
NODE_OPTIONS
Q: How can I version my npm packages as part of the build process?
A: One option is to use a combination of version control andnpm version. At the end of a pipeline run, you can update your repo with the new version. In this YAML, there's a GitHub repo and the package gets deployed to npmjs. Your build fails if there's a mismatch between your package version on npmjs and yourpackage.jsonfile.
package.json
variables:
    MAP_NPMTOKEN: $(NPMTOKEN) # Mapping secret var

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps: # Checking out connected repo
- checkout: self
  persistCredentials: true
  clean: true
    
- task: npmAuthenticate@0
  inputs:
    workingFile: .npmrc
    customEndpoint: 'my-npm-connection'
    
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm pack
  displayName: 'Package for release'

- bash: | # Grab the package version
    v=`node -p "const p = require('./package.json'); p.version;"`
    echo "##vso[task.setvariable variable=packageVersion]$v"

- task: CopyFiles@2
  inputs:
      contents: '*.tgz'
      targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy archives to artifacts staging directory'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'package.json' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy package.json'

- task: PublishBuildArtifacts@1 
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'

- script: |  # Config can be set in .npmrc
    npm config set //registry.npmjs.org/:_authToken=$(MAP_NPMTOKEN) 
    npm config set scope "@myscope"
    # npm config list
    # npm --version
    npm version patch --force
    npm publish --access public

- task: CmdLine@2 # Push changes to GitHub (substitute your repo)
  inputs:
    script: |
      git config --global user.email "username@contoso.com"
      git config --global user.name "Azure Pipeline"
      git add package.json
      git commit -a -m "Test Commit from Azure DevOps"
      git push -u origin HEAD:main
variables:
    MAP_NPMTOKEN: $(NPMTOKEN) # Mapping secret var

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps: # Checking out connected repo
- checkout: self
  persistCredentials: true
  clean: true
    
- task: npmAuthenticate@0
  inputs:
    workingFile: .npmrc
    customEndpoint: 'my-npm-connection'
    
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm pack
  displayName: 'Package for release'

- bash: | # Grab the package version
    v=`node -p "const p = require('./package.json'); p.version;"`
    echo "##vso[task.setvariable variable=packageVersion]$v"

- task: CopyFiles@2
  inputs:
      contents: '*.tgz'
      targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy archives to artifacts staging directory'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: 'package.json' 
    targetFolder: $(Build.ArtifactStagingDirectory)/npm
  displayName: 'Copy package.json'

- task: PublishBuildArtifacts@1 
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
    artifactName: npm
  displayName: 'Publish npm artifact'

- script: |  # Config can be set in .npmrc
    npm config set //registry.npmjs.org/:_authToken=$(MAP_NPMTOKEN) 
    npm config set scope "@myscope"
    # npm config list
    # npm --version
    npm version patch --force
    npm publish --access public

- task: CmdLine@2 # Push changes to GitHub (substitute your repo)
  inputs:
    script: |
      git config --global user.email "username@contoso.com"
      git config --global user.name "Azure Pipeline"
      git add package.json
      git commit -a -m "Test Commit from Azure DevOps"
      git push -u origin HEAD:main
Feedback
Was this page helpful?
Additional resources