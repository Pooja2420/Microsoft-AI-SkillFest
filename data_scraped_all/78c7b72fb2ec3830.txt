Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build ASP.NET apps with .NET Framework
Article
2025-01-31
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
This article describes how to build a .NET Framework project with Azure Pipelines. For .NET Core projects, seeBuild, test, and deploy .NET Core apps.
Create an Azure DevOps project
In your Azure DevOps organization or collection, selectNew projectorCreate project.
Enter aProject name.
Select theVisibilityfor your project.
SelectCreate.
Get the sample app
The sample app is a Visual Studio solution that uses .NET 4.8. To get the app, fork the GitHub repo at:
https://github.com/Azure-Samples/app-service-web-dotnet-get-started
https://github.com/Azure-Samples/app-service-web-dotnet-get-started
Create and build the pipeline
Once you have the sample code in your own repository, create a pipeline in your Azure DevOps project by using the instructions inCreate your first pipeline.
Select theASP.NETtemplate. This choice automatically adds theazure-pipelines.ymlfile with the tasks required to build the code to the sample repository. The template includes the VSTest@2 task to run tests. The sample repository doesn't contain tests, so you can remove the VSTest@2 task from the pipeline.
Your pipeline should look like the following example:
# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool: 
  name: default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool: 
  name: default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
SelectSave and runand selectJobsto see the pipeline in action.
To publish the build artifacts, add the following task to the end of your YAML file:
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'myartifact'
    publishLocation: 'pipeline'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'myartifact'
    publishLocation: 'pipeline'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
Build environment
You can use Azure Pipelines to build your .NET Framework projects without needing to set up any infrastructure of your own. TheMicrosoft-hosted agentsin Azure Pipelines have several released versions of Visual Studio preinstalled to help you build your projects. Usewindows-2022for Windows Server 2022 with Visual Studio 2022.
windows-2022
You can also use aself-hosted agentto run your builds. Using a self-hosted agent is helpful if you have a large repository and you want to avoid downloading the source code to a fresh machine for every build.
Your builds run on aself-hosted agent. Make sure that you have the necessary version of Visual Studio installed on the agent.
Build multiple configurations
You might need to build your app in multiple configurations. The following steps build the example app on four configurations:Debug, x86,Debug, x64,Release, x86, andRelease, x64.
Debug, x86
Debug, x64
Release, x86
Release, x64
In the pipeline UI, select theVariablestab and modify the following variables:BuildConfiguration=debug, releaseBuildPlatform=x86, x64
In the pipeline UI, select theVariablestab and modify the following variables:
BuildConfiguration=debug, release
BuildConfiguration
debug, release
BuildPlatform=x86, x64
BuildPlatform
x86, x64
SelectTasksand then selectagent jobto change the following options for the job:SelectMulti-configuration.SpecifyMultipliers:BuildConfiguration, BuildPlatform
SelectTasksand then selectagent jobto change the following options for the job:
SelectMulti-configuration.
SpecifyMultipliers:BuildConfiguration, BuildPlatform
BuildConfiguration, BuildPlatform
SelectParallelif you have multiple build agents and want to build your configuration/platform pairings in parallel.
SelectParallelif you have multiple build agents and want to build your configuration/platform pairings in parallel.
Restore dependencies
You can use theNuGet taskto install and update NuGet package dependencies. You can also use the NuGet task to download NuGet packages from Azure Artifacts, NuGet.org, or other external or internal NuGet repositories.
The following example restores a solution from a project-scoped feed in the same organization.
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-project/my-project-scoped-feed'
    includeNuGetOrg: false
    restoreSolution: '**/*.sln'
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'my-project/my-project-scoped-feed'
    includeNuGetOrg: false
    restoreSolution: '**/*.sln'
Note
If you're using Ubuntu 24.04 or higher, you must use theNuGetAuthenticatetask with the .NET CLI instead of theNuGetCommand@2task. SeeSupport for newer Ubuntu hosted imagesfor more details.
NuGetAuthenticate
NuGetCommand@2
Related content
Publish NuGet packages with Azure Pipelines
Quickstart: Get started with NuGet packages in Azure Artifacts
Azure Pipelines agents
Feedback
Was this page helpful?
Additional resources