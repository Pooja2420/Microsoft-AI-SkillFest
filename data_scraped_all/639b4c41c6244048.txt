Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create an ASP.NET Core app with Azure App Configuration
Article
2024-12-10
20 contributors
In this article
In this quickstart, you'll use Azure App Configuration to externalize storage and management of your app settings for an ASP.NET Core app. ASP.NET Core builds a single, key-value-based configuration object using settings from one or moreconfiguration providers. App Configuration offers a .NET configuration provider library. Therefore, you can use App Configuration as an extra configuration source for your app. If you have an existing app, to begin using App Configuration, you'll only need a few small changes to your app startup code.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
.NET SDK 6.0 or later
Tip
The Azure Cloud Shell is a free, interactive shell that you can use to run the command line instructions in this article. It has common Azure tools preinstalled, including the .NET SDK. If you're logged in to your Azure subscription, launch yourAzure Cloud Shellfrom shell.azure.com. You can learn more about Azure Cloud Shell byreading our documentation
Add key-values
Add the following key-values to the App Configuration store and leaveLabelandContent Typewith their default values. For more information about how to add key-values to a store using the Azure portal or the CLI, go toCreate a key-value.
Create an ASP.NET Core web app
Use the.NET command-line interface (CLI)to create a new ASP.NET Core web app project. TheAzure Cloud Shellprovides these tools for you. They're also available across the Windows, macOS, and Linux platforms.
Run the following command to create an ASP.NET Core web app in a newTestAppConfigfolder:
dotnet new webapp --output TestAppConfig
dotnet new webapp --output TestAppConfig
Connect to the App Configuration store
Connect to your App Configuration store using Microsoft Entra ID (recommended), or a connection string.
Navigate into the project's directoryTestAppConfig, and run the following command to add NuGet package references.Microsoft Entra ID (recommended)Connection stringdotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Azure.Identitydotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
Navigate into the project's directoryTestAppConfig, and run the following command to add NuGet package references.
Microsoft Entra ID (recommended)
Connection string
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Azure.Identity
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Azure.Identity
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
Create a user secret for the application by navigating into theTestAppConfigfolder and running the following command.Microsoft Entra ID (recommended)Connection stringThe command usesSecret Managerto store a secret namedEndpoints:AppConfiguration, which stores the endpoint for your App Configuration store. Replace the<your-App-Configuration-endpoint>placeholder with your App Configuration store's endpoint. You can find the endpoint in your App Configuration store'sOverviewblade in the Azure portal.dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"The command usesSecret Managerto store a secret namedConnectionStrings:AppConfiguration, which stores the connection string for your App Configuration store. Replace the<your-App-Configuration-connection-string>placeholder with your App Configuration store's read-only connection string. You can find the connection string in your App Configuration store'sAccess settingsin the Azure portal.dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"TipSome shells will truncate the connection string unless it's enclosed in quotes. Ensure that the output of thedotnet user-secrets listcommand shows the entire connection string. If it doesn't, rerun the command, enclosing the connection string in quotes.Secret Manager stores the secret outside of your project tree, which helps prevent the accidental sharing of secrets within source code. It's used only to test the web app locally. When the app is deployed to Azure likeApp Service, use theConnection strings,Application settingsor environment variables to store the connection string. Alternatively, to avoid connection strings all together, you canconnect to App Configuration using managed identitiesor your otherMicrosoft Entra identities.
Create a user secret for the application by navigating into theTestAppConfigfolder and running the following command.
Microsoft Entra ID (recommended)
Connection string
The command usesSecret Managerto store a secret namedEndpoints:AppConfiguration, which stores the endpoint for your App Configuration store. Replace the<your-App-Configuration-endpoint>placeholder with your App Configuration store's endpoint. You can find the endpoint in your App Configuration store'sOverviewblade in the Azure portal.
Endpoints:AppConfiguration
<your-App-Configuration-endpoint>
dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"
dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"
The command usesSecret Managerto store a secret namedConnectionStrings:AppConfiguration, which stores the connection string for your App Configuration store. Replace the<your-App-Configuration-connection-string>placeholder with your App Configuration store's read-only connection string. You can find the connection string in your App Configuration store'sAccess settingsin the Azure portal.
ConnectionStrings:AppConfiguration
<your-App-Configuration-connection-string>
dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"
dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"
Tip
Some shells will truncate the connection string unless it's enclosed in quotes. Ensure that the output of thedotnet user-secrets listcommand shows the entire connection string. If it doesn't, rerun the command, enclosing the connection string in quotes.
dotnet user-secrets list
Secret Manager stores the secret outside of your project tree, which helps prevent the accidental sharing of secrets within source code. It's used only to test the web app locally. When the app is deployed to Azure likeApp Service, use theConnection strings,Application settingsor environment variables to store the connection string. Alternatively, to avoid connection strings all together, you canconnect to App Configuration using managed identitiesor your otherMicrosoft Entra identities.
OpenProgram.csand add the following namespaces:Microsoft Entra ID (recommended)Connection stringusing Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
using Azure.Identity;using Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
OpenProgram.csand add the following namespaces:
Microsoft Entra ID (recommended)
Connection string
using Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
using Azure.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
using Azure.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Azure.AppConfiguration.AspNetCore;
Connect to your App Configuration store by calling theAddAzureAppConfigurationmethod in theProgram.csfile.Microsoft Entra ID (recommended)Connection stringYou use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.var builder = WebApplication.CreateBuilder(args); 

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration")
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Load configuration from Azure App Configuration 
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

// The rest of existing code in program.cs
// ... ...var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Load configuration from Azure App Configuration
builder.Configuration.AddAzureAppConfiguration(connectionString);

// The rest of existing code in program.cs
// ... ...This code loadsallkey-values that haveno labelfrom your App Configuration store. For more information on loading data from App Configuration, see theApp Configuration provider API reference.
Connect to your App Configuration store by calling theAddAzureAppConfigurationmethod in theProgram.csfile.
AddAzureAppConfiguration
Program.cs
Microsoft Entra ID (recommended)
Connection string
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.
DefaultAzureCredential
var builder = WebApplication.CreateBuilder(args); 

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration")
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Load configuration from Azure App Configuration 
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

// The rest of existing code in program.cs
// ... ...
var builder = WebApplication.CreateBuilder(args); 

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration")
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Load configuration from Azure App Configuration 
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential());
});

// The rest of existing code in program.cs
// ... ...
var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Load configuration from Azure App Configuration
builder.Configuration.AddAzureAppConfiguration(connectionString);

// The rest of existing code in program.cs
// ... ...
var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Load configuration from Azure App Configuration
builder.Configuration.AddAzureAppConfiguration(connectionString);

// The rest of existing code in program.cs
// ... ...
This code loadsallkey-values that haveno labelfrom your App Configuration store. For more information on loading data from App Configuration, see theApp Configuration provider API reference.
Read from the App Configuration store
In this example, you'll update a web page to display its content using the settings you configured in your App Configuration store.
Add aSettings.csfile at the root of your project directory. It defines a strongly typedSettingsclass for the configuration you're going to use. Replace the namespace with the name of your project.namespace TestAppConfig
{
    public class Settings
    {
        public string BackgroundColor { get; set; }
        public long FontSize { get; set; }
        public string FontColor { get; set; }
        public string Message { get; set; }
    }
}
Add aSettings.csfile at the root of your project directory. It defines a strongly typedSettingsclass for the configuration you're going to use. Replace the namespace with the name of your project.
Settings
namespace TestAppConfig
{
    public class Settings
    {
        public string BackgroundColor { get; set; }
        public long FontSize { get; set; }
        public string FontColor { get; set; }
        public string Message { get; set; }
    }
}
namespace TestAppConfig
{
    public class Settings
    {
        public string BackgroundColor { get; set; }
        public long FontSize { get; set; }
        public string FontColor { get; set; }
        public string Message { get; set; }
    }
}
Bind theTestApp:Settingssection in configuration to theSettingsobject.UpdateProgram.cswith the following code and add theTestAppConfignamespace at the beginning of the file.using TestAppConfig;

// Existing code in Program.cs
// ... ...

builder.Services.AddRazorPages();

// Bind configuration "TestApp:Settings" section to the Settings object
builder.Services.Configure<Settings>(builder.Configuration.GetSection("TestApp:Settings"));

var app = builder.Build();

// The rest of existing code in program.cs
// ... ...
Bind theTestApp:Settingssection in configuration to theSettingsobject.
TestApp:Settings
Settings
UpdateProgram.cswith the following code and add theTestAppConfignamespace at the beginning of the file.
TestAppConfig
using TestAppConfig;

// Existing code in Program.cs
// ... ...

builder.Services.AddRazorPages();

// Bind configuration "TestApp:Settings" section to the Settings object
builder.Services.Configure<Settings>(builder.Configuration.GetSection("TestApp:Settings"));

var app = builder.Build();

// The rest of existing code in program.cs
// ... ...
using TestAppConfig;

// Existing code in Program.cs
// ... ...

builder.Services.AddRazorPages();

// Bind configuration "TestApp:Settings" section to the Settings object
builder.Services.Configure<Settings>(builder.Configuration.GetSection("TestApp:Settings"));

var app = builder.Build();

// The rest of existing code in program.cs
// ... ...
OpenIndex.cshtml.csin thePagesdirectory, and update theIndexModelclass with the following code. Add theusing Microsoft.Extensions.Optionsnamespace at the beginning of the file, if it's not already there.public class IndexModel : PageModel
{
    private readonly ILogger<IndexModel> _logger;

    public Settings Settings { get; }

    public IndexModel(IOptionsSnapshot<Settings> options, ILogger<IndexModel> logger)
    {
        Settings = options.Value;
        _logger = logger;
    }
}
OpenIndex.cshtml.csin thePagesdirectory, and update theIndexModelclass with the following code. Add theusing Microsoft.Extensions.Optionsnamespace at the beginning of the file, if it's not already there.
IndexModel
using Microsoft.Extensions.Options
public class IndexModel : PageModel
{
    private readonly ILogger<IndexModel> _logger;

    public Settings Settings { get; }

    public IndexModel(IOptionsSnapshot<Settings> options, ILogger<IndexModel> logger)
    {
        Settings = options.Value;
        _logger = logger;
    }
}
public class IndexModel : PageModel
{
    private readonly ILogger<IndexModel> _logger;

    public Settings Settings { get; }

    public IndexModel(IOptionsSnapshot<Settings> options, ILogger<IndexModel> logger)
    {
        Settings = options.Value;
        _logger = logger;
    }
}
OpenIndex.cshtmlin thePagesdirectory, and update the content with the following code.@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    body {
        background-color: @Model.Settings.BackgroundColor;
    }

    h1 {
        color: @Model.Settings.FontColor;
        font-size: @(Model.Settings.FontSize)px;
    }
</style>

<h1>@Model.Settings.Message</h1>
OpenIndex.cshtmlin thePagesdirectory, and update the content with the following code.
@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    body {
        background-color: @Model.Settings.BackgroundColor;
    }

    h1 {
        color: @Model.Settings.FontColor;
        font-size: @(Model.Settings.FontSize)px;
    }
</style>

<h1>@Model.Settings.Message</h1>
@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    body {
        background-color: @Model.Settings.BackgroundColor;
    }

    h1 {
        color: @Model.Settings.FontColor;
        font-size: @(Model.Settings.FontSize)px;
    }
</style>

<h1>@Model.Settings.Message</h1>
Build and run the app locally
To build the app using the .NET CLI, navigate to the root directory of your project. Run the following command in the command shell:dotnet build
To build the app using the .NET CLI, navigate to the root directory of your project. Run the following command in the command shell:
dotnet build
dotnet build
After the build completes successfully, run the following command to run the web app locally:dotnet run
After the build completes successfully, run the following command to run the web app locally:
dotnet run
dotnet run
The output of thedotnet runcommand contains two URLs. Open a browser and navigate to either one of these URLs to access your application. For example:https://localhost:5001.If you're working in the Azure Cloud Shell, select theWeb Previewbutton followed byConfigure. When prompted to configure the port for preview, enter5000, and selectOpen and browse.The web page looks like this:
The output of thedotnet runcommand contains two URLs. Open a browser and navigate to either one of these URLs to access your application. For example:https://localhost:5001.
dotnet run
https://localhost:5001
If you're working in the Azure Cloud Shell, select theWeb Previewbutton followed byConfigure. When prompted to configure the port for preview, enter5000, and selectOpen and browse.

The web page looks like this:
Clean up resources
If you don't want to continue using the resources created in this article, delete the resource group you created here to avoid charges.
Important
Deleting a resource group is irreversible. The resource group and all the resources in it are permanently deleted. Ensure that you don't accidentally delete the wrong resource group or resources. If you created the resources for this article inside a resource group that contains other resources you want to keep, delete each resource individually from its respective pane instead of deleting the resource group.
Sign in to theAzure portal, and selectResource groups.
In theFilter by namebox, enter the name of your resource group.
In the result list, select the resource group name to see an overview.
SelectDelete resource group.
You're asked to confirm the deletion of the resource group. Enter the name of your resource group to confirm, and selectDelete.
After a few moments, the resource group and all its resources are deleted.
Next steps
In this quickstart, you:
Provisioned a new App Configuration store.
Connected to your App Configuration store using the App Configuration provider library.
Read your App Configuration store's key-values with the configuration provider library.
Displayed a web page using the settings you configured in your App Configuration store.
To learn how to configure your ASP.NET Core web app to dynamically refresh configuration settings, continue to the next tutorial.
Enable dynamic configuration
Feedback
Was this page helpful?
Additional resources