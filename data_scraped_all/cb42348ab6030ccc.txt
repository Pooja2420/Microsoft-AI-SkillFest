Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
PublishCodeCoverageResults@1 - Publish code coverage results v1 task
Article
2025-02-24
6 contributors
In this article
Use this task to publish Cobertura or JaCoCo code coverage results from a build.
Note
PublishCodeCoverageResults@2 is the newest version of the task and should be used in your pipelines. The v1 task will be deprecated.
Publish Cobertura or JaCoCo code coverage results from a build.
Use this task to publish Cobertura or JaCoCo code coverage results from a build.
Syntax
# Publish code coverage results v1
# Publish Cobertura or JaCoCo code coverage results from a build.
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo' # 'Cobertura' | 'JaCoCo'. Required. Code coverage tool. Default: JaCoCo.
    summaryFileLocation: # string. Required. Summary file. 
    #pathToSources: # string. Path to Source files. 
    #reportDirectory: # string. Report directory. 
    #additionalCodeCoverageFiles: # string. Additional files. 
    #failIfCoverageEmpty: false # boolean. Fail when code coverage results are missing. Default: false.
# Publish code coverage results v1
# Publish Cobertura or JaCoCo code coverage results from a build.
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo' # 'Cobertura' | 'JaCoCo'. Required. Code coverage tool. Default: JaCoCo.
    summaryFileLocation: # string. Required. Summary file. 
    #pathToSources: # string. Path to Source files. 
    #reportDirectory: # string. Report directory. 
    #additionalCodeCoverageFiles: # string. Additional files. 
    #failIfCoverageEmpty: false # boolean. Fail when code coverage results are missing. Default: false.
Inputs
codeCoverageTool-Code coverage toolstring. Required. Allowed values:Cobertura,JaCoCo. Default value:JaCoCo.
codeCoverageTool
string
Cobertura
JaCoCo
JaCoCo
Specifies the tool that generates code coverage results.
summaryFileLocation-Summary filestring. Required.
summaryFileLocation
string
Specifies the path of the summary file containing code coverage statistics, such as line, method, and class coverage. Multiple summary files are merged into a single report. The value may contain minimatch patterns. For example:$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml.
$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml
pathToSources-Path to Source filesstring.
pathToSources
string
Specifying a path to source files is required when coverage XML reports don't contain an absolute path to source files. For example, JaCoCo reports don't use absolute paths, so when publishing JaCoCo coverage for Java apps, the pattern is similar to$(System.DefaultWorkingDirectory)/MyApp/src/main/java/. This input should point to an absolute path to source files on the host. For example,$(System.DefaultWorkingDirectory)/MyApp/.
$(System.DefaultWorkingDirectory)/MyApp/src/main/java/
$(System.DefaultWorkingDirectory)/MyApp/
This input can be used if tests are run in a Docker container.
Multiple sources can be added by delimiting each list item with the;character, for examplepathToSources: $(System.DefaultWorkingDirectory)/path/to/first/source;$(System.DefaultWorkingDirectory)/path/to/second/source.
;
pathToSources: $(System.DefaultWorkingDirectory)/path/to/first/source;$(System.DefaultWorkingDirectory)/path/to/second/source
reportDirectory-Report directorystring.
reportDirectory
string
Specifies the path of the code coverage HTML report directory. The report directory is published for later viewing as an artifact of the build. The value may contain minimatch patterns. For example:$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura.
$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura
additionalCodeCoverageFiles-Additional filesstring.
additionalCodeCoverageFiles
string
Specifies the file path pattern and notes any additional code coverage files to be published as artifacts of the build. The value may contain minimatch patterns. For example:$(System.DefaultWorkingDirectory)/**/*.exec.
$(System.DefaultWorkingDirectory)/**/*.exec
failIfCoverageEmpty-Fail when code coverage results are missingboolean. Default value:false.
failIfCoverageEmpty
boolean
false
Fails the task if code coverage did not produce any results to publish.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Use this task in a build pipeline to publish code coverage results produced when running tests to Azure Pipelines or TFS in order to obtain coverage reporting. The task supports popular coverage result formats such asCoberturaandJaCoCo.
This task is only supported in build pipelines, not release pipelines.
Tasks such asVisual Studio Test,.NET Core,Ant,Maven,Gulp, andGruntalso provide the option to publish code coverage data to the pipeline. If you are using these tasks, you do not need a separate Publish Code Coverage Results task in the pipeline.
To generate the HTML code coverage report you need dotnet framework 2.0.0 or later on the agent. The dotnet folder must be in the environment path. If there are multiple folders containing dotnet, the one with version 2.0.0 must be before any others in the path list.
Code coverage results for JavaScript with Istanbul using YAML
To publish code coverage results for JavaScript with Istanbul using YAML, seeCustomize JavaScriptin the Ecosystems section of these topics, which also includes examples for other languages.
See anexample of publishing code coverage using Cobertura.
Docker
For apps using Docker, build and tests may run inside the container and generate code coverage results within the container. In order to publish the results to the pipeline, the resulting artifacts should be made available to thePublish Code Coverage Resultstask. For reference, you can see a similar example for publishing test results under theBuild, test, and publish results with a Docker filesection forDocker.
View results
In order to view the code coverage results in the pipeline, seeReview code coverage results.
Is code coverage data merged when multiple files are provided as input to the task or multiple tasks are used in the pipeline?
At present, the code coverage reporting functionality provided by this task is limited, and it does not merge coverage data. If you provide multiple files as input to the task, only the first match is considered.
If you use multiple publish code coverage tasks in the pipeline, the summary and report is shown for the last task. Any previously uploaded data is ignored.
Known issues
The publish code coverage results task generates and publishes the HTML report, which is a set of HTML files that are linked from the mainindex.htmlfile. If the code coverage tab fails to show the code coverage report, check whether the size of theindex.htmlfile is close to or larger than 7 MB. Complete the following steps to check the size of the file. Then, if the file size is close to or larger than 7 MB, you can use the following workaround to view the coverage report.
Select the buildSummarytab, and then select thepublishedlink:
Select the buildSummarytab, and then select thepublishedlink:

Next to theCode Coverage Report_*artifact, selectDownload artifacts:
Next to theCode Coverage Report_*artifact, selectDownload artifacts:

When the code coverage report is downloaded, extract the .zip file.
When the code coverage report is downloaded, extract the .zip file.
In the code coverage report, check the size ofindex.htmlto help determine whether the file size is causing the issue described here.
In the code coverage report, check the size ofindex.htmlto help determine whether the file size is causing the issue described here.
Openindex.htmlin a browser to view the code coverage report.
Openindex.htmlin a browser to view the code coverage report.
Requirements
See also
Publish Test Results
Feedback
Was this page helpful?
Additional resources