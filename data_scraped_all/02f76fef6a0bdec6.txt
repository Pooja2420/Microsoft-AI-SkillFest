Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Apply machine learning models in Azure Functions with Python and TensorFlow
Article
2023-03-09
10 contributors
In this article
In this article, you learn how to use Python, TensorFlow, and Azure Functions with a machine learning model to classify an image based on its contents. Because you do all work locally and create no Azure resources in the cloud, there is no cost to complete this tutorial.
Initialize a local environment for developing Azure Functions in Python.
Import a custom TensorFlow machine learning model into a function app.
Build a serverless HTTP API for classifying an image as containing a dog or a cat.
Consume the API from a web app.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Python 3.7.4. (Python 3.7.4 and Python 3.6.x are verified with Azure Functions; Python 3.8 and later versions are not yet supported.)
TheAzure Functions Core Tools
A code editor such asVisual Studio Code
Prerequisite check
In a terminal or command window, runfunc --versionto check that the Azure Functions Core Tools are version 2.7.1846 or later.
func --version
Runpython --version(Linux/macOS) orpy --version(Windows) to check your Python version reports 3.7.x.
python --version
py --version
Clone the tutorial repository
In a terminal or command window, clone the following repository using Git:git clone https://github.com/Azure-Samples/functions-python-tensorflow-tutorial.git
In a terminal or command window, clone the following repository using Git:
git clone https://github.com/Azure-Samples/functions-python-tensorflow-tutorial.git
git clone https://github.com/Azure-Samples/functions-python-tensorflow-tutorial.git
Navigate into the folder and examine its contents.cd functions-python-tensorflow-tutorialstartis your working folder for the tutorial.endis the final result and full implementation for your reference.resourcescontains the machine learning model and helper libraries.frontendis a website that calls the function app.
Navigate into the folder and examine its contents.
cd functions-python-tensorflow-tutorial
cd functions-python-tensorflow-tutorial
startis your working folder for the tutorial.
endis the final result and full implementation for your reference.
resourcescontains the machine learning model and helper libraries.
frontendis a website that calls the function app.
Create and activate a Python virtual environment
Navigate to thestartfolder and run the following commands to create and activate a virtual environment named.venv. Be sure to use Python 3.7, which is supported by Azure Functions.
.venv
bash
PowerShell
Cmd
cd start
python -m venv .venv
source .venv/bin/activate
cd start
python -m venv .venv
source .venv/bin/activate
If Python didn't install the venv package on your Linux distribution, run the following command:
sudo apt-get install python3-venv
sudo apt-get install python3-venv
cd start
py -3.7 -m venv .venv
.venv\scripts\activate
cd start
py -3.7 -m venv .venv
.venv\scripts\activate
cd start
py -3.7 -m venv .venv
.venv\scripts\activate
cd start
py -3.7 -m venv .venv
.venv\scripts\activate
You run all subsequent commands in this activated virtual environment. (To exit the virtual environment, rundeactivate.)
deactivate
Create a local functions project
In Azure Functions, a function project is a container for one or more individual functions that each responds to a specific trigger. All functions in a project share the same local and hosting configurations. In this section, you create a function project that contains a single boilerplate function namedclassifythat provides an HTTP endpoint. You add more specific code in a later section.
classify
In thestartfolder, use the Azure Functions Core Tools to initialize a Python function app:func init --worker-runtime pythonAfter initialization, thestartfolder contains various files for the project, including configurations files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.TipBecause a function project is tied to a specific runtime, all the functions in the project must be written with the same language.
In thestartfolder, use the Azure Functions Core Tools to initialize a Python function app:
func init --worker-runtime python
func init --worker-runtime python
After initialization, thestartfolder contains various files for the project, including configurations files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.
Tip
Because a function project is tied to a specific runtime, all the functions in the project must be written with the same language.
Add a function to your project by using the following command, where the--nameargument is the unique name of your function and the--templateargument specifies the function's trigger.func newcreate a subfolder matching the function name that contains a code file appropriate to the project's chosen language and a configuration file namedfunction.json.func new --name classify --template "HTTP trigger"This command creates a folder matching the name of the function,classify. In that folder are two files:__init__.py, which contains the function code, andfunction.json, which describes the function's trigger and its input and output bindings. For details on the contents of these files, seeProgramming modelin the Python developer guide.
Add a function to your project by using the following command, where the--nameargument is the unique name of your function and the--templateargument specifies the function's trigger.func newcreate a subfolder matching the function name that contains a code file appropriate to the project's chosen language and a configuration file namedfunction.json.
--name
--template
func new
func new --name classify --template "HTTP trigger"
func new --name classify --template "HTTP trigger"
This command creates a folder matching the name of the function,classify. In that folder are two files:__init__.py, which contains the function code, andfunction.json, which describes the function's trigger and its input and output bindings. For details on the contents of these files, seeProgramming modelin the Python developer guide.
Run the function locally
Start the function by starting the local Azure Functions runtime host in thestartfolder:func start
Start the function by starting the local Azure Functions runtime host in thestartfolder:
func start
func start
Once you see theclassifyendpoint appear in the output, navigate to the URL,http://localhost:7071/api/classify?name=Azure. The message "Hello Azure!" should appear in the output.
Once you see theclassifyendpoint appear in the output, navigate to the URL,http://localhost:7071/api/classify?name=Azure. The message "Hello Azure!" should appear in the output.
classify
http://localhost:7071/api/classify?name=Azure
UseCtrl-Cto stop the host.
UseCtrl-Cto stop the host.
Import the TensorFlow model and add helper code
To modify theclassifyfunction to classify an image based on its contents, you use a pre-built TensorFlow model that was trained with and exported from Azure Custom Vision Service. The model, which is contained in theresourcesfolder of the sample you cloned earlier, classifies an image based on whether it contains a dog or a cat. You then add some helper code and dependencies to your project.
classify
To build your own model using the free tier of the Custom Vision Service, follow the instructions in thesample project repository.
Tip
If you want to host your TensorFlow model independent of the function app, you can instead mount a file share containing your model to your Linux function app. To learn more, seeMount a file share to a Python function app using Azure CLI.
In thestartfolder, run following command to copy the model files into theclassifyfolder. Be sure to include\*in the command.bashPowerShellCmdcp ../resources/model/* classifycopy ..\resources\model\* classifycopy ..\resources\model\* classify
In thestartfolder, run following command to copy the model files into theclassifyfolder. Be sure to include\*in the command.
\*
bash
PowerShell
Cmd
cp ../resources/model/* classify
cp ../resources/model/* classify
copy ..\resources\model\* classify
copy ..\resources\model\* classify
copy ..\resources\model\* classify
copy ..\resources\model\* classify
Verify that theclassifyfolder contains files namedmodel.pbandlabels.txt. If not, check that you ran the command in thestartfolder.
Verify that theclassifyfolder contains files namedmodel.pbandlabels.txt. If not, check that you ran the command in thestartfolder.
In thestartfolder, run the following command to copy a file with helper code into theclassifyfolder:bashPowerShellCmdcp ../resources/predict.py classifycopy ..\resources\predict.py classifycopy ..\resources\predict.py classify
In thestartfolder, run the following command to copy a file with helper code into theclassifyfolder:
bash
PowerShell
Cmd
cp ../resources/predict.py classify
cp ../resources/predict.py classify
copy ..\resources\predict.py classify
copy ..\resources\predict.py classify
copy ..\resources\predict.py classify
copy ..\resources\predict.py classify
Verify that theclassifyfolder now contains a file namedpredict.py.
Verify that theclassifyfolder now contains a file namedpredict.py.
Openstart/requirements.txtin a text editor and add the following dependencies required by the helper code:tensorflow==1.14
Pillow
requests
Openstart/requirements.txtin a text editor and add the following dependencies required by the helper code:
tensorflow==1.14
Pillow
requests
tensorflow==1.14
Pillow
requests
Saverequirements.txt.
Saverequirements.txt.
Install the dependencies by running the following command in thestartfolder. Installation may take a few minutes, during which time you can proceed with modifying the function in the next section.pip install --no-cache-dir -r requirements.txtOn Windows, you may encounter the error, "Could not install packages due to an EnvironmentError: [Errno 2] No such file or directory:" followed by a long pathname to a file likesharded_mutable_dense_hashtable.cpython-37.pyc. Typically, this error happens because the depth of the folder path becomes too long. In this case, set the registry keyHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabledto1to enable long paths. Alternately, check where your Python interpreter is installed. If that location has a long path, try reinstalling in a folder with a shorter path.
Install the dependencies by running the following command in thestartfolder. Installation may take a few minutes, during which time you can proceed with modifying the function in the next section.
pip install --no-cache-dir -r requirements.txt
pip install --no-cache-dir -r requirements.txt
On Windows, you may encounter the error, "Could not install packages due to an EnvironmentError: [Errno 2] No such file or directory:" followed by a long pathname to a file likesharded_mutable_dense_hashtable.cpython-37.pyc. Typically, this error happens because the depth of the folder path becomes too long. In this case, set the registry keyHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabledto1to enable long paths. Alternately, check where your Python interpreter is installed. If that location has a long path, try reinstalling in a folder with a shorter path.
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem@LongPathsEnabled
1
Tip
When calling uponpredict.pyto make its first prediction, a function named_initializeloads the TensorFlow model from disk and caches it in global variables. This caching speeds up subsequent predictions. For more information on using global variables, refer to theAzure Functions Python developer guide.
_initialize
Update the function to run predictions
Openclassify/__init__.pyin a text editor and add the following lines after the existingimportstatements to import the standard JSON library and thepredicthelpers:import logging
import azure.functions as func
import json

# Import helper script
from .predict import predict_image_from_url
Openclassify/__init__.pyin a text editor and add the following lines after the existingimportstatements to import the standard JSON library and thepredicthelpers:
import
import logging
import azure.functions as func
import json

# Import helper script
from .predict import predict_image_from_url
import logging
import azure.functions as func
import json

# Import helper script
from .predict import predict_image_from_url
Replace the entire contents of themainfunction with the following code:def main(req: func.HttpRequest) -> func.HttpResponse:
    image_url = req.params.get('img')
    logging.info('Image URL received: ' + image_url)

    results = predict_image_from_url(image_url)

    headers = {
        "Content-type": "application/json",
        "Access-Control-Allow-Origin": "*"
    }

    return func.HttpResponse(json.dumps(results), headers = headers)This function receives an image URL in a query string parameter namedimg. It then callspredict_image_from_urlfrom the helper library to download and classify the image using the TensorFlow model. The function then returns an HTTP response with the results.ImportantBecause this HTTP endpoint is called by a web page hosted on another domain, the response includes anAccess-Control-Allow-Originheader to satisfy the browser's Cross-Origin Resource Sharing (CORS) requirements.In a production application, change*to the web page's specific origin for added security.
Replace the entire contents of themainfunction with the following code:
main
def main(req: func.HttpRequest) -> func.HttpResponse:
    image_url = req.params.get('img')
    logging.info('Image URL received: ' + image_url)

    results = predict_image_from_url(image_url)

    headers = {
        "Content-type": "application/json",
        "Access-Control-Allow-Origin": "*"
    }

    return func.HttpResponse(json.dumps(results), headers = headers)
def main(req: func.HttpRequest) -> func.HttpResponse:
    image_url = req.params.get('img')
    logging.info('Image URL received: ' + image_url)

    results = predict_image_from_url(image_url)

    headers = {
        "Content-type": "application/json",
        "Access-Control-Allow-Origin": "*"
    }

    return func.HttpResponse(json.dumps(results), headers = headers)
This function receives an image URL in a query string parameter namedimg. It then callspredict_image_from_urlfrom the helper library to download and classify the image using the TensorFlow model. The function then returns an HTTP response with the results.
img
predict_image_from_url
Important
Because this HTTP endpoint is called by a web page hosted on another domain, the response includes anAccess-Control-Allow-Originheader to satisfy the browser's Cross-Origin Resource Sharing (CORS) requirements.
Access-Control-Allow-Origin
In a production application, change*to the web page's specific origin for added security.
*
Save your changes, then assuming that dependencies have finished installing, start the local function host again withfunc start. Be sure to run the host in thestartfolder with the virtual environment activated. Otherwise the host will start, but you will see errors when invoking the function.func start
Save your changes, then assuming that dependencies have finished installing, start the local function host again withfunc start. Be sure to run the host in thestartfolder with the virtual environment activated. Otherwise the host will start, but you will see errors when invoking the function.
func start
func start
func start
In a browser, open the following URL to invoke the function with the URL of a cat image and confirm that the returned JSON classifies the image as a cat.http://localhost:7071/api/classify?img=https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.png
In a browser, open the following URL to invoke the function with the URL of a cat image and confirm that the returned JSON classifies the image as a cat.
http://localhost:7071/api/classify?img=https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.png
http://localhost:7071/api/classify?img=https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.png
Keep the host running because you use it in the next step.
Keep the host running because you use it in the next step.
Run the local web app front end to test the function
To test invoking the function endpoint from another web app, there's a simple app in the repository'sfrontendfolder.
Open a new terminal or command prompt and activate the virtual environment (as described earlier underCreate and activate a Python virtual environment).
Open a new terminal or command prompt and activate the virtual environment (as described earlier underCreate and activate a Python virtual environment).
Navigate to the repository'sfrontendfolder.
Navigate to the repository'sfrontendfolder.
Start an HTTP server with Python:bashPowerShellCmdpython -m http.serverpy -m http.serverpy -m http.server
Start an HTTP server with Python:
bash
PowerShell
Cmd
python -m http.server
python -m http.server
py -m http.server
py -m http.server
py -m http.server
py -m http.server
In a browser, navigate tolocalhost:8000, then enter one of the following photo URLs into the textbox, or use the URL of any publicly accessible image.https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.pnghttps://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat2.pnghttps://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog1.pnghttps://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog2.png
In a browser, navigate tolocalhost:8000, then enter one of the following photo URLs into the textbox, or use the URL of any publicly accessible image.
localhost:8000
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat1.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat2.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/cat2.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog1.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog1.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog2.png
https://raw.githubusercontent.com/Azure-Samples/functions-python-tensorflow-tutorial/master/resources/assets/samples/dog2.png
SelectSubmitto invoke the function endpoint to classify the image.If the browser reports an error when you submit the image URL, check the terminal in which you're running the function app. If you see an error like "No module found 'PIL'", you may have started the function app in thestartfolder without first activating the virtual environment you created earlier. If you still see errors, runpip install -r requirements.txtagain with the virtual environment activated and look for errors.
SelectSubmitto invoke the function endpoint to classify the image.

If the browser reports an error when you submit the image URL, check the terminal in which you're running the function app. If you see an error like "No module found 'PIL'", you may have started the function app in thestartfolder without first activating the virtual environment you created earlier. If you still see errors, runpip install -r requirements.txtagain with the virtual environment activated and look for errors.
pip install -r requirements.txt
Note
The model always classifies the content of the image as a cat or a dog, regardless of whether the image contains either, defaulting to dog. Images of tigers and panthers, for example, typically classify as cat, but images of elephants, carrots, or airplanes classify as dog.
Clean up resources
Because the entirety of this tutorial runs locally on your machine, there are no Azure resources or services to clean up.
Next steps
In this tutorial, you learned how to build and customize an HTTP API endpoint with Azure Functions to classify images using a TensorFlow model. You also learned how to call the API from a web app. You can use the techniques in this tutorial to build out APIs of any complexity, all while running on the serverless compute model provided by Azure Functions.
Deploy the function to Azure Functions using the Azure CLI Guide
See also:
Deploy the function to Azure using Visual Studio Code.
Azure Functions Python Developer Guide
Mount a file share to a Python function app using Azure CLI
Feedback
Was this page helpful?
Additional resources