Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Keywords in Azure Cosmos DB for NoSQL
Article
2024-08-22
2 contributors
In this article
APPLIES TO:NoSQL
Azure Cosmos DB for NoSQL's query language includes a set of reserved keywords that are used in queries for extended functionality.
BETWEEN
TheBETWEENkeyword evaluates to a boolean indicating whether the target value is between two specified values, inclusive.
BETWEEN
You can use theBETWEENkeyword with aWHEREclause to express queries that filters results against ranges of string or numerical values. For example, the following query returns all items in which the price is between17.25and25.50, again inclusive.
BETWEEN
WHERE
17.25
25.50
SELECT VALUE
    p.price
FROM
    products p
WHERE
    p.price BETWEEN 17.25 AND 25.50
SELECT VALUE
    p.price
FROM
    products p
WHERE
    p.price BETWEEN 17.25 AND 25.50
[
  20
]
[
  20
]
You can also use theBETWEENkeyword in theSELECTclause, as in the following example.
BETWEEN
SELECT
SELECT 
    (p.price BETWEEN 0 AND 10) AS booleanLessThanTen,
    p.price
FROM
    products p
SELECT 
    (p.price BETWEEN 0 AND 10) AS booleanLessThanTen,
    p.price
FROM
    products p
[
  {
    "booleanLessThanTen": false,
    "price": 20.0
  },
  {
    "booleanLessThanTen": true,
    "price": 7.5
  }
]
[
  {
    "booleanLessThanTen": false,
    "price": 20.0
  },
  {
    "booleanLessThanTen": true,
    "price": 7.5
  }
]
Note
In the API for NoSQL, unlike ANSI SQL, you can express range queries against properties of mixed types. For example,pricemight be a number like5.0in some items and a string  likefifteenDollarsin others. In these cases, as it is in JavaScript, the comparison between the two different types results inundefined, so the item is skipped.
price
5.0
fifteenDollars
undefined
DISTINCT
TheDISTINCTkeyword eliminates duplicates in the projected query results.
DISTINCT
In this example, the query projects values for each product category. If two categories are equivalent, only a single occurrence returns in the results.
SELECT DISTINCT VALUE
    p.category
FROM
    products p
SELECT DISTINCT VALUE
    p.category
FROM
    products p
[
  "Accessories",
  "Tools"
]
[
  "Accessories",
  "Tools"
]
You can also project values even if the target field doesn't exist. In this case, the field doesn't exist in one of the items, so the query returns an empty object for that specific unique value.
SELECT DISTINCT
    p.category
FROM
    products p
SELECT DISTINCT
    p.category
FROM
    products p
The results are:
[
  {},
  {
    "category": "Accessories"
  },
  {
    "category": "Tools"
  }
]
[
  {},
  {
    "category": "Accessories"
  },
  {
    "category": "Tools"
  }
]
LIKE
Returns a boolean value depending on whether a specific character string matches a specified pattern. A pattern can include regular characters and wildcard characters.
Tip
You can write logically equivalent queries using either theLIKEkeyword or theRegexMatchsystem function. You'll observe the same index utilization regardless of which option you choose. The choice of which option to use is largely based on syntax preference.
LIKE
RegexMatch
Note
BecauseLIKEcan utilize an index, you shouldcreate a range indexfor properties you are comparing usingLIKE.
LIKE
LIKE
You can use the following wildcard characters with LIKE:
%
WHERE c.description LIKE "%SO%PS%"
_
WHERE c.description LIKE"%SO_PS%"
[ ]
[a-f]
[abcdef]
WHERE c.description LIKE "%SO[t-z]PS%"
[^]
[^a-f]
[^abcdef]
WHERE c.description LIKE "%SO[^abc]PS%"
The%character matches any string of zero or more characters. For example, by placing a%at the beginning and end of the pattern, the following query returns all items where the specified field contains the phrase as a substring:
%
%
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "%driver%"
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "%driver%"
If you only used a%character at the end of the pattern, you'd only return items with a description that started withfruit:
%
fruit
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "%glove"
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "%glove"
Similarly, the wildcard at the start of the pattern indicates that you want to match values with the specified value as a prefix:
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "Road%"
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name LIKE "Road%"
TheNOTkeyword inverses the result of theLIKEkeyword's expression evaluation. This example returns all items that donotmatch theLIKEexpression.
NOT
LIKE
LIKE
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name NOT LIKE "%winter%"
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.name NOT LIKE "%winter%"
You can search for patterns that include one or more wildcard characters using theESCAPEclause. For example, if you wanted to search for descriptions that contained the string20%, you wouldn't want to interpret the%as a wildcard character. This example interprets the^as the escape character so you can escape a specific instance of%.
ESCAPE
20%
%
^
%
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.description LIKE "%20^%%" ESCAPE "^"
SELECT VALUE
    p.name
FROM
    products p
WHERE
    p.description LIKE "%20^%%" ESCAPE "^"
You can enclose wildcard characters in brackets to treat them as literal characters. When you enclose a wildcard character in brackets, you remove any special attributes. This table includes examples of literal characters.
LIKE "20-30[%]"
20-30%
LIKE "[_]n"
_n
LIKE "[ [ ]"
[
LIKE "]"
]
IN
Use theINkeyword to check whether a specified value matches any value in a list. For example, the following query returns all items where the category matches at least one of the values in a list.
IN
SELECT
    *
FROM
    products p
WHERE
    p.category IN ("Accessories", "Clothing")
SELECT
    *
FROM
    products p
WHERE
    p.category IN ("Accessories", "Clothing")
Tip
If you include your partition key in theINfilter, your query will automatically filter to only the relevant partitions.
IN
TOP
TheTOPkeyword returns the firstNnumber of query results in an undefined order. As a best practice, useTOPwith theORDER BYclause to limit results to the firstNnumber of ordered values. Combining these two clauses is the only way to predictably indicate which rowsTOPaffects.
TOP
N
TOP
ORDER BY
N
TOP
You can useTOPwith a constant value, as in the following example, or with a variable value using parameterized queries.
TOP
SELECT TOP 10
    *
FROM
    products p
ORDER BY
    p.price ASC
SELECT TOP 10
    *
FROM
    products p
ORDER BY
    p.price ASC
Related content
WHEREclause
WHERE
Subqueries
Constants
Feedback
Was this page helpful?
Additional resources