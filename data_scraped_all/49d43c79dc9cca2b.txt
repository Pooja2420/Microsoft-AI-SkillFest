Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure an app to trust an external identity provider
Article
2024-12-13
10 contributors
In this article
This article describes how to manage a federated identity credential on an application in Microsoft Entra ID. The federated identity credential creates a trust relationship between an application and an external identity provider (IdP).
You can then configure an external software workload to exchange a token from the external IdP for an access token from Microsoft identity platform. The external workload can access Microsoft Entra protected resources without needing to manage secrets (in supported scenarios). To learn more about the token exchange workflow, read aboutworkload identity federation.
In this article, you learn how to create, list, and delete federated identity credentials on an application in Microsoft Entra ID.
Important considerations and restrictions
To create, update, or delete a federated identity credential, the account performing the action must be the owner of the application, or have one of these Entra roles:Application Administrator,Cloud Application Administrator,Global Administrator, orHybrid Identity Administrator. Themicrosoft.directory/applications/credentials/update permissionis required to update a federated identity credential.
A maximum of 20 federated identity credentials can be added to an application or user-assigned managed identity.
When you configure a federated identity credential, there are several important pieces of information to provide:
issuerandsubjectare the key pieces of information needed to set up the trust relationship. The combination ofissuerandsubjectmust be unique on the app.  When the external software workload requests Microsoft identity platform to exchange the external token for an access token, theissuerandsubjectvalues of the federated identity credential are checked against theissuerandsubjectclaims provided in the external token. If that validation check passes, Microsoft identity platform issues an access token to the external software workload.
issuerandsubjectare the key pieces of information needed to set up the trust relationship. The combination ofissuerandsubjectmust be unique on the app.  When the external software workload requests Microsoft identity platform to exchange the external token for an access token, theissuerandsubjectvalues of the federated identity credential are checked against theissuerandsubjectclaims provided in the external token. If that validation check passes, Microsoft identity platform issues an access token to the external software workload.
issuer
subject
issuer
subject
issueris the URL of the external identity provider and must match theissuerclaim of the external token being exchanged. Required. If theissuerclaim has leading or trailing whitespace in the value, the token exchange is blocked. This field has a character limit of 600 characters.
issueris the URL of the external identity provider and must match theissuerclaim of the external token being exchanged. Required. If theissuerclaim has leading or trailing whitespace in the value, the token exchange is blocked. This field has a character limit of 600 characters.
issuer
issuer
subjectis the identifier of the external software workload and must match thesub(subject) claim of the external token being exchanged.subjecthas no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. This field has a character limit of 600 characters.ImportantThesubjectsetting values must exactly match the configuration on the GitHub workflow configuration.  Otherwise, Microsoft identity platform will look at the incoming external token and reject the exchange for an access token.  You won't get an error, the exchange fails without error.ImportantIf you accidentally add the incorrect external workload information in thesubjectsetting the federated identity credential is created successfully without error.  The error does not become apparent until the token exchange fails.
subjectis the identifier of the external software workload and must match thesub(subject) claim of the external token being exchanged.subjecthas no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. This field has a character limit of 600 characters.
sub
subject
Important
Thesubjectsetting values must exactly match the configuration on the GitHub workflow configuration.  Otherwise, Microsoft identity platform will look at the incoming external token and reject the exchange for an access token.  You won't get an error, the exchange fails without error.
Important
If you accidentally add the incorrect external workload information in thesubjectsetting the federated identity credential is created successfully without error.  The error does not become apparent until the token exchange fails.
audienceslists the audiences that can appear in the external token.  Required. You must add a single audience value, which has a limit of 600 characters. The recommended value is "api://AzureADTokenExchange". It says what Microsoft identity platform must accept in theaudclaim in the incoming token.
audienceslists the audiences that can appear in the external token.  Required. You must add a single audience value, which has a limit of 600 characters. The recommended value is "api://AzureADTokenExchange". It says what Microsoft identity platform must accept in theaudclaim in the incoming token.
aud
nameis the unique identifier for the federated identity credential. Required.  This field has a character limit of 3-120 characters and must be URL friendly. Alphanumeric, dash, or underscore characters are supported, the first character must be alphanumeric only.  It's immutable once created.
nameis the unique identifier for the federated identity credential. Required.  This field has a character limit of 3-120 characters and must be URL friendly. Alphanumeric, dash, or underscore characters are supported, the first character must be alphanumeric only.  It's immutable once created.
descriptionis the user-provided description of the federated identity credential.  Optional. The description isn't validated or checked by Microsoft Entra ID. This field has a limit of 600 characters.
descriptionis the user-provided description of the federated identity credential.  Optional. The description isn't validated or checked by Microsoft Entra ID. This field has a limit of 600 characters.
Wildcard characters aren't supported in any federated identity credential property value.
To learn more about supported regions, time to propagate federated credential updates, supported issuers and more, readImportant considerations and restrictions for federated identity credentials.
Prerequisites
Create an app registrationormanaged identityin Microsoft Entra ID. Grant your app access to the Azure resources targeted by your external software workload.
Find the object ID of the app (not the application (client) ID), which you need in the following steps. You can find the object ID of the app in theMicrosoft Entra admin center. Go to the list of app registrations and select your app registration. InOverview, you can find theObject ID.
Get thesubjectandissuerinformation for your external IdP and software workload, which you need in the following steps.
Configure a federated identity credential on an app
GitHub Actions
To add a federated identity for GitHub actions, follow these steps:
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane, select theFederated credentialstab, and selectAdd credential.
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane, select theFederated credentialstab, and selectAdd credential.
In theFederated credential scenariodrop-down box, selectGitHub actions deploying Azure resources.
In theFederated credential scenariodrop-down box, selectGitHub actions deploying Azure resources.
Specify theOrganizationandRepositoryfor your GitHub Actions workflow.
Specify theOrganizationandRepositoryfor your GitHub Actions workflow.
ForEntity type, selectEnvironment,Branch,Pull request, orTagand specify the value. The values must exactly match the configuration in theGitHub workflow. Pattern matching isn't supported for branches and tags. Specify an environment if your on-push workflow runs against many branches or tags. For more info, read theexamples.
ForEntity type, selectEnvironment,Branch,Pull request, orTagand specify the value. The values must exactly match the configuration in theGitHub workflow. Pattern matching isn't supported for branches and tags. Specify an environment if your on-push workflow runs against many branches or tags. For more info, read theexamples.
Add aNamefor the federated credential.
Add aNamefor the federated credential.
TheIssuer,Audiences, andSubject identifierfields autopopulate based on the values you entered.
TheIssuer,Audiences, andSubject identifierfields autopopulate based on the values you entered.
SelectAddto configure the federated credential.
SelectAddto configure the federated credential.

Use the following values from your Microsoft Entra application registration for your GitHub workflow:
AZURE_CLIENT_IDtheApplication (client) ID
AZURE_CLIENT_IDtheApplication (client) ID
AZURE_CLIENT_ID
AZURE_TENANT_IDtheDirectory (tenant) IDThe following screenshot demonstrates how to copy the application ID and tenant ID.
AZURE_TENANT_IDtheDirectory (tenant) ID
AZURE_TENANT_ID
The following screenshot demonstrates how to copy the application ID and tenant ID.

For a workflow triggered by a push or pull request event on the main branch:
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
Specify anEntity typeofBranchand aGitHub branch nameof "main".
For Jobs tied to an environment named "production":
on:
  push:
    branches:
      - main

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: deploy
        # ...deployment-specific steps
on:
  push:
    branches:
      - main

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: deploy
        # ...deployment-specific steps
Specify anEntity typeofEnvironmentand aGitHub environment nameof "production".
For example, for a workflow triggered by a push to the tag named "v2":
on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - main
      - 'mona/octocat'
      - 'releases/**'
    # Sequence of patterns matched against refs/tags
    tags:
      - v2
      - v1.*
on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      - main
      - 'mona/octocat'
      - 'releases/**'
    # Sequence of patterns matched against refs/tags
    tags:
      - v2
      - v1.*
Specify anEntity typeofTagand aGitHub tag nameof "v2".
For a workflow triggered by a pull request event, specify anEntity typeofPull request
Kubernetes
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane, select theFederated credentialstab, and selectAdd credential.
Select theKubernetes accessing Azure resourcesscenario from the dropdown menu.
Fill in theCluster issuer URL,Namespace,Service account name, andNamefields:
Cluster issuer URLis theOIDC issuer URLfor the managed cluster or theOIDC Issuer URLfor a self-managed cluster.
Service account nameis the name of the Kubernetes service account, which provides an identity for processes that run in a Pod.
Namespaceis the service account namespace.
Nameis the name of the federated credential, which can't be changed later.
Other identity providers
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane, select theFederated credentialstab, and selectAdd credential.
Select theOther issuerscenario from the dropdown menu.
Specify the following fields (using a software workload running in Google Cloud as an example):
Nameis the name of the federated credential, which can't be changed later.
Subject identifier: must match thesubclaim in the token issued by the external identity provider. In this example using Google Cloud,subjectis the Unique ID of the service account you plan to use.
sub
Issuer: must match theissclaim in the token issued by the external identity provider. A URL that complies with the OIDC Discovery spec. Microsoft Entra ID uses this issuer URL to fetch the keys that are necessary to validate the token. For Google Cloud, theissuerishttps://accounts.google.com.
iss
https://accounts.google.com
List federated identity credentials on an app
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane and select theFederated credentialstab. The federated credentials that are configured on your app are listed.
Delete a federated identity credential from an app
Find your app registration in the app registrations experience of theMicrosoft Entra admin center. SelectCertificates & secretsin the left nav pane and select theFederated credentialstab. The federated credentials that are configured on your app are listed.
To delete a federated identity credential, select theDeleteicon for the credential.
Set up a Flexible Federated identity credential (preview)
Navigate to Microsoft Entra ID and select the application where you want to configure the federated identity credential.
In the left-hand navigation pane, selectCertificates & secrets.
Under theFederated credentialstab, select+ Add credential.
In theAdd a credentialwindow that appears, from the dropdown menu next toFederated credential scenario, selectOther issuer.
InValueenter the claim matching expression you want to use.
Prerequisites
If you don't already have an Azure account,sign up for a free accountbefore you continue.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Create an app registrationin Microsoft Entra ID. Grant your app access to the Azure resources targeted by your external software workload.
Find the object ID, app (client) ID, or identifier URI of the app, which you need in the following steps. You can find these values in theMicrosoft Entra admin center. Go to the list of registered applications and select your app registration. InOverview->Essentials, get theObject ID,Application (client) ID, orApplication ID URIvalue, which you need in the following steps.
Get thesubjectandissuerinformation for your external IdP and software workload, which you need in the following steps.
Configure a federated identity credential on an app
Run theaz ad app federated-credential createcommand to create a new federated identity credential on your app.
Theidparameter specifies the identifier URI, application ID, or object ID of the application. Theparametersparameter specifies the parameters, in JSON format, for creating the federated identity credential.
id
parameters
GitHub Actions example
Thenamespecifies the name of your federated identity credential.
Theissueridentifies the path to the GitHub OIDC provider:https://token.actions.githubusercontent.com/. This issuer becomes trusted by your Azure application.
https://token.actions.githubusercontent.com/
Thesubjectidentifies the GitHub organization, repo, and environment for your GitHub Actions workflow. When the GitHub Actions workflow requests Microsoft identity platform to exchange a GitHub token for an access token, the values in the federated identity credential are checked against the provided GitHub token. Before Azure grants an access token, the request must match the conditions defined here.
For Jobs tied to an environment:repo:< Organization/Repository >:environment:< Name >
repo:< Organization/Repository >:environment:< Name >
For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow:repo:< Organization/Repository >:ref:< ref path>. For example,repo:n-username/ node_express:ref:refs/heads/my-branchorrepo:n-username/ node_express:ref:refs/tags/my-tag.
repo:< Organization/Repository >:ref:< ref path>
repo:n-username/ node_express:ref:refs/heads/my-branch
repo:n-username/ node_express:ref:refs/tags/my-tag
For workflows triggered by a pull request event:repo:< Organization/Repository >:pull-request.
repo:< Organization/Repository >:pull-request
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "Testing",
    "issuer": "https://token.actions.githubusercontent.com",
    "subject": "repo:octo-org/octo-repo:environment:Production",
    "description": "Testing",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "Testing",
    "issuer": "https://token.actions.githubusercontent.com",
    "subject": "repo:octo-org/octo-repo:environment:Production",
    "description": "Testing",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
Kubernetes example
Theissueris your service account issuer URL (theOIDC issuer URLfor the managed cluster or theOIDC Issuer URLfor a self-managed cluster).
Thesubjectis the subject name in the tokens issued to the service account. Kubernetes uses the following format for subject names:system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>.
system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>
Thenameis the name of the federated credential, which can't be changed later.
Theaudienceslists the audiences that can appear in the external token. This field is mandatory. The recommended value isapi://AzureADTokenExchange.
api://AzureADTokenExchange
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "Kubernetes-federated-credential",
    "issuer": "https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/",
    "subject": "system:serviceaccount:erp8asle:pod-identity-sa",
    "description": "Kubernetes service account federated credential",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "Kubernetes-federated-credential",
    "issuer": "https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/",
    "subject": "system:serviceaccount:erp8asle:pod-identity-sa",
    "description": "Kubernetes service account federated credential",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
Other identity providers example
You can configure a federated identity credential on an app and create a trust relationship with other external identity providers. The following example uses a software workload running in Google Cloud as an example:
nameis the name of the federated credential, which can't be changed later.
name
id: the object ID, application (client) ID, or identifier URI of the app.
id
subject: must match thesubclaim in the token issued by the external identity provider. In this example using Google Cloud,subjectis the Unique ID of the service account you plan to use.
subject
sub
issuer: must match theissclaim in the token issued by the external identity provider. A URL that complies with the OIDC Discovery spec. Microsoft Entra ID uses this issuer URL to fetch the keys that are necessary to validate the token. For Google Cloud, theissuerishttps://accounts.google.com.
issuer
iss
https://accounts.google.com
audiences: lists the audiences that can appear in the external token. This field is mandatory. The recommended value is "api://AzureADTokenExchange".
audiences
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "GcpFederation",
    "issuer": "https://accounts.google.com",
    "subject": "112633961854638529490",
    "description": "Test GCP federation",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
az ad app federated-credential create --id 00001111-aaaa-2222-bbbb-3333cccc4444 --parameters credential.json
("credential.json" contains the following content)
{
    "name": "GcpFederation",
    "issuer": "https://accounts.google.com",
    "subject": "112633961854638529490",
    "description": "Test GCP federation",
    "audiences": [
        "api://AzureADTokenExchange"
    ]
}
List federated identity credentials on an app
Run theaz ad app federated-credential listcommand to list the federated identity credentials on your app.
Theidparameter specifies the identifier URI, application ID, or object ID of the application.
id
az ad app federated-credential list --id 00001111-aaaa-2222-bbbb-3333cccc4444
az ad app federated-credential list --id 00001111-aaaa-2222-bbbb-3333cccc4444
Get a federated identity credential on an app
Run theaz ad app federated-credential showcommand to get a federated identity credential on your app.
Theidparameter specifies the identifier URI, application ID, or object ID of the application.
id
Thefederated-credential-idspecifies the ID or name of the federated identity credential.
federated-credential-id
az ad app federated-credential show --id 00001111-aaaa-2222-bbbb-3333cccc4444 --federated-credential-id c79f8feb-a9db-4090-85f9-90d820caa0eb
az ad app federated-credential show --id 00001111-aaaa-2222-bbbb-3333cccc4444 --federated-credential-id c79f8feb-a9db-4090-85f9-90d820caa0eb
Delete a federated identity credential from an app
Run theaz ad app federated-credential deletecommand to remove a federated identity credential from your app.
Theidparameter specifies the identifier URI, application ID, or object ID of the application.
id
Thefederated-credential-idspecifies the ID or name of the federated identity credential.
federated-credential-id
az ad app federated-credential delete --id 00001111-aaaa-2222-bbbb-3333cccc4444 --federated-credential-id c79f8feb-a9db-4090-85f9-90d820caa0eb
az ad app federated-credential delete --id 00001111-aaaa-2222-bbbb-3333cccc4444 --federated-credential-id c79f8feb-a9db-4090-85f9-90d820caa0eb
Prerequisites
To run the example scripts, you have two options:UseAzure Cloud Shell, which you can open by using theTry Itbutton in the upper-right corner of code blocks.Run scripts locally with Azure PowerShell, as described in the next section.
UseAzure Cloud Shell, which you can open by using theTry Itbutton in the upper-right corner of code blocks.
Run scripts locally with Azure PowerShell, as described in the next section.
Create an app registrationin Microsoft Entra ID. Grant your app access to the Azure resources targeted by your external software workload.
Find the object ID of the app (not the application (client) ID), which you need in the following steps. You can find the object ID of the app in theMicrosoft Entra admin center. Go to the list of registered applications and select your app registration. InOverview->Essentials, find theObject ID.
Get thesubjectandissuerinformation for your external IdP and software workload, which you need in the following steps.
Configure Azure PowerShell locally
To use Azure PowerShell locally for this article instead of using Cloud Shell:
Installthe latest version of Azure PowerShellif you haven't already.
Installthe latest version of Azure PowerShellif you haven't already.
Sign in to Azure.Connect-AzAccount
Sign in to Azure.
Connect-AzAccount
Connect-AzAccount
Install thelatest version of PowerShellGet.Install-Module -Name PowerShellGet -AllowPrereleaseYou might need toExitout of the current PowerShell session after you run this command for the next step.
Install thelatest version of PowerShellGet.
Install-Module -Name PowerShellGet -AllowPrerelease
Install-Module -Name PowerShellGet -AllowPrerelease
You might need toExitout of the current PowerShell session after you run this command for the next step.
Exit
Install the prerelease version of theAz.Resourcesmodule to perform the federated identity credential operations in this article.Install-Module -Name Az.Resources -AllowPrerelease
Install the prerelease version of theAz.Resourcesmodule to perform the federated identity credential operations in this article.
Az.Resources
Install-Module -Name Az.Resources -AllowPrerelease
Install-Module -Name Az.Resources -AllowPrerelease
Configure a federated identity credential on an app
Run theNew-AzADAppFederatedCredentialcmdlet to create a new federated identity credential on an application.
GitHub Actions example
ApplicationObjectId: the object ID of the app (not the application (client) ID) you previously registered in Microsoft Entra ID.
Issueridentifies GitHub as the external token issuer.
Subjectidentifies the GitHub organization, repo, and environment for your GitHub Actions workflow. When the GitHub Actions workflow requests Microsoft identity platform to exchange a GitHub token for an access token, the values in the federated identity credential are checked against the provided GitHub token.For Jobs tied to an environment:repo:< Organization/Repository >:environment:< Name >For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow:repo:< Organization/Repository >:ref:< ref path>. For example,repo:n-username/ node_express:ref:refs/heads/my-branchorrepo:n-username/ node_express:ref:refs/tags/my-tag.For workflows triggered by a pull request event:repo:< Organization/Repository >:pull-request.
For Jobs tied to an environment:repo:< Organization/Repository >:environment:< Name >
repo:< Organization/Repository >:environment:< Name >
For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow:repo:< Organization/Repository >:ref:< ref path>. For example,repo:n-username/ node_express:ref:refs/heads/my-branchorrepo:n-username/ node_express:ref:refs/tags/my-tag.
repo:< Organization/Repository >:ref:< ref path>
repo:n-username/ node_express:ref:refs/heads/my-branch
repo:n-username/ node_express:ref:refs/tags/my-tag
For workflows triggered by a pull request event:repo:< Organization/Repository >:pull-request.
repo:< Organization/Repository >:pull-request
Nameis the name of the federated credential, which can't be changed later.
Audiencelists the audiences that can appear in the external token. This field is mandatory. The recommended value isapi://AzureADTokenExchange.
api://AzureADTokenExchange
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://token.actions.githubusercontent.com/' -Name 'GitHub-Actions-Test' -Subject 'repo:octo-org/octo-repo:environment:Production'
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://token.actions.githubusercontent.com/' -Name 'GitHub-Actions-Test' -Subject 'repo:octo-org/octo-repo:environment:Production'
Kubernetes example
ApplicationObjectId: the object ID of the app (not the application (client) ID) you previously registered in Microsoft Entra ID.
Issueris your service account issuer URL (theOIDC issuer URLfor the managed cluster or theOIDC Issuer URLfor a self-managed cluster).
Subjectis the subject name in the tokens issued to the service account. Kubernetes uses the following format for subject names:system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>.
system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>
Nameis the name of the federated credential, which can't be changed later.
Audiencelists the audiences that can appear in theaudclaim of the external token.
aud
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/' -Name 'Kubernetes-federated-credential' -Subject 'system:serviceaccount:erp8asle:pod-identity-sa'
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/' -Name 'Kubernetes-federated-credential' -Subject 'system:serviceaccount:erp8asle:pod-identity-sa'
Other identity providers example
Specify the following parameters (using a software workload running in Google Cloud as an example):
ObjectID: the object ID of the app (not the application (client) ID) you previously registered in Microsoft Entra ID.
Nameis the name of the federated credential, which can't be changed later.
Subject: must match thesubclaim in the token issued by the external identity provider. In this example using Google Cloud,subjectis the Unique ID of the service account you plan to use.
sub
Issuer: must match theissclaim in the token issued by the external identity provider. A URL that complies with the OIDC Discovery spec. Microsoft Entra ID uses this issuer URL to fetch the keys that are necessary to validate the token. For Google Cloud, theissuerishttps://accounts.google.com.
iss
https://accounts.google.com
Audiences: must match theaudclaim in the external token. For security reasons, you should pick a value that is unique for tokens meant for Microsoft Entra ID. The recommended value is "api://AzureADTokenExchange".
aud
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://accounts.google.com' -Name 'GcpFederation' -Subject '112633961854638529490'
New-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -Audience api://AzureADTokenExchange -Issuer 'https://accounts.google.com' -Name 'GcpFederation' -Subject '112633961854638529490'
List federated identity credentials on an app
Run theGet-AzADAppFederatedCredentialcmdlet to list the federated identity credentials for an application.
Get-AzADApplication -ObjectId $app | Get-AzADAppFederatedCredential
Get-AzADApplication -ObjectId $app | Get-AzADAppFederatedCredential
Get a federated identity credential on an app
Run theGet-AzADAppFederatedCredentialcmdlet to get the federated identity credential by ID from an application.
Get-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -FederatedCredentialId $credentialId
Get-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -FederatedCredentialId $credentialId
Delete a federated identity credential from an app
Run theRemove-AzADAppFederatedCredentialcmdlet to delete a federated identity credential from an application.
Remove-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -FederatedCredentialId $credentialId
Remove-AzADAppFederatedCredential -ApplicationObjectId $appObjectId -FederatedCredentialId $credentialId
Prerequisites
Create an app registrationin Microsoft Entra ID. Grant your app access to the Azure resources targeted by your external software workload.
Find the object ID of the app (not the application (client) ID), which you need in the following steps. You can find the object ID of the app in theMicrosoft Entra admin center. Go to the list of registered applications and select your app registration. InOverview->Essentials, find theObject ID.
Get thesubjectandissuerinformation for your external IdP and software workload, which you need in the following steps.
The Microsoft Graph endpoint (https://graph.microsoft.com) exposes REST APIs to create, update, deletefederatedIdentityCredentialson applications. LaunchAzure Cloud Shelland sign in to your tenant to run Microsoft Graph commands from AZ CLI.
https://graph.microsoft.com
Configure a federated identity credential on an app
GitHub Actions
Run the following method tocreate a new federated identity credentialon your app (specified by the object ID of the app). Theissueridentifies GitHub as the external token issuer.subjectidentifies the GitHub organization, repo, and environment for your GitHub Actions workflow. When the GitHub Actions workflow requests Microsoft identity platform to exchange a GitHub token for an access token, the values in the federated identity credential are checked against the provided GitHub token.
issuer
subject
az rest --method POST --uri 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials' --body '{"name":"Testing","issuer":"https://token.actions.githubusercontent.com","subject":"repo:octo-org/octo-repo:environment:Production","description":"Testing","audiences":["api://AzureADTokenExchange"]}'
az rest --method POST --uri 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials' --body '{"name":"Testing","issuer":"https://token.actions.githubusercontent.com","subject":"repo:octo-org/octo-repo:environment:Production","description":"Testing","audiences":["api://AzureADTokenExchange"]}'
And you get the response:
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Testing",
  "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
  "issuer": "https://token.actions.githubusercontent.com",
  "name": "Testing",
  "subject": "repo:octo-org/octo-repo:environment:Production"
}
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Testing",
  "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
  "issuer": "https://token.actions.githubusercontent.com",
  "name": "Testing",
  "subject": "repo:octo-org/octo-repo:environment:Production"
}
In the snippet, the parameters are as follows:
name: The name of your Azure application.
name
issuer: The path to the GitHub OIDC provider:https://token.actions.githubusercontent.com. This issuer becomes trusted by your Azure application.
issuer
https://token.actions.githubusercontent.com
subject: Before Azure grants an access token, the request must match the conditions defined here.For Jobs tied to an environment:repo:< Organization/Repository >:environment:< Name >For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow:repo:< Organization/Repository >:ref:< ref path>. For example,repo:n-username/ node_express:ref:refs/heads/my-branchorrepo:n-username/ node_express:ref:refs/tags/my-tag.For workflows triggered by a pull request event:repo:< Organization/Repository >:pull-request.
subject
For Jobs tied to an environment:repo:< Organization/Repository >:environment:< Name >
repo:< Organization/Repository >:environment:< Name >
For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow:repo:< Organization/Repository >:ref:< ref path>. For example,repo:n-username/ node_express:ref:refs/heads/my-branchorrepo:n-username/ node_express:ref:refs/tags/my-tag.
repo:< Organization/Repository >:ref:< ref path>
repo:n-username/ node_express:ref:refs/heads/my-branch
repo:n-username/ node_express:ref:refs/tags/my-tag
For workflows triggered by a pull request event:repo:< Organization/Repository >:pull-request.
repo:< Organization/Repository >:pull-request
audienceslists the audiences that can appear in the external token. This field is mandatory. The recommended value is "api://AzureADTokenExchange".
audiences
Kubernetes example
Run the following method to configure a federated identity credential on an app and create a trust relationship with a Kubernetes service account. Specify the following parameters:
issueris your service account issuer URL (theOIDC issuer URLfor the managed cluster or theOIDC Issuer URLfor a self-managed cluster).
issuer
subjectis the subject name in the tokens issued to the service account. Kubernetes uses the following format for subject names:system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>.
subject
system:serviceaccount:<SERVICE_ACCOUNT_NAMESPACE>:<SERVICE_ACCOUNT_NAME>
nameis the name of the federated credential, which can't be changed later.
name
audienceslists the audiences that can appear in the external token. This field is mandatory. The recommended value is "api://AzureADTokenExchange".
audiences
az rest --method POST --uri 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials' --body '{"name":"Kubernetes-federated-credential","issuer":"https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/","subject":"system:serviceaccount:erp8asle:pod-identity-sa","description":"Kubernetes service account federated credential","audiences":["api://AzureADTokenExchange"]}'
az rest --method POST --uri 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials' --body '{"name":"Kubernetes-federated-credential","issuer":"https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/","subject":"system:serviceaccount:erp8asle:pod-identity-sa","description":"Kubernetes service account federated credential","audiences":["api://AzureADTokenExchange"]}'
And you get the response:
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Kubernetes service account federated credential",
  "id": "51ecf9c3-35fc-4519-a28a-8c27c6178bca",
  "issuer": "https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/",
  "name": "Kubernetes-federated-credential",
  "subject": "system:serviceaccount:erp8asle:pod-identity-sa"
}
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Kubernetes service account federated credential",
  "id": "51ecf9c3-35fc-4519-a28a-8c27c6178bca",
  "issuer": "https://aksoicwesteurope.blob.core.windows.net/aaaabbbb-0000-cccc-1111-dddd2222eeee/",
  "name": "Kubernetes-federated-credential",
  "subject": "system:serviceaccount:erp8asle:pod-identity-sa"
}
Other identity providers example
Run the following method to configure a federated identity credential on an app and create a trust relationship with an external identity provider. Specify the following parameters (using a software workload running in Google Cloud as an example):
nameis the name of the federated credential, which can't be changed later.
ObjectID: the object ID of the app (not the application (client) ID) you previously registered in Microsoft Entra ID.
subject: must match thesubclaim in the token issued by the external identity provider. In this example using Google Cloud,subjectis the Unique ID of the service account you plan to use.
sub
issuer: must match theissclaim in the token issued by the external identity provider. A URL that complies with the OIDC Discovery spec. Microsoft Entra ID uses this issuer URL to fetch the keys that are necessary to validate the token. For Google Cloud, theissueris "https://accounts.google.com".
iss
audienceslists the audiences that can appear in the external token. This field is mandatory. The recommended value is "api://AzureADTokenExchange".
az rest --method POST --uri 'https://graph.microsoft.com/applications/<ObjectID>/federatedIdentityCredentials' --body '{"name":"GcpFederation","issuer":"https://accounts.google.com","subject":"112633961854638529490","description":"Testing","audiences":["api://AzureADTokenExchange"]}'
az rest --method POST --uri 'https://graph.microsoft.com/applications/<ObjectID>/federatedIdentityCredentials' --body '{"name":"GcpFederation","issuer":"https://accounts.google.com","subject":"112633961854638529490","description":"Testing","audiences":["api://AzureADTokenExchange"]}'
And you get the response:
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Testing",
  "id": "51ecf9c3-35fc-4519-a28a-8c27c6178bca",
  "issuer": "https://accounts.google.com"",
  "name": "GcpFederation",
  "subject": "112633961854638529490"
}
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
  "audiences": [
    "api://AzureADTokenExchange"
  ],
  "description": "Testing",
  "id": "51ecf9c3-35fc-4519-a28a-8c27c6178bca",
  "issuer": "https://accounts.google.com"",
  "name": "GcpFederation",
  "subject": "112633961854638529490"
}
List federated identity credentials on an app
Run the following method tolist the federated identity credentialsfor an app (specified by the object ID of the app):
az rest -m GET -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials'
az rest -m GET -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials'
And you get a response similar to:
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials",
  "value": [
    {
      "audiences": [
        "api://AzureADTokenExchange"
      ],
      "description": "Testing",
      "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
      "issuer": "https://token.actions.githubusercontent.com/",
      "name": "Testing",
      "subject": "repo:octo-org/octo-repo:environment:Production"
    }
  ]
}
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials",
  "value": [
    {
      "audiences": [
        "api://AzureADTokenExchange"
      ],
      "description": "Testing",
      "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
      "issuer": "https://token.actions.githubusercontent.com/",
      "name": "Testing",
      "subject": "repo:octo-org/octo-repo:environment:Production"
    }
  ]
}
Get a federated identity credential on an app
Run the following method toget a federated identity credentialfor an app (specified by the object ID of the app):
az rest -m GET -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444//federatedIdentityCredentials/00aa00aa-bb11-cc22-dd33-44ee44ee44ee'
az rest -m GET -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444//federatedIdentityCredentials/00aa00aa-bb11-cc22-dd33-44ee44ee44ee'
And you get a response similar to:
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials",
  "value": {
      "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
      "@odata.id": "https://graph.microsoft.com/v2/3d1e2be9-a10a-4a0c-8380-7ce190f98ed9/directoryObjects/$/Microsoft.DirectoryServices.Application('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials('00001111-aaaa-2222-bbbb-3333cccc4444')/00001111-aaaa-2222-bbbb-3333cccc4444",
    "audiences": [
        "api://AzureADTokenExchange"
      ],
      "description": "Testing",
      "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
      "issuer": "https://token.actions.githubusercontent.com/",
      "name": "Testing",
      "subject": "repo:octo-org/octo-repo:environment:Production"
    }
}
{
  "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials",
  "value": {
      "@odata.context": "https://graph.microsoft.com/$metadata#applications('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials/$entity",
      "@odata.id": "https://graph.microsoft.com/v2/3d1e2be9-a10a-4a0c-8380-7ce190f98ed9/directoryObjects/$/Microsoft.DirectoryServices.Application('00001111-aaaa-2222-bbbb-3333cccc4444')/federatedIdentityCredentials('00001111-aaaa-2222-bbbb-3333cccc4444')/00001111-aaaa-2222-bbbb-3333cccc4444",
    "audiences": [
        "api://AzureADTokenExchange"
      ],
      "description": "Testing",
      "id": "00aa00aa-bb11-cc22-dd33-44ee44ee44ee",
      "issuer": "https://token.actions.githubusercontent.com/",
      "name": "Testing",
      "subject": "repo:octo-org/octo-repo:environment:Production"
    }
}
Delete a federated identity credential from an app
Run the following method todelete a federated identity credentialfrom an app (specified by the object ID of the app):
az rest -m DELETE  -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials/00aa00aa-bb11-cc22-dd33-44ee44ee44ee'
az rest -m DELETE  -u 'https://graph.microsoft.com/applications/00001111-aaaa-2222-bbbb-3333cccc4444/federatedIdentityCredentials/00aa00aa-bb11-cc22-dd33-44ee44ee44ee'
See also
To learn how to use workload identity federation for Kubernetes, seeMicrosoft Entra Workload ID for Kubernetesopen source project.
To learn how to use workload identity federation for GitHub Actions, seeConfigure a GitHub Actions workflow to get an access token.
Read theGitHub Actions documentationto learn more about configuring your GitHub Actions workflow to get an access token from Microsoft identity provider and access Azure resources.
For more information, read about how Microsoft Entra ID uses theOAuth 2.0 client credentials grantand a client assertion issued by another IdP to get a token.
For information about the required format of JWTs created by external identity providers, read about theassertion format.
Feedback
Was this page helpful?
Additional resources