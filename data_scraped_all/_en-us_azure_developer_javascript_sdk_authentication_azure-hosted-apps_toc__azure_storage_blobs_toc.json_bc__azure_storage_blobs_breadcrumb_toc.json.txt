Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to authenticate Azure-hosted JavaScript apps to Azure resources using the Azure Identity library
Article
2025-01-30
2 contributors
In this article
When an app is hosted in Azure (using a service like Azure App Service, Azure Functions, or Azure Container Apps), you can use amanaged identityto securely authenticate your app to Azure resources.
A managed identity provides an identity for your app, allowing it to connect to other Azure resources without needing to use a secret (such as a connection string or key). Internally, Azure recognizes the identity of your app and knows which resources the app is authorized to access. Azure uses this information to automatically obtain Microsoft Entra tokens for the app, enabling it to connect to other Azure resources without requiring you to manage (create or rotate) authentication secrets.
Managed identity types
There are two types of managed identities:
System-assigned managed identities- single Azure resource
User-assigned managed identities- multiple Azure resources
This article covers the steps to enable and use a system-assigned managed identity for an app. If you need to use a user-assigned managed identity, see the articleManage user-assigned managed identitiesto see how to create a user-assigned managed identity.
System-assigned managed identities for single resource
System-assigned managed identities are provided by and tied directly to an Azure resource. When you enable managed identity on an Azure resource, you get a system-assigned managed identity for that resource. The managed identity is tied to the lifecycle of the Azure resource. When the resource is deleted, Azure automatically deletes the identity for you. Since all you have to do is enable managed identity for the Azure resource hosting your code, this identity type is the easiest type of managed identity to use.
User-assigned managed identities for multiple resources
A user-assigned managed identity is a standalone Azure resource. This identity type is most frequently used when your solution has multiple workloads that run on multiple Azure resources that all need to share the same identity and same permissions. For example, suppose your solution includes applications that run on multiple App Service and virtual machine instances. The applications all need access to the same set of Azure resources. Creating and using a user-assigned managed identity across those resources is the best design choice.
1 - Enable system-assigned managed identity in hosted app
The first step is to enable managed identity on the Azure resource hosting your app. For example, if you're hosting an Express.js application using Azure App Service, you need to enable managed identity for that App Service web app. If you're using a VM to host your app, you enable your VM to use managed identity.
You can enable managed identity to be used for an Azure resource using either the Azure portal or the Azure CLI.
Azure portal
Azure CLI
Change theStatusslider toOn.
SelectSave.
Azure CLI commands can be run in theAzure Cloud Shellor on a workstation with theAzure CLI installed.
The Azure CLI commands used to enable managed identity for an Azure resource are of the formaz <command-group> identity --resource-group <resource-group-name> --name <resource-name>. Specific commands for popular Azure services are provided here.
az <command-group> identity --resource-group <resource-group-name> --name <resource-name>
Azure App Service
Azure Virtual Machines
az webapp identity assign --resource-group <resource-group-name> --name <web-app-name>
az webapp identity assign --resource-group <resource-group-name> --name <web-app-name>
az vm identity assign --resource-group <resource-group-name> --name <virtual-machine-name>
az vm identity assign --resource-group <resource-group-name> --name <virtual-machine-name>
The output looks like the following.
{
  "principalId": "<REPLACE_WITH_YOUR_PRINCIPAL_ID>",
  "tenantId": "<REPLACE_WITH_YOUR_TENANT_ID>",
  "type": "SystemAssigned",
  "userAssignedIdentities": null
}
{
  "principalId": "<REPLACE_WITH_YOUR_PRINCIPAL_ID>",
  "tenantId": "<REPLACE_WITH_YOUR_TENANT_ID>",
  "type": "SystemAssigned",
  "userAssignedIdentities": null
}
TheprincipalIdvalue is the unique ID of the managed identity. Keep a copy of this output as you'll need these values in the next step.
principalId
2 - Assign roles to the managed identity
Next, you need to determine what roles (permissions) your app needs and assign the managed identity to those roles in Azure. A managed identity can be assigned  roles at a resource, resource group, or subscription scope. This example shows how to assign roles at the resource group scope since most applications group all their Azure resources into a single resource group.
Azure portal
Azure CLI
Select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Use the search box to filter the list to a more manageable size. This example shows how to filter for Storage Blob roles.
Select the role that you want to assign.SelectNextto go to the next screen.
SelectManaged identityunderAssign access to.
Select+ Select membersunderMembers
TheManaged identitydropdown andSelecttext box can be used to filter the list of managed identities in your subscription.  In this example by selectingApp Service, only managed identities associated with an App Service are displayed.
Select the managed identity for the Azure resource hosting your application.
A managed identity is assigned a role in Azure using the [az role assignment create] command.
az role assignment create --assignee "{managedIdentityId}" \
    --role "{roleName}" \
    --resource-group "{resourceGroupName}"
az role assignment create --assignee "{managedIdentityId}" \
    --role "{roleName}" \
    --resource-group "{resourceGroupName}"
To get the role names that a service principal can be assigned to, use theaz role definition listcommand.
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
For example, to allow the managed identity to read, write, and delete access to Azure Storage blob containers and data to all storage accounts in themsdocs-sdk-auth-exampleresource group, you would assign the application service principal to theStorage Blob Data Contributorrole using the following command.
az role assignment create --assignee aaaaaaaa-bbbb-cccc-7777-888888888888 \
    --role "Storage Blob Data Contributor" \
    --resource-group "msdocs-sdk-auth-example"
az role assignment create --assignee aaaaaaaa-bbbb-cccc-7777-888888888888 \
    --role "Storage Blob Data Contributor" \
    --resource-group "msdocs-sdk-auth-example"
For information on assigning permissions at the resource or subscription level using the Azure CLI, see the articleAssign Azure roles using the Azure CLI.
3 - Implement DefaultAzureCredential in your application
DefaultAzureCredentialautomatically detects that a managed identity is being used and uses the managed identity to authenticate to other Azure resources. As discussed in theAzure Identity library for JavaScript authentication overviewarticle,DefaultAzureCredentialsupports multiple authentication methods and determines the authentication method being used at runtime. In this way, your app can use different authentication methods in different environments without implementing environment-specific code.
DefaultAzureCredential
First, add the@azure/identitypackage to your application.
npm install @azure/identity
npm install @azure/identity
Next, for any JavaScript code that creates an Azure SDK client object in your app, you want to:
Import theDefaultAzureCredentialclass from the@azure/identitymodule.
DefaultAzureCredential
@azure/identity
Create aDefaultAzureCredentialobject.
DefaultAzureCredential
Pass theDefaultAzureCredentialobject to the Azure SDK client object constructor.
DefaultAzureCredential
An example of these steps is shown in the following code segment.
// connect-with-default-azure-credential.js
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config'

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
// connect-with-default-azure-credential.js
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config'

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
Feedback
Was this page helpful?
Additional resources