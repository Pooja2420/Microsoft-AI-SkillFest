Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure Bot Framework bots for US Government customers
Article
2024-10-09
8 contributors
In this article
This article is for US government customers who are deploying Bot Framework and Azure AI Bot Service bots to the Microsoft Azure Government cloud.
Tip
Bots in Azure Government that connect to Microsoft Teams must use the Microsoft Office 365 Government Community Cloud (GCC) High environment.
This article describes how to configure a bot to work with the Azure Government cloud and with the Office 365 GCC High environment.
Prerequisites
An account in the Azure Government cloud.
To extend Teams, an Azure Bot resource created in the Office 365 GCC High environment.
The C# or JavaScript bot project you want to configure.
Bot Framework SDK version 4.14 or later.
Use the cloud adapter
Make sure that your bot uses thecloud adapter, or an adapter that derives from the cloud adapter.
The cloud adapter lets you specify settings specific to the Azure Government cloud and the Office 365 GCC High environment.
C#
JavaScript
TheConfigurationBotFrameworkAuthenticationclass reads authentication settings from your bot configuration file.
The cloud adapter, when it's created, will use these authentication settings.
ConfigurationBotFrameworkAuthentication
Make sure that theConfigureServicesmethod in yourStartup.csfile contains this line.
ConfigureServices
services.AddSingleton<BotFrameworkAuthentication, ConfigurationBotFrameworkAuthentication>();
services.AddSingleton<BotFrameworkAuthentication, ConfigurationBotFrameworkAuthentication>();
TheConfigurationBotFrameworkAuthenticationconstructor reads authentication settings from your bot configuration file.
ConfigurationBotFrameworkAuthentication
In yourindex.jsfile, the code to create your adapter should look like this:
const botFrameworkAuthentication = new ConfigurationBotFrameworkAuthentication(process.env);

const adapter = new CloudAdapter(botFrameworkAuthentication);
const botFrameworkAuthentication = new ConfigurationBotFrameworkAuthentication(process.env);

const adapter = new CloudAdapter(botFrameworkAuthentication);
Configure for Azure Government
The Azure Government cloud useshttps://botframework.azure.usfor the channel service endpoint.
For most channels, setting the channel service endpoint is sufficient.
https://botframework.azure.us
See the next section for additional settings required to support Microsoft Teams in the Office 365 GCC High environment.
C#
JavaScript
Add the following setting to yourappsettings.jsonfile.
"ChannelService": "https://botframework.azure.us",
"ChannelService": "https://botframework.azure.us",
Add the following setting to your.envfile.
ChannelService=https://botframework.azure.us
ChannelService=https://botframework.azure.us
Configure for Office 365 GCC High
For Office 365 services, additional settings are required to handle user authentication correctly.
Currently, only the Microsoft Teams channel is available in the Office 365 GCC High environment.
C#
JavaScript
Add the following settings to yourappsettings.jsonfile.
"ChannelService": "https://botframework.azure.us", 
"OAuthUrl": "https://tokengcch.botframework.azure.us/", 
"ToChannelFromBotLoginUrl": "https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us",
"ToChannelFromBotOAuthScope": "https://api.botframework.us", 
"ToBotFromChannelTokenIssuer": "https://api.botframework.us", 
"ToBotFromChannelOpenIdMetadataUrl": "https://login.botframework.azure.us/v1/.well-known/openidconfiguration",
"ToBotFromEmulatorOpenIdMetadataUrl": "https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration",
"ValidateAuthority": true,
"ChannelService": "https://botframework.azure.us", 
"OAuthUrl": "https://tokengcch.botframework.azure.us/", 
"ToChannelFromBotLoginUrl": "https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us",
"ToChannelFromBotOAuthScope": "https://api.botframework.us", 
"ToBotFromChannelTokenIssuer": "https://api.botframework.us", 
"ToBotFromChannelOpenIdMetadataUrl": "https://login.botframework.azure.us/v1/.well-known/openidconfiguration",
"ToBotFromEmulatorOpenIdMetadataUrl": "https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration",
"ValidateAuthority": true,
Add the following settings to your.envfile.
ChannelService=https://botframework.azure.us
OAuthUrl=https://tokengcch.botframework.azure.us/
ToChannelFromBotLoginUrl=https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us
ToChannelFromBotOAuthScope=https://api.botframework.us
ToBotFromChannelTokenIssuer=https://api.botframework.us
ToBotFromChannelOpenIdMetadataUrl=https://login.botframework.azure.us/v1/.well-known/openidconfiguration
ToBotFromEmulatorOpenIdMetadataUrl=https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration
ValidateAuthority=true
ChannelService=https://botframework.azure.us
OAuthUrl=https://tokengcch.botframework.azure.us/
ToChannelFromBotLoginUrl=https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us
ToChannelFromBotOAuthScope=https://api.botframework.us
ToBotFromChannelTokenIssuer=https://api.botframework.us
ToBotFromChannelOpenIdMetadataUrl=https://login.botframework.azure.us/v1/.well-known/openidconfiguration
ToBotFromEmulatorOpenIdMetadataUrl=https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration
ValidateAuthority=true
Configure for DoD environment
There is also aDoD environmentwhich shares most (but not all) settings with the Office 365 GCC High environment. For the DoD environment use the following settings.
C#
JavaScript
Add the following settings to yourappsettings.jsonfile.
"ChannelService": "https://botframework.azure.us", 
"OAuthUrl": "https://apiDoD.botframework.azure.us", 
"ToChannelFromBotLoginUrl": "https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us",
"ToChannelFromBotOAuthScope": "https://api.botframework.us", 
"ToBotFromChannelTokenIssuer": "https://api.botframework.us", 
"ToBotFromChannelOpenIdMetadataUrl": "https://login.botframework.azure.us/v1/.well-known/openidconfiguration",
"ToBotFromEmulatorOpenIdMetadataUrl": "https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration",
"ValidateAuthority": true,
"ChannelService": "https://botframework.azure.us", 
"OAuthUrl": "https://apiDoD.botframework.azure.us", 
"ToChannelFromBotLoginUrl": "https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us",
"ToChannelFromBotOAuthScope": "https://api.botframework.us", 
"ToBotFromChannelTokenIssuer": "https://api.botframework.us", 
"ToBotFromChannelOpenIdMetadataUrl": "https://login.botframework.azure.us/v1/.well-known/openidconfiguration",
"ToBotFromEmulatorOpenIdMetadataUrl": "https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration",
"ValidateAuthority": true,
Add the following settings to your.envfile.
ChannelService=https://botframework.azure.us
OAuthUrl=https://apiDoD.botframework.azure.us
ToChannelFromBotLoginUrl=https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us
ToChannelFromBotOAuthScope=https://api.botframework.us
ToBotFromChannelTokenIssuer=https://api.botframework.us
ToBotFromChannelOpenIdMetadataUrl=https://login.botframework.azure.us/v1/.well-known/openidconfiguration
ToBotFromEmulatorOpenIdMetadataUrl=https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration
ValidateAuthority=true
ChannelService=https://botframework.azure.us
OAuthUrl=https://apiDoD.botframework.azure.us
ToChannelFromBotLoginUrl=https://login.microsoftonline.us/MicrosoftServices.onmicrosoft.us
ToChannelFromBotOAuthScope=https://api.botframework.us
ToBotFromChannelTokenIssuer=https://api.botframework.us
ToBotFromChannelOpenIdMetadataUrl=https://login.botframework.azure.us/v1/.well-known/openidconfiguration
ToBotFromEmulatorOpenIdMetadataUrl=https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0/.well-known/openid-configuration
ValidateAuthority=true
Add user authentication to your bot
Your bot can use various identity providers to access resources on behalf of a user, such as Microsoft Entra ID and many other OAuth providers.
The Office 365 GCC High environment uses a redirect URL that is different from the ones used for other environments.
When configuring your bot for authentication within the Office 365 GCC High environment, usehttps://tokengcch.botframework.azure.us/.auth/web/redirectas the OAuth redirect URL and follow the steps in how toadd authentication to your bot.
https://tokengcch.botframework.azure.us/.auth/web/redirect
Additional information
For more information about Microsoft Azure Government and Office 365 Government High, see:
What is Azure Government?
Office 365 Government High and DoD
Teams for Government
Next steps
With these steps your bot should be configured to work successfully in the Azure Government cloud and the Office 365 GCC High environment.
Other useful references regarding Bot Service in Azure Government.
Tutorial: Deploy a basic bot using Azure AI Bot Service
Add authentication to a bot in Bot Framework SDK
Connect a bot to Web Chat in the Bot Framework SDK
Authenticate requests with the Bot Connector API
Compliance in the Azure AI Bot Service
Azure Government Documentation
Additional resources