Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to integrate Azure API Management with Azure Application Insights
Article
2024-09-06
19 contributors
In this article
APPLIES TO: All API Management tiers
You can easily integrate Azure Application Insights with Azure API Management. Azure Application Insights is an extensible service for web developers building and managing apps on multiple platforms. In this guide, you will:
Walk through Application Insights integration into API Management.
Learn strategies for reducing performance impact on your API Management service instance.
Note
In an API Managementworkspace, a workspace owner can independently integrate Application Insights and enable Application Insights logging for the workspace's APIs. The general guidance to integrate a workspace with Application Insights is similar to the guidance for an API Management instance; however, configuration is scoped to the workspace only. Currently, you must integrate Application Insights in a workspace by configuring a connection string (recommended) or an instrumentation key.
Warning
When using ourself-hosted gateway, we do not guarantee all telemetry will be pushed to Azure Application Insights given it relies onApplication Insights' in-memory buffering.
Prerequisites
You need an Azure API Management instance.Create onefirst.
You need an Azure API Management instance.Create onefirst.
To use Application Insights,create an instance of the Application Insights service. To create an instance using the Azure portal, seeWorkspace-based Application Insights resources.NoteThe Application Insights resourcecan bein a different subscription or even a different tenant than the API Management resource.
To use Application Insights,create an instance of the Application Insights service. To create an instance using the Azure portal, seeWorkspace-based Application Insights resources.
Note
The Application Insights resourcecan bein a different subscription or even a different tenant than the API Management resource.
If you plan to configure managed identity credentials to use with Application Insights, complete the following steps:Enable a system-assigned or user-assignedmanaged identity for API Management.If you enable a user-assigned managed identity, take note of the identity'sClient ID.Assign the identity theMonitoring Metrics Publisherrole, scoped to the Application Insights resource. To assign the role, use theAzure portalor other Azure tools.
If you plan to configure managed identity credentials to use with Application Insights, complete the following steps:
Enable a system-assigned or user-assignedmanaged identity for API Management.If you enable a user-assigned managed identity, take note of the identity'sClient ID.
Enable a system-assigned or user-assignedmanaged identity for API Management.
If you enable a user-assigned managed identity, take note of the identity'sClient ID.
Assign the identity theMonitoring Metrics Publisherrole, scoped to the Application Insights resource. To assign the role, use theAzure portalor other Azure tools.
Assign the identity theMonitoring Metrics Publisherrole, scoped to the Application Insights resource. To assign the role, use theAzure portalor other Azure tools.
Scenario overview
The following are high level steps for this scenario.
First, create a connection between Application Insights and API ManagementYou can create a connection between Application Insights and your API Management using the Azure portal, the REST API, or related Azure tools. API Management configures aloggerresource for the connection.ImportantCurrently, in the portal, API Management only supports connections to Application Insights using an Application Insights instrumentation key. For enhanced security, we recommend using an Application Insights connection string with an API Management managed identity. To configure connection string with managed identity credentials, use theREST APIor related tools as shown in a later section of this article.Learn moreabout Application Insights connection strings.NoteIf your Application Insights resource is in a different tenant, then you must create the logger using theREST APIor related tools as shown in a later section of this article.
First, create a connection between Application Insights and API Management
You can create a connection between Application Insights and your API Management using the Azure portal, the REST API, or related Azure tools. API Management configures aloggerresource for the connection.
Important
Currently, in the portal, API Management only supports connections to Application Insights using an Application Insights instrumentation key. For enhanced security, we recommend using an Application Insights connection string with an API Management managed identity. To configure connection string with managed identity credentials, use theREST APIor related tools as shown in a later section of this article.Learn moreabout Application Insights connection strings.
Note
If your Application Insights resource is in a different tenant, then you must create the logger using theREST APIor related tools as shown in a later section of this article.
Second, enable Application Insights logging for your API or APIs.In this article, you enable Application Insights logging for your API using the Azure portal. API Management configures adiagnosticresource for the API.
Second, enable Application Insights logging for your API or APIs.
In this article, you enable Application Insights logging for your API using the Azure portal. API Management configures adiagnosticresource for the API.
Create a connection using the Azure portal
Follow these steps to use the Azure portal to create a connection between Application Insights and API Management.
Note
Where possible, Microsoft recommends using connection string with managed identity credentials for enhanced security. To configure these credentials, use theREST APIor related tools as shown in a later section of this article.
Navigate to yourAzure API Management service instancein theAzure portal.
Navigate to yourAzure API Management service instancein theAzure portal.
SelectApplication Insightsfrom the menu on the left.
SelectApplication Insightsfrom the menu on the left.
Select+ Add.
Select+ Add.
Select theApplication Insightsinstance you created earlier and provide a short description.
Select theApplication Insightsinstance you created earlier and provide a short description.
To enableavailability monitoringof your API Management instance in Application Insights, select theAdd availability monitorcheckbox.This setting regularly validates whether the API Management gateway endpoint is responding.Results appear in theAvailabilitypane of the Application Insights instance.
To enableavailability monitoringof your API Management instance in Application Insights, select theAdd availability monitorcheckbox.
This setting regularly validates whether the API Management gateway endpoint is responding.
Results appear in theAvailabilitypane of the Application Insights instance.
SelectCreate.
SelectCreate.
Check that the new Application Insights logger now appears in the list.
Check that the new Application Insights logger now appears in the list.

Note
Behind the scenes, a logger entity is created in your API Management instance, containing the instrumentation key of the Application Insights instance.
Tip
If you need to update the instrumentation key configured in the Application Insights logger, select the logger's row in the list (not the name of the logger). Enter the instrumentation key, and selectSave.
Create a connection using the REST API, Bicep, or ARM template
Follow these steps to use the REST API, Bicep, or ARM template to create an Application Insights logger for your API Management instance. You can configure a logger that uses connection string with managed identity credentials (recommended), or a logger that uses only a connection string.
Logger with connection string with managed identity credentials (recommended)
See theprerequisitesfor using an API Management managed identity.
The Application Insights connection string appears in theOverviewsection of your Application Insights resource.
REST API
Bicep
ARM
Use the API ManagementLogger - Create or UpdateREST API with the following request body.
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with system-assigned managed identity",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
         "identityClientId":"SystemAssigned"
    }
  }
}
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with system-assigned managed identity",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
         "identityClientId":"SystemAssigned"
    }
  }
}
Include a snippet similar to the following in your Bicep template.
resource aiLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with system-assigned managed identity'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
      identityClientId: 'systemAssigned'
    }
  }
}
resource aiLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with system-assigned managed identity'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
      identityClientId: 'systemAssigned'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with system-assigned managed identity",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
      "identityClientId": "SystemAssigned"
    }
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with system-assigned managed identity",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
      "identityClientId": "SystemAssigned"
    }
  }
}
REST API
Bicep
ARM
Use the API ManagementLogger - Create or UpdateREST API with the following request body.
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with user-assigned managed identity",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
         "identityClientId":"<ClientID>"
    }
  }
}
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with user-assigned managed identity",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
         "identityClientId":"<ClientID>"
    }
  }
}
Include a snippet similar the following in your Bicep template.
resource aiLoggerWithUserAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with user-assigned managed identity'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
      identityClientId: '<ClientID>'
    }
  }
}
resource aiLoggerWithUserAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with user-assigned managed identity'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
      identityClientId: '<ClientID>'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with user-assigned managed identity",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
      "identityClientId": "<ClientID>"
    }
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with user-assigned managed identity",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...",
      "identityClientId": "<ClientID>"
    }
  }
}
Logger with connection string credentials only
The Application Insights connection string appears in theOverviewsection of your Application Insights resource.
REST API
Bicep
ARM
Use the API ManagementLogger - Create or UpdateREST API with the following request body.
If you are configuring the logger for a workspace, use theWorkspace Logger - Create or UpdateREST API.
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with connection string",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;..."    
    }
  }
}
{
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with connection string",
    "credentials": {
         "connectionString":"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;..."    
    }
  }
}
Include a snippet similar to the following in your Bicep template.
If you are configuring the logger for a workspace, create aMicrosoft.ApiManagement/service.workspace/loggers@2023-09-01-previewresource instead.
Microsoft.ApiManagement/service.workspace/loggers@2023-09-01-preview
resource aiLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with connection string'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
    }
  }
}
resource aiLoggerWithSystemAssignedIdentity 'Microsoft.ApiManagement/service/loggers@2022-08-01' = {
  name: 'ContosoLogger1'
  parent: '<APIManagementInstanceName>'
  properties: {
    loggerType: 'applicationInsights'
    description: 'Application Insights logger with connection string'
    credentials: {
      connectionString: 'InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;...'
    }
  }
}
Include a JSON snippet similar to the following in your Azure Resource Manager template.
If you are configuring the logger for a workspace, create aMicrosoft.ApiManagement/service.workspace/loggersresource and setapiVersionto2023-09-01-previewinstead.
Microsoft.ApiManagement/service.workspace/loggers
apiVersion
2023-09-01-preview
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with connection string",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;..."
    },
  }
}
{
  "type": "Microsoft.ApiManagement/service/loggers",
  "apiVersion": "2022-08-01",
  "name": "ContosoLogger1",
  "properties": {
    "loggerType": "applicationInsights",
    "description": "Application Insights logger with connection string",
    "resourceId": "<ApplicationInsightsResourceID>",
    "credentials": {
      "connectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://xxxx.applicationinsights.azure.com/;..."
    },
  }
}
Enable Application Insights logging for your API
Use the following steps to enable Application Insights logging for an API. You can also enable Application Insights logging for all APIs.
Navigate to yourAzure API Management service instancein theAzure portal.
Navigate to yourAzure API Management service instancein theAzure portal.
SelectAPIs>APIsfrom the menu on the left.
SelectAPIs>APIsfrom the menu on the left.
Select an API, such asSwagger Petstore. If configured, select a version.TipTo enable logging for all APIs, selectAll APIs.
Select an API, such asSwagger Petstore. If configured, select a version.
Tip
To enable logging for all APIs, selectAll APIs.
Go to theSettingstab from the top bar.
Go to theSettingstab from the top bar.
Scroll down to theDiagnostics Logssection.
Scroll down to theDiagnostics Logssection.
Check theEnablebox.
Check theEnablebox.
Select your attached logger in theDestinationdropdown.
Select your attached logger in theDestinationdropdown.
Input100asSampling (%)and select theAlways log errorscheckbox.
Input100asSampling (%)and select theAlways log errorscheckbox.
Leave the rest of the settings as is. For details about the settings, seeDiagnostic logs settings reference.WarningOverriding the defaultNumber of payload bytes to logvalue0may significantly decrease the performance of your APIs.
Leave the rest of the settings as is. For details about the settings, seeDiagnostic logs settings reference.
Warning
Overriding the defaultNumber of payload bytes to logvalue0may significantly decrease the performance of your APIs.
SelectSave.
SelectSave.
Behind the scenes, aDiagnosticentity namedapplicationinsightsis created at the API level.
Behind the scenes, aDiagnosticentity namedapplicationinsightsis created at the API level.
applicationinsights
Note
Requests are successful once API Management sends the entire response to the client.
Loggers for a single API or all APIs
You can specify loggers on different levels:
Single API logger
A logger for all APIs
Specifyingboth:
By default, the single API logger (more granular level) overrides the one for all APIs.
If the loggers configured at the two levels are different, and you need both loggers to receive telemetry (multiplexing), please contact Microsoft Support. Please note that multiplexing is not supported if you're using the same logger (Application Insights destination) at the "All APIs" level and the single API level. For multiplexing to work correctly, you must configure different loggers at the "All APIs" and individual API level and request assistance from Microsoft support to enable multiplexing for your service.
What data is added to Application Insights
Application Insights receives:
frontend request
frontend response
backend request
backend response
Failed because of a closed client connection
Triggered anon-errorsection of the API policies
Has a response HTTP status code matching 4xx or 5xx
severity
trace
verbosity
Note
SeeApplication Insights limitsfor information about the maximum size and number of metrics and events per Application Insights instance.
Emit custom metrics
You can emitcustom metricsto Application Insights from your API Management instance. API Management emits custom metrics using policies such asemit-metricandazure-openai-emit-token-metric. The following section uses theemit-metricpolicy as an example.
emit-metric
Note
Custom metrics are apreview featureof Azure Monitor and subject tolimitations.
To emit custom metrics, perform the following configuration steps.
EnableCustom metrics (Preview)with custom dimensions in your Application Insights instance.Navigate to your Application Insights instance in the portal.In the left menu, selectUsage and estimated costs.SelectCustom metrics (Preview)>With dimensions.SelectOK.
EnableCustom metrics (Preview)with custom dimensions in your Application Insights instance.
Navigate to your Application Insights instance in the portal.
In the left menu, selectUsage and estimated costs.
SelectCustom metrics (Preview)>With dimensions.
SelectOK.
Add the"metrics": trueproperty to theapplicationInsightsdiagnostic entity that's configured in API Management. Currently you must add this property using the API ManagementDiagnostic - Create or UpdateREST API. For example:PUT https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/diagnostics/applicationinsights

{
    [...]
    {
    "properties": {
        "loggerId": "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/loggers/{ApplicationInsightsLoggerName}",
        "metrics": true
        [...]
    }
}
Add the"metrics": trueproperty to theapplicationInsightsdiagnostic entity that's configured in API Management. Currently you must add this property using the API ManagementDiagnostic - Create or UpdateREST API. For example:
"metrics": true
applicationInsights
PUT https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/diagnostics/applicationinsights

{
    [...]
    {
    "properties": {
        "loggerId": "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/loggers/{ApplicationInsightsLoggerName}",
        "metrics": true
        [...]
    }
}
PUT https://management.azure.com/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/diagnostics/applicationinsights

{
    [...]
    {
    "properties": {
        "loggerId": "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ApiManagement/service/{APIManagementServiceName}/loggers/{ApplicationInsightsLoggerName}",
        "metrics": true
        [...]
    }
}
Ensure that the Application Insights logger is configured at the scope you intend to emit custom metrics (either all APIs, or a single API). For more information, seeEnable Application Insights logging for your API, earlier in this article.
Ensure that the Application Insights logger is configured at the scope you intend to emit custom metrics (either all APIs, or a single API). For more information, seeEnable Application Insights logging for your API, earlier in this article.
Configure theemit-metricpolicy at a scope where Application Insights logging is configured (either all APIs, or a single API) and is enabled for custom metrics. For policy details, see theemit-metricpolicy reference.
Configure theemit-metricpolicy at a scope where Application Insights logging is configured (either all APIs, or a single API) and is enabled for custom metrics. For policy details, see theemit-metricpolicy reference.
emit-metric
emit-metric
Limits for custom metrics
Azure Monitor imposesusage limitsfor custom metrics that may affect your ability to emit metrics from API Management. For example, Azure Monitor currently sets a limit of 10 dimension keys per metric, and a limit of 50,000 total active time series per region in a subscription (within a 12 hour period).
These limits have the following implications for configuring custom metrics in an API Management policy such asemit-metricorazure-openai-emit-token-metric:
emit-metric
azure-openai-emit-token-metric
You can configure a maximum of 10 custom dimensions per policy.
You can configure a maximum of 10 custom dimensions per policy.
The number of active time series generated by the policy within a 12 hour period is the product of the number of unique values of each configured dimension during the period. For example, if three custom dimensions were configured in the policy, and each dimension had 10 possible values within the period, the policy would contribute 1,000 (10 x 10 x 10) active time series.
The number of active time series generated by the policy within a 12 hour period is the product of the number of unique values of each configured dimension during the period. For example, if three custom dimensions were configured in the policy, and each dimension had 10 possible values within the period, the policy would contribute 1,000 (10 x 10 x 10) active time series.
If you configure the policy in multiple API Management instances that are in the same region in a subscription, all instances can contribute to the regional active time series limit.
If you configure the policy in multiple API Management instances that are in the same region in a subscription, all instances can contribute to the regional active time series limit.
Learn more aboutdesign limitations and considerationsfor custom metrics in Azure Monitor.
Performance implications and log sampling
Warning
Logging all events may have serious performance implications, depending on incoming requests rate.
Based on internal load tests, enabling the logging feature caused a 40%-50% reduction in throughput when request rate exceeded 1,000 requests per second. Application Insights is designed to assess application performances using statistical analysis. It's not:
Intended to be an audit system.
Suited for logging each individual request for high-volume APIs.
You can manipulate the number of logged requests byadjusting theSamplingsetting. A value of 100% means all requests are logged, while 0% reflects no logging.
Samplinghelps to reduce telemetry volume, effectively preventing significant performance degradation while still carrying the benefits of logging.
To improve performance issues, skip:
Request and responses headers.
Body logging.
Video
Troubleshooting
Addressing the issue of telemetry data flow from API Management to Application Insights:
Investigate whether a linked Azure Monitor Private Link Scope (AMPLS) resource exists within the VNet where the API Management resource is connected. AMPLS resources have a global scope across subscriptions and are responsible for managing data query and ingestion for all Azure Monitor resources. It's possible that the AMPLS has been configured with a Private-Only access mode specifically for data ingestion. In such instances, include the Application Insights resource and its associated Log Analytics resource in the AMPLS. Once this addition is made, the API Management data will be successfully ingested into the Application Insights resource, resolving the telemetry data transmission issue.
Related content
Learn more aboutAzure Application Insights.
Considerlogging with Azure Event Hubs.
Learn about visualizing data from Application Insights usingAzure Managed Grafana
Feedback
Was this page helpful?
Additional resources