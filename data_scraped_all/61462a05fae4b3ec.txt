Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Working with containers and Azure Functions
Article
2024-07-30
6 contributors
In this article
This article demonstrates the support that Azure Functions provides for working with containerized function apps running in an Azure Container Apps environment. For more information, seeAzure Container Apps hosting of Azure Functions.
This article demonstrates the support that Azure Functions provides for working with function apps running in Linux containers.
Choose the hosting environment for your containerized function app at the top of the article.
If you want to jump right in, the following article shows you how to create your first function running in a Linux container and deploy the image from a container registry to a supported Azure hosting service:
Create your first containerized Azure Functions on Azure Container Apps
To learn more about deployments to Azure Container Apps, seeAzure Container Apps hosting of Azure Functions.
Create your first containerized Azure Functions
Working with containers and Azure Functions
Important
This article currently shows how to connect to the default storage account by using a connection string. For the best security, you should instead create a managed identity-based connection to Azure Storage using Microsoft Entra authentication. For more information, see theFunctions developer guide.
Creating containerized function apps
Functions makes it easy to deploy and run your function apps as Linux containers, which you create and maintain. Functions maintains a set oflanguage-specific base imagesthat you can use when creating containerized function apps.
Important
When creating your own containers, you're required to keep the base image of your container updated to the latest supported base image. Supported base images for Azure Functions are language-specific and are found in theAzure Functions base image repos.
The Functions team is committed to publishing monthly updates for these base images. Regular updates include the latest minor version updates and security fixes for both the Functions runtime and languages. You should regularly update your container from the latest base image and redeploy the updated version of your container. For more information, seeMaintaining custom containers.
For a complete example of how to create the local containerized function app from the command line and publish the image to a container registry, seeCreate a function app in a local container.
Generate the Dockerfile
Functions tooling provides a Docker option that generates a Dockerfile with your functions code project. You can use this file with Docker to create your functions in a container that derives from the correct base image (language and version).
The way you create a Dockerfile depends on how you create your project.
Command line
Visual Studio Code
Visual Studio
When you create a Functions project usingAzure Functions Core Tools, include the--dockeroption when you run thefunc initcommand, as in the following example:func init --docker
When you create a Functions project usingAzure Functions Core Tools, include the--dockeroption when you run thefunc initcommand, as in the following example:
--docker
func init
func init --docker
func init --docker
You can also add a Dockerfile to an existing project by using the--docker-onlyoption when you run thefunc initcommand in an existing project folder, as in the following example:func init --docker-only
You can also add a Dockerfile to an existing project by using the--docker-onlyoption when you run thefunc initcommand in an existing project folder, as in the following example:
--docker-only
func init
func init --docker-only
func init --docker-only
For a complete example, seeCreate a function app in a local container.
The Azure Functions extension for Visual Studio Code creates your Dockerfile when it creates your code project. To create a containerized code project:
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Containerized Project....
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Containerized Project....
Azure Functions: Create New Containerized Project...
Select a folder for your new code project, chooseSelect, and follow the remaining prompts.
Select a folder for your new code project, chooseSelect, and follow the remaining prompts.
After your project is created, you can open and review the Dockerfile in the root folder you chose for your     project.
After your project is created, you can open and review the Dockerfile in the root folder you chose for your     project.
When you create a Functions project, make sure to check theEnable Dockeroption on theAdditional Informationpage of the new project dialog.
When you create a Functions project, make sure to check theEnable Dockeroption on theAdditional Informationpage of the new project dialog.
You can always add a Dockerfile to an existing project by using the--docker-onlyoption when you run thefunc initcommand in the Terminal windows of an existing project folder, as in the following example:func init --docker-only
You can always add a Dockerfile to an existing project by using the--docker-onlyoption when you run thefunc initcommand in the Terminal windows of an existing project folder, as in the following example:
--docker-only
func init
func init --docker-only
func init --docker-only
Create your function app in a container
With a Functions-generated Dockerfile in your code project, you can use Docker to create the containerized function app on your local computer. The followingdocker buildcommand creates an image of your containerized functions from the project in the local directory:
docker build
docker build --tag <DOCKER_ID>/<IMAGE_NAME>:v1.0.0 .
docker build --tag <DOCKER_ID>/<IMAGE_NAME>:v1.0.0 .
For an example of how to create the container, seeBuild the container image and verify locally.
Update an image in the registry
When you make changes to your functions code project or need to update to the latest base image, you need to rebuild the container locally and republish the updated image to your chosen container registry. The following command rebuilds the image from the root folder with an updated version number and pushes it to your registry:
Azure Container Registry
Docker Hub
az acr build --registry <REGISTRY_NAME> --image <LOGIN_SERVER>/azurefunctionsimage:v1.0.1 .
az acr build --registry <REGISTRY_NAME> --image <LOGIN_SERVER>/azurefunctionsimage:v1.0.1 .
Replace<REGISTRY_NAME>with your Container Registry instance and<LOGIN_SERVER>with the login server name.
<REGISTRY_NAME>
<LOGIN_SERVER>
docker build --tag <DOCKER_ID> azurefunctionsimage:v1.0.1 .
docker push <DOCKER_ID> azurefunctionsimage:v1.0.1
docker build --tag <DOCKER_ID> azurefunctionsimage:v1.0.1 .
docker push <DOCKER_ID> azurefunctionsimage:v1.0.1
Replace<DOCKER_ID>with your Docker Hub account ID.
<DOCKER_ID>
At this point, you need to update an existing deployment to use the new image. You can update the function app to use the new image either by using the Azure CLI or in theAzure portal:
Azure CLI
Azure portal
az functionapp config container set --image <IMAGE_NAME> --registry-password <SECURE_PASSWORD>--registry-username <USER_NAME> --name <APP_NAME> --resource-group <RESOURCE_GROUP>
az functionapp config container set --image <IMAGE_NAME> --registry-password <SECURE_PASSWORD>--registry-username <USER_NAME> --name <APP_NAME> --resource-group <RESOURCE_GROUP>
In this example,<IMAGE_NAME>is the full name of the new image with version. Private registries require you to supply a username and password. Store these credentials securely.
<IMAGE_NAME>
In theAzure portal, locate your function app and selectSettings>Configurationon the left-hand side.
In theAzure portal, locate your function app and selectSettings>Configurationon the left-hand side.
UnderImage settings, update theImage tagvalue to the update version in the registry, and then selectSave.
UnderImage settings, update theImage tagvalue to the update version in the registry, and then selectSave.
The specified image version is deployed to your app.
In theAzure portal, locate your function app and selectDeployment>Deployment centeron the left-hand side.
In theAzure portal, locate your function app and selectDeployment>Deployment centeron the left-hand side.
UnderSettings, selectContainer registryforSource, update theFull Image Name and Tagvalue to the update version in the registry, and then selectSave.
UnderSettings, selectContainer registryforSource, update theFull Image Name and Tagvalue to the update version in the registry, and then selectSave.
The specified image version is deployed to your app.
You should also considerenabling continuous deployment.
Azure portal create using containers
When you create a function app in theAzure portal, you can choose to deploy the function app from an image in a container registry. To learn how to create a containerized function app in a container registry, seeCreate your function app in a container.
The following steps create and deploy an existing containerized function app from a container registry.
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectCompute>Function App.
In theNewpage, selectCompute>Function App.
UnderSelect a hosting option, choosePremium plan>Select.This creates a function app hosted by Azure Functions in thePremium plan, which supports dynamic scaling. You can also choose to run in anApp Service plan, but in this kind of dedicated plan you must manage thescaling of your function app.
UnderSelect a hosting option, choosePremium plan>Select.
This creates a function app hosted by Azure Functions in thePremium plan, which supports dynamic scaling. You can also choose to run in anApp Service plan, but in this kind of dedicated plan you must manage thescaling of your function app.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription in which you create your function app.Resource GroupmyResourceGroupName for the new resource group in which you create your function app. You should create a resource group because there areknown limitations when creating new function apps in an existing resource group.Function App nameUnique name*Name that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.Do you want to deploy code or container image?Container imageDeploy a containerized function app from a registry. To create a function app in registry, seeCreate a function app in a local container.RegionPreferred regionSelect aregionthat's near you or near other services that your functions can access.Linux planNew plan (default)Creates a new Premium plan to host your app. You can also choose an existing premium plan.Pricing planElastic Premium EP1EP1is the most affordable plan. You can choose a larger plan if you need to.Zone RedundancyDisabledYou don't need this feature in a nonproduction app.*App name must be globally unique among all Azure Functions hosted apps.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
EP1
*App name must be globally unique among all Azure Functions hosted apps.
Accept the default options of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
Accept the default options of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
SelectReview + createto review the app configuration selections.
SelectReview + createto review the app configuration selections.
On theReview + createpage, review your settings, and then selectCreateto provision the function app using a default base image.
On theReview + createpage, review your settings, and then selectCreateto provision the function app using a default base image.
After your function app resource is created, selectGo to resourceand in the function app page selectDeployment center.
After your function app resource is created, selectGo to resourceand in the function app page selectDeployment center.
In theDeployment center, you can connect your container registry as the source of the image. You can also enable GitHub Actions or Azure Pipelines for more robust continuous deployment of updates to your container in the registry.
In theDeployment center, you can connect your container registry as the source of the image. You can also enable GitHub Actions or Azure Pipelines for more robust continuous deployment of updates to your container in the registry.
Azure portal create using containers
When you create a Container Apps-hosted function app in theAzure portal, you can choose to deploy your function app from an image in a container registry. To learn how to create a containerized function app in a container registry, seeCreate your function app in a container.
The following steps create and deploy an existing containerized function app from a container registry.
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectCompute>Function App.
In theNewpage, selectCompute>Function App.
UnderSelect a hosting option, chooseContainer Apps environment>Select.
UnderSelect a hosting option, chooseContainer Apps environment>Select.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription in which you create your function app.Resource GroupmyResourceGroupName for the new resource group in which you create your function app. You should create a resource group because there areknown limitations when creating new function apps in an existing resource group.Function App nameUnique name*Name that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.RegionPreferred regionSelect aregionthat's near you or near other services that your functions can access.*App name must be unique within the Azure Container Apps environment.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
*App name must be unique within the Azure Container Apps environment.
Still on theBasicspage, accept the suggested new environment forAzure Container Apps environment. To minimize costs, the new default environment is created in theConsumption + Dedicatedwith the default workload profile and without zone redundancy. For more information, seeAzure Container Apps hosting of Azure Functions.You can also choose to use an existing Container Apps environment. To create a custom environment, instead selectCreate new. In theCreate Container Apps Environmentpage, you can add nondefault workload profiles or enable zone redundancy. To learn about environments, seeAzure Container Apps environments.
Still on theBasicspage, accept the suggested new environment forAzure Container Apps environment. To minimize costs, the new default environment is created in theConsumption + Dedicatedwith the default workload profile and without zone redundancy. For more information, seeAzure Container Apps hosting of Azure Functions.
You can also choose to use an existing Container Apps environment. To create a custom environment, instead selectCreate new. In theCreate Container Apps Environmentpage, you can add nondefault workload profiles or enable zone redundancy. To learn about environments, seeAzure Container Apps environments.
Select theDeploymenttab and unselectUse quickstart image. Otherwise, the function app is deployed from the base image for your function app language.
Select theDeploymenttab and unselectUse quickstart image. Otherwise, the function app is deployed from the base image for your function app language.
Choose yourImage type, public or private. ChoosePrivateif you're using Azure Container Registry or some other private registry. Supply theImagename, including the registry prefix. If you're using a private registry, provide the image registry authentication credentials. ThePublicsetting only supports images stored publicly in Docker Hub.
Choose yourImage type, public or private. ChoosePrivateif you're using Azure Container Registry or some other private registry. Supply theImagename, including the registry prefix. If you're using a private registry, provide the image registry authentication credentials. ThePublicsetting only supports images stored publicly in Docker Hub.
UnderContainer resource allocation, select your desired number of CPU cores and available memory. If your environment has other workload profiles added, you can select a nondefaultWorkload profile. Choices on this page affect the cost of hosting your app. See theContainer Apps pricing pageto estimate your potential costs.
UnderContainer resource allocation, select your desired number of CPU cores and available memory. If your environment has other workload profiles added, you can select a nondefaultWorkload profile. Choices on this page affect the cost of hosting your app. See theContainer Apps pricing pageto estimate your potential costs.
SelectReview + createto review the app configuration selections.
SelectReview + createto review the app configuration selections.
On theReview + createpage, review your settings, and then selectCreateto provision the function app and deploy your container image from the registry.
On theReview + createpage, review your settings, and then selectCreateto provision the function app and deploy your container image from the registry.
Work with images in Azure Functions
When your function app container is deployed from a registry, Functions maintains information about the source image.
Azure CLI
Azure portal
Use the following commands to get data about the image or change the deployment image used:
az functionapp config container show: returns information about the image used for deployment.
az functionapp config container show: returns information about the image used for deployment.
az functionapp config container show
az functionapp config container set: change registry settings or update the image used for deployment, as shown in the previous example.
az functionapp config container set: change registry settings or update the image used for deployment, as shown in the previous example.
az functionapp config container set
In theAzure portal, locate your function app and selectSettings>Configurationon the left-hand side.
In theAzure portal, locate your function app and selectSettings>Configurationon the left-hand side.
UnderImage settings, you can review information about the currently deployed image or change the deployment to a different image. You can also change the container environment allocation settings.
UnderImage settings, you can review information about the currently deployed image or change the deployment to a different image. You can also change the container environment allocation settings.
To make updates, modify any of the image settings, such as theImage tag, or container environment allocation settings and selectSave.
To make updates, modify any of the image settings, such as theImage tag, or container environment allocation settings and selectSave.
Based on your changes, a new image is deployed to your app or new allocations are provisioned.
In theAzure portal, locate your function app and selectDeployment>Deployment centeron the left-hand side.
In theAzure portal, locate your function app and selectDeployment>Deployment centeron the left-hand side.
UnderSettings, selectContainer registryforSourceand you can review information about the currently deployed image.
UnderSettings, selectContainer registryforSourceand you can review information about the currently deployed image.
To make updates, modify any of the image settings, such as theFull Image Name and Tagand then selectSave.
To make updates, modify any of the image settings, such as theFull Image Name and Tagand then selectSave.
The new image is deployed to your app based on your new settings.
Container Apps workload profiles
Workload profiles are feature of Container Apps that let you better control your deployment resources. Azure Functions on Azure Container Apps also supports workload profiles. For more information, seeWorkload profiles in Azure Container Apps.
You can also set the amount of CPU and memory resources allocated to your app.
You can create and manage both workload profiles and resource allocations using the Azure CLI or in the Azure portal.
Azure CLI
Azure portal
You enable workload profiles when you create your container app environment. For an example, seeCreate a container app in a profile.
You can add, edit, and delete profiles in your environment. For an example, seeAdd profiles.
When you create a containerized function app in an environment that has workload profiles enabled, you should also specify the profile in which to run. You specify the profile by using the--workload-profile-nameparameter of theaz functionapp createcommand, like in this example:
--workload-profile-name
az functionapp create
az functionapp create --name <APP_NAME> --storage-account <STORAGE_NAME> --environment MyContainerappEnvironment --resource-group AzureFunctionsContainers-rg --functions-version 4 --runtime <LANGUAGE_STACK> --image <IMAGE_URI> --workload-profile-name <PROFILE_NAME> --cpu <CPU_COUNT> --memory <MEMORY_SIZE>
az functionapp create --name <APP_NAME> --storage-account <STORAGE_NAME> --environment MyContainerappEnvironment --resource-group AzureFunctionsContainers-rg --functions-version 4 --runtime <LANGUAGE_STACK> --image <IMAGE_URI> --workload-profile-name <PROFILE_NAME> --cpu <CPU_COUNT> --memory <MEMORY_SIZE>
In theaz functionapp createcommand, the--environmentparameter specifies the Container Apps environment and the--imageparameter specifies the image to use for the function app. In this example, replace<STORAGE_NAME>with the name you used in the previous section for the storage account. Also, replace<APP_NAME>with a globally unique name appropriate to you.
az functionapp create
--environment
--image
<STORAGE_NAME>
<APP_NAME>
To set the resources allocated to your app, replace<CPU_COUNT>with your desired number of virtual CPUs, with a minimum of 0.5 up to the maximum allowed by the profile. For<MEMORY_SIZE>, choose a dedicated memory amount from 1 GB up to the maximum allowed by the profile.
<CPU_COUNT>
<MEMORY_SIZE>
You can use theaz functionapp container setcommand to manage the allocated resources and the workload profile used by your app.
az functionapp container set
az functionapp container set --name <APP_NAME> --resource-group AzureFunctionsContainers-rg --workload-profile-name  <PROFILE_NAME> --cpu <CPU_COUNT> --memory <MEMORY_SIZE>
az functionapp container set --name <APP_NAME> --resource-group AzureFunctionsContainers-rg --workload-profile-name  <PROFILE_NAME> --cpu <CPU_COUNT> --memory <MEMORY_SIZE>
You enable workload profiles when you create your container app environment. For an example, seeCreate a container app in a profile.
You can add, edit, and delete profiles in your environment. For an example, seeAdd profiles.
When you create a containerized function app in an environment that has workload profiles enabled, you should also specify the profile in which to run. In the portal, you can choose your profile during the create process.
Application settings
Azure Functions lets you work with application settings for containerized function apps in the standard way. For more information, seeUse application settings.
Tip
By default, a containerized function app monitors port 80 for incoming requests. If your app must use a different port, use theWEBSITES_PORTapplication settingto change this default port.
WEBSITES_PORT
Enable continuous deployment to Azure
When you host your containerized function app on Azure Container Apps, there are two ways to set up continuous deployment from a source code repository:
Azure Pipelines
GitHub Actions
You aren't currently able to continuously deploy containers based on image changes in a container registry. You must instead use these source-code based continuous deployment pipelines.
Enable continuous deployment to Azure
Important
Webhook-based deployment isn't currently supported when running your container in anElastic Premium plan. If you need to use the continuous deployment method described in this section, instead deploy your container in anApp Service plan. When running in an Elastic Premium plan, you need to manually restart your app whenever you make updates to your container in the repository.
You can also configure continuous deployment from a source code repository using eitherAzure PipelinesorGitHub Actions.
You can enable Azure Functions to automatically update your deployment of an image whenever you update the image in the registry.
Use the following command to enable continuous deployment and to get the webhook URL:Azure CLIAzure PowerShellaz functionapp deployment container config --enable-cd --query CI_CD_URL --output tsv --name <APP_NAME> --resource-group AzureFunctionsContainers-rgTheaz functionapp deployment container configcommand enables continuous deployment and returns the deployment webhook URL. You can retrieve this URL at any later time by using theaz functionapp deployment container show-cd-urlcommand.Update-AzFunctionAppSetting -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rg -AppSetting @{"DOCKER_ENABLE_CI" = "true"}
Get-AzWebAppContainerContinuousDeploymentUrl -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rgTheDOCKER_ENABLE_CIapplication setting controls whether continuous deployment is enabled from the container repository. TheGet-AzWebAppContainerContinuousDeploymentUrlcmdlet returns the URL of the deployment webhook.As before, replace<APP_NAME>with your function app name.
Use the following command to enable continuous deployment and to get the webhook URL:
Azure CLI
Azure PowerShell
az functionapp deployment container config --enable-cd --query CI_CD_URL --output tsv --name <APP_NAME> --resource-group AzureFunctionsContainers-rg
az functionapp deployment container config --enable-cd --query CI_CD_URL --output tsv --name <APP_NAME> --resource-group AzureFunctionsContainers-rg
Theaz functionapp deployment container configcommand enables continuous deployment and returns the deployment webhook URL. You can retrieve this URL at any later time by using theaz functionapp deployment container show-cd-urlcommand.
az functionapp deployment container config
az functionapp deployment container show-cd-url
Update-AzFunctionAppSetting -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rg -AppSetting @{"DOCKER_ENABLE_CI" = "true"}
Get-AzWebAppContainerContinuousDeploymentUrl -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rg
Update-AzFunctionAppSetting -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rg -AppSetting @{"DOCKER_ENABLE_CI" = "true"}
Get-AzWebAppContainerContinuousDeploymentUrl -Name <APP_NAME> -ResourceGroupName AzureFunctionsContainers-rg
TheDOCKER_ENABLE_CIapplication setting controls whether continuous deployment is enabled from the container repository. TheGet-AzWebAppContainerContinuousDeploymentUrlcmdlet returns the URL of the deployment webhook.
DOCKER_ENABLE_CI
Get-AzWebAppContainerContinuousDeploymentUrl
As before, replace<APP_NAME>with your function app name.
<APP_NAME>
Copy the deployment webhook URL to the clipboard.
Copy the deployment webhook URL to the clipboard.
OpenDocker Hub, sign in, and selectRepositorieson the navigation bar. Locate and select the image, select theWebhookstab, specify aWebhook name, paste your URL inWebhook URL, and then selectCreate.
OpenDocker Hub, sign in, and selectRepositorieson the navigation bar. Locate and select the image, select theWebhookstab, specify aWebhook name, paste your URL inWebhook URL, and then selectCreate.

With the webhook set, Azure Functions redeploys your image whenever you update it in Docker Hub.
With the webhook set, Azure Functions redeploys your image whenever you update it in Docker Hub.
Enable SSH connections
SSH enables secure communication between a container and a client. With SSH enabled, you can connect to your container using App Service Advanced Tools (Kudu). For easy connection to your container using SSH, Azure Functions provides a base image that has SSH already enabled. You only need to edit yourDockerfile, then rebuild, and redeploy the image. You can then connect to the container through the Advanced Tools (Kudu).
In yourDockerfile, append the string-appserviceto the base image in yourFROMinstruction, as in the following example:FROM mcr.microsoft.com/azure-functions/node:4-node18-appserviceThis example uses the SSH-enabled version of the Node.js version 18 base image. Visit theAzure Functions base image reposto verify that you're using the latest version of the SSH-enabled base image.
In yourDockerfile, append the string-appserviceto the base image in yourFROMinstruction, as in the following example:
-appservice
FROM
FROM mcr.microsoft.com/azure-functions/node:4-node18-appservice
FROM mcr.microsoft.com/azure-functions/node:4-node18-appservice
This example uses the SSH-enabled version of the Node.js version 18 base image. Visit theAzure Functions base image reposto verify that you're using the latest version of the SSH-enabled base image.
Rebuild the image by using thedocker buildcommand, replace the<DOCKER_ID>with your Docker Hub account ID, as in the following example.docker build --tag <DOCKER_ID>/azurefunctionsimage:v1.0.0 .
Rebuild the image by using thedocker buildcommand, replace the<DOCKER_ID>with your Docker Hub account ID, as in the following example.
docker build
<DOCKER_ID>
docker build --tag <DOCKER_ID>/azurefunctionsimage:v1.0.0 .
docker build --tag <DOCKER_ID>/azurefunctionsimage:v1.0.0 .
Push the updated image to Docker Hub, which should take considerably less time than the first push. Only the updated segments of the image need to be uploaded now.docker push <DOCKER_ID>/azurefunctionsimage:v1.0.0
Push the updated image to Docker Hub, which should take considerably less time than the first push. Only the updated segments of the image need to be uploaded now.
docker push <DOCKER_ID>/azurefunctionsimage:v1.0.0
docker push <DOCKER_ID>/azurefunctionsimage:v1.0.0
Azure Functions automatically redeploys the image to your functions app; the process takes place in less than a minute.
Azure Functions automatically redeploys the image to your functions app; the process takes place in less than a minute.
In a browser, openhttps://<app_name>.scm.azurewebsites.net/and replace<app_name>with your unique name. This URL is the Advanced Tools (Kudu) endpoint for your function app container.
In a browser, openhttps://<app_name>.scm.azurewebsites.net/and replace<app_name>with your unique name. This URL is the Advanced Tools (Kudu) endpoint for your function app container.
https://<app_name>.scm.azurewebsites.net/
<app_name>
Sign in to your Azure account, and then select theSSHto establish a connection with the container. Connecting might take a few moments if Azure is still updating the container image.
Sign in to your Azure account, and then select theSSHto establish a connection with the container. Connecting might take a few moments if Azure is still updating the container image.
After a connection is established with your container, run thetopcommand to view the currently running processes.
After a connection is established with your container, run thetopcommand to view the currently running processes.
top

Related articles
The following articles provide more information about deploying and managing containers:
Azure Container Apps hosting of Azure Functions
Scale and hosting options
Kubernetes-based serverless hosting
Feedback
Was this page helpful?
Additional resources