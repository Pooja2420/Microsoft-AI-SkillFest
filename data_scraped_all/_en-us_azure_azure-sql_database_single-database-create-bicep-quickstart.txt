Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a single database in Azure SQL Database using Bicep
Article
2024-09-18
7 contributors
In this article
Applies to:Azure SQL Database
Creating asingle databaseis the quickest and simplest option for creating a database in Azure SQL Database. This quickstart shows you how to create a single database using Bicep.
Bicepis a domain-specific language (DSL) that uses declarative syntax to deploy Azure resources. It provides concise syntax, reliable type safety, and support for code reuse. Bicep offers the best authoring experience for your infrastructure-as-code solutions in Azure.
Prerequisites
If you don't have an Azure subscription,create a free account.
Permissions
To create databases via Transact-SQL:CREATE DATABASEpermissions are necessary. To create a database a login must be either the server admin login (created when the Azure SQL Database logical server was provisioned), the Microsoft Entra admin of the server, a member of the dbmanager database role inmaster. For more information, seeCREATE DATABASE.
CREATE DATABASE
master
To create databases via the Azure portal, PowerShell, Azure CLI, or REST API: Azure RBAC permissions are needed, specifically the Contributor, SQL DB Contributor, or SQL Server Contributor Azure RBAC role. For more information, seeAzure RBAC built-in roles.
Review the Bicep file
A single database has a defined set of compute, memory, IO, and storage resources using one of twopurchasing models. When you create a single database, you also define aserverto manage it and place it withinAzure resource groupin a specified region.
The Bicep file used in this quickstart is fromAzure Quickstart Templates.
@description('The name of the SQL logical server.')
param serverName string = uniqueString('sql', resourceGroup().id)

@description('The name of the SQL Database.')
param sqlDBName string = 'SampleDB'

@description('Location for all resources.')
param location string = resourceGroup().location

@description('The administrator username of the SQL logical server.')
param administratorLogin string

@description('The administrator password of the SQL logical server.')
@secure()
param administratorLoginPassword string

resource sqlServer 'Microsoft.Sql/servers@2022-05-01-preview' = {
  name: serverName
  location: location
  properties: {
    administratorLogin: administratorLogin
    administratorLoginPassword: administratorLoginPassword
  }
}

resource sqlDB 'Microsoft.Sql/servers/databases@2022-05-01-preview' = {
  parent: sqlServer
  name: sqlDBName
  location: location
  sku: {
    name: 'Standard'
    tier: 'Standard'
  }
}
@description('The name of the SQL logical server.')
param serverName string = uniqueString('sql', resourceGroup().id)

@description('The name of the SQL Database.')
param sqlDBName string = 'SampleDB'

@description('Location for all resources.')
param location string = resourceGroup().location

@description('The administrator username of the SQL logical server.')
param administratorLogin string

@description('The administrator password of the SQL logical server.')
@secure()
param administratorLoginPassword string

resource sqlServer 'Microsoft.Sql/servers@2022-05-01-preview' = {
  name: serverName
  location: location
  properties: {
    administratorLogin: administratorLogin
    administratorLoginPassword: administratorLoginPassword
  }
}

resource sqlDB 'Microsoft.Sql/servers/databases@2022-05-01-preview' = {
  parent: sqlServer
  name: sqlDBName
  location: location
  sku: {
    name: 'Standard'
    tier: 'Standard'
  }
}
The following resources are defined in the Bicep file:
Microsoft.Sql/servers
Microsoft.Sql/servers/databases
Deploy the Bicep file
Save the Bicep file asmain.bicepto your local computer.
Save the Bicep file asmain.bicepto your local computer.
Deploy the Bicep file using either Azure CLI or Azure PowerShell.CLIPowerShellaz group create --name exampleRG --location eastus
az deployment group create --resource-group exampleRG --template-file main.bicep --parameters administratorLogin=<admin-login>New-AzResourceGroup -Name exampleRG -Location eastus
New-AzResourceGroupDeployment -ResourceGroupName exampleRG -TemplateFile ./main.bicep -administratorLogin "<admin-login>"
Deploy the Bicep file using either Azure CLI or Azure PowerShell.
CLI
PowerShell
az group create --name exampleRG --location eastus
az deployment group create --resource-group exampleRG --template-file main.bicep --parameters administratorLogin=<admin-login>
az group create --name exampleRG --location eastus
az deployment group create --resource-group exampleRG --template-file main.bicep --parameters administratorLogin=<admin-login>
New-AzResourceGroup -Name exampleRG -Location eastus
New-AzResourceGroupDeployment -ResourceGroupName exampleRG -TemplateFile ./main.bicep -administratorLogin "<admin-login>"
New-AzResourceGroup -Name exampleRG -Location eastus
New-AzResourceGroupDeployment -ResourceGroupName exampleRG -TemplateFile ./main.bicep -administratorLogin "<admin-login>"
Note
Replace<admin-login>with the administrator username of the SQL logical server. You'll be prompted to enteradministratorLoginPassword.
When the deployment finishes, you should see a message indicating the deployment succeeded.
Review deployed resources
Use the Azure portal, Azure CLI, or Azure PowerShell to list the deployed resources in the resource group.
CLI
PowerShell
az resource list --resource-group exampleRG
az resource list --resource-group exampleRG
Get-AzResource -ResourceGroupName exampleRG
Get-AzResource -ResourceGroupName exampleRG
Clean up resources
When no longer needed, use the Azure portal, Azure CLI, or Azure PowerShell to delete the resource group and its resources.
CLI
PowerShell
az group delete --name exampleRG
az group delete --name exampleRG
Remove-AzResourceGroup -Name exampleRG
Remove-AzResourceGroup -Name exampleRG
Related content
Create a server-level firewall rule to connect to the single database from on-premises or remote tools. For more information, seeCreate a server-level firewall rule.
After you create a server-level firewall rule,connect and queryyour database using several different tools and languages.Connect and query using SQL Server Management Studio
Connect and query using SQL Server Management Studio
Connect and query using Azure Data Studio
To create a single database using the Azure CLI, seeAzure CLI samples.
To create a single database using Azure PowerShell, seeAzure PowerShell samples.
To learn how to create Bicep files, seeCreate Bicep files with Visual Studio Code.
Feedback
Was this page helpful?
Additional resources