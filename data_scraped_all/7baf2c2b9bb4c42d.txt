Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Integrate ARM templates with Azure Pipelines
Article
2024-03-20
4 contributors
In this article
You can integrate Azure Resource Manager templates (ARM templates) with Azure Pipelines for continuous integration and continuous deployment (CI/CD). In this article, you learn two more advanced ways to deploy templates with Azure Pipelines.
Select your option
Before proceeding with this article, let's consider the different options for deploying an ARM template from a pipeline.
Use ARM template deployment task. This option is the easiest option. This approach works when you want to deploy a template directly from a repository. This option isn't covered in this article but instead is covered in the tutorialContinuous integration of ARM templates with Azure Pipelines. It shows how to use theARM template deployment taskto deploy a template from your GitHub repo.
Use ARM template deployment task. This option is the easiest option. This approach works when you want to deploy a template directly from a repository. This option isn't covered in this article but instead is covered in the tutorialContinuous integration of ARM templates with Azure Pipelines. It shows how to use theARM template deployment taskto deploy a template from your GitHub repo.
Add task that runs an Azure PowerShell script. This option has the advantage of providing consistency throughout the development life cycle because you can use the same script that you used when running local tests. Your script deploys the template but can also perform other operations such as getting values to use as parameters. This option is shown in this article. SeeAzure PowerShell task.Visual Studio provides theAzure Resource Group projectthat includes a PowerShell script. The script stages artifacts from your project to a storage account that Resource Manager can access. Artifacts are items in your project such as linked templates, scripts, and application binaries. If you want to continue using the script from the project, use the PowerShell script task shown in this article.
Add task that runs an Azure PowerShell script. This option has the advantage of providing consistency throughout the development life cycle because you can use the same script that you used when running local tests. Your script deploys the template but can also perform other operations such as getting values to use as parameters. This option is shown in this article. SeeAzure PowerShell task.
Visual Studio provides theAzure Resource Group projectthat includes a PowerShell script. The script stages artifacts from your project to a storage account that Resource Manager can access. Artifacts are items in your project such as linked templates, scripts, and application binaries. If you want to continue using the script from the project, use the PowerShell script task shown in this article.
Add tasks to copy and deploy tasks. This option offers a convenient alternative to the project script. You configure two tasks in the pipeline. One task stages the artifacts to an accessible location. The other task deploys the template from that location. This option is shown in this article. SeeCopy and deploy tasks.
Add tasks to copy and deploy tasks. This option offers a convenient alternative to the project script. You configure two tasks in the pipeline. One task stages the artifacts to an accessible location. The other task deploys the template from that location. This option is shown in this article. SeeCopy and deploy tasks.
Prepare your project
This article assumes your ARM template and Azure DevOps organization are ready for creating the pipeline. The following steps show how to make sure you're ready:
You have an Azure DevOps organization. If you don't have one,create one for free. If your team already has an Azure DevOps organization, make sure you're an administrator of the Azure DevOps project that you want to use.
You have an Azure DevOps organization. If you don't have one,create one for free. If your team already has an Azure DevOps organization, make sure you're an administrator of the Azure DevOps project that you want to use.
You've configured aservice connectionto your Azure subscription. The tasks in the pipeline execute under the identity of the service principal. For steps to create the connection, seeCreate a DevOps project.
You've configured aservice connectionto your Azure subscription. The tasks in the pipeline execute under the identity of the service principal. For steps to create the connection, seeCreate a DevOps project.
You have anARM templatethat defines the infrastructure for your project.
You have anARM templatethat defines the infrastructure for your project.
Create pipeline
If you haven't added a pipeline previously, you need to create a new pipeline. From your Azure DevOps organization, selectPipelinesandNew pipeline.
If you haven't added a pipeline previously, you need to create a new pipeline. From your Azure DevOps organization, selectPipelinesandNew pipeline.

Specify where your code is stored. The following image shows selectingAzure Repos Git.
Specify where your code is stored. The following image shows selectingAzure Repos Git.

From that source, select the repository that has the code for your project.
From that source, select the repository that has the code for your project.

Select the type of pipeline to create. You can selectStarter pipeline.
Select the type of pipeline to create. You can selectStarter pipeline.

You're ready to either add an Azure PowerShell task or the copy file and deploy tasks.
Azure PowerShell task
This section shows how to configure continuous deployment by using a single task that runs the PowerShell script in your project. If you need a PowerShell script that deploys a template, seeDeploy-AzTemplate.ps1orDeploy-AzureResourceGroup.ps1.
The following YAML file creates anAzure PowerShell task:
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'script-connection'
    ScriptType: 'FilePath'
    ScriptPath: './Deploy-AzTemplate.ps1'
    ScriptArguments: -Location 'centralus' -ResourceGroupName 'demogroup' -TemplateFile templates\mainTemplate.json
    azurePowerShellVersion: 'LatestVersion'
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'script-connection'
    ScriptType: 'FilePath'
    ScriptPath: './Deploy-AzTemplate.ps1'
    ScriptArguments: -Location 'centralus' -ResourceGroupName 'demogroup' -TemplateFile templates\mainTemplate.json
    azurePowerShellVersion: 'LatestVersion'
When you set the task toAzurePowerShell@5, the pipeline uses theAz module. If you're using the AzureRM module in your script, set the task toAzurePowerShell@3.
AzurePowerShell@5
AzurePowerShell@3
steps:
- task: AzurePowerShell@3
steps:
- task: AzurePowerShell@3
ForazureSubscription, provide the name of the service connection you created.
azureSubscription
inputs:
    azureSubscription: '<your-connection-name>'
inputs:
    azureSubscription: '<your-connection-name>'
ForscriptPath, provide the relative path from the pipeline file to your script. You can look in your repository to see the path.
scriptPath
ScriptPath: '<your-relative-path>/<script-file-name>.ps1'
ScriptPath: '<your-relative-path>/<script-file-name>.ps1'
InScriptArguments, provide any parameters needed by your script. The following example shows some parameters for a script, but you'll need to customize the parameters for your script.
ScriptArguments
ScriptArguments: -Location 'centralus' -ResourceGroupName 'demogroup' -TemplateFile templates\mainTemplate.json
ScriptArguments: -Location 'centralus' -ResourceGroupName 'demogroup' -TemplateFile templates\mainTemplate.json
When you selectSave, the build pipeline is automatically run. Go back to the summary for your build pipeline, and watch the status.

You can select the currently running pipeline to see details about the tasks. When it finishes, you see the results for each step.
Copy and deploy tasks
This section shows how to configure continuous deployment by using two tasks. The first task stages the artifacts to a storage account and the second task deploys the template.
To copy files to a storage account, the service principal for the service connection must be assigned the Storage Blob Data Contributor or Storage Blob Data Owner role. For more information, seeGet started with AzCopy.
The following YAML shows theAzure file copy task.
trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: AzureFileCopy@4
  inputs:
    SourcePath: 'templates'
    azureSubscription: 'copy-connection'
    Destination: 'AzureBlob'
    storage: 'demostorage'
    ContainerName: 'projecttemplates'
  name: AzureFileCopy
trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: AzureFileCopy@4
  inputs:
    SourcePath: 'templates'
    azureSubscription: 'copy-connection'
    Destination: 'AzureBlob'
    storage: 'demostorage'
    ContainerName: 'projecttemplates'
  name: AzureFileCopy
There are several parts of this task to revise for your environment. TheSourcePathindicates the location of the artifacts relative to the pipeline file.
SourcePath
SourcePath: '<path-to-artifacts>'
SourcePath: '<path-to-artifacts>'
ForazureSubscription, provide the name of the service connection you created.
azureSubscription
azureSubscription: '<your-connection-name>'
azureSubscription: '<your-connection-name>'
For storage and container name, provide the names of the storage account and container you want to use for storing the artifacts. The storage account must exist.
storage: '<your-storage-account-name>'
ContainerName: '<container-name>'
storage: '<your-storage-account-name>'
ContainerName: '<container-name>'
After creating the copy file task, you're ready to add the task to deploy the staged template.
The following YAML shows theAzure Resource Manager template deployment task:
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'copy-connection'
    subscriptionId: 'aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'demogroup'
    location: 'West US'
    templateLocation: 'URL of the file'
    csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
    csmParametersFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.parameters.json$(AzureFileCopy.StorageContainerSasToken)'
    deploymentMode: 'Incremental'
    deploymentName: 'deploy1'
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'copy-connection'
    subscriptionId: 'aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'demogroup'
    location: 'West US'
    templateLocation: 'URL of the file'
    csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
    csmParametersFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.parameters.json$(AzureFileCopy.StorageContainerSasToken)'
    deploymentMode: 'Incremental'
    deploymentName: 'deploy1'
There are several parts of this task to review in greater detail.
deploymentScope: Select the scope of deployment from the options:Management Group,Subscription, andResource Group. To learn more about the scopes, seeDeployment scopes.
deploymentScope: Select the scope of deployment from the options:Management Group,Subscription, andResource Group. To learn more about the scopes, seeDeployment scopes.
deploymentScope
Management Group
Subscription
Resource Group
azureResourceManagerConnection: Provide the name of the service connection you created.
azureResourceManagerConnection: Provide the name of the service connection you created.
azureResourceManagerConnection
subscriptionId: Provide the target subscription ID. This property only applies to the Resource Group deployment scope and the subscription deployment scope.
subscriptionId: Provide the target subscription ID. This property only applies to the Resource Group deployment scope and the subscription deployment scope.
subscriptionId
resourceGroupNameandlocation: provide the name and location of the resource group you want to deploy to. The task creates the resource group if it doesn't exist.resourceGroupName: '<resource-group-name>'
location: '<location>'
resourceGroupNameandlocation: provide the name and location of the resource group you want to deploy to. The task creates the resource group if it doesn't exist.
resourceGroupName
location
resourceGroupName: '<resource-group-name>'
location: '<location>'
resourceGroupName: '<resource-group-name>'
location: '<location>'
csmFileLink: Provide the link for the staged template. When setting the value, use variables returned from the file copy task. The following example links to a template named mainTemplate.json. The folder namedtemplatesis included because that where the file copy task copied the file to. In your pipeline, provide the path to your template and the name of your template.csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
csmFileLink: Provide the link for the staged template. When setting the value, use variables returned from the file copy task. The following example links to a template named mainTemplate.json. The folder namedtemplatesis included because that where the file copy task copied the file to. In your pipeline, provide the path to your template and the name of your template.
csmFileLink
csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
Your pipeline look like:
trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: AzureFileCopy@4
  inputs:
    SourcePath: 'templates'
    azureSubscription: 'copy-connection'
    Destination: 'AzureBlob'
    storage: 'demostorage'
    ContainerName: 'projecttemplates'
  name: AzureFileCopy
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'copy-connection'
    subscriptionId: 'aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'demogroup'
    location: 'West US'
    templateLocation: 'URL of the file'
    csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
    csmParametersFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.parameters.json$(AzureFileCopy.StorageContainerSasToken)'
    deploymentMode: 'Incremental'
    deploymentName: 'deploy1'
trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: AzureFileCopy@4
  inputs:
    SourcePath: 'templates'
    azureSubscription: 'copy-connection'
    Destination: 'AzureBlob'
    storage: 'demostorage'
    ContainerName: 'projecttemplates'
  name: AzureFileCopy
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'copy-connection'
    subscriptionId: 'aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'demogroup'
    location: 'West US'
    templateLocation: 'URL of the file'
    csmFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.json$(AzureFileCopy.StorageContainerSasToken)'
    csmParametersFileLink: '$(AzureFileCopy.StorageContainerUri)templates/mainTemplate.parameters.json$(AzureFileCopy.StorageContainerSasToken)'
    deploymentMode: 'Incremental'
    deploymentName: 'deploy1'
When you selectSave, the build pipeline is automatically run. Under theJobsframe, selectJobto see the job status.
Next steps
To use the what-if operation in a pipeline, seeTest ARM templates with What-If in a pipeline.
To learn about using ARM templates with GitHub Actions, seeDeploy Azure Resource Manager templates by using GitHub Actions.
Feedback
Was this page helpful?
Additional resources