Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Integrate custom build pipeline tasks with extensions
Article
2025-04-14
5 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Use this reference when you want to create and integrate custom build pipeline tasks with extensions in Azure DevOps.
Tip
Check out our newest documentation on extension development using theAzure DevOps Extension SDK.
Custom tasks
Tasks are the building blocks for defining automation in a build or release pipeline. To learn more, seeTask types & usage.
We offer manybuilt-in tasksto enable fundamental build and deployment scenarios. We recommend that you review these scenarios before building your own. If the existing tasks don't satisfy your needs, you can build acustom task.
Custom build task JSON
When you create a custom build or release task with an extension, your extension includes atask.jsonfile for each build or release task. Thetask.jsonfile describes the build or release task. The build system uses it to render configuration options to the user and to know which scripts to execute at build time.
To learn more, see thebuild and release task SDK documentationon GitHub. Specifically, you might be interested in thetask.json schema.
Bundle multiple versions of build or release tasks within one extension
You can include multiple versions of a build or release task within your extension. Roll out future versions of your extension without interrupting service of users on older versions. The following information shows the layout for having multiple versions in one extension.
Traditional extension layout
extensionManifest.json
extensionIcon.png
Task1task.jsonicon.pngtaskScript.ps1
task.json
icon.png
taskScript.ps1
Note
When you're setting up a task icon, ensure the following is true.
The icon name isicon.png
The icon size is 32x32 pixels
The icon is in the same location as thetask.jsonfile
Multiple versions layout
Note
The code looks for thetask.jsonfile inside the task folder and then one level deeper.
If one isn't found in either level, you see an error message.
extensionManifest.json
extensionIcon.png
Task1Task1V1task.jsonicon.pngtaskScript.ps1Task1V2task.jsonicon.pngtaskScript.ps1
Task1V1task.jsonicon.pngtaskScript.ps1
task.json
icon.png
taskScript.ps1
Task1V2task.jsonicon.pngtaskScript.ps1
task.json
icon.png
taskScript.ps1
Task2Task2V1task.jsonicon.pngtaskScript.ps1Task2V2task.jsonicon.pngtaskScript.ps1
Task2V1task.jsonicon.pngtaskScript.ps1
task.json
icon.png
taskScript.ps1
Task2V2task.jsonicon.pngtaskScript.ps1
task.json
icon.png
taskScript.ps1
Tip
To ensure the_build/Tasks/ssrsfilesdeployfolder contains the V1 and V2 contents, setmatchCopy(item, srcPath, destPath, { noRecurse:tofalsein themake-util.jsfile.
matchCopy(item, srcPath, destPath, { noRecurse:
false
Related content
Add a custom pipelines task extension
Server Task Authoring
Build and release task examples
Feedback
Was this page helpful?
Additional resources