Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Schedules for recurring triggers in Azure Logic Apps workflows
Article
2025-02-14
5 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
Azure Logic Apps helps you create and run automated recurring workflows on a schedule. By creating a logic app workflow that starts withRecurrencetrigger orSliding Windowtrigger, which are Schedule-type triggers, you can run tasks immediately, at a later time, or on a recurring interval. You can call services inside and outside Azure, such as HTTP or HTTPS endpoints, post messages to Azure services such as Azure Storage and Azure Service Bus, or get files uploaded to a file share. With theRecurrencetrigger, you can also set up complex schedules and advanced recurrences for running tasks. To learn more about the Schedule built-in triggers and actions, seeSchedule triggersandSchedule actions.
The following list shows some example tasks that you can run with the Schedule built-in triggers:
Get internal data, such as run a SQL stored procedure every day.
Get internal data, such as run a SQL stored procedure every day.
Get external data, such as pull weather reports from NOAA every 15 minutes.
Get external data, such as pull weather reports from NOAA every 15 minutes.
Send report data, such as email a summary for all orders greater than a specific amount in the past week.
Send report data, such as email a summary for all orders greater than a specific amount in the past week.
Process data, such as compress today's uploaded images every weekday during off-peak hours.
Process data, such as compress today's uploaded images every weekday during off-peak hours.
Clean up data, such as delete all tweets older than three months.
Clean up data, such as delete all tweets older than three months.
Archive data, such as push invoices to a backup service at 1:00 AM every day for the next nine months.
Archive data, such as push invoices to a backup service at 1:00 AM every day for the next nine months.
You can also use the Schedule built-in actions to pause your workflow before the next action runs, for example:
Wait until a weekday to send a status update over email.
Wait until a weekday to send a status update over email.
Delay the workflow until an HTTP call has time to finish before resuming and retrieving the result.
Delay the workflow until an HTTP call has time to finish before resuming and retrieving the result.
This guide describes the capabilities for the Schedule-type built-in triggers and actions.
Run recurring workloads without creating multiple logic apps
You can schedule and run recurring workloads without creating a separate Consumption logic app for each scheduled job and running into thelimit on workflows per region and subscription. Instead, you can eithercreate a Standard logic app with multiple workflows, or use the Consumption logic app pattern that's created by theAzure Quickstart Template: Logic Apps job scheduler.
The Azure Logic Apps job scheduler template creates a logic app namedCreateTimerJobthat calls aTimerJoblogic app. You can then call theCreateTimerJoblogic app as an API by making an HTTP request and passing a schedule as input for the request. Each call to theCreateTimerJoblogic app also calls theTimerJoblogic app, which creates a newTimerJobinstance that continuously runs based on the specified schedule or until meeting a specified limit. That way, you can run as manyTimerJobinstances as you want without worrying about workflow limits because instances aren't individual logic app workflow definitions or resources.

Schedule triggers
You can start your logic app workflow by using theRecurrence triggerorSliding Window trigger, which isn't associated with any specific service or system. These triggers start and run your workflow based on your specified recurrence where you select the interval and frequency, such as the number of seconds, minutes, hours, days, weeks, or months. You can also set the start date and time along with the time zone. Each time that a trigger fires, Azure Logic Apps creates and runs a new workflow instance for your logic app.
Here are the differences between these triggers:
Recurrence: Runs your workflow at regular time intervals based on your specified schedule. If the trigger misses recurrences, for example, due to disruptions or disabled workflows, theRecurrencetrigger doesn't process the missed recurrences but restarts recurrences with the next scheduled interval.If you selectDayas the frequency, you can specify the hours of the day and minutes of the hour, for example, every day at 2:30. If you selectWeekas the frequency, you can also select days of the week, such as Wednesday and Saturday. You can also specify a start date and time along with a time zone for your recurrence schedule. For more information about time zone formatting, seeAdd a Recurrence trigger.ImportantIf you use theDay,Week, orMonthfrequency, and you specify a future date and time, make sure that you set up the recurrence in advance:Day: Set up the daily recurrence at least 24 hours in advance.Week: Set up the weekly recurrence at least 7 days in advance.Month: Set up the monthly recurrence at least one month in advance.Otherwise, the workflow might skip the first recurrence.If a recurrence doesn't specify a specificstart date and time, the first recurrence
runs immediately when you save or deploy the logic app, despite your trigger's recurrence setup.
To avoid this behavior, provide a start date and time for when you want the first recurrence to run.If a recurrence doesn't specify any other advanced scheduling options such as specific times to run future recurrences,
those recurrences are based on the last run time. As a result, the start times for those recurrences might drift due to
factors such as latency during storage calls. To make sure that your workflow doesn't miss a recurrence, especially when
the frequency is in days or longer, try these options:Provide a start date and time for the recurrence plus the specific times when to run subsequent recurrences by using the
properties namedAt these hoursandAt these minutes, which are available only for theDayandWeekfrequencies.Use theSliding Window trigger, rather than theRecurrencetrigger.For more information, seeCreate, schedule, and run recurring tasks and workflows with the Recurrence trigger.
Recurrence: Runs your workflow at regular time intervals based on your specified schedule. If the trigger misses recurrences, for example, due to disruptions or disabled workflows, theRecurrencetrigger doesn't process the missed recurrences but restarts recurrences with the next scheduled interval.
If you selectDayas the frequency, you can specify the hours of the day and minutes of the hour, for example, every day at 2:30. If you selectWeekas the frequency, you can also select days of the week, such as Wednesday and Saturday. You can also specify a start date and time along with a time zone for your recurrence schedule. For more information about time zone formatting, seeAdd a Recurrence trigger.
Important
If you use theDay,Week, orMonthfrequency, and you specify a future date and time, make sure that you set up the recurrence in advance:
Day: Set up the daily recurrence at least 24 hours in advance.
Day: Set up the daily recurrence at least 24 hours in advance.
Week: Set up the weekly recurrence at least 7 days in advance.
Week: Set up the weekly recurrence at least 7 days in advance.
Month: Set up the monthly recurrence at least one month in advance.
Month: Set up the monthly recurrence at least one month in advance.
Otherwise, the workflow might skip the first recurrence.
If a recurrence doesn't specify a specificstart date and time, the first recurrence
runs immediately when you save or deploy the logic app, despite your trigger's recurrence setup.
To avoid this behavior, provide a start date and time for when you want the first recurrence to run.
If a recurrence doesn't specify any other advanced scheduling options such as specific times to run future recurrences,
those recurrences are based on the last run time. As a result, the start times for those recurrences might drift due to
factors such as latency during storage calls. To make sure that your workflow doesn't miss a recurrence, especially when
the frequency is in days or longer, try these options:
Provide a start date and time for the recurrence plus the specific times when to run subsequent recurrences by using the
properties namedAt these hoursandAt these minutes, which are available only for theDayandWeekfrequencies.
Provide a start date and time for the recurrence plus the specific times when to run subsequent recurrences by using the
properties namedAt these hoursandAt these minutes, which are available only for theDayandWeekfrequencies.
Use theSliding Window trigger, rather than theRecurrencetrigger.
Use theSliding Window trigger, rather than theRecurrencetrigger.
For more information, seeCreate, schedule, and run recurring tasks and workflows with the Recurrence trigger.
Sliding Window: Runs your workflow at regular time intervals that handle data in continuous chunks. If the trigger misses recurrences, for example, due to disruptions or disabled workflows, the Sliding Window trigger goes back and processes the missed recurrences.You can specify a start date and time, time zone, and a duration to delay each recurrence in your workflow. This trigger doesn't support advanced schedules, for example, specific hours of the day, minutes of the hour, and days of the week. For more information, seeCreate, schedule, and run recurring tasks and workflows with the Sliding Window trigger.
Sliding Window: Runs your workflow at regular time intervals that handle data in continuous chunks. If the trigger misses recurrences, for example, due to disruptions or disabled workflows, the Sliding Window trigger goes back and processes the missed recurrences.
You can specify a start date and time, time zone, and a duration to delay each recurrence in your workflow. This trigger doesn't support advanced schedules, for example, specific hours of the day, minutes of the hour, and days of the week. For more information, seeCreate, schedule, and run recurring tasks and workflows with the Sliding Window trigger.
Note
Advanced scheduling options, such asAt these hoursandAt these days, are available and
work only with built-in polling triggers, such as theRecurrenceandSliding Windowtriggers,
which directly run with the Azure Logic Apps runtime. For connectors that are Microsoft-managed,
hosted, and run in Azure, polling triggers calculate the next recurrence by using only theIntervalandFrequencyvalues, not the advanced scheduling options.

Schedule actions
After any action in your logic app workflow, you can use the Delay and Delay Until actions to make your workflow wait before the next action runs.
Delay: Wait to run the next action for the specified number of time units, such as seconds, minutes, hours, days, weeks, or months. For more information, seeDelay the next action in workflows.
Delay: Wait to run the next action for the specified number of time units, such as seconds, minutes, hours, days, weeks, or months. For more information, seeDelay the next action in workflows.
Delay until: Wait to run the next action until the specified date and time. For more information, seeDelay the next action in workflows.
Delay until: Wait to run the next action until the specified date and time. For more information, seeDelay the next action in workflows.

Patterns for start date and time
Here are some patterns that show how you can control recurrence with the start date and time, and how Azure Logic Apps runs these recurrences:
Example for past start time and recurrence but no schedule
Suppose the current date and time is September 8, 2017 at 1:00 PM. You specify the start date and time as September 7, 2017 at 2:00 PM, which is in the past, and a recurrence that runs every two days.
For theRecurrencetrigger, the Azure Logic Apps engine calculates run times based on the start time, discards past run times, uses the next future start time for the first run, and calculates future runs based on the last run time.
Here's how this recurrence looks:
So, no matter how far in the past you specify the start time, for example, 2017-09-05at 2:00 PM or 2017-09-01at 2:00 PM, your first run always uses the next future start time.
For the Sliding Window trigger, the Azure Logic Apps engine calculates run times based on the start time, honors past run times, uses the start time for the first run, and calculates future runs based on the start time.
Here's how this recurrence looks:
So, no matter how far in the past you specify the start time, for example, 2017-09-05at 2:00 PM or 2017-09-01at 2:00 PM, your first run always uses the specified start time.
Recurrence behavior
Recurring built-in triggers, such as theRecurrence trigger, run directly and natively on the Azure Logic Apps runtime. These triggers differ from recurring connection-based managed connector triggers where you need to create a connection first, such as the Office 365 Outlook managed connector trigger.
For both kinds of triggers, if a recurrence doesn't specify a start date and time, the first recurrence runs immediately when you save or deploy the logic app resource, despite your trigger's recurrence setup. To avoid this behavior, provide a start date and time for when you want the first recurrence to run.
Recurrence for built-in triggers
Recurring built-in triggers follow the schedule that you set, including any specified time zone. However, if a recurrence doesn't specify other advanced scheduling options, such as specific times to run future recurrences, those recurrences are based on the last trigger execution. As a result, the start times for those recurrences might drift due to factors such as latency during storage calls. Advanced scheduling options, such asAt these hoursandAt these daysfor theWeeklyrecurrence, are available and work only with built-in polling triggers, such as theRecurrenceandSliding Windowtriggers, which directly and natively run on the Azure Logic Apps runtime.
For more information, review the following documentation:
Trigger recurrence for daylight saving time and standard time
Troubleshoot recurrence issues
Recurrence for managed triggers
The schedule isn't the only driver that controls execution for recurring managed triggers such as Office 365 Outlook, Outlook.com, and so on. The time zone determines only the initial start time. Subsequent runs depend on the recurrence schedule, the last trigger execution, and other factors that might cause run times to drift or produce unexpected behavior, for example:
Whether the trigger accesses a server that has more data, which the trigger immediately tries to fetch.
Any failures or retries that the trigger incurs.
Latency during storage calls.
Not maintaining the specified schedule when daylight saving time (DST) starts and ends.
Other factors that can affect when the next run time happens.
Advanced scheduling options, such asAt these hoursandAt these daysfor theWeeklyrecurrence, aren't available or supported for connectors that are Microsoft-managed, hosted, and run in Azure. These polling triggers calculate the next recurrence by using only theIntervalandFrequencyvalues.
For more information, review the following documentation:
Trigger recurrence for daylight saving time and standard time
Trigger recurrence shift and drift during daylight saving time and standard time
Troubleshoot recurrence issues

Trigger recurrence for daylight saving time and standard time
To schedule jobs, Azure Logic Apps puts the message for processing into the queue and specifies when that message becomes available, based on the UTC time when the last job ran and the UTC time when the next job is scheduled to run. If you specify a start time with your recurrence,make sure that you select a time zoneso that your logic app workflow runs at the specified start time. That way, the UTC time for your logic app also shifts to counter the seasonal time change. Recurring triggers honor the schedule that you set, including any time zone that you specify.
If you don't select a time zone, daylight saving time (DST) events might affect when triggers run. For example, the start time shifts one hour forward when DST starts and one hour backward when DST ends.

Trigger recurrence shift and drift during daylight saving time and standard time
For recurring connection-based triggers, the recurrence schedule isn't the only driver that controls execution. The time zone only determines the initial start time. Subsequent runs depend on the recurrence schedule, the last trigger execution, and other factors that might cause run times to drift or produce unexpected behavior, for example:
Failure to maintain the specified schedule when daylight saving time (DST) starts and ends.
Other factors that can affect when the next run time happens.
Latency during storage calls.
Whether the trigger accesses a server that has more data, which the trigger immediately tries to fetch.
Any failures or retries that the trigger incurs.
To make sure that the recurrence time doesn't shift when DST takes effect, manually adjust the recurrence. That way, your workflow continues to run at the expected or specified start time. Otherwise, the start time shifts one hour forward when DST starts and one hour backward when DST ends.

Note
Triggers that start between 2:00 AM - 3:00 AM might have problems because DST changes happen at 2:00 AM, which might
cause the start time to become invalid or ambiguous. If you have multiple logic apps within the same ambiguous interval,
they might overlap. For this reason, you might want to avoid start times between 2:00 AM - 3:00 AM.
For example, suppose that you have two logic apps that run daily. One logic app runs at 1:30 AM local time, while the other runs an hour later at 2:30 AM local time. What happens to the starting times for these apps when DST starts and ends?
Do the triggers run at all when the time shifts one hour forward?
Do the triggers run at all when the time shifts one hour forward?
Do the triggers run twice when the time shifts one hour backward?
Do the triggers run twice when the time shifts one hour backward?
If these logic apps use the UTC-6:00 Central Time (US & Canada) zone, this simulation shows how the UTC times shifted in 2019 to counter the DST changes, moving one hour backward or forward as necessary so that the apps continued running at the expected local times without skipped or duplicate runs.
03/10/2019: DST starts at 2:00 AM, shifting time one hour forwardTo compensate after DST starts, UTC time shifts one hour backward so that your logic app continues running at the same local time:Logic app #1DateTime (local)Time (UTC)Notes03/09/20191:30:00 AM7:30:00 AMUTC before the day that DST takes effect.03/10/20191:30:00 AM7:30:00 AMUTC is the same because DST hasn't taken effect.03/11/20191:30:00 AM6:30:00 AMUTC shifted one hour backward after DST took effect.Logic app #2DateTime (local)Time (UTC)Notes03/09/20192:30:00 AM8:30:00 AMUTC before the day that DST takes effect.03/10/20193:30:00 AM*8:30:00 AMDST is already in effect, so local time has moved one hour forward because the UTC-6:00 time zone changes to UTC-5:00. For more information, seeTriggers that start between 2:00 AM - 3:00 AM.03/11/20192:30:00 AM7:30:00 AMUTC shifted one hour backward after DST took effect.
03/10/2019: DST starts at 2:00 AM, shifting time one hour forward
To compensate after DST starts, UTC time shifts one hour backward so that your logic app continues running at the same local time:
Logic app #1DateTime (local)Time (UTC)Notes03/09/20191:30:00 AM7:30:00 AMUTC before the day that DST takes effect.03/10/20191:30:00 AM7:30:00 AMUTC is the same because DST hasn't taken effect.03/11/20191:30:00 AM6:30:00 AMUTC shifted one hour backward after DST took effect.
Logic app #1
Logic app #2DateTime (local)Time (UTC)Notes03/09/20192:30:00 AM8:30:00 AMUTC before the day that DST takes effect.03/10/20193:30:00 AM*8:30:00 AMDST is already in effect, so local time has moved one hour forward because the UTC-6:00 time zone changes to UTC-5:00. For more information, seeTriggers that start between 2:00 AM - 3:00 AM.03/11/20192:30:00 AM7:30:00 AMUTC shifted one hour backward after DST took effect.
Logic app #2
11/03/2019: DST ends at 2:00 AM and shifts time one hour backwardTo compensate, UTC time shifts one hour forward so that your logic app continues running at the same local time:Logic app #1DateTime (local)Time (UTC)Notes11/02/20191:30:00 AM6:30:00 AM11/03/20191:30:00 AM6:30:00 AM11/04/20191:30:00 AM7:30:00 AMLogic app #2DateTime (local)Time (UTC)Notes11/02/20192:30:00 AM7:30:00 AM11/03/20192:30:00 AM8:30:00 AM11/04/20192:30:00 AM8:30:00 AM
11/03/2019: DST ends at 2:00 AM and shifts time one hour backward
To compensate, UTC time shifts one hour forward so that your logic app continues running at the same local time:
Logic app #1DateTime (local)Time (UTC)Notes11/02/20191:30:00 AM6:30:00 AM11/03/20191:30:00 AM6:30:00 AM11/04/20191:30:00 AM7:30:00 AM
Logic app #1
Logic app #2DateTime (local)Time (UTC)Notes11/02/20192:30:00 AM7:30:00 AM11/03/20192:30:00 AM8:30:00 AM11/04/20192:30:00 AM8:30:00 AM
Logic app #2

Run once on last day of the month
To run theRecurrencetrigger only once on the last day of the month, seeRun one time on the last day of the month.

Example recurrences
Here are various example recurrences that you can set up for the triggers that support the options:

Troubleshoot recurrence issues
To make sure that your workflow runs at your specified start time and doesn't miss a recurrence, especially when the frequency is in days or longer, try the following solutions:
When DST takes effect, manually adjust the recurrence so that your workflow continues to run at the expected time. Otherwise, the start time shifts one hour forward when DST starts and one hour backward when DST ends. For more information and examples, reviewRecurrence for daylight saving time and standard time.
When DST takes effect, manually adjust the recurrence so that your workflow continues to run at the expected time. Otherwise, the start time shifts one hour forward when DST starts and one hour backward when DST ends. For more information and examples, reviewRecurrence for daylight saving time and standard time.
If you're using aRecurrencetrigger, specify a time zone, a start date, and start time. In addition, configure specific times to run subsequent recurrences in the propertiesAt these hoursandAt these minutes, which are available only for theDayandWeekfrequencies. However, some time windows might still cause problems when the time shifts.
If you're using aRecurrencetrigger, specify a time zone, a start date, and start time. In addition, configure specific times to run subsequent recurrences in the propertiesAt these hoursandAt these minutes, which are available only for theDayandWeekfrequencies. However, some time windows might still cause problems when the time shifts.
Consider using aSliding Windowtriggerinstead of aRecurrencetrigger to avoid missed recurrences.
Consider using aSliding Windowtriggerinstead of aRecurrencetrigger to avoid missed recurrences.
Next steps
Create, schedule, and run recurring tasks and workflows with the Recurrence trigger
Create, schedule, and run recurring tasks and workflows with the Sliding Window trigger
Pause workflows with delay actions
Feedback
Was this page helpful?
Additional resources