Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Developer CLI templates overview
Article
2024-09-13
6 contributors
In this article
Azure Developer CLI (azd) templates are regular code repositories that include sample application code, as well asazdconfiguration and infrastructure files.azdtemplates enable you to provision Azure resources, deploy your application, configure CI/CD pipelines, and more. You can either create your own templates, or get started using an existing template from a template repository such asAwesome AZD. In this article, you'll learn about the following concepts:
azd
azd
azd
Howazdtemplates enable you to provision and deploy app resources
azd
Howazdtemplates are structured
azd
How to decide whether to use an existing template or create one
Explore existingazdstarter templates
azd
Why use Azure Developer CLI templates?
Developers often face many time consuming and challenging tasks when building properly architected and configured environment aware apps for the cloud. Teams must account for many different concerns in these environments, such as creating resources, applying configurations, setting up monitoring and logging, building CI/CD pipelines, and other tasks.azdtemplates reduce and streamline these responsibilities to help the developer on their journey from local development to a successfully deployed app on Azure.
azd
For example, suppose you work at a company that operates a ticket management and customer communication platform, which requires the following Azure resources:
Two App Service instances and an App Service Plan to host a front-end web app and back-end API
A Key Vault instance to store secure app secrets
A Cosmos DB database to permanently store app data
Azure Monitor resources such as Application Insights dashboards
A Service Bus to manage scalable messaging
CI/CD pipelines to ensure changes can be reliably deployed through an automated, repeatable process.
Rather than starting from the ground up, withazdyou can leverage existing architecture templates to provision and deploy most of the resources for you. The development team can then focus on building the app and making smaller adjustments to the template architecture.
azd
How Azure Developer CLI templates work
Azure Developer CLI templates are designed to work withazdcommands such asazd initandazd up. The templates include configuration and infrastructure-as-code (IaC) files that are used by the commands to perform tasks such as provisioning Azure resources and deploy the app code to them.
azd
azd init
azd up
For example, a typicalazdworkflow using an existing template includes the following steps:
azd
Run theazd initcommand with the--templateparameter to clone an existing template down from GitHub.azd init --template todo-nodejs-mongo
Run theazd initcommand with the--templateparameter to clone an existing template down from GitHub.
azd init
--template
azd init --template todo-nodejs-mongo
azd init --template todo-nodejs-mongo
Run theazd auth logincommand to authenticate to your Azure subscription.azd auth login
Run theazd auth logincommand to authenticate to your Azure subscription.
azd auth login
azd auth login
azd auth login
Run theazd upcommand to provision and deploy the template resources to Azure. Theazd upcommand leverages the configuration and infrastructure-as-code (IaC) files in your template to provision Azure resources and deploy your application to those resources.azd up
Run theazd upcommand to provision and deploy the template resources to Azure. Theazd upcommand leverages the configuration and infrastructure-as-code (IaC) files in your template to provision Azure resources and deploy your application to those resources.
azd up
azd up
azd up
azd up
Once your environment is set up in Azure, you can locally modify the application features or Azure resource templates and then runazd upagain to provision your changes.
Once your environment is set up in Azure, you can locally modify the application features or Azure resource templates and then runazd upagain to provision your changes.
azd up
Explore Azure Developer CLI template structure
azdtemplates are standard code repositories with some additional assets included. Allazdtemplates share a similar file structure based onazdconventions:
azd
azd
azd
infrafolder- Contains all of the Bicep or Terraform infrastructure as code files for theazdtemplate.azdexecutes these files to create the Azure resources required to host your app.
infra
azd
azd
azure.yamlfile- A configuration file that maps source code folders in your project to Azure resources defined in theinfrafolder for deployment. For example, you might define an API service and a web front-end service in separate folders and map them to different Azure resources for deployment.
azure.yaml
infra
.azurefolder- Contains essential Azure configurations and environment variables, such as the location to deploy resources or other subscription information.
.azure
srcfolder- Contains all of the deployable app source code. Someazdtemplates exclude thesrcfolder and only provide infrastructure assets so you can add your own application code.
src
azd
src
For example, a commonazdtemplate might match the following folder structure:
azd

azdtemplates also optionally include one or more of the following folders:
azd
.githubfolder- Holds the CI/CD workflow files for GitHub Actions, the default CI/CD provider for azd.
.github
.azdofolder- If you decide to use Azure Pipelines for CI/CD, define the workflow configuration files in this folder.
.azdo
.devcontainerfolder- Allows you to set up aDev Containerenvironment for your application.
.devcontainer
Start with an existing template or create your own
There are two main approaches to working withazdtemplates:
azd
Start with an existingazdtemplate.This is a good choice if you're just getting started withazdor if you're looking for a template to build off of for a new app with a similar architecture and frameworks.
azd
This is a good choice if you're just getting started withazdor if you're looking for a template to build off of for a new app with a similar architecture and frameworks.
azd
Convert an existing project to anazdtemplate.This is a good choice when you already have an existing app but you want to make it compatible withazdcapabilities.
azd
This is a good choice when you already have an existing app but you want to make it compatible withazdcapabilities.
azd
The following sections provide more information on these two options.
Start with an existing template
A broad selection ofazdtemplates is available on theawesome-azdtemplate gallery. These templates provide infrastructure and application code for various development scenarios, language frameworks, and Azure services. If you find a template that aligns with your local application stack or desired architecture, you can extend and replace the template code with your own
azd
For example, the followingazdtemplates provide starting points for common app architectures and frameworks:
azd
C#
Java
Node.js
Python
Starter Templates (IaC only)
Create a newazdtemplate for your app
azd
You can also convert an existing app into anazdtemplate to enhance the repository with provisioning and deployment capabilities. This approach allows for the most control and produces a reusable solution for future development work on the app. The high level steps to create your own template are as follows:
azd
Initialize the project template withazd init.
azd init
Create the Bicep or Terraform infrastructure as code files in theinfrafolder.
infra
Update theazure.yamlfile to tie the app services together with the Azure resources.
azure.yaml
Provision & deploy withazd up.
azd up
The following resources provide more information about creating your own templates:
Build your first Azure Developer CLI template
Make your project compatible withazdguide
azd
Guidelines for usingazdtemplates
azd
Please note that each template that you use with Azure Developer CLI is licensed by its respective owner (which may or may not be Microsoft) under the agreement which accompanies the template. It is your responsibility to determine what license applies to any template you choose to use.
Microsoft is not responsible for any non-Microsoft templates and does not screen these templates for security, privacy, compatibility, or performance issues. The templates you use with Azure Developer CLI, including those provided from Microsoft, are not supported by any Microsoft support program or service. Any Microsoft-provided templates are provided AS IS without warranty of any kind.
Next steps
Select and deploy a template
Feedback
Was this page helpful?
Additional resources