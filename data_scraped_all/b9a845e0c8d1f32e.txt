Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build and deploy to Azure Kubernetes Service with Azure Pipelines
Article
2025-01-30
7 contributors
In this article
Azure DevOps Services
UseAzure Pipelinesto automatically deploy to Azure Kubernetes Service (AKS). Azure Pipelines lets you build, test, and deploy with continuous integration (CI) and continuous delivery (CD) usingAzure DevOps.
In this article, you'll learn how to create a pipeline that continuously builds and deploys your app. Every time you change your code in a repository that contains a Dockerfile, the images are pushed to your Azure Container Registry, and the manifests are then deployed to your AKS cluster.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An Azure Resource Manager service connection.Create an Azure Resource Manager service connection.
A GitHub account. Create a freeGitHub accountif you don't have one already.
Get the code
Fork the following repository containing a sample application and a Dockerfile:
https://github.com/MicrosoftDocs/pipelines-javascript-docker
https://github.com/MicrosoftDocs/pipelines-javascript-docker
Create the Azure resources
Sign in to theAzure portal, and then select theCloud Shellbutton in the upper-right corner. Use Azure CLI or PowerShell to create an AKS cluster.
Create a container registry
Azure CLI
PowerShell
# Create a resource group
az group create --name myapp-rg --location eastus

# Create a container registry
az acr create --resource-group myapp-rg --name mycontainerregistry --sku Basic

# Create a Kubernetes cluster
az aks create \
    --resource-group myapp-rg \
    --name myapp \
    --node-count 1 \
    --enable-addons monitoring \
    --generate-ssh-keys
# Create a resource group
az group create --name myapp-rg --location eastus

# Create a container registry
az acr create --resource-group myapp-rg --name mycontainerregistry --sku Basic

# Create a Kubernetes cluster
az aks create \
    --resource-group myapp-rg \
    --name myapp \
    --node-count 1 \
    --enable-addons monitoring \
    --generate-ssh-keys
# Install Azure PowerShell
Install-Module -Name Az -Repository PSGallery -Force

# The Microsoft.OperationsManagement resource provider must be registered. This is a one-time activity per subscription.
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationsManagement

# Create a resource group
New-AzResourceGroup -Name myapp-rg -Location eastus

# Create a container registry
New-AzContainerRegistry -ResourceGroupName myapp-rg -Name myContainerRegistry -Sku Basic -Location eastus

# Create a log analytics workspace (or use an existing one)
New-AzOperationalInsightsWorkspace -ResourceGroupName myapp-rg -Name myWorkspace -Location eastus

# Create an AKS cluster with monitoring add-on enabled
$aksParameters = @{ 
  ResourceGroupName = 'myapp-rg'
  Name = 'myapp'
  NodeCount = 1
  AddOnNameToBeEnabled = 'Monitoring'
  GenerateSshKey = $true
  WorkspaceResourceId = '/subscriptions/<subscription-id>/resourceGroups/myapp-rg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace'
}

New-AzAksCluster @aksParameters
# Install Azure PowerShell
Install-Module -Name Az -Repository PSGallery -Force

# The Microsoft.OperationsManagement resource provider must be registered. This is a one-time activity per subscription.
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationsManagement

# Create a resource group
New-AzResourceGroup -Name myapp-rg -Location eastus

# Create a container registry
New-AzContainerRegistry -ResourceGroupName myapp-rg -Name myContainerRegistry -Sku Basic -Location eastus

# Create a log analytics workspace (or use an existing one)
New-AzOperationalInsightsWorkspace -ResourceGroupName myapp-rg -Name myWorkspace -Location eastus

# Create an AKS cluster with monitoring add-on enabled
$aksParameters = @{ 
  ResourceGroupName = 'myapp-rg'
  Name = 'myapp'
  NodeCount = 1
  AddOnNameToBeEnabled = 'Monitoring'
  GenerateSshKey = $true
  WorkspaceResourceId = '/subscriptions/<subscription-id>/resourceGroups/myapp-rg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace'
}

New-AzAksCluster @aksParameters
Sign in to Azure Pipelines
Sign in toAzure Pipelines. After you sign in, your browser goes tohttps://dev.azure.com/my-organization-nameand displays your Azure DevOps dashboard.
https://dev.azure.com/my-organization-name
Within your selected organization, create aproject. If you don't have any projects in your organization, you see aCreate a project to get startedscreen. Otherwise, select theCreate Projectbutton in the upper-right corner of the dashboard.
Create the pipeline
Connect and select your repository
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipeline.
Go toPipelines, and then selectNew pipeline.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
Do the steps of the wizard by first selectingGitHubas the location of your source code.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When you see the list of repositories, select your repository.
When you see the list of repositories, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
SelectDeploy to Azure Kubernetes Service.
SelectDeploy to Azure Kubernetes Service.
If you're prompted, select the subscription in which you created your registry and cluster.
If you're prompted, select the subscription in which you created your registry and cluster.
Select themyappcluster.
Select themyappcluster.
myapp
ForNamespace, selectExisting, and then selectdefault.
ForNamespace, selectExisting, and then selectdefault.
Select the name of your container registry.
Select the name of your container registry.
You can leave the image name set to the default.
You can leave the image name set to the default.
Set the service port to 8080.
Set the service port to 8080.
Set theEnable Review App for Pull Requestscheckbox forreview apprelated configuration to be included in the pipeline YAML autogenerated in subsequent steps.
Set theEnable Review App for Pull Requestscheckbox forreview apprelated configuration to be included in the pipeline YAML autogenerated in subsequent steps.
SelectValidate and configure.As Azure Pipelines creates your pipeline, the process will:Create aDocker registry service connectionto enable your pipeline to push images into your container registry.Create anenvironmentand a Kubernetes resource within the environment. For an RBAC-enabled cluster, the created Kubernetes resource implicitly creates ServiceAccount and RoleBinding objects in the cluster so that the created ServiceAccount can't perform operations outside the chosen namespace.Generate anazure-pipelines.ymlfile, which defines your pipeline.Generate Kubernetes manifest files. These files are generated by hydrating thedeployment.ymlandservice.ymltemplates based on selections you made. When you're ready, selectSave and run.
SelectValidate and configure.
As Azure Pipelines creates your pipeline, the process will:
Create aDocker registry service connectionto enable your pipeline to push images into your container registry.
Create aDocker registry service connectionto enable your pipeline to push images into your container registry.
Create anenvironmentand a Kubernetes resource within the environment. For an RBAC-enabled cluster, the created Kubernetes resource implicitly creates ServiceAccount and RoleBinding objects in the cluster so that the created ServiceAccount can't perform operations outside the chosen namespace.
Create anenvironmentand a Kubernetes resource within the environment. For an RBAC-enabled cluster, the created Kubernetes resource implicitly creates ServiceAccount and RoleBinding objects in the cluster so that the created ServiceAccount can't perform operations outside the chosen namespace.
Generate anazure-pipelines.ymlfile, which defines your pipeline.
Generate anazure-pipelines.ymlfile, which defines your pipeline.
Generate Kubernetes manifest files. These files are generated by hydrating thedeployment.ymlandservice.ymltemplates based on selections you made. When you're ready, selectSave and run.
Generate Kubernetes manifest files. These files are generated by hydrating thedeployment.ymlandservice.ymltemplates based on selections you made. When you're ready, selectSave and run.
SelectSave and run.
SelectSave and run.
You can change theCommit messageto something likeAdd pipeline to our repository. When you're ready, selectSave and runto commit the new pipeline into your repo, and then begin the first run of your new pipeline!
You can change theCommit messageto something likeAdd pipeline to our repository. When you're ready, selectSave and runto commit the new pipeline into your repo, and then begin the first run of your new pipeline!
See your app deploy
As your pipeline runs, watch as your build stage, and then your deployment stage, go from blue (running) to green (completed). You can select the stages and jobs to watch your pipeline in action.
Note
If you're using a Microsoft-hosted agent, you must add the IP range of the Microsoft-hosted agent to your firewall. Get the weekly list of IP ranges from theweekly JSON file, which is published every Wednesday. The new IP ranges become effective the following Monday. For more information, seeMicrosoft-hosted agents.
To find the IP ranges that are required for your Azure DevOps organization, learn how toidentify the possible IP ranges for Microsoft-hosted agents.
After the pipeline run is finished, explore what happened and then go see your app deployed. From the pipeline summary:
Select theEnvironmentstab.
Select theEnvironmentstab.
SelectView environment.
SelectView environment.
Select the instance of your app for the namespace you deployed to. If you used the defaults, then it is themyappapp in thedefaultnamespace.
Select the instance of your app for the namespace you deployed to. If you used the defaults, then it is themyappapp in thedefaultnamespace.
Select theServicestab.
Select theServicestab.
Select and copy the external IP address to your clipboard.
Select and copy the external IP address to your clipboard.
Open a new browser tab or window and enter <IP address>:8080.
Open a new browser tab or window and enter <IP address>:8080.
If you're building our sample app, thenHello worldappears in your browser.

How the pipeline builds
When you finished selecting options and then proceeded to validate and configure the pipeline Azure Pipelines created a pipeline for you, using theDeploy to Azure Kubernetes Servicetemplate.
The build stage uses theDocker taskto build and push the image to the Azure Container Registry.
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'
The deployment job uses theKubernetes manifest taskto create theimagePullSecretrequired by Kubernetes cluster nodes to pull from the Azure Container Registry resource. Manifest files are then used by the Kubernetes manifest task to deploy to the Kubernetes cluster. The manifest files,service.ymlanddeployment.yml, were generated when you used theDeploy to Azure Kubernetes Servicetemplate.
imagePullSecret
service.yml
deployment.yml
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'myenv.aksnamespace' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'myapp-default' #customize for your Kubernetes service connection
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'myapp-default' #customize for your Kubernetes service connection
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'myenv.aksnamespace' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'myapp-default' #customize for your Kubernetes service connection
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'myapp-default' #customize for your Kubernetes service connection
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'
Clean up resources
Whenever you're done with the resources you created, you can use the following command to delete them:
az group delete --name myapp-rg
az group delete --name myapp-rg
Enterywhen you're prompted.
y
Azure Kubernetes Service

Additional resources