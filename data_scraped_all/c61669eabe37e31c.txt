Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Azure Key Vault keys in JavaScript
Article
2025-04-14
3 contributors
In this article
This article shows you how to connect to Azure Key Vault by using the Azure Key Vault keys client library for JavaScript. Once connected, your code can operate on keys in the vault.
API reference|Package (npm)|Library source code|Samples|Give feedback
Prerequisites
An Azure subscription -create one for free.
Azure Key Vaultinstance. Reviewthe access policieson your Key Vault to include the permissions necessary for the specific tasks performed in code.
Node.js version LTS
Set up your project
Open a command prompt and change into your project folder. ChangeYOUR-DIRECTORYto your folder name:cd YOUR-DIRECTORY
Open a command prompt and change into your project folder. ChangeYOUR-DIRECTORYto your folder name:
YOUR-DIRECTORY
cd YOUR-DIRECTORY
cd YOUR-DIRECTORY
If you don't have apackage.jsonfile already in your directory, initialize the project to create the file:npm init -y
If you don't have apackage.jsonfile already in your directory, initialize the project to create the file:
package.json
npm init -y
npm init -y
Install the Azure Key Vault keys client library for JavaScript:npm install @azure/keyvault-keys
Install the Azure Key Vault keys client library for JavaScript:
npm install @azure/keyvault-keys
npm install @azure/keyvault-keys
If you want to use passwordless connections using Microsoft Entra ID, install the Azure Identity client library for JavaScript:npm install @azure/identity
If you want to use passwordless connections using Microsoft Entra ID, install the Azure Identity client library for JavaScript:
npm install @azure/identity
npm install @azure/identity
Authorize access and connect to Key Vault
Microsoft Entra ID provides the most secure connection by managing the connection identity (managed identity). Thispasswordlessfunctionality allows you to develop an application that doesn't require any keys stored in the code.
Before programmatically authenticating to Azure to use Azure Key Vault keys, make sure you set up your environment.

Developer authentication
Production authentication
Bash
PowerShell
Visual Studio Code
A developer should installAzure CLIand sign in interactively with theaz logincommand to log in to Azure before use the DefaultAzureCredential in code.
az login
az login
To authenticate with Azure PowerShell users can run the Connect-AzAccount cmdlet. By default, like the Azure CLI, Connect-AzAccount will launch the default web browser to authenticate a user account.
Connect-AzAccount
Connect-AzAccount
If you're using Visual Studio Code, you can also sign in to Azure with theAzure Account extension.
Use theDefaultAzureCredentialin production based on the credential mechanisms.
Build your application
As you build your application, your code interacts with two types of resources:
KeyVaultKey, which includes:ID, name, and value.Allowed operations.Type such asEC,EC-HSM,RSA,RSA-HSM,oct,oct-HSM.Properties as KeyProperties
ID, name, and value.
Allowed operations.
Type such asEC,EC-HSM,RSA,RSA-HSM,oct,oct-HSM.
EC
EC-HSM
RSA
RSA-HSM
oct
oct-HSM
Properties as KeyProperties
KeyProperties, which include the keys's metadata, such as its name, version, tags, expiration data, and whether it's enabled.
If you need the value of the KeyVaultKey, use methods that return theKeyVaultKey:
getKey
Object model
The Azure Key Vault keys client library for JavaScript includes the following clients:
KeyClient: The KeyClient object is the top object in the SDK. This client allows you to perform key management tasks such as create, rotate, delete, and list the keys.
CryptographyClientallows you to encrypt, decrypt, sign, verify, wrap and unwrap keys.

Create a KeyClient object
Once your local environment and Key Vault authorization are set up, create a JavaScript file, which includes the@azure/identityand the@azure/keyvault-keyspackages. Create a credential, such as theDefaultAzureCredential, to implement passwordless connections to your vault. Use that credential to authenticate with aKeyClientobject.
// Include required dependencies
import { DefaultAzureCredential } from '@azure/identity';  
import { KeyClient } from '@azure/keyvault-keys';  

// Authenticate to Azure
// Create KeyClient
const credential = new DefaultAzureCredential(); 
const client = new KeyClient(
    `https://${process.env.AZURE_KEYVAULT_NAME}.vault.azure.net`,
    credential
  );

// Get key
const key = await client.getKey("MyKeyName");
// Include required dependencies
import { DefaultAzureCredential } from '@azure/identity';  
import { KeyClient } from '@azure/keyvault-keys';  

// Authenticate to Azure
// Create KeyClient
const credential = new DefaultAzureCredential(); 
const client = new KeyClient(
    `https://${process.env.AZURE_KEYVAULT_NAME}.vault.azure.net`,
    credential
  );

// Get key
const key = await client.getKey("MyKeyName");
Create a CryptographyClient object
The CryptographyClient object is the operational object in the SDK, using your key to perform actions such as encrypt, decrypt, sign and verify, wrapping and unwrapping.
Use your Identity credential from your KeyClient, along with the key name, to create aCryptographyClientto perform operations.
// Include required dependencies
import { DefaultAzureCredential } from '@azure/identity';  
import {
  CryptographyClient,
  KeyClient,
  KnownEncryptionAlgorithms,
  RsaEncryptParameters
} from '@azure/keyvault-keys'; 

// Authenticate to Azure
// Create KeyClient
const credential = new DefaultAzureCredential(); 
const client = new KeyClient(
    `https://${process.env.AZURE_KEYVAULT_NAME}.vault.azure.net`,
    credential
  ); 

// Get key
const key = await client.getKey("MyKeyName");

if (key?.name) {

    // get encryption client
    const encryptClient = new CryptographyClient(key, credential);

    // encrypt data
    const encryptParams = { 
        algorithm: KnownEncryptionAlgorithms.RSAOaep256,
        plaintext: Buffer.from("Hello world!")
    }
    const encryptResult = await encryptClient.encrypt(encryptParams);
}
// Include required dependencies
import { DefaultAzureCredential } from '@azure/identity';  
import {
  CryptographyClient,
  KeyClient,
  KnownEncryptionAlgorithms,
  RsaEncryptParameters
} from '@azure/keyvault-keys'; 

// Authenticate to Azure
// Create KeyClient
const credential = new DefaultAzureCredential(); 
const client = new KeyClient(
    `https://${process.env.AZURE_KEYVAULT_NAME}.vault.azure.net`,
    credential
  ); 

// Get key
const key = await client.getKey("MyKeyName");

if (key?.name) {

    // get encryption client
    const encryptClient = new CryptographyClient(key, credential);

    // encrypt data
    const encryptParams = { 
        algorithm: KnownEncryptionAlgorithms.RSAOaep256,
        plaintext: Buffer.from("Hello world!")
    }
    const encryptResult = await encryptClient.encrypt(encryptParams);
}
See also
Package (npm)
Samples
API reference
Library source code
Give Feedback
Next steps
Create a key
Feedback
Was this page helpful?
Additional resources