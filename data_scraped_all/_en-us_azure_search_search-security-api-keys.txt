Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to Azure AI Search using keys
Article
2025-02-02
7 contributors
In this article
Azure AI Search supports both keyless and key-based authentication for connections to your search service. An API key is a unique string composed of 52 randomly generated numbers and letters. In your source code, you can specify it as anenvironment variableor as an app setting in your project, and then reference the variable on the request.
Important
When you create a search service, key-based authentication is the default, but it's not the most secure option. We recommend that you replace it withrole-based access.
Enabled by default
Key-based authentication is the default on new search services. A request made to a search service endpoint is accepted if both the request and the API key are valid, and your search service is configured to allow API keys on a request. In the Azure portal, authentication is specified on theKeyspage underSettings. EitherAPI keysorBothprovide key support.

Types of API keys
There are two kinds of keys used for authenticating a request:
1Having two allows you to roll over one key while using the second key for continued access to the service.
Visually, there's no distinction between an admin key or query key. Both keys are strings composed of 52 randomly generated alpha-numeric characters. If you lose track of what type of key is specified in your application, you cancheck the key values in the Azure portal.
Use API keys on connections
API keys are used for data plane (content) requests, such as creating or accessing an index or, any other request that's represented in theSearch REST APIs.
You can use either an API key orAzure rolesfor control plane (service) requests. When you use an API key:
Admin keys are used for creating, modifying, or deleting objects. Admin keys are also used to GET object definitions and system information.
Query keys are typically distributed to client applications that issue queries.
REST API
PowerShell
Portal
How API keys are used in REST calls:
Set an admin key in the request header. You can't pass admin keys on the URI or in the body of the request. Admin keys are used for create-read-update-delete operation and on requests issued to the search service itself, such asLIST IndexesorGET Service Statistics.
Here's an example of admin API key usage on a create index request:
### Create an index
POST {{baseUrl}}/indexes?api-version=2024-07-01  HTTP/1.1
  Content-Type: application/json
  api-key: {{adminApiKey}}

    {
        "name": "my-new-index",  
        "fields": [
            {"name": "docId", "type": "Edm.String", "key": true, "filterable": true},
            {"name": "Name", "type": "Edm.String", "searchable": true }
         ]
   }
### Create an index
POST {{baseUrl}}/indexes?api-version=2024-07-01  HTTP/1.1
  Content-Type: application/json
  api-key: {{adminApiKey}}

    {
        "name": "my-new-index",  
        "fields": [
            {"name": "docId", "type": "Edm.String", "key": true, "filterable": true},
            {"name": "Name", "type": "Edm.String", "searchable": true }
         ]
   }
Set a query key in a request header for POST, or on the URI for GET. Query keys are used for operations that target theindex/docscollection:Search Documents,Autocomplete,Suggest, orGET Document.
index/docs
Here's an example of query API key usage on a Search Documents (GET) request:
### Query an index
GET /indexes/my-new-index/docs?search=*&api-version=2024-07-01&api-key={{queryApiKey}}
### Query an index
GET /indexes/my-new-index/docs?search=*&api-version=2024-07-01&api-key={{queryApiKey}}
Note
It's considered a poor security practice to pass sensitive data such as anapi-keyin the request URI. For this reason, Azure AI Search only accepts a query key as anapi-keyin the query string. As a general rule, we recommend passing yourapi-keyas a request header.
api-key
api-key
api-key
How API keys are used in PowerShell:
Set API keys in the request header using the following syntax:
$headers = @{
'api-key' = '<YOUR-ADMIN-OR-QUERY-API-KEY>'
'Content-Type' = 'application/json' 
'Accept' = 'application/json' }
$headers = @{
'api-key' = '<YOUR-ADMIN-OR-QUERY-API-KEY>'
'Content-Type' = 'application/json' 
'Accept' = 'application/json' }
A script example showing API key usage for various operations can be found atQuickstart: Create an Azure AI Search index in PowerShell using REST APIs.
How API keys are used in the Azure portal:
Key authentication applies to data plane operations such as indexing and queries. It's enabled by default. However, if youdisable API keysand set up role assignments, the Azure portal uses role assignments instead.
Permissions to view or manage API keys
Permissions for viewing and managing API keys are conveyed throughrole assignments. Members of the following roles can view and regenerate keys:
Owner
Contributor
Search Service Contributor
Administrator and co-administrator (classic)
The following roles don't have access to API keys:
Reader
Search Index Data Contributor
Search Index Data Reader
Find existing keys
You can view and manage API keys in theAzure portal, or throughPowerShell,Azure CLI, orREST API.
Portal
PowerShell
Azure CLI
REST API
Sign in to theAzure portalandfind your search service.
Sign in to theAzure portalandfind your search service.
UnderSettings, selectKeysto view admin and query keys.
UnderSettings, selectKeysto view admin and query keys.

Install theAz.Searchmodule:Install-Module Az.Search
Install theAz.Searchmodule:
Az.Search
Install-Module Az.Search
Install-Module Az.Search
Return admin keys:Get-AzSearchAdminKeyPair -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Return admin keys:
Get-AzSearchAdminKeyPair -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Get-AzSearchAdminKeyPair -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Return query keys:Get-AzSearchQueryKey -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Return query keys:
Get-AzSearchQueryKey -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Get-AzSearchQueryKey -ResourceGroupName <resource-group-name> -ServiceName <search-service-name>
Use the following commands to return admin and query API keys, respectively:
az search admin-key show --resource-group <myresourcegroup> --service-name <myservice>

az search query-key list --resource-group <myresourcegroup> --service-name <myservice>
az search admin-key show --resource-group <myresourcegroup> --service-name <myservice>

az search query-key list --resource-group <myresourcegroup> --service-name <myservice>
UseList Admin KeysorList Query Keysin the Management REST API to return API keys.
You must have avalid role assignmentto return or update API keys. SeeManage your Azure AI Search service with REST APIsfor guidance on meeting role requirements using the REST APIs.
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resource-group}}/providers//Microsoft.Search/searchServices/{{search-service-name}}/listAdminKeys?api-version=2023-11-01
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resource-group}}/providers//Microsoft.Search/searchServices/{{search-service-name}}/listAdminKeys?api-version=2023-11-01
Create query keys
Query keys are used for read-only access to documents within an index for operations targeting a documents collection. Search, filter, and suggestion queries are all operations that take a query key. Any read-only operation that returns system data or object definitions, such as an index definition or indexer status, requires an admin key.
Restricting access and operations in client apps is essential to safeguarding the search assets on your service. Always use a query key rather than an admin key for any query originating from a client app.
Portal
PowerShell
Azure CLI
REST API
Sign in to theAzure portalandfind your search service.
Sign in to theAzure portalandfind your search service.
UnderSettings, selectKeysto view API keys.
UnderSettings, selectKeysto view API keys.
UnderManage query keys, use the query key already generated for your service, or create new query keys. The default query key isn't named, but other generated query keys can be named for manageability.
UnderManage query keys, use the query key already generated for your service, or create new query keys. The default query key isn't named, but other generated query keys can be named for manageability.

A script example showing API key usage can be found atCreate or delete query keys.
A script example showing query key usage can be found atCreate or delete query keys.
UseCreate Query Keysin the Management REST API.
You must have avalid role assignmentto create or manage API keys. SeeManage your Azure AI Search service with REST APIsfor guidance on meeting role requirements using the REST APIs.
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}?api-version=2023-11-01
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{searchServiceName}/createQueryKey/{name}?api-version=2023-11-01

Regenerate admin keys
Two admin keys are created for each service so that you can rotate a primary key while using the secondary key for business continuity.
UnderSettings, selectKeys, then copy the secondary key.
UnderSettings, selectKeys, then copy the secondary key.
For all applications, update the API key settings to use the secondary key.
For all applications, update the API key settings to use the secondary key.
Regenerate the primary key.
Regenerate the primary key.
Update all applications to use the new primary key.
Update all applications to use the new primary key.
If you inadvertently regenerate both keys at the same time, all client requests using those keys will fail with HTTP 403 Forbidden. However, content isn't deleted and you aren't locked out permanently.
You can still access the service through the Azure portal or programmatically. Management functions are operative through a subscription ID not a service API key, and are thus still available even if your API keys aren't.
After you create new keys via portal or management layer, access is restored to your content (indexes, indexers, data sources, synonym maps) once you provide those keys on requests.
Secure API keys
Use role assignments to restrict access to API keys.
It's not possible to usecustomer-managed key encryptionto encrypt API keys. Only sensitive data within the search service itself (for example, index content or connection strings in data source object definitions) can be CMK-encrypted.
Navigate to your search service page in Azure portal.
Navigate to your search service page in Azure portal.
On the left pane, selectAccess control (IAM), and then select theRole assignmentstab.
On the left pane, selectAccess control (IAM), and then select theRole assignmentstab.
In theRolefilter, select the roles that have permission to view or manage keys (Owner, Contributor, Search Service Contributor). The resulting security principals assigned to those roles have key permissions on your search service.
In theRolefilter, select the roles that have permission to view or manage keys (Owner, Contributor, Search Service Contributor). The resulting security principals assigned to those roles have key permissions on your search service.
As a precaution, also check theClassic administratorstab to determine whether administrators and co-administrators have access.
As a precaution, also check theClassic administratorstab to determine whether administrators and co-administrators have access.
Best practices
For production workloads, switch toMicrosoft Entra ID and role-based access. Or, if you want to continue using API keys, be sure to always monitorwho has access to your API keysandregenerate API keyson a regular cadence.
For production workloads, switch toMicrosoft Entra ID and role-based access. Or, if you want to continue using API keys, be sure to always monitorwho has access to your API keysandregenerate API keyson a regular cadence.
Only use API keys if data disclosure isn't a risk (for example, when using sample data) and if you're operating behind a firewall. Exposure of API keys is a risk to both data and to unauthorized use of your search service.
Only use API keys if data disclosure isn't a risk (for example, when using sample data) and if you're operating behind a firewall. Exposure of API keys is a risk to both data and to unauthorized use of your search service.
If you use an API key, store it securely somewhere else, such as inAzure Key Vault. Don't include the API key directly in your code, and never post it publicly.
If you use an API key, store it securely somewhere else, such as inAzure Key Vault. Don't include the API key directly in your code, and never post it publicly.
Always check code, samples, and training material before publishing to make sure you don't inadvertently expose an API key.
Always check code, samples, and training material before publishing to make sure you don't inadvertently expose an API key.
See also
Security in Azure AI Search
Azure role-based access control in Azure AI Search
Manage using PowerShell
Feedback
Was this page helpful?
Additional resources