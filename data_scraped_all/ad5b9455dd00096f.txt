Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure directory and file-level permissions for Azure file shares
Article
2025-04-02
2 contributors
In this article
Before you begin this article, make sure you've readAssign share-level permissions to an identityto ensure that your share-level permissions are in place with Azure role-based access control (RBAC).
After you assign share-level permissions, you can configure Windows access control lists (ACLs), also known as NTFS permissions, at the root, directory, or file level. While share-level permissions act as a high-level gatekeeper that determines whether a user can access the share, Windows ACLs operate at a more granular level to control what operations the user can do at the directory or file level.
Both share-level and file/directory-level permissions are enforced when a user attempts to access a file/directory. If there's a difference between either of them, only the most restrictive one will be applied. For example, if a user has read/write access at the file level, but only read at a share level, then they can only read that file. The same would be true if it was reversed: if a user had read/write access at the share-level, but only read at the file-level, they can still only read the file.
Important
To configure Windows ACLs, you'll need a client machine running Windows that has unimpeded network connectivity to the domain controller. If you're authenticating with Azure Files using Active Directory Domain Services (AD DS) or Microsoft Entra Kerberos for hybrid identities, this means you'll need unimpeded network connectivity to the on-premises AD. If you're using Microsoft Entra Domain Services, then the client machine must have unimpeded network connectivity to the domain controllers for the domain that's managed by Microsoft Entra Domain Services, which are located in Azure.
Applies to
Supported Windows ACLs
Azure Files supports the full set of basic and advanced Windows ACLs.
BUILTIN\Administrators
BUILTIN\Users
NT AUTHORITY\Authenticated Users
BUILTIN\Users
NT AUTHORITY\Authenticated Users
NT AUTHORITY\SYSTEM
NT AUTHORITY\Authenticated Users
CREATOR OWNER
CREATOR OWNER
The following permissions are included on the root directory of a file share:
BUILTIN\Administrators:(OI)(CI)(F)
BUILTIN\Administrators:(OI)(CI)(F)
BUILTIN\Users:(RX)
BUILTIN\Users:(RX)
BUILTIN\Users:(OI)(CI)(IO)(GR,GE)
BUILTIN\Users:(OI)(CI)(IO)(GR,GE)
NT AUTHORITY\Authenticated Users:(OI)(CI)(M)
NT AUTHORITY\Authenticated Users:(OI)(CI)(M)
NT AUTHORITY\SYSTEM:(OI)(CI)(F)
NT AUTHORITY\SYSTEM:(OI)(CI)(F)
NT AUTHORITY\SYSTEM:(F)
NT AUTHORITY\SYSTEM:(F)
CREATOR OWNER:(OI)(CI)(IO)(F)
CREATOR OWNER:(OI)(CI)(IO)(F)
For more information on these advanced permissions, seethe command-line reference for icacls.
How it works
There are two approaches you can take to configuring and editing Windows ACLs:
Log in with username and storage account key every time: Anytime you want to configure ACLs, mount the file share by using your storage account key on a machine that has unimpeded network connectivity to the domain controller.
Log in with username and storage account key every time: Anytime you want to configure ACLs, mount the file share by using your storage account key on a machine that has unimpeded network connectivity to the domain controller.
One-time username/storage account key setup:
One-time username/storage account key setup:
Note
This setup works for newly created file shares because any new file/directory will inherit the configured root permission. For file shares migrated along with existing ACLs, or if you migrate any on premises file/directory with existing permissions in a new file share, this approach might not work because the migrated files don't inherit the configured root ACL.
Log in with a username and storage account key on a machine that has unimpeded network connectivity to the domain controller, and give some users (or groups) permission to edit permissions on the root of the file share.
Assign those users theStorage File Data SMB Share Elevated ContributorAzure RBAC role.
In the future, anytime you want to update ACLs, you can use one of those authorized users to log in from a machine that has unimpeded network connectivity to the domain controller and edit ACLs.
Mount the file share using your storage account key
Before you configure Windows ACLs, you must first mount the file share by using your storage account key. To do this, log in to a domain-joined device (as a Microsoft Entra user if your AD source is Microsoft Entra Domain Services), open a Windows command prompt, and run the following command. Remember to replace<YourStorageAccountName>,<FileShareName>, and<YourStorageAccountKey>with your own values. If Z: is already in use, replace it with an available drive letter. You can find your storage account key in the Azure portal by navigating to the storage account and selectingSecurity + networking>Access keys, or you can use theGet-AzStorageAccountKeyPowerShell cmdlet.
<YourStorageAccountName>
<FileShareName>
<YourStorageAccountKey>
Get-AzStorageAccountKey
It's important that you use thenet useWindows command to mount the share at this stage and not PowerShell. If you use PowerShell to mount the share, then the share won't be visible to Windows File Explorer or cmd.exe, and you'll have difficulty configuring Windows ACLs.
net use
Note
You might see theFull ControlACL applied to a role already. This typically already offers the ability to assign permissions. However, because there are access checks at two levels (the share level and the file/directory level), this is restricted. Only users who have theStorage File Data SMB Share Elevated Contributorrole and create a new file or directory can assign permissions on those new files or directories without using the storage account key. All other file/directory permission assignment requires connecting to the share using the storage account key first.
net use Z: \\<YourStorageAccountName>.file.core.windows.net\<FileShareName> /user:localhost\<YourStorageAccountName> <YourStorageAccountKey>
net use Z: \\<YourStorageAccountName>.file.core.windows.net\<FileShareName> /user:localhost\<YourStorageAccountName> <YourStorageAccountKey>
Configure Windows ACLs
You can configure the Windows ACLs using eithericaclsorWindows File Explorer. You can also use theSet-ACLPowerShell command.
If you have directories or files in on-premises file servers with Windows ACLs configured against the AD DS identities, you can copy them over to Azure Files persisting the ACLs with traditional file copy tools like Robocopy orAzure AzCopy v 10.4+. If your directories and files are tiered to Azure Files through Azure File Sync, your ACLs are carried over and persisted in their native format.
Important
If you're using Microsoft Entra Kerberos as your AD source, identities must be synced to Microsoft Entra ID in order for ACLs to be enforced.You can set file/directory level ACLs for identities that aren't synced to Microsoft Entra ID. However, these ACLs won't be enforced because the Kerberos ticket used for authentication/authorization won't contain the not-synced identities. If you're using on-premises AD DS as your AD source, you can have not-synced identities in the ACLs. AD DS will put those SIDs in the Kerberos ticket, and ACLs will be enforced.
Configure Windows ACLs with icacls
To grant full permissions to all directories and files under the file share, including the root directory, run the following Windows command from a machine that has unimpeded network connectivity to the AD domain controller. Remember to replaceÂ the placeholder values in the example with your own values. If your AD source is Microsoft Entra Domain Services, then<user-upn>will be<user-email>.
<user-upn>
<user-email>
icacls <mapped-drive-letter>: /grant <user-upn>:(f)
icacls <mapped-drive-letter>: /grant <user-upn>:(f)
For more information on how to use icacls to set Windows ACLs and on the different types of supported permissions, seethe command-line reference for icacls.
Configure Windows ACLs with Windows File Explorer
If you're logged on to a domain-joined Windows client, you can use Windows File Explorer to grant full permission to all directories and files under the file share, including the root directory.
Important
If your client isn't domain joined, or if your environment has multiple AD forests, don't use Windows Explorer to configure ACLs.Use icaclsinstead. This is because Windows File Explorer ACL configuration requires the client to be domain joined to the AD domain that the storage account is joined to.
Follow these steps to configure ACLs using Windows File Explorer.
Open Windows File Explorer, right click on the file/directory, and selectProperties.
Select theSecuritytab.
SelectEdit..to change permissions.
You can change the permissions of existing users or selectAdd...to grant permissions to new users.
In the prompt window for adding new users, enter the target username you want to grant permissions to in theEnter the object names to selectbox, and selectCheck Namesto find the full UPN name of the target user. You might need to specify domain name and domain GUID for your on-premises AD. You can get this information from your domain admin or from an on-premises AD-joined client.
SelectOK.
In theSecuritytab, select all permissions you want to grant your new user.
SelectApply.
Next step
Now that you've configured directory and file-level permissions, you canmount the file share.
Feedback
Was this page helpful?
Additional resources