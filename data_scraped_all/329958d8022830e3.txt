Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
TwineAuthenticate@1 - Python twine upload authenticate v1 task
Article
2025-03-24
4 contributors
In this article
Use this task to authenticate uploads of Python distributions using twine. Add-r FeedName/EndpointName --config-file $(PYPIRC_PATH)to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.
-r FeedName/EndpointName --config-file $(PYPIRC_PATH)
-r
Syntax
# Python twine upload authenticate v1
# Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.
- task: TwineAuthenticate@1
  inputs:
  # Feeds and Authentication
    #artifactFeed: # string. My feed name (select below). 
    #pythonUploadServiceConnection: # string. Feed from external organizations.
# Python twine upload authenticate v1
# Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.
- task: TwineAuthenticate@1
  inputs:
  # Feeds and Authentication
    #artifactFeed: # string. My feed name (select below). 
    #pythonUploadServiceConnection: # string. Feed from external organizations.
# Python twine upload authenticate v1
# Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.
- task: TwineAuthenticate@1
  inputs:
  # Feeds and Authentication
    #artifactFeed: # string. My feed (select below). 
    #pythonUploadServiceConnection: # string. Feed from external organizations.
# Python twine upload authenticate v1
# Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.
- task: TwineAuthenticate@1
  inputs:
  # Feeds and Authentication
    #artifactFeed: # string. My feed (select below). 
    #pythonUploadServiceConnection: # string. Feed from external organizations.
Inputs
artifactFeed-My feed name (select below)string.
artifactFeed
string
Specifies the Azure artifact's feed name to authenticate with twine. The authenticating feed must be present within the organization. For project-scoped feeds, use the syntaxprojectName/feedNameSelect.
projectName/feedNameSelect
artifactFeed-My feed (select below)string.
artifactFeed
string
Specifies the Azure artifact's feed name to authenticate with twine. The authenticating feed must be present within the organization. For project-scoped feeds, use the syntaxprojectName/feedNameSelect.
projectName/feedNameSelect
pythonUploadServiceConnection-Feed from external organizationsstring.
pythonUploadServiceConnection
string
Atwine service connectionname from an external organization to authenticate with twine. The credentials stored in the endpoint must have package upload permissions.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Providestwinecredentials to aPYPIRC_PATHenvironment variable for the scope of the build. This enables you to publish Python packages to feeds withtwinefrom your build.
twine
PYPIRC_PATH
twine
When in my pipeline should I run this task?
My agent is behind a web proxy. Will TwineAuthenticate set up twine to use my proxy?
My Pipeline needs to access a feed in a different project
When in my pipeline should I run this task?
This task must run before you use twine to upload Python distributions to an authenticated package source, such as Azure Artifacts. There are no other ordering requirements. Multiple invocations of this task will not stack credentials. Every task run will erase any previously stored credentials.
My agent is behind a web proxy. Will TwineAuthenticate set up twine to use my proxy?
No. While this task itself will work behind aweb proxy your agent has been configured to use, it does not configure twine to use the proxy.
My Pipeline needs to access a feed in a different project
If the pipeline is running in a different project than the project hosting the feed, you must set up the other project to grant read/write access to the build service. SeePackage permissions in Azure Pipelinesfor more details.
Examples
The following examples demonstrate how to publish python distribution to Azure Artifacts feed and the official python registry.
Publish Python distribution to Azure Artifacts feed
Publish Python distribution to the official Python registry
Publish Python distribution to Azure Artifacts feed
In this example, we are setting authentication for publishing to a private Azure Artifacts Feed. The authenticate task creates a.pypircfile that contains the auth credentials required to publish a distribution to the feed.
.pypirc
# Install python distributions like wheel, twine etc
- script: |
â¯â¯   pip install wheel
â¯â¯   pip install twine
â¯ 
# Build the python distribution from source
- script: |
â¯â¯   python setup.py bdist_wheel
â¯  
- task: TwineAuthenticate@1
â¯ displayName: Twine Authenticate
â¯ inputs:
â¯â¯â¯ # In this case, name of the feed is 'myTestFeed' in the project 'myTestProject'. Project is needed because the feed is project scoped.
â¯â¯â¯ artifactFeed: myTestProject/myTestFeed
â¯ 
# Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
- script: |
â¯â¯   python -m twine upload -r myTestFeed --config-file $(PYPIRC_PATH) dist/*.whl
# Install python distributions like wheel, twine etc
- script: |
â¯â¯   pip install wheel
â¯â¯   pip install twine
â¯ 
# Build the python distribution from source
- script: |
â¯â¯   python setup.py bdist_wheel
â¯  
- task: TwineAuthenticate@1
â¯ displayName: Twine Authenticate
â¯ inputs:
â¯â¯â¯ # In this case, name of the feed is 'myTestFeed' in the project 'myTestProject'. Project is needed because the feed is project scoped.
â¯â¯â¯ artifactFeed: myTestProject/myTestFeed
â¯ 
# Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
- script: |
â¯â¯   python -m twine upload -r myTestFeed --config-file $(PYPIRC_PATH) dist/*.whl
TheartifactFeedinput will contain the project and the feed name if the feed is project scoped. If the feed is organization scoped, only the feed name must be provided.Learn more.
artifactFeed
Publish Python distribution to the official Python registry
In this example, we are setting up authentication for publishing to the official Python registry. Create atwine service connectionentry forpypi. The authenticate task uses that service connection to create a.pypircfile that contains the auth credentials required to publish the distribution.
.pypirc
# Install python distributions like wheel, twine etc
- script: |
â¯â¯   pip install wheel
â¯â¯   pip install twine
â¯ 
# Build the python distribution from source
- script: |
â¯â¯   python setup.py bdist_wheel
â¯  
- task: TwineAuthenticate@1
â¯ displayName: Twine Authenticate
â¯ inputs:
â¯â¯â¯ # In this case, name of the service connection is "pypitest".
â¯â¯â¯ pythonUploadServiceConnection: pypitest
â¯ 
# Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
- script: |
â¯â¯   python -m twine upload -r "pypitest" --config-file $(PYPIRC_PATH) dist/*.whl
# Install python distributions like wheel, twine etc
- script: |
â¯â¯   pip install wheel
â¯â¯   pip install twine
â¯ 
# Build the python distribution from source
- script: |
â¯â¯   python setup.py bdist_wheel
â¯  
- task: TwineAuthenticate@1
â¯ displayName: Twine Authenticate
â¯ inputs:
â¯â¯â¯ # In this case, name of the service connection is "pypitest".
â¯â¯â¯ pythonUploadServiceConnection: pypitest
â¯ 
# Use command line script to 'twine upload', use -r to pass the repository name and --config-file to pass the environment variable set by the authenticate task.
- script: |
â¯â¯   python -m twine upload -r "pypitest" --config-file $(PYPIRC_PATH) dist/*.whl
Requirements
Feedback
Was this page helpful?
Additional resources