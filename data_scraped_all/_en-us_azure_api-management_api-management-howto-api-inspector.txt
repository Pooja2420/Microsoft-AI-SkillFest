Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Debug your APIs using request tracing
Article
2025-02-05
17 contributors
In this article
APPLIES TO: All API Management tiers
This tutorial describes how to inspect (trace) request processing in Azure API Management. Tracing helps you debug and troubleshoot your API.
Tip
API teams can use this feature inworkspaces. Workspaces provide isolated administrative access to APIs and their own API runtime environments.
In this tutorial, you learn how to:
Trace an example call in the test console
Review request processing steps
Enable tracing for an API

Prerequisites
Learn theAzure API Management terminology.
Complete the following quickstart:Create an Azure API Management instance.
Complete the following tutorial:Import and publish your first API.
Important
API Management no longer supports subscriptions for tracing or theOcp-Apim-Traceheader.
To improve API security, tracing can now be enabled at the level of an individual API by obtaining a time-limited token using the API Management REST API, and passing the token in a request to the gateway. For details, seeEnable tracing of an API.
Take care when enabling tracing, as it can expose sensitive information in the trace data. Ensure that you have appropriate security measures in place to protect the trace data.
Trace a call in the portal
Follow these steps to trace an API request in the test console in the portal. This example assumes that youimporteda sample API in a previous tutorial. You can follow similar steps with a different API that you imported.
Sign in to theAzure portal, and navigate to your API Management instance.
Sign in to theAzure portal, and navigate to your API Management instance.
SelectAPIs>APIs.
SelectAPIs>APIs.
SelectPetstore APIfrom your API list.
SelectPetstore APIfrom your API list.
Select theTesttab.
Select theTesttab.
Select theFind pet by IDoperation.
Select theFind pet by IDoperation.
In thepetIdQuery parameter, enter1.
In thepetIdQuery parameter, enter1.
Optionally check the value for theOcp-Apim-Subscription-Keyheader used in the request by selecting the "eye" icon.TipYou can override the value ofOcp-Apim-Subscription-Keyby retrieving a key for another subscription in the portal. SelectSubscriptions, and open the context menu (...) for another subscription. SelectShow/hide keysand copy one of the keys. You can also regenerate keys if needed. Then, in the test console, select+ Add headerto add anOcp-Apim-Subscription-Keyheader with the new key value.
Optionally check the value for theOcp-Apim-Subscription-Keyheader used in the request by selecting the "eye" icon.
Tip
You can override the value ofOcp-Apim-Subscription-Keyby retrieving a key for another subscription in the portal. SelectSubscriptions, and open the context menu (...) for another subscription. SelectShow/hide keysand copy one of the keys. You can also regenerate keys if needed. Then, in the test console, select+ Add headerto add anOcp-Apim-Subscription-Keyheader with the new key value.
SelectTrace.
SelectTrace.
Review trace information
After the call completes, go to theTracetab in theHTTP response.
After the call completes, go to theTracetab in theHTTP response.
Select any of the following links to jump to detailed trace info:Inbound,Backend,Outbound,On error.Inbound- Shows the original request API Management received from the caller and the policies applied to the request. For example, if you added policies inTutorial: Transform and protect your API, they appear here.Backend- Shows the requests API Management sent to the API backend and the response it received.Outbound- Shows the policies applied to the response before sending back to the caller.On error- Shows the errors that occurred during the processing of the request and the policies applied to the errors.TipEach step also shows the elapsed time since the request is received by API Management.
Select any of the following links to jump to detailed trace info:Inbound,Backend,Outbound,On error.

Inbound- Shows the original request API Management received from the caller and the policies applied to the request. For example, if you added policies inTutorial: Transform and protect your API, they appear here.
Inbound- Shows the original request API Management received from the caller and the policies applied to the request. For example, if you added policies inTutorial: Transform and protect your API, they appear here.
Backend- Shows the requests API Management sent to the API backend and the response it received.
Backend- Shows the requests API Management sent to the API backend and the response it received.
Outbound- Shows the policies applied to the response before sending back to the caller.
Outbound- Shows the policies applied to the response before sending back to the caller.
On error- Shows the errors that occurred during the processing of the request and the policies applied to the errors.
On error- Shows the errors that occurred during the processing of the request and the policies applied to the errors.
Tip
Each step also shows the elapsed time since the request is received by API Management.
Enable tracing for an API
The following high level steps are required to enable tracing for a request to API Management when usingcurl, a REST client such as Visual Studio Code with the REST Client extension, or a client app. Currently these steps must be followed using theAPI Management REST API:
curl
Obtain a debug token for tracing.
Add the token value in anApim-Debug-Authorizationrequest header to the API Management gateway.
Apim-Debug-Authorization
Obtain a trace ID in theApim-Trace-Idresponse header.
Apim-Trace-Id
Retrieve the trace corresponding to the trace ID.
Detailed steps follow.
Note
These steps require API Management REST API version 2023-05-01-preview or later. You must be assigned the Contributor or higher role on the API Management instance to call the REST API.
For information about authenticating to the REST API, seeAzure REST API reference.
Obtain a debug token- Call the API Management gateway'sList debug credentialsAPI. In the URI, enter "managed" for the instance's managed gateway in the cloud, or the gateway ID for a self-hosted gateway. For example, to obtain trace credentials for the instance's managed gateway, use a request similar to the following:POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listDebugCredentials?api-version=2023-05-01-previewIn the request body, pass the full resource ID of the API that you want to trace, and specifypurposesastracing. By default the token credential returned in the response expires after 1 hour, but you can specify a different value in the payload. Note that the expiry time is limited to a maximum of 1 hour. For example:{
    "credentialsExpireAfter": "PT1H",
    "apiId": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
    "purposes": ["tracing"]
}NoteTheapiIdcan only be pulled from the full resource ID, not the name displayed in the portal.Get apiId:az apim api list --resource-group <resource-group> --service-name <service-name> -o tableThe debug credential is returned in the response, similar to the following:{
      "token": "aid=api-name&......."
}
Obtain a debug token- Call the API Management gateway'sList debug credentialsAPI. In the URI, enter "managed" for the instance's managed gateway in the cloud, or the gateway ID for a self-hosted gateway. For example, to obtain trace credentials for the instance's managed gateway, use a request similar to the following:
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listDebugCredentials?api-version=2023-05-01-preview
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listDebugCredentials?api-version=2023-05-01-preview
In the request body, pass the full resource ID of the API that you want to trace, and specifypurposesastracing. By default the token credential returned in the response expires after 1 hour, but you can specify a different value in the payload. Note that the expiry time is limited to a maximum of 1 hour. For example:
purposes
tracing
{
    "credentialsExpireAfter": "PT1H",
    "apiId": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
    "purposes": ["tracing"]
}
{
    "credentialsExpireAfter": "PT1H",
    "apiId": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}",
    "purposes": ["tracing"]
}
Note
TheapiIdcan only be pulled from the full resource ID, not the name displayed in the portal.
apiId
Get apiId:
az apim api list --resource-group <resource-group> --service-name <service-name> -o table
az apim api list --resource-group <resource-group> --service-name <service-name> -o table
The debug credential is returned in the response, similar to the following:
{
      "token": "aid=api-name&......."
}
{
      "token": "aid=api-name&......."
}
Add the token value in a request header- To enable tracing for a request to the API Management gateway, send the token value in anApim-Debug-Authorizationheader. For example, to trace a call to the Petstore API that you imported in a previous tutorial, you might use a request similar to the following:curl -v https://apim-hello-world.azure-api.net/pet/1 HTTP/1.1 \
    -H "Ocp-Apim-Subscription-Key: <subscription-key>" \
    -H "Apim-Debug-Authorization: aid=api-name&......."
Add the token value in a request header- To enable tracing for a request to the API Management gateway, send the token value in anApim-Debug-Authorizationheader. For example, to trace a call to the Petstore API that you imported in a previous tutorial, you might use a request similar to the following:
Apim-Debug-Authorization
curl -v https://apim-hello-world.azure-api.net/pet/1 HTTP/1.1 \
    -H "Ocp-Apim-Subscription-Key: <subscription-key>" \
    -H "Apim-Debug-Authorization: aid=api-name&......."
curl -v https://apim-hello-world.azure-api.net/pet/1 HTTP/1.1 \
    -H "Ocp-Apim-Subscription-Key: <subscription-key>" \
    -H "Apim-Debug-Authorization: aid=api-name&......."
Evaluate the response- The response can contain one of the following headers depending on the state of the debug token:If the debug token is valid, the response includes anApim-Trace-Idheader whose value is the trace ID, similar to the following:Apim-Trace-Id: 0123456789abcdef....If the debug token is expired, the response includes anApim-Debug-Authorization-Expiredheader with information about expiration date.If the debug token was obtained for a different API, the response includes anApim-Debug-Authorization-WrongAPIheader with an error message.
Evaluate the response- The response can contain one of the following headers depending on the state of the debug token:
If the debug token is valid, the response includes anApim-Trace-Idheader whose value is the trace ID, similar to the following:Apim-Trace-Id: 0123456789abcdef....
If the debug token is valid, the response includes anApim-Trace-Idheader whose value is the trace ID, similar to the following:
Apim-Trace-Id
Apim-Trace-Id: 0123456789abcdef....
Apim-Trace-Id: 0123456789abcdef....
If the debug token is expired, the response includes anApim-Debug-Authorization-Expiredheader with information about expiration date.
If the debug token is expired, the response includes anApim-Debug-Authorization-Expiredheader with information about expiration date.
Apim-Debug-Authorization-Expired
If the debug token was obtained for a different API, the response includes anApim-Debug-Authorization-WrongAPIheader with an error message.
If the debug token was obtained for a different API, the response includes anApim-Debug-Authorization-WrongAPIheader with an error message.
Apim-Debug-Authorization-WrongAPI
Retrieve the trace- Pass the trace ID obtained in the previous step to the gateway'sList traceAPI. For example, to retrieve the trace for the managed gateway, use a request similar to the following:POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listTrace?api-version=2023-05-01-previewIn the request body, pass the trace ID obtained in the previous step.{
    "traceId": "0123456789abcdef...."
}The response body contains the trace data for the previous API request to the gateway. The trace is similar to the trace you can see by tracing a call in the portal's test console.
Retrieve the trace- Pass the trace ID obtained in the previous step to the gateway'sList traceAPI. For example, to retrieve the trace for the managed gateway, use a request similar to the following:
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listTrace?api-version=2023-05-01-preview
POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/gateways/managed/listTrace?api-version=2023-05-01-preview
In the request body, pass the trace ID obtained in the previous step.
{
    "traceId": "0123456789abcdef...."
}
{
    "traceId": "0123456789abcdef...."
}
The response body contains the trace data for the previous API request to the gateway. The trace is similar to the trace you can see by tracing a call in the portal's test console.
Example.httpfile for VS Code REST Client extension
.http
To help automate these steps with theVisual Studio Code REST Clientextension, you can use the following example.httpfile:
.http
@subscriptionId = // Your subscription ID
@resourceGroup = // Your resource group
@apimName = // Your API Management service name
@clientId = // Client ID from an app registration for authentication
@clientSecret = // Client secret from app registration
@externalHost = // The host name of the App Gateway or the fully qualified gateway URL
@subscriptionKey = // API Management subscription key
@apiEndPoint = // API URL
@requestBody = // Data to send
@tenantId = // Tenant ID
 
POST https://login.microsoftonline.com/{tenantId}/oauth2/token
content-type: application/x-www-form-urlencoded
 
grant_type=client_credentials&client_id={{clientId}}&client_secret={{clientSecret}}&resource=https%3A%2F%2Fmanagement.azure.com%2F
 
###
@authToken = {{login.response.body.$.access_token}}
###
# @name listDebugCredentials
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/gateways/managed/listDebugCredentials?api-version=2023-05-01-preview
Authorization: Bearer {{authToken}}
Content-Type: application/json
{
    "credentialsExpireAfter": "PT1H",
    "apiId": "/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/apis/{{apiId}}",
    "purposes": ["tracing"]
}
 
###
@debugToken = {{listDebugCredentials.response.body.$.token}}
 
###
# @name callApi
curl -k -H "Apim-Debug-Authorization: {{debugToken}}" -H 'Host: {{externalHost}}' -H 'Ocp-Apim-Subscription-Key: {{subscriptionKey}}' -H 'Content-Type: application/json' '{{apiEndPoint}}' -d '{{requestBody}}'
 
###
@traceId = {{callApi.response.headers.Apim-Trace-Id}}
 
###
# @name getTrace
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/gateways/managed/listTrace?api-version=2024-06-01-preview
Authorization: Bearer {{authToken}}
Content-Type: application/json
 
{
    "traceId": "{{traceId}}"
}
@subscriptionId = // Your subscription ID
@resourceGroup = // Your resource group
@apimName = // Your API Management service name
@clientId = // Client ID from an app registration for authentication
@clientSecret = // Client secret from app registration
@externalHost = // The host name of the App Gateway or the fully qualified gateway URL
@subscriptionKey = // API Management subscription key
@apiEndPoint = // API URL
@requestBody = // Data to send
@tenantId = // Tenant ID
 
POST https://login.microsoftonline.com/{tenantId}/oauth2/token
content-type: application/x-www-form-urlencoded
 
grant_type=client_credentials&client_id={{clientId}}&client_secret={{clientSecret}}&resource=https%3A%2F%2Fmanagement.azure.com%2F
 
###
@authToken = {{login.response.body.$.access_token}}
###
# @name listDebugCredentials
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/gateways/managed/listDebugCredentials?api-version=2023-05-01-preview
Authorization: Bearer {{authToken}}
Content-Type: application/json
{
    "credentialsExpireAfter": "PT1H",
    "apiId": "/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/apis/{{apiId}}",
    "purposes": ["tracing"]
}
 
###
@debugToken = {{listDebugCredentials.response.body.$.token}}
 
###
# @name callApi
curl -k -H "Apim-Debug-Authorization: {{debugToken}}" -H 'Host: {{externalHost}}' -H 'Ocp-Apim-Subscription-Key: {{subscriptionKey}}' -H 'Content-Type: application/json' '{{apiEndPoint}}' -d '{{requestBody}}'
 
###
@traceId = {{callApi.response.headers.Apim-Trace-Id}}
 
###
# @name getTrace
POST https://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.ApiManagement/service/{{apimName}}/gateways/managed/listTrace?api-version=2024-06-01-preview
Authorization: Bearer {{authToken}}
Content-Type: application/json
 
{
    "traceId": "{{traceId}}"
}
For information about customizing trace information, see thetracepolicy.
Next steps
In this tutorial, you learned how to:
Trace an example call in the test console
Review request processing steps
Enable tracing for an API
Advance to the next tutorial:
Use revisions
Feedback
Was this page helpful?
Additional resources