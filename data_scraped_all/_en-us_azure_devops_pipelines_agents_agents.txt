Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Pipelines agents
Article
2025-02-18
34 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
To build your code or deploy your software using Azure Pipelines, you need at least one agent. As your codebase and team grow, you need more agents.
When your pipeline runs, the system begins one or more jobs.
An agent is computing infrastructure with installed agent software that runs one job at a time.
Azure Pipelines provides several different types of agents.
Jobs can be rundirectly on the host machine of the agentorin a container.
Microsoft-hosted agents
If your pipelines are in Azure Pipelines, then you've got a convenient option to run your jobs using aMicrosoft-hosted agent. With Microsoft-hosted agents, maintenance and upgrades are taken care of for you. You always get the latest version of the VM image you specify in your pipeline. Each time you run a pipeline, you get a fresh virtual machine for each job in the pipeline. The virtual machine is discarded after one job (which means any change that a job makes to the virtual machine file system, such as checking out code, will be unavailable to the next job). Microsoft-hosted agents can run jobsdirectly on the VMorin a container.
Azure Pipelines provides a predefined agent pool namedAzure Pipelineswith Microsoft-hosted agents.
For many teams this is the simplest way to run your jobs. You can try it first and see if it works for your build or deployment. If not, you can usescale set agentsor a self-hosted agent.
Tip
You can try a Microsoft-hosted agent for no charge.
Learn more about Microsoft-hosted agents.

Self-hosted agents
An agent that you set up and manage on your own to run jobs is aself-hosted agent.
You can use self-hosted agents in Azure Pipelines or Azure DevOps Server.
Self-hosted agents give you more control to install dependent software needed for your builds and deployments.
Also, machine-level caches and configuration persist from run to run, which can boost speed.
Note
Although multiple agents can be installed per machine, we strongly suggest to only install one agent per machine. Installing two or more agents might adversely affect performance and the result of your pipelines.
Tip
Before you install a self-hosted agent, you might want to see if a Microsoft-hosted agent pool works for you. In many cases, a Microsoft-hosted agent pool is the simplest way to get going.Give it a try.
You can install the agent on Linux, macOS, or Windows machines. You can also install an agent on a Docker container. For more information about installing a self-hosted agent, see:
macOS agent
Linux agent
Windows agent
Docker agent
Note
On macOS, you need to clear the special attribute on the download archive to prevent Gatekeeper protection from displaying for each assembly in the tar file when./config.shis run. The following command clears the extended attribute on the file:
./config.sh
xattr -c vsts-agent-osx-x64-V.v.v.tar.gz  ## replace V.v.v with the version in the filename downloaded.

# then unpack the gzip tar file normally:

tar xvfz vsts-agent-osx-x64-V.v.v.tar.gz
xattr -c vsts-agent-osx-x64-V.v.v.tar.gz  ## replace V.v.v with the version in the filename downloaded.

# then unpack the gzip tar file normally:

tar xvfz vsts-agent-osx-x64-V.v.v.tar.gz
After you install the agent on a machine, you can install any other software on that machine as required by your jobs.
Note
Agents are widely backward compatible. Any version of the agent should be compatible with any Azure DevOps version as long as Azure DevOps isn't demanding a higher version of the agent.
We only support the most recent version of the agent since that is the only version guaranteed to have all up-to-date patches and bug fixes.
Node runner versions
The agent ships with several versions of NodeJS libraries to support target tasks that use different Node handlers.
All official Azure DevOps tasks use Node 20 as a universal handler, however, customers might still use custom tasks that use the end-of-life Node 6, Node 10, or Node 16 libraries. To support backward compatibility with Node that reached End-of-Life, we provide the following self-service methods to install the designated Node runner manually.
Manually install the Node 6 or 10 runner. For more information, seeNode runner support.
Manually install the Node 6 or 10 runner. For more information, seeNode runner support.
Use theNodeTaskRunnerInstaller@0task in your pipelines that require the outdated Node 6 or 10 library.
Use theNodeTaskRunnerInstaller@0task in your pipelines that require the outdated Node 6 or 10 library.
Install an agent package that includes Node 6 and 10.Azure Pipelines provides two versions of agent packages.vsts-agent-*packages support Node 6 and 10.pipelines-agent-*packages don't support Node 6 and 10. This version of the package will become the default agent package in the future.If you know that you aren't using any Node 6 or 10 dependant tasks, and you don't want Node 6 or 10 installed on your agent machine, you can install the agent from theAlternate Agent Downloadssection fromhttps://github.com/microsoft/azure-pipelines-agent/releases.
Install an agent package that includes Node 6 and 10.
Azure Pipelines provides two versions of agent packages.
vsts-agent-*packages support Node 6 and 10.
pipelines-agent-*packages don't support Node 6 and 10. This version of the package will become the default agent package in the future.
If you know that you aren't using any Node 6 or 10 dependant tasks, and you don't want Node 6 or 10 installed on your agent machine, you can install the agent from theAlternate Agent Downloadssection fromhttps://github.com/microsoft/azure-pipelines-agent/releases.
Azure Virtual Machine Scale Set agents
Azure Virtual Machine Scale Set agents are a form of self-hosted agents that can be autoscaled to meet your demands. This elasticity reduces your need to run dedicated agents all the time. Unlike Microsoft-hosted agents, you have flexibility over the size and the image of machines on which agents run.
You specify a Virtual Machine Scale Set, the number of agents to keep on standby, a maximum number of virtual machines in the scale set, and Azure Pipelines manages the scaling of your agents for you.
For more information, seeAzure Virtual Machine Scale Set agents.
Tip
Managed DevOps Pools is a new service that is an evolution of Azure DevOps Virtual Machine Scale Set agent pools, simplifying custom pool creation even further, by improving scalability and reliability of custom pools. Managed DevOps Pools is a fully managed service where virtual machines or containers powering the agents live in a Microsoft Azure subscription and not in your own Azure subscription, like when using Azure DevOps Virtual Machine Scale Set agent pools.
If you're considering using auto-scalable self-hosted agent pools, we recommend looking at Managed DevOps Pools. For more information, seeCompare Managed DevOps Pools with Azure Virtual Machine Scale Set agentsandManaged DevOps Pools overview.
Managed DevOps Pools agents
Managed DevOps Pools empowers development teams to quickly and easily spin up Azure DevOps agent pools that are tailored to a team's specific needs.
Managed DevOps Pools:
implements security best practices
provides knobs to balance cost and performance
provides paths for the most common scenarios
significantly reduces time spent in creating and maintaining custom pools
Managed DevOps Pools is an evolution of Azure DevOps Virtual Machine Scale Set agent pools, They simplify custom pool creation even further by improving scalability and reliability of custom pools. Managed DevOps Pools is a fully managed service where virtual machines or containers powering the agents live in a Microsoft Azure subscription and not in your own Azure subscription, like when using Azure DevOps Virtual Machine Scale Set agent pools. For more information, see theManaged DevOps Poolsdocumentation.
Parallel jobs
Parallel jobsrepresents the number of jobs you can run at the same time in your organization. If your organization has a single parallel job, you can run a single job at a time in your organization, with any other concurrent jobs being queued until the first job completes. To run two jobs at the same time, you need two parallel jobs. In Azure Pipelines, you can run parallel jobs on Microsoft-hosted infrastructure or on your own (self-hosted) infrastructure.
Microsoft provides a free tier of service by default in every organization that includes at least one parallel job. Depending on the number of concurrent pipelines you need to run, you might need more parallel jobs to use multiple Microsoft-hosted or self-hosted agents at the same time. For more information on parallel jobs and different free tiers of service, seeParallel jobs in Azure Pipelines.
You might need more parallel jobs to use multiple agents at the same time:
Parallel jobs in Azure DevOps Server
Important
Starting with Azure DevOps Server 2019, you don't have to pay for self-hosted concurrent jobs in releases. You're only limited by the number of agents that you have.
Capabilities
Every self-hosted agent has a set of capabilities that indicate what it can do. Capabilities are name-value pairs that are either automatically discovered by the agent software, calledsystem capabilities, or capabilities that you define, calleduser capabilities.
The agent software automatically determines various system capabilities such as the name of the machine, type of operating system, and versions of certain software installed on the machine. Also, environment variables defined in the machine automatically appear in the list of system capabilities.
Note
Storing environment variables as capabilities means that when an agent runs, the stored capability values are used to set the environment variables. Also, any changes to environment variables that are made while the agent is running aren't picked up and used by any task. If you have sensitive environment variables that change and you don't want them to be stored as capabilities, you can have them ignored by setting theVSO_AGENT_IGNOREenvironment variable, with a comma-delimited list of variables to ignore. For example,PATHis a critical variable that you might want to ignore if you're installing software.
VSO_AGENT_IGNORE
PATH
When you author a pipeline, you specify certaindemandsof the agent. The system sends the job only to agents that have capabilities matching thedemandsspecified in the pipeline. As a result, agent capabilities allow you to direct jobs to specific agents.
Note
Demands and capabilities are designed for use with self-hosted agents so that jobs can be matched with an agent that
meets the requirements of the job. When using Microsoft-hosted agents, you select an image for the agent that
matches the requirements of the job. Although it's possible to add capabilities to a Microsoft-hosted agent, you don't need
to use capabilities with Microsoft-hosted agents.
Configure demands
YAML
Classic
To add a demand to your YAML build pipeline, add thedemands:line to thepoolsection.
demands:
pool
pool:
  name: Default
  demands: SpecialSoftware # exists check for SpecialSoftware
pool:
  name: Default
  demands: SpecialSoftware # exists check for SpecialSoftware
You can check for the existence of a capability, or make a comparison with the value of a capability. For more information, seeYAML schema - Demands.
In the Tasks tab of the pipeline, add the demand to your agent job.
Configure agent capabilities
Azure Pipelines UI
Azure DevOps CLI
You can view the details of an agent, including its version and system capabilities, and manage its user capabilities, by navigating toAgent poolsand selecting theCapabilitiestab for the desired agent.
In your web browser, navigate to Agent pools:Sign in to your organization (https://dev.azure.com/{yourorganization}).ChooseAzure DevOps,Organization settings.ChooseAgent pools.Sign in to your project collection (http://your-server/DefaultCollection).ChooseAzure DevOps,Collection settings.ChooseAgent pools.
In your web browser, navigate to Agent pools:
Sign in to your organization (https://dev.azure.com/{yourorganization}).
Sign in to your organization (https://dev.azure.com/{yourorganization}).
https://dev.azure.com/{yourorganization}
ChooseAzure DevOps,Organization settings.
ChooseAzure DevOps,Organization settings.

ChooseAgent pools.
ChooseAgent pools.

Sign in to your project collection (http://your-server/DefaultCollection).
Sign in to your project collection (http://your-server/DefaultCollection).
http://your-server/DefaultCollection
ChooseAzure DevOps,Collection settings.
ChooseAzure DevOps,Collection settings.

ChooseAgent pools.
ChooseAgent pools.

Navigate to the capabilities tab:From theAgent poolstab, select the desired agent pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.From theAgent poolstab, select the desired pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.
Navigate to the capabilities tab:
From theAgent poolstab, select the desired agent pool.
From theAgent poolstab, select the desired agent pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
Choose theCapabilitiestab.

Note
Microsoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
From theAgent poolstab, select the desired pool.
From theAgent poolstab, select the desired pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.
Choose theCapabilitiestab.

To register a new capability with the agent, chooseAdd a new capability.
To register a new capability with the agent, chooseAdd a new capability.
You can view the details of an agent, including its version and capabilities, by using the followingaz pipelines agentAzure CLI methods.
List agents|Show agent details
Note
If this is your first time usingaz pipelinescommands, seeGet started with Azure DevOps CLI.
List agents
You can list your agents using theaz pipelines agent listcommand.
az pipelines agent list --pool-id
                        [--agent-name]
                        [--demands]
                        [--detect {false, true}]
                        [--include-assigned-request {false, true}]
                        [--include-capabilities {false, true}]
                        [--include-last-completed-request {false, true}]
                        [--org]
                        [--subscription]
az pipelines agent list --pool-id
                        [--agent-name]
                        [--demands]
                        [--detect {false, true}]
                        [--include-assigned-request {false, true}]
                        [--include-capabilities {false, true}]
                        [--include-last-completed-request {false, true}]
                        [--org]
                        [--subscription]
pool-id: (Required) The agent pool containing the agents.
agent-name: Filter on agent name.
demands: Filter by demands the agents can satisfy. Comma separated list.
detect: Automatically detect organization. Accepted values:false,true
include-assigned-request: Whether to include details about the agents' current work. Accepted values:false,true
include-capabilities: Whether to include the agents' capabilities in the response. Accepted values:false,true
include-last-completed-request: Whether to include details about the agents' most recent completed work. Accepted values:false,true
orgororganization: Azure DevOps organization URL. You can configure the default organization using az devops configure -d organization=ORG_URL. Required if not configured as default or picked up via git config. Example:https://dev.azure.com/MyOrganizationName/.
https://dev.azure.com/MyOrganizationName/
subscription: Name or ID of subscription. You can configure the default subscription using az account set-s NAME_OR_ID.
-s NAME_OR_ID
The following example lists all agents in poolID: 4in table format. To retrieve the ID of pools, useaz pipelines pool list. This example uses the following default configuration:az devops configure --defaults organization=https://dev.azure.com/fabrikam-tailspin project=FabrikamFiber
ID: 4
az devops configure --defaults organization=https://dev.azure.com/fabrikam-tailspin project=FabrikamFiber
az pipelines agent list --pool-id 4 --output table

ID    Name          Is Enabled    Status    Version
----  ------------  ------------  --------  ---------
3     Hosted Agent  True          offline   2.155.1
az pipelines agent list --pool-id 4 --output table

ID    Name          Is Enabled    Status    Version
----  ------------  ------------  --------  ---------
3     Hosted Agent  True          offline   2.155.1
Show agent details
You can retrieve agent details using theaz pipelines agent showcommand.
az pipelines agent show --agent-id
                        --pool-id
                        [--detect {false, true}]
                        [--include-assigned-request {false, true}]
                        [--include-capabilities {false, true}]
                        [--include-last-completed-request {false, true}]
                        [--org]
                        [--subscription]
az pipelines agent show --agent-id
                        --pool-id
                        [--detect {false, true}]
                        [--include-assigned-request {false, true}]
                        [--include-capabilities {false, true}]
                        [--include-last-completed-request {false, true}]
                        [--org]
                        [--subscription]
agent-idorid: (Required) The agent ID to get information about.
pool-id: (Required) The agent pool containing the agents.
detect: Automatically detect organization. Accepted values:false,true
include-assigned-request: Whether to include details about the agents' current work. Accepted values:false,true
include-capabilities: Whether to include the agents' capabilities in the response. Accepted values:false,true
include-last-completed-request: Whether to include details about the agents' most recent completed work. Accepted values:false,true
To run tasks using Windows authentication to access an external service, the agent must run under an account with access to that service in pipelines or variable groups when exchanged with the agent.
The payload of the messages exchanged between the agent and Azure Pipelines are secured using asymmetric encryption. Each agent has a public-private key pair, and the public key is exchanged with the server during registration. The server uses the public key to encrypt the payload of the job before sending it to the agent. The agent decrypts the job content using its private key.gentCloudRequest": null,
<Some properties omitted for space>

  "status": "offline",
  "statusChangedOn": null,
  "systemCapabilities": {
    "ANDROID_HOME": "",
    "ANDROID_NDK_HOME": "",
    "Agent.Name": "Hosted Agent",
    "Agent.Version": "2.160.1",

    <Some capabilities omitted for space>

    "sh": "",
    "subversion": "",
    "svn": "",
    "To run tasks using Windows authentication to access an external service, the agent must run under an account with access to that service.
<Some properties omitted for space>

  "status": "offline",
  "statusChangedOn": null,
  "systemCapabilities": {
    "ANDROID_HOME": "",
    "ANDROID_NDK_HOME": "",
    "Agent.Name": "Hosted Agent",
    "Agent.Version": "2.160.1",

    <Some capabilities omitted for space>

    "sh": "",
    "subversion": "",
    "svn": "",
    "To run tasks using Windows authentication to access an external service, the agent must run under an account with access to that service.
However, if you're running UI tests such as Selenium or Coded UI tests that require a browser, the browser is launched in the context of the agent account.
On Windows, you should consider using a service account such as Network Service or Local Service. These accounts have restricted permissions and nonexpiring passwords, reducing the need for agent management over time.
These credentials are different from the credentials that you use when you register the agent with Azure Pipelines or Azure DevOps Server.
Azure DevOps CLI commands aren't supported for Azure DevOps Server.
Tip
After you install new software on a self-hosted agent, you must restart the agent for the new capability to show up. For more information, seeRestart Windows agent,Restart Linux agent, andRestart Mac agent.
Communication
Communication with Azure Pipelines
Communication with Azure DevOps Server
The agent communicates with Azure Pipelines or Azure DevOps Server to determine which job it needs to run, and to report the logs and job status. The agent always initiates this communication. All the messages from the agent to Azure Pipelines or Azure DevOps Server happen over HTTP or HTTPS, depending on how you configure the agent. This pull model allows the agent to be configured in different topologies as shown by the following examples.


Here's a common communication pattern between the agent and Azure Pipelines or Azure DevOps Server.
The user registers an agent with Azure Pipelines or Azure DevOps Server by adding it to anagent pool. You need to be anagent pool administratorto register an agent in that agent pool. The identity of agent pool administrator is needed only at the time of registration and isn't persisted on the agent. It isn't used in any further communication between the agent and Azure Pipelines or Azure DevOps Server. Once the registration is complete, the agent downloads alistener OAuth tokenand uses it to listen to the job queue.
The user registers an agent with Azure Pipelines or Azure DevOps Server by adding it to anagent pool. You need to be anagent pool administratorto register an agent in that agent pool. The identity of agent pool administrator is needed only at the time of registration and isn't persisted on the agent. It isn't used in any further communication between the agent and Azure Pipelines or Azure DevOps Server. Once the registration is complete, the agent downloads alistener OAuth tokenand uses it to listen to the job queue.
The agent listens to see if a new job request is posted for it in the job queue in Azure Pipelines/Azure DevOps Server using an HTTP long poll. When a job is available, the agent downloads the job and ajob-specific OAuth token. Azure Pipelines/Azure DevOps Server generates a short-lived token for the scoped identityspecified in the pipeline. The token is used by the agent to access or modify resources on Azure Pipelines or Azure DevOps Server within that job. For example, to access source code or upload test results.
The agent listens to see if a new job request is posted for it in the job queue in Azure Pipelines/Azure DevOps Server using an HTTP long poll. When a job is available, the agent downloads the job and ajob-specific OAuth token. Azure Pipelines/Azure DevOps Server generates a short-lived token for the scoped identityspecified in the pipeline. The token is used by the agent to access or modify resources on Azure Pipelines or Azure DevOps Server within that job. For example, to access source code or upload test results.
The agent discards the job-specific OAuth token after the job is completed, then goes back to checking if there's a new job request using the listener OAuth token.
The agent discards the job-specific OAuth token after the job is completed, then goes back to checking if there's a new job request using the listener OAuth token.
The payload of the messages exchanged between the agent and Azure Pipelines/Azure DevOps Server are secured using asymmetric encryption. Each agent has a public-private key pair, and the public key is exchanged with the server during registration. The server uses the public key to encrypt the payload of the job before sending it to the agent. The agent decrypts the job content using its private key. This method secures secrets stored in pipelines or variable groups when exchanged with the agent.
Note
The agent provides support for UTF-8 client encoding output.
However, if your system has a different encoding from UTF-8, you might encounter some problems with the output of logs. For example, the logs might contain characters that your systemâs encoding doesn't recognize, so they might appear as garbled or missing symbols.
Communication to deploy to target servers
When you use the agent to deploy artifacts to a set of servers, it must have "line of sight"
connectivity to those servers. The Microsoft-hosted agent pools, by default, have
connectivity to Azure websites and servers running in Azure.
Note
If your Azure resources are running in an Azure Virtual Network, you can get theAgent IP rangeswhere Microsoft-hosted agents are deployed
so you can configure the firewall rules for your Azure VNet to allow access by the agent.
If your on-premises environments don't have connectivity to a Microsoft-hosted agent pool, which is typically the case due to intermediate firewalls, you need to manually configure self-hosted agents on on-premises computers. The agents must have connectivity to the target on-premises environments, and access to the internet to connect to Azure Pipelines or Team Foundation Server,
as shown in the following schematic.


Authentication
To register an agent, you need to be a member of theadministrator rolein the agent pool. The identity of agent pool administrator is needed only at the time of registration and isn't persisted on the agent. It isn't used in any subsequent communication between the agent and Azure Pipelines or Azure DevOps Server. In addition, you must be a local administrator on the server in order to configure the agent.
When you register an agent, choose from the following authentication types, and agent setup prompts you for the specific additional information required for each authentication type. For more information, seeSelf-hosted agent authentication options.
Personal access token
Device code flow
Service principal
Personal access token
AlternateConnect to Azure DevOps Server or TFS using Basic authentication. When you selectAlternateyou'll be prompted for your credentials.
Additionally, Windows agents have the following two authentication options on Azure DevOps Server.
NegotiateConnect to Azure DevOps Server as a user other than the signed-in user via a Windows authentication scheme such as New Technology LAN Manager (NTLM) or Kerberos. After selecting Negotiate, you're prompted for credentials.
Integrated(Default) Connect a Windows agent to Azure DevOps Server using the credentials of the signed-in user via a Windows authentication scheme such as NTLM or Kerberos. You won't be prompted for credentials after you choose this method.
Important
Your server must beconfigured to support the authentication methodto use Alternate, Negotiate, or Integrated authentication.
The authentication method used for registering the agent is used only during agent registration. To learn more about how agents communicate with Azure Pipelines after registration, seeCommunication with Azure Pipelines or Azure DevOps Server.
Interactive vs. service
You can run your self-hosted agent as either a service or an interactive process.
After you configure the agent, we recommend you first try it
in interactive mode to make sure it works. Then, for production use,
we recommend you run the agent in one of the following modes so
that it reliably remains in a running state. These modes also
ensure that the agent starts automatically if the machine is restarted.
As a service. You can use the service manager of the
operating system to manage the lifecycle of the agent. In addition, the experience for autoupgrading the agent is better when you run the agent as a service.
As a service. You can use the service manager of the
operating system to manage the lifecycle of the agent. In addition, the experience for autoupgrading the agent is better when you run the agent as a service.
As an interactive process with auto-logon enabled. In some cases,
you might need to run the agent interactively for production use -
such as to run UI tests. When the agent is configured to run in this
mode, the screen saver is also disabled. Some domain policies might
prevent you from enabling autologon or disabling the screen saver. In such cases, you might need to seek an exemption from the domain policy, or run the agent on a workgroup computer where the domain policies don't apply.NoteThere are security risks when you enable automatic logon
or disable the screen saver because you enable other users to walk
up to the computer and use the account that automatically logs on. If you configure the agent to run
in this way, you must ensure the computer is physically protected;
for example, located in a secure facility. If you use
Remote Desktop to access the computer on which an agent is running
with autologon, simply closing the Remote Desktop causes the
computer to be locked and any UI tests that run on this agent might
fail. To avoid this issue, use thetsconcommand to disconnect from Remote Desktop. For example:%windir%\System32\tscon.exe 1 /dest:console
As an interactive process with auto-logon enabled. In some cases,
you might need to run the agent interactively for production use -
such as to run UI tests. When the agent is configured to run in this
mode, the screen saver is also disabled. Some domain policies might
prevent you from enabling autologon or disabling the screen saver. In such cases, you might need to seek an exemption from the domain policy, or run the agent on a workgroup computer where the domain policies don't apply.
Note
There are security risks when you enable automatic logon
or disable the screen saver because you enable other users to walk
up to the computer and use the account that automatically logs on. If you configure the agent to run
in this way, you must ensure the computer is physically protected;
for example, located in a secure facility. If you use
Remote Desktop to access the computer on which an agent is running
with autologon, simply closing the Remote Desktop causes the
computer to be locked and any UI tests that run on this agent might
fail. To avoid this issue, use thetsconcommand to disconnect from Remote Desktop. For example:
%windir%\System32\tscon.exe 1 /dest:console
%windir%\System32\tscon.exe 1 /dest:console
Agent account
Whether you run an agent as a service or interactively, you can choose
which computer account you use to run the agent. The choice of agent account depends solely on the needs of the tasks running in your build and deployment jobs.
For example, to run tasks using Windows authentication to access an external service, the agent must run using an account with access to that service. However, if you're running UI tests such as Selenium or Coded UI tests that require a browser, the browser is launched in the context of the agent account.
On Windows, you should consider using a service account such as Network Service or Local Service. These accounts permissions are restricted and their passwords don't expire, meaning the agent requires less management over time.
These credentials are different from the credentials that you use when you register the agent with Azure Pipelines or Azure DevOps Server.
Agent version and upgrades
We update the agent software every few weeks in Azure Pipelines.
We indicate the agent version in the format{major}.{minor}.
For instance, if the agent version is2.1, then the major version is2and the minor version is1.
{major}.{minor}
2.1
2
1
Microsoft-hosted agents are always kept up-to-date. If the newer version of the agent is only different inminorversion, Azure Pipelines can automatically update self-hosted agents. You can configure this setting inAgent pools, select your agent,Settings- the default is enabled. An upgrade is requested when a platform feature or one of the tasks used in the pipeline requires a newer version of the agent.
If you run a self-hosted agent interactively, or if there's a newermajorversion of the agent available, then you might have to manually upgrade the agents. You can upgrade the agents easily from theAgent poolstab under your organization. Pipelines can't run without a compatible agent
To update self-hosted agents
Navigate toProject settings,Agent pools.
Navigate toProject settings,Agent pools.

Select your agent pool and chooseUpdate all agents.You can also update agents individually by choosingUpdate agentfrom the...menu.
Select your agent pool and chooseUpdate all agents.

You can also update agents individually by choosingUpdate agentfrom the...menu.

SelectUpdateto confirm the update.
SelectUpdateto confirm the update.

An update request is queued for each agent in the pool, and runs when any currently running jobs complete. Upgrading typically only takes a few moments - long enough to download the latest version of the agent software (approximately 200 MB), unzip it, and restart the agent with the new version. You can monitor the status of your agents on theAgentstab.
An update request is queued for each agent in the pool, and runs when any currently running jobs complete. Upgrading typically only takes a few moments - long enough to download the latest version of the agent software (approximately 200 MB), unzip it, and restart the agent with the new version. You can monitor the status of your agents on theAgentstab.
We update the agent software with every update in Azure DevOps Server.
We indicate the agent version in the format{major}.{minor}.
For instance, if the agent version is2.1, then the major version is 2 and the minor version is 1.
{major}.{minor}
2.1
When your Azure DevOps Server has a newer version of the agent, and that newer agent is only different inminorversion, it can usually be automatically upgraded.
An upgrade is requested when a platform feature or one of the tasks used in the pipeline requires a newer version of the agent.
Starting with Azure DevOps Server 2019, you don't have to wait for a new server release.
You canupload a new version of the agent to your application tier, and that version is offered as an upgrade.
If you run the agent interactively, or if there's a newermajorversion of the agent available, then you might have to manually upgrade the agents. You can easily upgrade the agent from theAgent poolstab under your project collection. Pipelines can't run without a compatible agent.
You can view the version of an agent by navigating toAgent poolsand selecting theCapabilitiestab for the desired agent, as described inConfigure agent capabilities.
To trigger agent update programmatically, you can use Agent update API as described in sectionHow can I trigger agent updates programmatically for specific agent pool?.
Note
For servers with no internet access, manually copy the agent zip file to the following folder to use as a local file. Create theAgentsfolder if it isn't present.
Windows:%ProgramData%\Microsoft\Azure DevOps\Agents
%ProgramData%\Microsoft\Azure DevOps\Agents
Linux:usr/share/Microsoft/Azure DevOps/Agents
usr/share/Microsoft/Azure DevOps/Agents
macOS:usr/share/Microsoft/Azure DevOps/Agents
usr/share/Microsoft/Azure DevOps/Agents
Create theAgentsfolder if it isn't present.
Agent directory structure
When pipeline jobs are run on agents, a directory structure is created to store the source code, binaries, and artifacts.
The agent's home directory is the directory where the agent is installed. The directory is typically located:
Microsoft-hosted agents:C:\agents\<agent version>on Windows,/Users/runner/runners/<agent version>on macOS, and/home/vsts/agents/<agent version>on Linux.
C:\agents\<agent version>
/Users/runner/runners/<agent version>
/home/vsts/agents/<agent version>
Self-hosted agents:C:\agenton Windows,Users/<username>/agent(~/agent) on macOS, and/home/vsts/agenton Linux.
C:\agent
Users/<username>/agent
~/agent
/home/vsts/agent
The agent's work directory contains the workspace where the source and jobs output is stored. The work directory is typically located:
Microsoft-hosted agent:C:\aon Windows,/Users/runner/workon macOS, and/home/vsts/workon Linux.
C:\a
/Users/runner/work
/home/vsts/work
Self-hosted agent:C:\agent\_workon Windows,~/agent/workon macOS, and/home/agent/_workon Linux.
C:\agent\_work
~/agent/work
/home/agent/_work
The work directory structure is as follows:
- /work directory
        - /1 build directory/pipeline workspace
            - /s source/working directory
            - /b binaries directory
            - /a artifacts staging directory
            - /TestResults Test results directory
- /work directory
        - /1 build directory/pipeline workspace
            - /s source/working directory
            - /b binaries directory
            - /a artifacts staging directory
            - /TestResults Test results directory
C:\agents\3.248.0
/home/vsts/agents/3.248.0
/Users/runner/runners/3.248.0
C:\agent
home/agent
~/agent
Agent.HomeDirectory
C:\a
/home/vsts/work
/Users/runner/work
C:\agent\_work
/home/agent/_work
~/agent/work
Agent.WorkFolder
Agent.RootDirectory
System.WorkFolder
C:\a\1
/home/vsts/work/1
/Users/runner/work/1
C:\agent\_work\1
/home/agent/_work/1
~/agent/work/1
Agent.BuildDirectory
Pipeline.Workspace
s
checkout
s
C:\a\1\s
/home/vsts/work/1/s
/Users/runner/work/1/s
C:\agent\_work\1\s
/home/agent/_work/1/s
~/agent/work/1/s
Build.SourcesDirectory
Build.RepositoryLocalPath
System.DefaultWorkingDirectory
b
C:\a\1\b
/home/vsts/work/1/b
/Users/runner/work/1/b
C:\agent\_work\1\b
/home/agent/_work/1/b
~/agent/work/1/b
Build.BinariesDirectory
a
C:\a\1\a
/home/vsts/work/1/a
/Users/runner/work/1/a
C:\agent\_work\1\a
/home/agent/_work/1/a
~/agent/work/1/a
Build.StagingDirectory
Build.ArtifactStagingDirectory
System.ArtifactsDirectory
C:\a\1\TestResults
/home/vsts/work/1/TestResults
/Users/runner/work/1/TestResults
C:\agent\_work\1\TestResults
/home/agent/_work/1/TestResults
~/agent/work/1/TestResults
Common.TestResultsDirectory
On Microsoft-hosted agents, a different agent is used on each run, therefore the work directory isn't retained between runs. On self-hosted agents, only the artifacts staging directory and test results directories are cleaned by default between runs. For more information about the workspace clean option, seeWorkspace.
For more information about predefined variables, seePredefined variables.
FAQ
How do I make sure I have the latest agent version?
Navigate to theAgent poolstab:Sign in to your organization (https://dev.azure.com/{yourorganization}).ChooseAzure DevOps,Organization settings.ChooseAgent pools.Sign in to your project collection (http://your-server/DefaultCollection).ChooseAzure DevOps,Collection settings.ChooseAgent pools.
Navigate to theAgent poolstab:
Sign in to your organization (https://dev.azure.com/{yourorganization}).
Sign in to your organization (https://dev.azure.com/{yourorganization}).
https://dev.azure.com/{yourorganization}
ChooseAzure DevOps,Organization settings.
ChooseAzure DevOps,Organization settings.

ChooseAgent pools.
ChooseAgent pools.

Sign in to your project collection (http://your-server/DefaultCollection).
Sign in to your project collection (http://your-server/DefaultCollection).
http://your-server/DefaultCollection
ChooseAzure DevOps,Collection settings.
ChooseAzure DevOps,Collection settings.

ChooseAgent pools.
ChooseAgent pools.

Click the pool that contains the agent.
Click the pool that contains the agent.
Make sure the agent is enabled.
Make sure the agent is enabled.
Navigate to the capabilities tab:From theAgent poolstab, select the desired agent pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.From theAgent poolstab, select the desired pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.
Navigate to the capabilities tab:
From theAgent poolstab, select the desired agent pool.
From theAgent poolstab, select the desired agent pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
Choose theCapabilitiestab.

Note
Microsoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
From theAgent poolstab, select the desired pool.
From theAgent poolstab, select the desired pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.
Choose theCapabilitiestab.

Look for theAgent.Versioncapability. You can check this value against the latest published agent version. SeeAzure Pipelines Agentand check the page for the highest version number listed.
Look for theAgent.Versioncapability. You can check this value against the latest published agent version. SeeAzure Pipelines Agentand check the page for the highest version number listed.
Agent.Version
Each agent automatically updates itself when it runs a task that requires a newer version of the agent. If you want to manually update some agents, right-click the pool, and selectUpdate all agents.
Each agent automatically updates itself when it runs a task that requires a newer version of the agent. If you want to manually update some agents, right-click the pool, and selectUpdate all agents.
Can I update my agents that are part of an Azure DevOps Server pool?
Yes.
Beginning with Azure DevOps Server 2019, you can configure your server to look for the agent package files on a local disk.
This configuration will override the default version that came with the server at the time of its release.
This scenario also applies when the server doesn't have access to the internet.
From a computer with Internet access, download the latest version of the agent package files (in .zip or .tar.gz form) from theAzure Pipelines Agent GitHub Releases page.
From a computer with Internet access, download the latest version of the agent package files (in .zip or .tar.gz form) from theAzure Pipelines Agent GitHub Releases page.
Transfer the downloaded package files to each Azure DevOps Server Application Tier by using a method of your choice (such as USB drive, Network transfer, and so on). Place the agent files under the%ProgramData%\Microsoft\Azure DevOps\Agentsfolder. Create theAgentsfolder if it is not present.
Transfer the downloaded package files to each Azure DevOps Server Application Tier by using a method of your choice (such as USB drive, Network transfer, and so on). Place the agent files under the%ProgramData%\Microsoft\Azure DevOps\Agentsfolder. Create theAgentsfolder if it is not present.
%ProgramData%\Microsoft\Azure DevOps\Agents
You're all set! Your Azure DevOps Server will now use the local files whenever the agents are updated. Each agent automatically updates itself when it runs a task that requires a newer version of the agent. But if you want to manually update some agents, right-click the pool, and then chooseUpdate all agents.
You're all set! Your Azure DevOps Server will now use the local files whenever the agents are updated. Each agent automatically updates itself when it runs a task that requires a newer version of the agent. But if you want to manually update some agents, right-click the pool, and then chooseUpdate all agents.
Do self-hosted agents have any performance advantages over Microsoft-hosted agents?
In many cases, yes. Specifically:
If you use a self-hosted agent, you can run incremental builds. For example, if you define a pipeline that doesn't clean the repo and doesn't perform a clean build, your builds typically run faster. You don't get these benefits with a Microsoft-hosted agent unless you use features such ascachingbecause the agent is destroyed after the pipeline is completed.
If you use a self-hosted agent, you can run incremental builds. For example, if you define a pipeline that doesn't clean the repo and doesn't perform a clean build, your builds typically run faster. You don't get these benefits with a Microsoft-hosted agent unless you use features such ascachingbecause the agent is destroyed after the pipeline is completed.
A Microsoft-hosted agent can take longer to start your build. While it often takes just a few seconds for your job to be assigned to a Microsoft-hosted agent, it can sometimes take several minutes for an agent to be allocated depending on the load on our system.
A Microsoft-hosted agent can take longer to start your build. While it often takes just a few seconds for your job to be assigned to a Microsoft-hosted agent, it can sometimes take several minutes for an agent to be allocated depending on the load on our system.
Can I install multiple self-hosted agents on the same machine?
Yes. This approach can work well for agents that run jobs that don't consume many shared resources. For example, you could try it for agents that run releases that mostly orchestrate deployments and don't do much work on the agent itself.
You might find that in other cases you don't gain much efficiency by running multiple agents on the same machine. For example, it might not be worthwhile for agents that run builds that consume much disk and I/O resources.
You might also run into problems if parallel build jobs are using the same singleton tool deployment, such as npm packages. For example, one build might update a dependency while another build is in the middle of using it, which could cause unreliable results and errors.
Whatâs the behavior of agents when the pipeline jobs are canceled?
For Microsoft-hosted agents, the agent is torn down and returned to the Azure Pipelines pool.
For self-hosted agents:
When a pipeline is canceled, the agent sends a sequence of commands to the process executing the current step.
The first command is sent with a time out of 7.5 seconds.
If the process doesn't terminate, a second command is sent with a 2.5-second time out.
If the process doesn't terminate, the agent commands it to be killed.
If the process ignores the two initial termination requests, it's forcibly killed.
From the initial request to termination takes approximately 10 seconds.
The commands issued to the process to cancel the pipeline differ based on the agent operating system.
macOS and Linux - The commands sent are SIGINT, followed by SIGTERM, followed by SIGKILL.
Windows - The commands sent to the process are Ctrl+C, followed by Ctrl+Break, followed by Process.Kill.
How can I trigger agent updates programmatically for specific agent pool?
You can trigger agent updates for the pool by using the following API:
POST https://dev.azure.com/{organization}/_apis/distributedtask/pools/{poolId}/messages?agentId={agentId}&api-version=6.0
POST https://dev.azure.com/{organization}/_apis/distributedtask/pools/{poolId}/messages?agentId={agentId}&api-version=6.0
POST https://{server url}/tfs/{collection}/_apis/distributedtask/pools/{poolId}/messages?agentId={agentId}&api-version=6.0
POST https://{server url}/tfs/{collection}/_apis/distributedtask/pools/{poolId}/messages?agentId={agentId}&api-version=6.0
Note
For more information in API and Azure DevOps Server version mapping, seeAPI and Azure DevOps Server version mapping
agentId
organization
poolId
api-version
To trigger agent update - request body should be empty.
Note
Azure Pipelines Agent is open source onGitHub.
Learn more
For more information about agents, see the following modules from theBuild applications with Azure DevOpslearning path.
Choose a Microsoft-hosted or self-hosted build agent
Host your own build agent in Azure Pipelines
Feedback
Was this page helpful?
Additional resources