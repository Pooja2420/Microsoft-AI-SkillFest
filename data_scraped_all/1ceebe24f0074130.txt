Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Custom domain names and bring your own certificates in Azure Container Apps
Article
2025-01-14
7 contributors
In this article
Azure Container Apps allows you to bind one or more custom domains to a container app.
Every domain name must be associated with a TLS/SSL certificate. You can upload your own certificate or use afree managed certificate.
Certificates are applied to the container app environment and are bound to individual container apps. You must have role-based access to the environment to add certificates.
SNI (Server Name Identification) domain certificatesare required.
Ingress must be enabled for the container app.
Note
If you configure acustom environment DNS (Domain Name System) suffix, you can't add a custom domain that contains this suffix to your Container App.
Add a custom domain and certificate
Important
If you're using a new certificate, you must have an existingSNI domain certificatefile available to upload to Azure.
Navigate to your container app in theAzure portal
Navigate to your container app in theAzure portal
Verify that your app has ingress enabled by selectingIngressin theSettingssection. If ingress isn't enabled, enable it with these steps:SetHTTP IngresstoEnabled.Select the desiredIngress trafficsetting.Enter theTarget port.SelectSave.
Verify that your app has ingress enabled by selectingIngressin theSettingssection. If ingress isn't enabled, enable it with these steps:
SetHTTP IngresstoEnabled.
Select the desiredIngress trafficsetting.
Enter theTarget port.
SelectSave.
Under theSettingssection, selectCustom domains.
Under theSettingssection, selectCustom domains.
Select theAdd custom domainbutton.
Select theAdd custom domainbutton.
In theAdd custom domain and certificatewindow, inTLS/SSL certificate, selectBring your own certificate.
In theAdd custom domain and certificatewindow, inTLS/SSL certificate, selectBring your own certificate.
Indomain, enter the domain you want to add.
Indomain, enter the domain you want to add.
SelectAdd a certificate.
SelectAdd a certificate.
In theAdd certificatewindow, inCertificate name, enter a name for this certificate.
In theAdd certificatewindow, inCertificate name, enter a name for this certificate.
InCertificate filesection, browse for the certificate file you want to upload.
InCertificate filesection, browse for the certificate file you want to upload.
SelectValidate.
SelectValidate.
Once validation succeeds, selectAdd.
Once validation succeeds, selectAdd.
In theAdd custom domain and certificatewindow, inCertificate, select the certificate you just added.
In theAdd custom domain and certificatewindow, inCertificate, select the certificate you just added.
Select theHostname record typebased on the type of your domain.Domain typeRecord typeNotesApex domainA recordAn apex domain is a domain at the root level of your domain. For example, if your DNS (Domain Name System) zone iscontoso.com, thencontoso.comis the apex domain.SubdomainCNAMEA subdomain is a domain that is part of another domain. For example, if your DNS zone iscontoso.com, thenwww.contoso.comis an example of a subdomain that can be configured in the zone.
Select theHostname record typebased on the type of your domain.
contoso.com
contoso.com
contoso.com
www.contoso.com
Using the DNS provider that is hosting your domain, create DNS records based on theHostname record typeyou selected using the values shown in theDomain validationsection. The records point the domain to your container app and verify that you own it. The setup depends on whether you're using custom domains with the private endpoint (preview) feature:GeneralPrivate endpointIf you selectedA record, create the following DNS records:Record typeHostValueA@The IP address of your Container Apps environment.TXTasuidThe domain verification code.If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.If you selectedA record, you need to have a private DNS zone which has the same DNS zone name as your public DNS. Create the following DNS record on your private DNS zone:Record typeHostValueA@The Private IP of your private endpoint on your container apps environment.In addition, you'll need to add the following record to your public DNS zone.Record typeHostValueTXTasuidThe domain verification code.If you selectedCNAME, create the following DNS records on your public DNS zone:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
Using the DNS provider that is hosting your domain, create DNS records based on theHostname record typeyou selected using the values shown in theDomain validationsection. The records point the domain to your container app and verify that you own it. The setup depends on whether you're using custom domains with the private endpoint (preview) feature:
General
Private endpoint
If you selectedA record, create the following DNS records:Record typeHostValueA@The IP address of your Container Apps environment.TXTasuidThe domain verification code.
If you selectedA record, create the following DNS records:
@
asuid
If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
If you selectedCNAME, create the following DNS records:
www
asuid.
asuid.www
If you selectedA record, you need to have a private DNS zone which has the same DNS zone name as your public DNS. Create the following DNS record on your private DNS zone:Record typeHostValueA@The Private IP of your private endpoint on your container apps environment.In addition, you'll need to add the following record to your public DNS zone.Record typeHostValueTXTasuidThe domain verification code.
If you selectedA record, you need to have a private DNS zone which has the same DNS zone name as your public DNS. Create the following DNS record on your private DNS zone:
@
In addition, you'll need to add the following record to your public DNS zone.
asuid
If you selectedCNAME, create the following DNS records on your public DNS zone:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
If you selectedCNAME, create the following DNS records on your public DNS zone:
www
asuid.
asuid.www
Select theValidatebutton.
Select theValidatebutton.
Once validation succeeds, select theAddbutton.
Once validation succeeds, select theAddbutton.
Once the operation is complete, you see your domain name in the list of custom domains with a status ofSecured. Navigate to your domain to verify that it's accessible.
Once the operation is complete, you see your domain name in the list of custom domains with a status ofSecured. Navigate to your domain to verify that it's accessible.
Note
For container apps in internal Container Apps environments,extra configurationis required to use custom domains with VNET-scope ingress.
Container Apps supports apex domains and subdomains. Each domain type requires a different DNS record type and validation method.
contoso.com
contoso.com
contoso.com
www.contoso.com
Log in to Azure with the Azure CLI.az login
Log in to Azure with the Azure CLI.
az login
az login
Next, install the Azure Container Apps extension for the CLI.az extension add --name containerapp --upgrade
Next, install the Azure Container Apps extension for the CLI.
az extension add --name containerapp --upgrade
az extension add --name containerapp --upgrade
Set the following environment variables. Replace the<PLACEHOLDERS>with your values.RESOURCE_GROUP = "<RESOURCE_GROUP>"
CONTAINER_APP = "<CONTAINER_APP>"
ENVIRONMENT = "<ENVIRONMENT>"
TARGET_PORT = "<TARGET_PORT>"
DOMAIN_NAME = "<DOMAIN_NAME>"
CERTIFICATE_LOWERCASE_NAME = "<CERTIFICATE_LOWERCASE_NAME>"
CERTIFICATE_LOCAL_PATH = "<CERTIFICATE_LOCAL_PATH>"
CERTIFICATE_PASSWORD = "<CERTIFICATE_PASSWORD>"Replace<CERTIFICATE_LOCAL_PATH>with the local path of your certificate file.Replace<CERTIFICATE_LOWERCASE_NAME>with a lowercase certificate name that is unique within the environment.Replace<TARGET_PORT>with the port that your container app is listening on.
Set the following environment variables. Replace the<PLACEHOLDERS>with your values.
<PLACEHOLDERS>
RESOURCE_GROUP = "<RESOURCE_GROUP>"
CONTAINER_APP = "<CONTAINER_APP>"
ENVIRONMENT = "<ENVIRONMENT>"
TARGET_PORT = "<TARGET_PORT>"
DOMAIN_NAME = "<DOMAIN_NAME>"
CERTIFICATE_LOWERCASE_NAME = "<CERTIFICATE_LOWERCASE_NAME>"
CERTIFICATE_LOCAL_PATH = "<CERTIFICATE_LOCAL_PATH>"
CERTIFICATE_PASSWORD = "<CERTIFICATE_PASSWORD>"
RESOURCE_GROUP = "<RESOURCE_GROUP>"
CONTAINER_APP = "<CONTAINER_APP>"
ENVIRONMENT = "<ENVIRONMENT>"
TARGET_PORT = "<TARGET_PORT>"
DOMAIN_NAME = "<DOMAIN_NAME>"
CERTIFICATE_LOWERCASE_NAME = "<CERTIFICATE_LOWERCASE_NAME>"
CERTIFICATE_LOCAL_PATH = "<CERTIFICATE_LOCAL_PATH>"
CERTIFICATE_PASSWORD = "<CERTIFICATE_PASSWORD>"
Replace<CERTIFICATE_LOCAL_PATH>with the local path of your certificate file.
<CERTIFICATE_LOCAL_PATH>
Replace<CERTIFICATE_LOWERCASE_NAME>with a lowercase certificate name that is unique within the environment.
<CERTIFICATE_LOWERCASE_NAME>
Replace<TARGET_PORT>with the port that your container app is listening on.
<TARGET_PORT>
Verify that your container app has HTTP ingress enabled.az containerapp ingress show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUPIf ingress isn't enabled, enable it with these steps:az containerapp ingress enable \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    --type external \
    --target-port $TARGET_PORT \
    --transport auto
Verify that your container app has HTTP ingress enabled.
az containerapp ingress show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP
az containerapp ingress show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP
If ingress isn't enabled, enable it with these steps:
az containerapp ingress enable \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    --type external \
    --target-port $TARGET_PORT \
    --transport auto
az containerapp ingress enable \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    --type external \
    --target-port $TARGET_PORT \
    --transport auto
If you're configuring an apex domain, get the IP address of your Container Apps environment.az containerapp env show \
    -n $ENVIRONMENT \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.staticIp"
If you're configuring an apex domain, get the IP address of your Container Apps environment.
az containerapp env show \
    -n $ENVIRONMENT \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.staticIp"
az containerapp env show \
    -n $ENVIRONMENT \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.staticIp"
If you're configuring a subdomain, get the automatically generated domain of your container app.az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.configuration.ingress.fqdn"
If you're configuring a subdomain, get the automatically generated domain of your container app.
az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.configuration.ingress.fqdn"
az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.configuration.ingress.fqdn"
Get the domain verification code.az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.customDomainVerificationId"
Get the domain verification code.
az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.customDomainVerificationId"
az containerapp show \
    -n $CONTAINER_APP \
    -g $RESOURCE_GROUP \
    -o tsv \
    --query "properties.customDomainVerificationId"
Using the DNS provider that is hosting your domain, create DNS records based on the record type you selected using the values shown in theDomain validationsection. The records point the domain to your container app and verify that you own it. The setup depends on whether you're using custom domains with the private endpoint (preview) feature:GeneralPrivate endpointIf you selectedA record, create the following DNS records:Record typeHostValueA@The IP address of your Container Apps environment.TXTasuidThe domain verification code.If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.When using a private endpoint for your incoming traffic, you need tocreate a private DNS zone.If you selectedA record, create the following DNS records:Record typeHostValueA@The Private IP of your private endpoint on your container apps environment.TXTasuidThe domain verification code.If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
Using the DNS provider that is hosting your domain, create DNS records based on the record type you selected using the values shown in theDomain validationsection. The records point the domain to your container app and verify that you own it. The setup depends on whether you're using custom domains with the private endpoint (preview) feature:
General
Private endpoint
If you selectedA record, create the following DNS records:Record typeHostValueA@The IP address of your Container Apps environment.TXTasuidThe domain verification code.
If you selectedA record, create the following DNS records:
@
asuid
If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
If you selectedCNAME, create the following DNS records:
www
asuid.
asuid.www
When using a private endpoint for your incoming traffic, you need tocreate a private DNS zone.
If you selectedA record, create the following DNS records:Record typeHostValueA@The Private IP of your private endpoint on your container apps environment.TXTasuidThe domain verification code.
If you selectedA record, create the following DNS records:
@
asuid
If you selectedCNAME, create the following DNS records:Record typeHostValueCNAMEThe subdomain (for example,www)The generated domain of your container app.TXTasuid.followed by the subdomain (for example,asuid.www)The domain verification code.
If you selectedCNAME, create the following DNS records:
www
asuid.
asuid.www
Upload the certificate to your environment.az containerapp env certificate upload \
    -g $RESOURCE_GROUP \
    --name $ENVIRONMENT \
    --certificate-file $CERTIFICATE_LOCAL_PATH \
    --password $CERTIFICATE_PASSWORD \
    --certificate-name $CERTIFICATE_LOWERCASE_NAME
Upload the certificate to your environment.
az containerapp env certificate upload \
    -g $RESOURCE_GROUP \
    --name $ENVIRONMENT \
    --certificate-file $CERTIFICATE_LOCAL_PATH \
    --password $CERTIFICATE_PASSWORD \
    --certificate-name $CERTIFICATE_LOWERCASE_NAME
az containerapp env certificate upload \
    -g $RESOURCE_GROUP \
    --name $ENVIRONMENT \
    --certificate-file $CERTIFICATE_LOCAL_PATH \
    --password $CERTIFICATE_PASSWORD \
    --certificate-name $CERTIFICATE_LOWERCASE_NAME
Bind the certificate and domain to your container app.az containerapp hostname bind \
    --hostname $DOMAIN_NAME \
    -g $RESOURCE_GROUP \
    -n $CONTAINER_APP \
    --environment $ENVIRONMENT \
    --certificate $CERTIFICATE_LOWERCASE_NAME \
    --validation-method <VALIDATION_METHOD>If you're configuring anA record, replace<VALIDATION_METHOD>withHTTP.If you're configuring aCNAME, replace<VALIDATION_METHOD>withCNAME.It might take several minutes to issue the certificate and add the domain to your container app.
Bind the certificate and domain to your container app.
az containerapp hostname bind \
    --hostname $DOMAIN_NAME \
    -g $RESOURCE_GROUP \
    -n $CONTAINER_APP \
    --environment $ENVIRONMENT \
    --certificate $CERTIFICATE_LOWERCASE_NAME \
    --validation-method <VALIDATION_METHOD>
az containerapp hostname bind \
    --hostname $DOMAIN_NAME \
    -g $RESOURCE_GROUP \
    -n $CONTAINER_APP \
    --environment $ENVIRONMENT \
    --certificate $CERTIFICATE_LOWERCASE_NAME \
    --validation-method <VALIDATION_METHOD>
If you're configuring anA record, replace<VALIDATION_METHOD>withHTTP.
If you're configuring anA record, replace<VALIDATION_METHOD>withHTTP.
<VALIDATION_METHOD>
HTTP
If you're configuring aCNAME, replace<VALIDATION_METHOD>withCNAME.
If you're configuring aCNAME, replace<VALIDATION_METHOD>withCNAME.
<VALIDATION_METHOD>
CNAME
It might take several minutes to issue the certificate and add the domain to your container app.
Once the operation is complete, navigate to your domain to verify that it's accessible.
Once the operation is complete, navigate to your domain to verify that it's accessible.
Managing certificates
You can manage certificates via the Container Apps environment or through an individual container app.
Environment
TheCertificateswindow of the Container Apps environment presents a table of all the certificates associated with the environment.
You can manage your certificates through the following actions:
Container app
TheCustom domainswindow of the container app presents a list of custom domains associated with the container app.
You can manage your certificates for an individual domain name by selecting the ellipsis (...) button, which opens the certificate binding window. From the following window, you can select a certificate to bind to the selected domain name.
Next steps
Authentication in Azure Container Apps
Feedback
Was this page helpful?
Additional resources