Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy files to Azure App Service
Article
2025-03-31
24 contributors
In this article

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
This article shows you how to deploy your code as a ZIP, WAR, JAR, or EAR package toAzure App Service. It also shows you how to deploy individual files to App Service, separate from your application package.
Prerequisites
To complete the steps in this article,create an App Service app, or use an app that you created for another tutorial.
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Create a project ZIP package
Important
When you create the ZIP package for deployment, don't include the root directory. Include only the files and directories in the root directory. If you download a GitHub repository as a ZIP file, you can't deploy that file as-is to App Service. GitHub adds nested directories at the top level, which doesn't work with App Service.
In a local terminal window, navigate to the root directory of your app project.
This directory should contain the entry file to your web app, such asindex.html,index.php, andapp.js. It can also contain package management files likeproject.json,composer.json,package.json,bower.json, andrequirements.txt.
index.html
index.php
app.js
project.json
composer.json
package.json
bower.json
requirements.txt
If you don't want App Service to run deployment automation for you, run all the build tasks. For example:npm,bower,gulp,composer, andpip. Make sure that you have all the files you need to run the app. This step is required if you want torun your package directly.
npm
bower
gulp
composer
pip
Create a ZIP archive of everything in your project. Fordotnetprojects, add everything in the output directory of thedotnet publishcommand, excluding the output directory itself. For example, enter the following command in your terminal to create a ZIP package that includes the contents of the current directory:
dotnet
dotnet publish
# Bash
zip -r <file-name>.zip .

# PowerShell
Compress-Archive -Path * -DestinationPath <file-name>.zip
# Bash
zip -r <file-name>.zip .

# PowerShell
Compress-Archive -Path * -DestinationPath <file-name>.zip
Deploy a ZIP package
When you deploy a ZIP package, App Service unpacks its contents in the default path for your app:D:\home\site\wwwrootfor Windows and/home/site/wwwrootfor Linux.
D:\home\site\wwwroot
/home/site/wwwroot
This ZIP package deployment uses the same Kudu service that powers continuous integration-based deployments. Kudu supports the following functionality for ZIP package deployment:
Deletion of files left over from a previous deployment
Option to turn on the default build process, which includes package restore
Deployment customization, including running deployment scripts
Deployment logs
A package size limit of 2,048 megabytes
Note
Files in the ZIP package are copied only if their timestamps don't match what is already deployed.
Deploy with ZIP deploy UI in Kudu
In the browser, go tohttps://<app_name>.scm.azurewebsites.net/ZipDeployUI. For the app name, see thenote at the beginning of the article.
https://<app_name>.scm.azurewebsites.net/ZipDeployUI
Upload the ZIP package you created inCreate a project ZIP package. Drag it to theFile Explorerarea on the web page.
When deployment is in progress, an icon in the top right corner shows you the progress percentage. The page also displays messages for the operation below theFile Explorerarea. When deployment finishes, the last message should say "Deployment successful."
This endpoint doesn't work for App Service on Linux at this time. Consider using FTP or theZIP deploy APIinstead.
Deploy without ZIP deploy UI in Kudu
Azure CLI
Azure PowerShell
Kudu API
ARM template
Deploy a ZIP package to your web app by using theaz webapp deploycommand. The CLI command uses theKudu publish APIto deploy the files and can be fully customized.
az webapp deploy
The following example pushes a ZIP package to your site. Specify the path to your local ZIP package for--src-path.
--src-path
az webapp deploy --resource-group <group-name> --name <app-name> --src-path <zip-package-path>
az webapp deploy --resource-group <group-name> --name <app-name> --src-path <zip-package-path>
This command restarts the app after deploying the ZIP package.
The following example usesPublish-AzWebappto upload the ZIP package. Replace the placeholders<group-name>,<app-name>, and<zip-package-path>.
Publish-AzWebapp
Publish-AzWebApp -ResourceGroupName Default-Web-WestUS -Name MyApp -ArchivePath <zip-package-path>
Publish-AzWebApp -ResourceGroupName Default-Web-WestUS -Name MyApp -ArchivePath <zip-package-path>
The following example uses the client URL (cURL) tool to deploy a ZIP package. Replace the placeholders<zip-package-path>and<app-name>. If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<zip-package-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"

# Basic authentication
curl -X POST \
     -u '<username>:<password>' \
     -T "<zip-package-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<zip-package-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"

# Basic authentication
curl -X POST \
     -u '<username>:<password>' \
     -T "<zip-package-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
Azure Resource Manager templates (ARM templates) only supportdeployments from remotely hosted packages.
Enable build automation for ZIP deploy
By default, the deployment engine assumes that a ZIP package is ready to run as-is and doesn't run any build automation. To enable the same build automation used in aGit deployment, set theSCM_DO_BUILD_DURING_DEPLOYMENTapp setting. Run the following command inAzure Cloud Shell:
SCM_DO_BUILD_DURING_DEPLOYMENT
az webapp config appsettings set --resource-group <group-name> --name <app-name> --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
az webapp config appsettings set --resource-group <group-name> --name <app-name> --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
For more information, seeKudu documentation.
Deploy WAR, JAR, or EAR packages
You can deploy yourWAR,JAR, orEARpackage to App Service to run your Java web app by using the Azure CLI, PowerShell, or Kudu publish API.
The deployment process shown here puts the package on the app's content share with the right naming convention and directory structure. For more information, seeKudu publish API reference. We recommend this approach. If you deploy WAR, JAR, or EAR packages by usingFTPor Web Deploy instead, you might see unknown failures due to mistakes in the naming or structure.
Azure CLI
Azure PowerShell
Kudu API
ARM template
Deploy a WAR package to Tomcat or JBoss EAP by using theaz webapp deploycommand. Specify the path to your local Java package for--src-path.
az webapp deploy
--src-path
az webapp deploy --resource-group <group-name> --name <app-name> --src-path ./<package-name>.war
az webapp deploy --resource-group <group-name> --name <app-name> --src-path ./<package-name>.war
The CLI command uses theKudu publish APIto deploy the package and can be fully customized.
The following example usesPublish-AzWebappto upload the WAR file. Replace the placeholders<group-name>,<app-name>, and<package-path>. Azure PowerShell supports only WAR and JAR files.
Publish-AzWebapp
Publish-AzWebapp -ResourceGroupName <group-name> -Name <app-name> -ArchivePath <package-path>
Publish-AzWebapp -ResourceGroupName <group-name> -Name <app-name> -ArchivePath <package-path>
The following example uses the cURL tool to deploy a WAR, JAR, or EAR file. Replace the placeholders<file-path>,<app-name>, and<package-type>(war,jar, orear). If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
war
jar
ear
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=<package-type>"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=<package-type>"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=<package-type>"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=<package-type>"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
For more information, seeKudu publish API reference.
ARM templates only supportdeployments from remotely hosted packages.
Deploy individual files
Azure CLI
Azure PowerShell
Kudu API
ARM template
Deploy a startup script, library, and static file to your web app by using theaz webapp deploycommand with the--typeparameter.
az webapp deploy
--type
If you deploy a startup script this way, App Service automatically uses your script to start your app.
The CLI command uses theKudu publish APIto deploy the files. The command can be fully customized.
Deploy a startup script
az webapp deploy --resource-group <group-name> --name <app-name> --src-path scripts/startup.sh --type=startup
az webapp deploy --resource-group <group-name> --name <app-name> --src-path scripts/startup.sh --type=startup
Deploy a library file
az webapp deploy --resource-group <group-name> --name <app-name> --src-path driver.jar --type=lib
az webapp deploy --resource-group <group-name> --name <app-name> --src-path driver.jar --type=lib
Deploy a static file
az webapp deploy --resource-group <group-name> --name <app-name> --src-path config.json --type=static
az webapp deploy --resource-group <group-name> --name <app-name> --src-path config.json --type=static
Not supported. See the Azure CLI or Kudu API tabs.
Deploy a startup script
The following example uses the cURL tool to deploy a startup file for the application. Replace the placeholders<startup-file-path>and<app-name>. If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<startup-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=startup"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<startup-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=startup"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<startup-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=startup"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<startup-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=startup"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
Deploy a library file
The following example uses the cURL tool to deploy a library file for the application. Replace the placeholders<lib-file-path>and<app-name>. If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<lib-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=lib&path=/home/site/deployments/tools/my-lib.jar"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<lib-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=lib&path=/home/site/deployments/tools/my-lib.jar"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<lib-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=lib&path=/home/site/deployments/tools/my-lib.jar"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<lib-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=lib&path=/home/site/deployments/tools/my-lib.jar"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
Deploy a static file
The following example uses the cURL tool to deploy a config file for the application. Replace the placeholders<config-file-path>and<app-name>. If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<config-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=static&path=/home/site/deployments/tools/my-config.json"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<config-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=static&path=/home/site/deployments/tools/my-config.json"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -T @"<config-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=static&path=/home/site/deployments/tools/my-config.json"

# Basic authentication
curl -X POST \
     -u <username>:<password> \
     -T @"<config-file-path>" \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=static&path=/home/site/deployments/tools/my-config.json"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
ARM templates only supportdeployments from remotely hosted packages.
Deploy to network-secured apps
Depending on your web app's networking configuration, direct access to the app from your development environment might be blocked. (SeeDeploying to network-secured sitesandDeploying to network-secured sites, part 2.) Instead of pushing the package or file to the web app directly, you can publish it to a storage system that's accessible from the web app and trigger the app to pull the ZIP from the storage location.
The remote URL can be any publicly accessible location, but it's best to use a blob storage container with a shared access signature (SAS) key to protect it.
Azure CLI
Azure PowerShell
Kudu API
ARM template
Use theaz webapp deploycommand like you would in the other sections, but use--src-urlinstead of--src-path. The following example uses the--src-urlparameter to specify the URL of a ZIP file hosted in an Azure Storage account.
az webapp deploy
--src-url
--src-path
--src-url
az webapp deploy --resource-group <group-name> --name <app-name> --src-url "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3 --type zip
az webapp deploy --resource-group <group-name> --name <app-name> --src-url "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3 --type zip
Not supported. See the tabs for the Azure CLI, Kudu API, or ARM template.
Invoke theKudu publish APIlike you would in the other sections. Instead of uploading a file, pass in a JSON object withpackageUriin the request body. The following examples use this method to specify the URL of a ZIP file hosted in an Azure Storage account. The type is still specified as a query string. If you choose basic authentication, supply thedeployment credentialsin<username>and<password>.
packageUri
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -H "Content-Type: application/json" \
     -d '{"packageUri": "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3"}' \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"

# Basic authentication
curl -X POST \
     -u '<username>:<password>' \
     -H "Content-Type: application/json" \
     -d '{"packageUri": "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3"}' \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"
# Microsoft Entra authentication
TOKEN=$(az account get-access-token --query accessToken | tr -d '"')

curl -X POST \
     -H "Authorization: Bearer $TOKEN" \
     -H "Content-Type: application/json" \
     -d '{"packageUri": "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3"}' \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"

# Basic authentication
curl -X POST \
     -u '<username>:<password>' \
     -H "Content-Type: application/json" \
     -d '{"packageUri": "https://storagesample.blob.core.windows.net/sample-container/myapp.zip?sv=2021-10-01&sb&sig=slk22f3UrS823n4kSh8Skjpa7Naj4CG3"}' \
     "https://<app-name>.scm.azurewebsites.net/api/publish?type=zip"
Note
Get the actual fully qualified domain name to use in the URL from thenote at the beginning of the article.
Add the following JSON to your ARM template. Replace the placeholder<app-name>.
{
    "type": "Microsoft.Web/sites/extensions",
    "apiVersion": "2021-03-01",
    "name": "onedeploy",
    "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', <app-name>')]"
    ],
    "properties": {
        "packageUri": "<zip-package-uri>",
        "type": "<type>",
        "path": "<target-path>"
    }
}
{
    "type": "Microsoft.Web/sites/extensions",
    "apiVersion": "2021-03-01",
    "name": "onedeploy",
    "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', <app-name>')]"
    ],
    "properties": {
        "packageUri": "<zip-package-uri>",
        "type": "<type>",
        "path": "<target-path>"
    }
}
Use the following reference to help you configure the properties:
packageUri
type
type
path
target-path
Kudu publish API reference
ThepublishKudu API allows you to specify the same parameters from the CLI command as URL query parameters. To authenticate with the Kudu REST API, we recommend token authentication, but you can also use basic authentication with your app'sdeployment credentials.
publish
The following table shows the available query parameters, their allowed values, and descriptions.
type
war
jar
ear
lib
startup
static
zip
type=zip
/home/site/wwwroot
target-path
type=war
/home/site/wwwroot/app.war
target-path
type=jar
/home/site/wwwroot/app.jar
target-path
type=ear
/home/site/wwwroot/app.ear
target-path
type=lib
/home/site/libs
target-path
type=static
/home/site/wwwroot
type=startup
D:\home\site\scripts\<name-of-source>
home/site/wwwroot/startup.sh
target-path
restart
true
false
restart=true
restart=false
clean
true
false
ignorestack
true
false
WEBSITE_STACK
false
target-path
/home/site/deployments/tools/driver.jar
/home/site/scripts/helper.sh
Related content
For more advanced deployment scenarios, trydeploying to Azure with Git. Git-based deployment to Azure enables version control, package restore, MSBuild, and more.
Kudu: Deploying from a zip file
Environment variables and app settings reference
Feedback
Was this page helpful?
Additional resources