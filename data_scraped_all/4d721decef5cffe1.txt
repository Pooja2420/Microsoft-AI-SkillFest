Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage Azure resource groups by using Azure CLI
Article
2025-02-09
9 contributors
In this article
Learn how to use Azure CLI withAzure Resource Managerto manage your Azure resource groups.
Prerequisites
Azure CLI. For more information, seeHow to install the Azure CLI.
Azure CLI. For more information, seeHow to install the Azure CLI.
An authenticated account. After installing Azure CLI, sign in for the first time. For more information, seeHow to sign in to the Azure CLI.
An authenticated account. After installing Azure CLI, sign in for the first time. For more information, seeHow to sign in to the Azure CLI.
What is a resource group
A resource group is a container that holds related resources for an Azure solution. The resource group can include all the resources for the solution, or only those resources that you want to manage as a group. You decide how to add resources to resource groups based on what makes the most sense for your organization. Generally, add resources that share the same lifecycle to the same resource group so you can easily deploy, update, and delete them as a group.
The resource group stores metadata about the resources. When you specify a location for the resource group, you're specifying where that metadata is stored. For compliance reasons, you might need to ensure that your data is stored in a particular region.
Create resource groups
To create a resource group, useaz group create.
az group create --name demoResourceGroup --location westus
az group create --name demoResourceGroup --location westus
List resource groups
To list the resource groups in your subscription, useaz group list.
az group list
az group list
To get one resource group, useaz group show.
az group show --name exampleGroup
az group show --name exampleGroup
Delete resource groups
To delete a resource group, useaz group delete.
az group delete --name exampleGroup
az group delete --name exampleGroup
For more information about how Azure Resource Manager orders the deletion of resources, seeAzure Resource Manager resource group deletion.
Deploy resources
You can deploy Azure resources by using Azure CLI, or by deploying an Azure Resource Manager (ARM) template or Bicep file.
Deploy resources by using storage operations
The following example creates a storage account. The name you provide for the storage account must be unique across Azure.
az storage account create --resource-group exampleGroup --name examplestore --location westus --sku Standard_LRS --kind StorageV2
az storage account create --resource-group exampleGroup --name examplestore --location westus --sku Standard_LRS --kind StorageV2
Deploy resources by using an ARM template or Bicep file
To deploy an ARM template or Bicep file, useaz deployment group create.
az deployment group create --resource-group exampleGroup --template-file storage.bicep
az deployment group create --resource-group exampleGroup --template-file storage.bicep
The following example shows the Bicep file namedstorage.bicepthat you're deploying:
storage.bicep
@minLength(3)
@maxLength(11)
param storagePrefix string

var uniqueStorageName = concat(storagePrefix, uniqueString(resourceGroup().id))

resource uniqueStorage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: uniqueStorageName
  location: 'eastus'
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
@minLength(3)
@maxLength(11)
param storagePrefix string

var uniqueStorageName = concat(storagePrefix, uniqueString(resourceGroup().id))

resource uniqueStorage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: uniqueStorageName
  location: 'eastus'
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
For more information about deploying an ARM template, seeDeploy resources with Resource Manager templates and Azure CLI.
For more information about deploying a Bicep file, seeDeploy resources with Bicep and Azure CLI.
Lock resource groups
Locking prevents other users in your organization from accidentally deleting or modifying critical resources.
To prevent a resource group and its resources from being deleted, useaz lock create.
az lock create --name LockGroup --lock-type CanNotDelete --resource-group exampleGroup
az lock create --name LockGroup --lock-type CanNotDelete --resource-group exampleGroup
To get the locks for a resource group, useaz lock list.
az lock list --resource-group exampleGroup
az lock list --resource-group exampleGroup
To delete a lock, useaz lock delete.
az lock delete --name exampleLock --resource-group exampleGroup
az lock delete --name exampleLock --resource-group exampleGroup
For more information, seeLock resources with Azure Resource Manager.
Tag resource groups
You can apply tags to resource groups and resources to logically organize your assets. For information, seeUsing tags to organize your Azure resources.
Export resource groups to templates
To assist with creating ARM templates, you can export a template from existing resources. For more information, seeUse Azure CLI to export a template.
Manage access to resource groups
To manage access to a resource group, useAzure role-based access control (Azure RBAC). For more information, seeAdd or remove Azure role assignments using Azure CLI.
Next steps
To manage Azure resources, seeManage Azure resources by using Azure CLI.
To learn Azure Resource Manager, seeAzure Resource Manager overview.
To learn the Resource Manager template syntax, seeUnderstand the structure and syntax of Azure Resource Manager templates.
Feedback
Was this page helpful?
Additional resources