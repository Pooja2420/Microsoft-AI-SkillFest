Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.NetApp netAppAccounts/capacityPools/volumes
Article
2025-02-11
2 contributors
In this article
Latest
2025-01-01
2025-01-01-preview
2024-09-01
2024-09-01-preview
2024-07-01
2024-07-01-preview
2024-05-01
2024-05-01-preview
2024-03-01
2024-03-01-preview
2024-01-01
2023-11-01
2023-11-01-preview
2023-07-01
2023-07-01-preview
2023-05-01
2023-05-01-preview
2022-11-01
2022-11-01-preview
2022-09-01
2022-05-01
2022-03-01
2022-01-01
2021-10-01
2021-08-01
2021-06-01
2021-04-01
2021-04-01-preview
2021-02-01
2020-12-01
2020-11-01
2020-09-01
2020-08-01
2020-07-01
2020-06-01
2020-05-01
2020-03-01
2020-02-01
2019-11-01
2019-10-01
2019-08-01
2019-07-01
2019-06-01
2019-05-01
2017-08-15
Bicep resource definition
The netAppAccounts/capacityPools/volumes resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.NetApp/netAppAccounts/capacityPools/volumes resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes@2025-01-01' = {
  parent: resourceSymbolicName
  location: 'string'
  name: 'string'
  properties: {
    avsDataStore: 'string'
    backupId: 'string'
    capacityPoolResourceId: 'string'
    coolAccess: bool
    coolAccessRetrievalPolicy: 'string'
    coolAccessTieringPolicy: 'string'
    coolnessPeriod: int
    creationToken: 'string'
    dataProtection: {
      backup: {
        backupPolicyId: 'string'
        backupVaultId: 'string'
        policyEnforced: bool
      }
      replication: {
        endpointType: 'string'
        remotePath: {
          externalHostName: 'string'
          serverName: 'string'
          volumeName: 'string'
        }
        remoteVolumeRegion: 'string'
        remoteVolumeResourceId: 'string'
        replicationSchedule: 'string'
      }
      snapshot: {
        snapshotPolicyId: 'string'
      }
      volumeRelocation: {
        relocationRequested: bool
      }
    }
    defaultGroupQuotaInKiBs: int
    defaultUserQuotaInKiBs: int
    deleteBaseSnapshot: bool
    enableSubvolumes: 'string'
    encryptionKeySource: 'string'
    exportPolicy: {
      rules: [
        {
          allowedClients: 'string'
          chownMode: 'string'
          cifs: bool
          hasRootAccess: bool
          kerberos5iReadOnly: bool
          kerberos5iReadWrite: bool
          kerberos5pReadOnly: bool
          kerberos5pReadWrite: bool
          kerberos5ReadOnly: bool
          kerberos5ReadWrite: bool
          nfsv3: bool
          nfsv41: bool
          ruleIndex: int
          unixReadOnly: bool
          unixReadWrite: bool
        }
      ]
    }
    isDefaultQuotaEnabled: bool
    isLargeVolume: bool
    kerberosEnabled: bool
    keyVaultPrivateEndpointResourceId: 'string'
    ldapEnabled: bool
    networkFeatures: 'string'
    placementRules: [
      {
        key: 'string'
        value: 'string'
      }
    ]
    protocolTypes: [
      'string'
    ]
    proximityPlacementGroup: 'string'
    securityStyle: 'string'
    serviceLevel: 'string'
    smbAccessBasedEnumeration: 'string'
    smbContinuouslyAvailable: bool
    smbEncryption: bool
    smbNonBrowsable: 'string'
    snapshotDirectoryVisible: bool
    snapshotId: 'string'
    subnetId: 'string'
    throughputMibps: int
    unixPermissions: 'string'
    usageThreshold: int
    volumeSpecName: 'string'
    volumeType: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
resource symbolicname 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes@2025-01-01' = {
  parent: resourceSymbolicName
  location: 'string'
  name: 'string'
  properties: {
    avsDataStore: 'string'
    backupId: 'string'
    capacityPoolResourceId: 'string'
    coolAccess: bool
    coolAccessRetrievalPolicy: 'string'
    coolAccessTieringPolicy: 'string'
    coolnessPeriod: int
    creationToken: 'string'
    dataProtection: {
      backup: {
        backupPolicyId: 'string'
        backupVaultId: 'string'
        policyEnforced: bool
      }
      replication: {
        endpointType: 'string'
        remotePath: {
          externalHostName: 'string'
          serverName: 'string'
          volumeName: 'string'
        }
        remoteVolumeRegion: 'string'
        remoteVolumeResourceId: 'string'
        replicationSchedule: 'string'
      }
      snapshot: {
        snapshotPolicyId: 'string'
      }
      volumeRelocation: {
        relocationRequested: bool
      }
    }
    defaultGroupQuotaInKiBs: int
    defaultUserQuotaInKiBs: int
    deleteBaseSnapshot: bool
    enableSubvolumes: 'string'
    encryptionKeySource: 'string'
    exportPolicy: {
      rules: [
        {
          allowedClients: 'string'
          chownMode: 'string'
          cifs: bool
          hasRootAccess: bool
          kerberos5iReadOnly: bool
          kerberos5iReadWrite: bool
          kerberos5pReadOnly: bool
          kerberos5pReadWrite: bool
          kerberos5ReadOnly: bool
          kerberos5ReadWrite: bool
          nfsv3: bool
          nfsv41: bool
          ruleIndex: int
          unixReadOnly: bool
          unixReadWrite: bool
        }
      ]
    }
    isDefaultQuotaEnabled: bool
    isLargeVolume: bool
    kerberosEnabled: bool
    keyVaultPrivateEndpointResourceId: 'string'
    ldapEnabled: bool
    networkFeatures: 'string'
    placementRules: [
      {
        key: 'string'
        value: 'string'
      }
    ]
    protocolTypes: [
      'string'
    ]
    proximityPlacementGroup: 'string'
    securityStyle: 'string'
    serviceLevel: 'string'
    smbAccessBasedEnumeration: 'string'
    smbContinuouslyAvailable: bool
    smbEncryption: bool
    smbNonBrowsable: 'string'
    snapshotDirectoryVisible: bool
    snapshotId: 'string'
    subnetId: 'string'
    throughputMibps: int
    unixPermissions: 'string'
    usageThreshold: int
    volumeSpecName: 'string'
    volumeType: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
Property Values
ExportPolicyRule
Microsoft.NetApp/netAppAccounts/capacityPools/volumes
^[a-zA-Z][a-zA-Z0-9\-_]{0,63}$
PlacementKeyValuePairs
RemotePath
ReplicationObject
TrackedResourceTags
VolumeBackupProperties
VolumeProperties
^[a-zA-Z][a-zA-Z0-9\-]{0,79}$
VolumePropertiesDataProtection
VolumePropertiesExportPolicy
VolumeRelocationProperties
VolumeSnapshotProperties
ARM template resource definition
The netAppAccounts/capacityPools/volumes resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.NetApp/netAppAccounts/capacityPools/volumes resource, add the following JSON to your template.
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  "apiVersion": "2025-01-01",
  "name": "string",
  "location": "string",
  "properties": {
    "avsDataStore": "string",
    "backupId": "string",
    "capacityPoolResourceId": "string",
    "coolAccess": "bool",
    "coolAccessRetrievalPolicy": "string",
    "coolAccessTieringPolicy": "string",
    "coolnessPeriod": "int",
    "creationToken": "string",
    "dataProtection": {
      "backup": {
        "backupPolicyId": "string",
        "backupVaultId": "string",
        "policyEnforced": "bool"
      },
      "replication": {
        "endpointType": "string",
        "remotePath": {
          "externalHostName": "string",
          "serverName": "string",
          "volumeName": "string"
        },
        "remoteVolumeRegion": "string",
        "remoteVolumeResourceId": "string",
        "replicationSchedule": "string"
      },
      "snapshot": {
        "snapshotPolicyId": "string"
      },
      "volumeRelocation": {
        "relocationRequested": "bool"
      }
    },
    "defaultGroupQuotaInKiBs": "int",
    "defaultUserQuotaInKiBs": "int",
    "deleteBaseSnapshot": "bool",
    "enableSubvolumes": "string",
    "encryptionKeySource": "string",
    "exportPolicy": {
      "rules": [
        {
          "allowedClients": "string",
          "chownMode": "string",
          "cifs": "bool",
          "hasRootAccess": "bool",
          "kerberos5iReadOnly": "bool",
          "kerberos5iReadWrite": "bool",
          "kerberos5pReadOnly": "bool",
          "kerberos5pReadWrite": "bool",
          "kerberos5ReadOnly": "bool",
          "kerberos5ReadWrite": "bool",
          "nfsv3": "bool",
          "nfsv41": "bool",
          "ruleIndex": "int",
          "unixReadOnly": "bool",
          "unixReadWrite": "bool"
        }
      ]
    },
    "isDefaultQuotaEnabled": "bool",
    "isLargeVolume": "bool",
    "kerberosEnabled": "bool",
    "keyVaultPrivateEndpointResourceId": "string",
    "ldapEnabled": "bool",
    "networkFeatures": "string",
    "placementRules": [
      {
        "key": "string",
        "value": "string"
      }
    ],
    "protocolTypes": [ "string" ],
    "proximityPlacementGroup": "string",
    "securityStyle": "string",
    "serviceLevel": "string",
    "smbAccessBasedEnumeration": "string",
    "smbContinuouslyAvailable": "bool",
    "smbEncryption": "bool",
    "smbNonBrowsable": "string",
    "snapshotDirectoryVisible": "bool",
    "snapshotId": "string",
    "subnetId": "string",
    "throughputMibps": "int",
    "unixPermissions": "string",
    "usageThreshold": "int",
    "volumeSpecName": "string",
    "volumeType": "string"
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  "apiVersion": "2025-01-01",
  "name": "string",
  "location": "string",
  "properties": {
    "avsDataStore": "string",
    "backupId": "string",
    "capacityPoolResourceId": "string",
    "coolAccess": "bool",
    "coolAccessRetrievalPolicy": "string",
    "coolAccessTieringPolicy": "string",
    "coolnessPeriod": "int",
    "creationToken": "string",
    "dataProtection": {
      "backup": {
        "backupPolicyId": "string",
        "backupVaultId": "string",
        "policyEnforced": "bool"
      },
      "replication": {
        "endpointType": "string",
        "remotePath": {
          "externalHostName": "string",
          "serverName": "string",
          "volumeName": "string"
        },
        "remoteVolumeRegion": "string",
        "remoteVolumeResourceId": "string",
        "replicationSchedule": "string"
      },
      "snapshot": {
        "snapshotPolicyId": "string"
      },
      "volumeRelocation": {
        "relocationRequested": "bool"
      }
    },
    "defaultGroupQuotaInKiBs": "int",
    "defaultUserQuotaInKiBs": "int",
    "deleteBaseSnapshot": "bool",
    "enableSubvolumes": "string",
    "encryptionKeySource": "string",
    "exportPolicy": {
      "rules": [
        {
          "allowedClients": "string",
          "chownMode": "string",
          "cifs": "bool",
          "hasRootAccess": "bool",
          "kerberos5iReadOnly": "bool",
          "kerberos5iReadWrite": "bool",
          "kerberos5pReadOnly": "bool",
          "kerberos5pReadWrite": "bool",
          "kerberos5ReadOnly": "bool",
          "kerberos5ReadWrite": "bool",
          "nfsv3": "bool",
          "nfsv41": "bool",
          "ruleIndex": "int",
          "unixReadOnly": "bool",
          "unixReadWrite": "bool"
        }
      ]
    },
    "isDefaultQuotaEnabled": "bool",
    "isLargeVolume": "bool",
    "kerberosEnabled": "bool",
    "keyVaultPrivateEndpointResourceId": "string",
    "ldapEnabled": "bool",
    "networkFeatures": "string",
    "placementRules": [
      {
        "key": "string",
        "value": "string"
      }
    ],
    "protocolTypes": [ "string" ],
    "proximityPlacementGroup": "string",
    "securityStyle": "string",
    "serviceLevel": "string",
    "smbAccessBasedEnumeration": "string",
    "smbContinuouslyAvailable": "bool",
    "smbEncryption": "bool",
    "smbNonBrowsable": "string",
    "snapshotDirectoryVisible": "bool",
    "snapshotId": "string",
    "subnetId": "string",
    "throughputMibps": "int",
    "unixPermissions": "string",
    "usageThreshold": "int",
    "volumeSpecName": "string",
    "volumeType": "string"
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
Property Values
ExportPolicyRule
Microsoft.NetApp/netAppAccounts/capacityPools/volumes
^[a-zA-Z][a-zA-Z0-9\-_]{0,63}$
PlacementKeyValuePairs
RemotePath
ReplicationObject
TrackedResourceTags
VolumeBackupProperties
VolumeProperties
^[a-zA-Z][a-zA-Z0-9\-]{0,79}$
VolumePropertiesDataProtection
VolumePropertiesExportPolicy
VolumeRelocationProperties
VolumeSnapshotProperties
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The netAppAccounts/capacityPools/volumes resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.NetApp/netAppAccounts/capacityPools/volumes resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes@2025-01-01"
  name = "string"
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      avsDataStore = "string"
      backupId = "string"
      capacityPoolResourceId = "string"
      coolAccess = bool
      coolAccessRetrievalPolicy = "string"
      coolAccessTieringPolicy = "string"
      coolnessPeriod = int
      creationToken = "string"
      dataProtection = {
        backup = {
          backupPolicyId = "string"
          backupVaultId = "string"
          policyEnforced = bool
        }
        replication = {
          endpointType = "string"
          remotePath = {
            externalHostName = "string"
            serverName = "string"
            volumeName = "string"
          }
          remoteVolumeRegion = "string"
          remoteVolumeResourceId = "string"
          replicationSchedule = "string"
        }
        snapshot = {
          snapshotPolicyId = "string"
        }
        volumeRelocation = {
          relocationRequested = bool
        }
      }
      defaultGroupQuotaInKiBs = int
      defaultUserQuotaInKiBs = int
      deleteBaseSnapshot = bool
      enableSubvolumes = "string"
      encryptionKeySource = "string"
      exportPolicy = {
        rules = [
          {
            allowedClients = "string"
            chownMode = "string"
            cifs = bool
            hasRootAccess = bool
            kerberos5iReadOnly = bool
            kerberos5iReadWrite = bool
            kerberos5pReadOnly = bool
            kerberos5pReadWrite = bool
            kerberos5ReadOnly = bool
            kerberos5ReadWrite = bool
            nfsv3 = bool
            nfsv41 = bool
            ruleIndex = int
            unixReadOnly = bool
            unixReadWrite = bool
          }
        ]
      }
      isDefaultQuotaEnabled = bool
      isLargeVolume = bool
      kerberosEnabled = bool
      keyVaultPrivateEndpointResourceId = "string"
      ldapEnabled = bool
      networkFeatures = "string"
      placementRules = [
        {
          key = "string"
          value = "string"
        }
      ]
      protocolTypes = [
        "string"
      ]
      proximityPlacementGroup = "string"
      securityStyle = "string"
      serviceLevel = "string"
      smbAccessBasedEnumeration = "string"
      smbContinuouslyAvailable = bool
      smbEncryption = bool
      smbNonBrowsable = "string"
      snapshotDirectoryVisible = bool
      snapshotId = "string"
      subnetId = "string"
      throughputMibps = int
      unixPermissions = "string"
      usageThreshold = int
      volumeSpecName = "string"
      volumeType = "string"
    }
    zones = [
      "string"
    ]
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.NetApp/netAppAccounts/capacityPools/volumes@2025-01-01"
  name = "string"
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      avsDataStore = "string"
      backupId = "string"
      capacityPoolResourceId = "string"
      coolAccess = bool
      coolAccessRetrievalPolicy = "string"
      coolAccessTieringPolicy = "string"
      coolnessPeriod = int
      creationToken = "string"
      dataProtection = {
        backup = {
          backupPolicyId = "string"
          backupVaultId = "string"
          policyEnforced = bool
        }
        replication = {
          endpointType = "string"
          remotePath = {
            externalHostName = "string"
            serverName = "string"
            volumeName = "string"
          }
          remoteVolumeRegion = "string"
          remoteVolumeResourceId = "string"
          replicationSchedule = "string"
        }
        snapshot = {
          snapshotPolicyId = "string"
        }
        volumeRelocation = {
          relocationRequested = bool
        }
      }
      defaultGroupQuotaInKiBs = int
      defaultUserQuotaInKiBs = int
      deleteBaseSnapshot = bool
      enableSubvolumes = "string"
      encryptionKeySource = "string"
      exportPolicy = {
        rules = [
          {
            allowedClients = "string"
            chownMode = "string"
            cifs = bool
            hasRootAccess = bool
            kerberos5iReadOnly = bool
            kerberos5iReadWrite = bool
            kerberos5pReadOnly = bool
            kerberos5pReadWrite = bool
            kerberos5ReadOnly = bool
            kerberos5ReadWrite = bool
            nfsv3 = bool
            nfsv41 = bool
            ruleIndex = int
            unixReadOnly = bool
            unixReadWrite = bool
          }
        ]
      }
      isDefaultQuotaEnabled = bool
      isLargeVolume = bool
      kerberosEnabled = bool
      keyVaultPrivateEndpointResourceId = "string"
      ldapEnabled = bool
      networkFeatures = "string"
      placementRules = [
        {
          key = "string"
          value = "string"
        }
      ]
      protocolTypes = [
        "string"
      ]
      proximityPlacementGroup = "string"
      securityStyle = "string"
      serviceLevel = "string"
      smbAccessBasedEnumeration = "string"
      smbContinuouslyAvailable = bool
      smbEncryption = bool
      smbNonBrowsable = "string"
      snapshotDirectoryVisible = bool
      snapshotId = "string"
      subnetId = "string"
      throughputMibps = int
      unixPermissions = "string"
      usageThreshold = int
      volumeSpecName = "string"
      volumeType = "string"
    }
    zones = [
      "string"
    ]
  }
}
Property Values
ExportPolicyRule
Microsoft.NetApp/netAppAccounts/capacityPools/volumes
^[a-zA-Z][a-zA-Z0-9\-_]{0,63}$
PlacementKeyValuePairs
RemotePath
ReplicationObject
TrackedResourceTags
VolumeBackupProperties
VolumeProperties
^[a-zA-Z][a-zA-Z0-9\-]{0,79}$
VolumePropertiesDataProtection
VolumePropertiesExportPolicy
VolumeRelocationProperties
VolumeSnapshotProperties
Feedback
Was this page helpful?
Additional resources