Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Terraform as an infrastructure as code tool for Azure Developer CLI
Article
2024-09-13
5 contributors
In this article
Azure Developer CLI (azd) supports multiple infrastructures as code (IaC) providers, including:
azd
Bicep
Terraform
By default,azdassumes Bicep as the IaC provider. Refer to theComparing Terraform and Biceparticle for help deciding which IaC provider is best for your project.
azd
Note
Terraform is still in beta. Read more about alpha and beta feature support on thefeature versioning and release strategypage
Pre-requisites
Install and configure Terraform
Install and log into Azure CLI (v 2.38.0+)
Review the architecture diagram and the Azure resources you'll deploy in the Node.js or Python Terraform template.
Note
Whileazddoesn't rely on an Azure CLI login, Terraform requires Azure CLI. Read more about this requirement fromTerraform's official documentation.
azd
Configure Terraform as the IaC provider
Open theazure.yamlfilefound in the root of your project and make sure you have the following lines to override the default, which is Bicep:infra:
  provider: terraform
Open theazure.yamlfilefound in the root of your project and make sure you have the following lines to override the default, which is Bicep:
azure.yaml
infra:
  provider: terraform
infra:
  provider: terraform
Add all your.tffiles to theinfradirectory found in the root of your project.
Add all your.tffiles to theinfradirectory found in the root of your project.
.tf
infra
Runazd up.
Runazd up.
azd up
Note
Check out these two azd templates with Terraform as IaC Provider:Node.js and TerraformandPython and Terraform.
azd pipeline configfor Terraform
azd pipeline config
Terraform stores state about your managed infrastructure and configuration. Because of this state file, you need to enable remote statebeforeyou runazd pipeline configto set up your deployment pipeline in GitHub.
azd pipeline config
By default,azdassumes the use of local state file. If you ranazd upbefore enabling remote state, you need to runazd downand switch to remote state file.
azd
azd up
azd down
Local vs remote state
Terraform uses persistedstatedata to keep track of the resources it manages.
Scenarios for enabling remote state:
To allow shared access to the state data, and allow multiple people work together on that collection of infrastructure resources
To avoid exposing sensitive information included in state file
To decrease the chance of inadvertent deletion because of storing state locally
Enable remote state
Make sure youconfigure a remote state storage account.
Make sure youconfigure a remote state storage account.
Add a new file calledprovider.conf.jsonin theinfrafolder.{
    "storage_account_name": "${RS_STORAGE_ACCOUNT}",
    "container_name": "${RS_CONTAINER_NAME}",
    "key": "azd/azdremotetest.tfstate",
    "resource_group_name": "${RS_RESOURCE_GROUP}"
}
Add a new file calledprovider.conf.jsonin theinfrafolder.
provider.conf.json
infra
{
    "storage_account_name": "${RS_STORAGE_ACCOUNT}",
    "container_name": "${RS_CONTAINER_NAME}",
    "key": "azd/azdremotetest.tfstate",
    "resource_group_name": "${RS_RESOURCE_GROUP}"
}
{
    "storage_account_name": "${RS_STORAGE_ACCOUNT}",
    "container_name": "${RS_CONTAINER_NAME}",
    "key": "azd/azdremotetest.tfstate",
    "resource_group_name": "${RS_RESOURCE_GROUP}"
}
Updateprovider.tffound in theinfrafolder to set the backend to be remote# Configure the Azure Provider
terraform {
  required_version = ">= 1.1.7, < 2.0.0"
  backend "azurerm" {
  }
Updateprovider.tffound in theinfrafolder to set the backend to be remote
provider.tf
infra
# Configure the Azure Provider
terraform {
  required_version = ">= 1.1.7, < 2.0.0"
  backend "azurerm" {
  }
# Configure the Azure Provider
terraform {
  required_version = ">= 1.1.7, < 2.0.0"
  backend "azurerm" {
  }
Runazd env set <key> <value>to add configuration in the.envfile.
For example:azd env set RS_STORAGE_ACCOUNT your_storage_account_name
azd env set RS_CONTAINER_NAME your_terraform_container_name
azd env set RS_RESOURCE_GROUP your_storage_account_resource_group
Runazd env set <key> <value>to add configuration in the.envfile.
For example:
azd env set <key> <value>
.env
azd env set RS_STORAGE_ACCOUNT your_storage_account_name
azd env set RS_CONTAINER_NAME your_terraform_container_name
azd env set RS_RESOURCE_GROUP your_storage_account_resource_group
azd env set RS_STORAGE_ACCOUNT your_storage_account_name
azd env set RS_CONTAINER_NAME your_terraform_container_name
azd env set RS_RESOURCE_GROUP your_storage_account_resource_group
Run the nextazdcommand as per your usual workflow. When remote state is detected,azdinitializes Terraform with the configured backend configuration.
Run the nextazdcommand as per your usual workflow. When remote state is detected,azdinitializes Terraform with the configured backend configuration.
azd
azd
To share the environment with teammates, make sure they runazd env refresh -e <environmentName>to refresh environment settings in the local system, and perform Step 4 to add configuration in the.envfile.
To share the environment with teammates, make sure they runazd env refresh -e <environmentName>to refresh environment settings in the local system, and perform Step 4 to add configuration in the.envfile.
azd env refresh -e <environmentName>
.env
See also
Learn more about Terraform's dependency onAzure CLI.
For more on remote state, seestore Terraform state in Azure Storage.
Template:React Web App with Node.js API and MongoDB (Terraform) on Azure
Next steps
Azure Developer CLI FAQ
Feedback
Was this page helpful?
Additional resources