Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure Azure Key Vault integration for SQL Server on Azure VMs (Resource Manager)
Article
2024-11-25
11 contributors
In this article
Applies to:SQL Server on Azure VM
There are multiple SQL Server encryption features, such astransparent data encryption (TDE),column level encryption (CLE), andbackup encryption. These forms of encryption require you to manage and store the cryptographic keys you use for encryption. The Azure Key Vault service is designed to improve the security and management of these keys in a secure and highly available location. TheSQL Server Connectorenables SQL Server to use these keys from Azure Key Vault andAzure Key Vault Managed Hardware Security Module (HSM).
If you are running SQL Server on-premises, there are steps you can follow toaccess Azure Key Vault from your on-premises SQL Server instance. The same steps apply for SQL Server on Azure VMs, but you can save time by using theAzure Key Vault Integrationfeature.
Note
The Azure Key Vault integration is available only for the Enterprise, Developer, and Evaluation Editions of SQL Server. Starting with SQL Server 2019, Standard edition is also supported.
All TDE Extensible Key Management (EKM) with Azure Key Vault setup operations must be performed by the administrator of the SQL Server computer, and Transact-SQL (T-SQL) commands done by thesysadmin. For more information on setting up TDE EKM with Azure Key Vault, seeSet up SQL Server TDE Extensible Key Management by using Azure Key Vault.
sysadmin
When this feature is enabled, it automatically installs the SQL Server Connector, configures the EKM provider to access Azure Key Vault, and creates the credential to allow you to access your vault. If you looked at the steps in the previously mentioned on-premises documentation, you can see that this feature automates steps 3, 4, and 5 (up to 5.4 to create the credential). Make sure that the service principal has been created (step 1) and that the key vault has already been created (step 2) with the proper permissions given to the service principal. Refer to theAzure role-based access controlandVault access policysections on which permissions to use.
From there, the entire setup of your SQL Server VM is automated. Once this feature has completed this setup, you can execute Transact-SQL (T-SQL) statements to begin encrypting your databases or backups as you normally would.
Note
You can also configure Key Vault integration by using a template. For more information, seeAzure quickstart template for Azure Key Vault integration.
SQL Server Connector version 1.0.5.0 is installed on the SQL Server VM through theSQL infrastructure as a service (IaaS) extension. Upgrading the SQL IaaS Agent extension will not update the provider version. Consider manually upgrading the SQL Server Connector version if you have an older version installed (for example, when using an Azure Key Vault Managed HSM, which needs at least version15.0.2000.440). You can check the SQL Server Connector version with the following T-SQL query:
SELECT name, version from sys.cryptographic_providers
SELECT name, version from sys.cryptographic_providers
Enable and configure Key Vault integration
You can enable Key Vault integration during provisioning or configure it for existing VMs.
New VMs
If you are provisioning a new SQL virtual machine with Resource Manager, the Azure portal provides a way to enable Azure Key Vault integration.

For a detailed walkthrough of provisioning, seeProvision SQL Server on Azure VM (Azure portal). You can view the parameters list and its description inAzure Key Vault integration.
Existing VMs
For existing SQL virtual machines, open yourSQL virtual machines resource, underSecurity, selectSecurity Configuration. SelectEnableto enableAzure Key Vault integration.
The following screenshot shows how to enable Azure Key Vault in the portal for an existing SQL Server on Azure VM:

When you're finished, select theApplybutton on the bottom of theSecuritypage to save your changes.
Note
The credential name we created here will be mapped to a SQL login later. This allows the SQL login to access the key vault. The manual step of creating a credential is discussed in step 5.4 ofSet up SQL Server TDE Extensible Key Management by using Azure Key Vault, but you'll need to useALTER LOGINand add the credential to the login you created.
ALTER LOGIN
ALTER LOGIN [login_name] ADD CREDENTIAL [credential_name];
ALTER LOGIN [login_name] ADD CREDENTIAL [credential_name];
Continue with step 5.5 fromSet up SQL Server TDE Extensible Key Management by using Azure Key Vaultto complete the EKM setup.
Related content
Security considerations for SQL Server on Azure Virtual Machines
Feedback
Was this page helpful?
Additional resources