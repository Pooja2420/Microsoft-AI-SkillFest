Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Table data types for dedicated SQL pool (formerly  SQL DW) in Azure Synapse Analytics
Article
2022-02-18
7 contributors
In this article
Included in this article are recommendations for defining table data types in dedicated SQL pool.
Supported data types
Dedicated SQL pool (formerly  SQL DW) supports the most commonly used data types. For a list of the supported data types, seedata typesin the CREATE TABLE statement.
Minimize row length
Minimizing the size of data types shortens the row length, which leads to better query performance. Use the smallest data type that works for your data.
Avoid defining character columns with a large default length. For example, if the longest value is 25 characters, then define your column as VARCHAR(25).
Avoid usingNVARCHARwhen you only need VARCHAR.
When possible, use NVARCHAR(4000) or VARCHAR(8000) instead of NVARCHAR(MAX) or VARCHAR(MAX).
If you're using PolyBase external tables to load your tables, the defined length of the table row can't exceed 1 MB. When a row with variable-length data exceeds 1 MB, you can load the row with BCP, but not with PolyBase.
Identify unsupported data types
If you're migrating your database from another SQL database, you might find data types that aren't supported in dedicated SQL pool. Use the following query to discover unsupported data types in your existing SQL schema:
SELECT  t.[name], c.[name], c.[system_type_id], c.[user_type_id], y.[is_user_defined], y.[name]
FROM sys.tables  t
JOIN sys.columns c on t.[object_id]    = c.[object_id]
JOIN sys.types   y on c.[user_type_id] = y.[user_type_id]
WHERE y.[name] IN ('geography','geometry','hierarchyid','image','text','ntext','sql_variant','xml')
 AND  y.[is_user_defined] = 1;
SELECT  t.[name], c.[name], c.[system_type_id], c.[user_type_id], y.[is_user_defined], y.[name]
FROM sys.tables  t
JOIN sys.columns c on t.[object_id]    = c.[object_id]
JOIN sys.types   y on c.[user_type_id] = y.[user_type_id]
WHERE y.[name] IN ('geography','geometry','hierarchyid','image','text','ntext','sql_variant','xml')
 AND  y.[is_user_defined] = 1;
Workarounds for unsupported data types
The following list shows the data types that dedicated SQL pool (formerly  SQL DW) doesn't support and gives useful alternatives for unsupported data types.
Next steps
For more information on developing tables, seeTable Overview.
Feedback
Was this page helpful?
Additional resources