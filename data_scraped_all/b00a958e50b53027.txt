Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Java Spring app with Azure App Configuration
Article
2024-12-11
18 contributors
In this article
In this quickstart, you incorporate Azure App Configuration into a Java Spring app to centralize storage and management of application settings separate from your code.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
A supportedJava Development Kit (JDK)with version 11.
Apache Mavenversion 3.0 or above.
A Spring Boot application. If you don't have one, create a Maven project with theSpring Initializr. Be sure to selectMaven Projectand, underDependencies, add theSpring Webdependency, and then select Java version 8 or higher.
Add a key-value
Add the following key-value to the App Configuration store and leaveLabelandContent Typewith their default values. For more information about how to add key-values to a store using the Azure portal or the CLI, go toCreate a key-value.
Connect to an App Configuration store
Now that you have an App Configuration store, you can use the Spring Cloud Azure Config starter to have your application communicate with the App Configuration store that you create.
To install the Spring Cloud Azure Config starter module, add the following dependency to yourpom.xmlfile:
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
</dependency>

<dependencyManagement>
    <dependencies>
        <dependency>
        <groupId>com.azure.spring</groupId>
        <artifactId>spring-cloud-azure-dependencies</artifactId>
        <version>5.18.0</version>
        <type>pom</type>
        <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
</dependency>

<dependencyManagement>
    <dependencies>
        <dependency>
        <groupId>com.azure.spring</groupId>
        <artifactId>spring-cloud-azure-dependencies</artifactId>
        <version>5.18.0</version>
        <type>pom</type>
        <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
Code the application
To use the Spring Cloud Azure Config starter to have your application communicate with the App Configuration store that you create, configure the application by using the following steps.
Create a new Java file namedMyProperties.java, and add the following lines:import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "config")
public class MyProperties {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
Create a new Java file namedMyProperties.java, and add the following lines:
import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "config")
public class MyProperties {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "config")
public class MyProperties {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
Create a new Java file namedHelloController.java, and add the following lines:import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
    private final MyProperties properties;

    public HelloController(MyProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() {
        return "Message: " + properties.getMessage();
    }
}
Create a new Java file namedHelloController.java, and add the following lines:
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
    private final MyProperties properties;

    public HelloController(MyProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() {
        return "Message: " + properties.getMessage();
    }
}
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {
    private final MyProperties properties;

    public HelloController(MyProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() {
        return "Message: " + properties.getMessage();
    }
}
In the main application Java file, add@EnableConfigurationPropertiesto enable theMyProperties.javaconfiguration properties class to take effect and register it with the Spring container.import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(MyProperties.class)
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
In the main application Java file, add@EnableConfigurationPropertiesto enable theMyProperties.javaconfiguration properties class to take effect and register it with the Spring container.
@EnableConfigurationProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(MyProperties.class)
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
@EnableConfigurationProperties(MyProperties.class)
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application. Create a new file namedAppConfigCredential.javaand add the following lines:import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application. Create a new file namedAppConfigCredential.javaand add the following lines:
DefaultAzureCredential
import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}
import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}
Then create a configuration Bootstrap Configuration, by creatingspring.factoriesfile underresources/META-INFdirectory and add the following lines and updatingcom.example.MyApplicationwith your application name and package:org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplication
Then create a configuration Bootstrap Configuration, by creatingspring.factoriesfile underresources/META-INFdirectory and add the following lines and updatingcom.example.MyApplicationwith your application name and package:
spring.factories
resources/META-INF
com.example.MyApplication
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplication
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplication
Open the auto-generated unit test and update to disable Azure App Configuration, or it tries to load from the service when running unit tests.import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(properties = "spring.cloud.azure.appconfiguration.enabled=false")
class DemoApplicationTests {

    @Test
    void contextLoads() {
    }

}
Open the auto-generated unit test and update to disable Azure App Configuration, or it tries to load from the service when running unit tests.
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(properties = "spring.cloud.azure.appconfiguration.enabled=false")
class DemoApplicationTests {

    @Test
    void contextLoads() {
    }

}
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(properties = "spring.cloud.azure.appconfiguration.enabled=false")
class DemoApplicationTests {

    @Test
    void contextLoads() {
    }

}
Create a new file namedbootstrap.propertiesunder the resources directory of your app, and add the following line to the file.spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
Create a new file namedbootstrap.propertiesunder the resources directory of your app, and add the following line to the file.
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
Set an environment variable namedAPP_CONFIGURATION_ENDPOINT, and set it to the access key to your App Configuration store. At the command line, run the following command and restart the command prompt to allow the change to take effect:setx APP_CONFIGURATION_ENDPOINT "<endpoint-of-your-app-configuration-store>"If you use Windows PowerShell, run the following command:$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'
Set an environment variable namedAPP_CONFIGURATION_ENDPOINT, and set it to the access key to your App Configuration store. At the command line, run the following command and restart the command prompt to allow the change to take effect:
setx APP_CONFIGURATION_ENDPOINT "<endpoint-of-your-app-configuration-store>"
setx APP_CONFIGURATION_ENDPOINT "<endpoint-of-your-app-configuration-store>"
If you use Windows PowerShell, run the following command:
$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"
$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'
export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'
Build and run the app locally
Open command prompt to the root directory and run the following commands to build your Spring Boot application with Maven and run it.mvn clean package
mvn spring-boot:run
Open command prompt to the root directory and run the following commands to build your Spring Boot application with Maven and run it.
mvn clean package
mvn spring-boot:run
mvn clean package
mvn spring-boot:run
After your application is running, usecurlto test your application, for example:curl -X GET http://localhost:8080/You see the message that you entered in the App Configuration store.
After your application is running, usecurlto test your application, for example:
curl -X GET http://localhost:8080/
curl -X GET http://localhost:8080/
You see the message that you entered in the App Configuration store.
Clean up resources
If you don't want to continue using the resources created in this article, delete the resource group you created here to avoid charges.
Important
Deleting a resource group is irreversible. The resource group and all the resources in it are permanently deleted. Ensure that you don't accidentally delete the wrong resource group or resources. If you created the resources for this article inside a resource group that contains other resources you want to keep, delete each resource individually from its respective pane instead of deleting the resource group.
Sign in to theAzure portal, and selectResource groups.
In theFilter by namebox, enter the name of your resource group.
In the result list, select the resource group name to see an overview.
SelectDelete resource group.
You're asked to confirm the deletion of the resource group. Enter the name of your resource group to confirm, and selectDelete.
After a few moments, the resource group and all its resources are deleted.
Next steps
In this quickstart, you created a new App Configuration store and used it with a Java Spring app. For more information, seeSpring on Azure. For further questions see thereference documentation, it has all of the details on how the Spring Cloud Azure App Configuration library works. To learn how to enable your Java Spring app to dynamically refresh configuration settings, continue to the next tutorial.
Enable dynamic configuration
Feedback
Was this page helpful?
Additional resources