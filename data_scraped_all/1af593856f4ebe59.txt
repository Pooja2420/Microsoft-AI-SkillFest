Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage rules for dynamic membership groups in Microsoft Entra ID
Article
2024-12-19
32 contributors
In this article
You can create user or device attribute-based rules to enable membership for dynamic membership groups in Microsoft Entra ID, part of Microsoft Entra. You can add and remove dynamic membership groups automatically using membership rules based on member attributes. In Microsoft Entra, a single tenant can have a maximum of 15,000 dynamic membership groups.
This article details the properties and syntax to create rules for dynamic membership groups based on users or devices.
Note
Security groups can be used for either devices or users, but Microsoft 365 groups can include only users.
When the attributes of a user or a device change, the system evaluates all rules for dynamic membership groups in a directory to see if the change would trigger any group adds or removes. If a user or device satisfies a rule on a group, they're added as a member of that group. If they no longer satisfy the rule, they're removed. You can't manually add or remove a member of a dynamic membership group.
You can create a dynamic membership groups for users or devices, but you can't create a rule that contains both users and devices.
You can't create a device membership group based on the user attributes of the device owner. Device membership rules can reference only device attributes.
Note
This feature requires a Microsoft Entra ID P1 license or Intune for Education for each unique user that is a member of one or more dynamic membership groups. You don't have to assign licenses to users for them to be members of dynamic membership groups, but you must have the minimum number of licenses in the Microsoft Entra organization to cover all such users. For example, if you had a total of 1,000 unique users in all dynamic membership groups in your organization, you would need at least 1,000 licenses for Microsoft Entra ID P1 to meet the license requirement.
No license is required for devices that are members of a dynamic membership group based on a device.
Rule builder in the Azure portal
Microsoft Entra ID provides a rule builder to create and update your important rules more quickly. The rule builder supports the construction of up to five expressions. The rule builder makes it easier to form a rule with a few simple expressions, however, it can't be used to reproduce every rule. If the rule builder doesn't support the rule you want to create, you can use the text box.
Important
The rule builder is available only for user-based dynamic membership groups. Device-based dynamic membership groups can be created only using the text box.
Here are some examples of advanced rules or syntax that require the use of the text box:
Rule with more than five expressions
The Direct reports rule
Rules with -contains or -notContains operator
Settingoperator precedence
Rules with complex expressions; for example,(user.proxyAddresses -any (_ -startsWith "contoso"))
(user.proxyAddresses -any (_ -startsWith "contoso"))
Note
The rule builder might not be able to display some rules constructed in the text box. You might see a message when the rule builder is not able to display the rule. The rule builder doesn't change the supported syntax, validation, or processing of rules for dynamic membership groups in any way.
For more step-by-step instructions, seeCreate or update a dynamic membership group.

Rule syntax for a single expression
A single expression is the simplest form of a membership rule and only has the three parts mentioned above. A rule with a single expression looks similar to this example:Property Operator Value, where the syntax for the property is the name of object.property.
Property Operator Value
The following example illustrates a properly constructed membership rule with a single expression:
user.department -eq "Sales"
user.department -eq "Sales"
Parentheses are optional for a single expression. The total length of the body of your membership rule can't exceed 3,072 characters.
Constructing the body of a membership rule
A membership rule that automatically populates a group with users or devices is a binary expression that results in a true or false outcome. The three parts of a simple rule are:
Property
Operator
Value
The order of the parts within an expression is important to avoid syntax errors.
Supported properties
There are three types of properties that can be used to construct a membership rule.
Boolean
DateTime
String
String collection
The following are the user properties that you can use to create a single expression.
Properties of type boolean
user.accountEnabled -eq true
user.dirSyncEnabled -eq true
Properties of type dateTime
user.employeeHireDate -eq "value"
Properties of type string
user.city -eq "value"
user.country -eq "value"
user.companyName -eq "value"
user.department -eq "value"
user.displayName -eq "value"
user.employeeId -eq "value"<br>user.employeeId -ne *null*
user.facsimileTelephoneNumber -eq "value"
user.givenName -eq "value"
user.jobTitle -eq "value"
user.mail -eq "value"
user.mail -notEndsWith "@Contoso.com"
user.mailNickName -eq "value"
user.mailNickname -endsWith "-vendor"
user.memberOf -any (group.objectId -in ['value'])
user.mobile -eq "value"
user.objectId -eq "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb"
user.onPremisesDistinguishedName -eq "value"
user.onPremisesSecurityIdentifier -eq "S-1-1-11-1111111111-1111111111-1111111111-1111111"
user.passwordPolicies -eq "DisableStrongPassword"
user.physicalDeliveryOfficeName -eq "value"
user.postalCode -eq "value"
user.preferredLanguage -eq "en-US"
user.sipProxyAddress -eq "value"
user.state -eq "value"
user.streetAddress -eq "value"
user.surname -eq "value"
user.telephoneNumber -eq "value"
user.usageLocation -eq "US"
user.userPrincipalName -eq "alias@domain"
user.userType -eq "Member"
Properties of type string collection
user.otherMails -startsWith "alias@domain"
user.otherMails -endsWith"@contoso.com"
user.proxyAddresses -notEndsWith "@outlook.com"
For the properties used for device rules, seeRules for devices.
Supported expression operators
The following table lists all the supported operators and their syntax for a single expression. Operators can be used with or without the hyphen (-) prefix. TheContainsoperator does partial string matches but not item in a collection matches.
Caution
For best results, minimize the use of MATCH or CONTAINS as much as possible.Create simpler, more efficient rules for dynamic membership groupsprovides guidance on how to create rules that result in better dynamic group processing times. The''memberOf''operator is in preview and should be used with caution, as it has some limitations.
Using the -in and -notIn operators
If you want to compare the value of a user attribute against multiple values, you can use the -in or -notIn operators. Use the bracket symbols "[" and "]" to begin and end the list of values.
In the following example, the expression evaluates to true if the value of user.department equals any of the values in the list:
user.department -in ["50001","50002","50003","50005","50006","50007","50008","50016","50020","50024","50038","50039","51100"]
user.department -in ["50001","50002","50003","50005","50006","50007","50008","50016","50020","50024","50038","50039","51100"]
Using the -le and -ge operators
You can use the less than (-le) or greater than (-ge) operators when using the employeeHireDate attribute in rules for dynamic membership groups.Examples:
user.employeehiredate -ge system.now -plus p1d 

user.employeehiredate -le 2020-06-10T18:13:20Z
user.employeehiredate -ge system.now -plus p1d 

user.employeehiredate -le 2020-06-10T18:13:20Z
Using the -match operator
The-matchoperator is used for matching any regular expression. Examples:
user.displayName -match "^Da.*"
user.displayName -match "^Da.*"
Da,Dav,Davidevaluate to true, aDa evaluates to false.
Da
Dav
David
user.displayName -match ".*vid"
user.displayName -match ".*vid"
Davidevaluates to true,Daevaluates to false.
David
Da
Supported values
The values used in an expression can consist of several types, including:
Strings
Boolean â true, false
Numbers
Arrays â number array, string array
When specifying a value within an expression, it's important to use the correct syntax to avoid errors. Some syntax tips are:
Double quotes are optional unless the value is a string.
Regex and string operations aren't case sensitive.
Ensure that property names are correctly formatted as shown, as they're case sensitive.
When a string value contains double quotes, both quotes should be escaped using the ` character, for example, user.department -eq `"Sales`" is the proper syntax when "Sales" is the value. Single quotes should be escaped by using two single quotes instead of one each time.
You can also perform Null checks, using null as a value, for example,user.department -eq null.
user.department -eq null
Use of Null values
To specify a null value in a rule, you can use thenullvalue.
Use -eq or -ne when comparing thenullvalue in an expression.
Use quotes around the wordnullonly if you want it to be interpreted as a literal string value.
The -not operator can't be used as a comparative operator for null. If you use it, you get an error whether you use null or $null.
The correct way to reference the null value is as follows:
user.mail âne null
user.mail âne null
Rules with multiple expressions
Manage rules for dynamic membership groups can consist of more than one single expression connected by the -and, -or, and -not logical operators. Logical operators can also be used in combination.
The following are examples of properly constructed membership rules with multiple expressions:
(user.department -eq "Sales") -or (user.department -eq "Marketing")
(user.department -eq "Sales") -and -not (user.jobTitle -startsWith "SDE")
(user.department -eq "Sales") -or (user.department -eq "Marketing")
(user.department -eq "Sales") -and -not (user.jobTitle -startsWith "SDE")
Operator precedence
All operators are listed below in order of precedence from highest to lowest. Operators on same line are of equal precedence:
-eq -ne -startsWith -notStartsWith -contains -notContains -match ânotMatch -in -notIn
-not
-and
-or
-any -all
-eq -ne -startsWith -notStartsWith -contains -notContains -match ânotMatch -in -notIn
-not
-and
-or
-any -all
The following example illustrates operator precedence where two expressions are being evaluated for the user:
user.department âeq "Marketing" âand user.country âeq "US"
user.department âeq "Marketing" âand user.country âeq "US"
Parentheses are needed only when precedence doesn't meet your requirements. For example, if you want department to be evaluated first, the following shows how parentheses can be used to determine order:
user.country âeq "US" âand (user.department âeq "Marketing" âor user.department âeq "Sales")
user.country âeq "US" âand (user.department âeq "Marketing" âor user.department âeq "Sales")
Rules with complex expressions
A membership rule can consist of complex expressions where the properties, operators, and values take on more complex forms. Expressions are considered complex when any of the following are true:
The property consists of a collection of values; specifically, multi-valued properties
The expressions use the -any and -all operators
The value of the expression can itself be one or more expressions
Multi-value properties
Multi-value properties are collections of objects of the same type. They can be used to create membership rules using the -any and -all logical operators.
user.assignedPlans -any (assignedPlan.servicePlanId -eq "aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e" -and assignedPlan.capabilityStatus -eq "Enabled")
(user.proxyAddresses -any (\_ -startsWith "contoso"))
Using the -any and -all operators
You can use -any and -all operators to apply a condition to one or all of the items in the collection, respectively.
-any (satisfied when at least one item in the collection matches the condition)
-all (satisfied when all items in the collection match the condition)
assignedPlans is a multi-value property that lists all service plans assigned to the user. The following expression selects users who have the Exchange Online (Plan 2) service plan (as a GUID value) that is also in Enabled state:
user.assignedPlans -any (assignedPlan.servicePlanId -eq "efb87545-963c-4e0d-99df-69c6916d9eb0" -and assignedPlan.capabilityStatus -eq "Enabled")
user.assignedPlans -any (assignedPlan.servicePlanId -eq "efb87545-963c-4e0d-99df-69c6916d9eb0" -and assignedPlan.capabilityStatus -eq "Enabled")
A rule such as this one can be used to group all users for whom a Microsoft 365 or other Microsoft Online Service capability is enabled. You could then apply with a set of policies to the group.
The following expression selects all users who have any service plan that is associated with the Intune service (identified by service name "SCO"):
user.assignedPlans -any (assignedPlan.service -eq "SCO" -and assignedPlan.capabilityStatus -eq "Enabled")
user.assignedPlans -any (assignedPlan.service -eq "SCO" -and assignedPlan.capabilityStatus -eq "Enabled")
The following expression selects all users who have no assigned service plan:
user.assignedPlans -all (assignedPlan.servicePlanId -eq null)
user.assignedPlans -all (assignedPlan.servicePlanId -eq null)
Using the underscore (_) syntax
The underscore (_) syntax matches occurrences of a specific value in one of the multivalued string collection properties to add users or devices to a dynamic membership group. It's used with the -any or -all operators.
Here's an example of using the underscore (_) in a rule to add members based on user.proxyAddress (it works the same for user.otherMails). This rule adds any user with proxy address that starts with "contoso" to the group.
(user.proxyAddresses -any (_ -startsWith "contoso"))
(user.proxyAddresses -any (_ -startsWith "contoso"))
Other properties and common rules
Create a "Direct reports" rule
You can create a group containing all direct reports of a manager. When the manager's direct reports change in the future, the group's membership is adjusted automatically.
The direct reports rule is constructed using the following syntax:
Direct Reports for "{objectID_of_manager}"
Direct Reports for "{objectID_of_manager}"
Here's an example of a valid rule, where "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb" is the objectID of the manager:
Direct Reports for "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb"
Direct Reports for "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb"
The following tips can help you use the rule properly.
TheManager IDis the object ID of the manager. It can be found in the manager'sProfile.
For the rule to work, make sure theManagerproperty is set correctly for users in your organization. You can check the current value in the user'sProfile.
This rule supports only the manager's direct reports. In other words, you can't create a group with the manager's direct reportsandtheir reports.
This rule can't be combined with any other membership rules.
Create an "All users" rule
You can create a group containing all users within an organization using a membership rule. When users are added or removed from the organization in the future, the group's membership is adjusted automatically.
The "All users" rule is constructed using single expression using the -ne operator and the null value. This rule adds B2B guest users and member users to the group.
user.objectId -ne null
user.objectId -ne null
If you want your group to exclude guest users and include only members of your organization, you can use the following syntax:
(user.objectId -ne null) -and (user.userType -eq "Member")
(user.objectId -ne null) -and (user.userType -eq "Member")
Create an "All devices" rule
You can create a group containing all devices within an organization using a membership rule. When devices are added or removed from the organization in the future, the group's membership is adjusted automatically.
The "All Devices" rule is constructed using single expression using the -ne operator and the null value:
device.objectId -ne null
device.objectId -ne null
Extension properties and custom extension properties
Extension attributes and custom extension properties are supported as string properties in rules for dynamic membership groups.Extension attributescan be synced from on-premises Window Server Active Directory or updated using Microsoft Graph and take the format of "ExtensionAttributeX," where X equals 1 - 15. Multi-value extension properties aren't supported in rules for dynamic membership groups.
Here's an example of a rule that uses an extension attribute as a property:
(user.extensionAttribute15 -eq "Marketing")
(user.extensionAttribute15 -eq "Marketing")
Custom extension propertiescan be synced from on-premises Windows Server Active Directory, from a connected SaaS application, or created using Microsoft Graph, and are of the format ofuser.extension_[GUID]_[Attribute], where:
user.extension_[GUID]_[Attribute]
[GUID] is the stripped version of the unique identifier in Microsoft Entra ID for the application that created the property. It contains only characters 0-9 and A-Z
[Attribute] is the name of the property as it was created
An example of a rule that uses a custom extension property is:
user.extension_c272a57b722d4eb29bfe327874ae79cb_OfficeNumber -eq "123"
user.extension_c272a57b722d4eb29bfe327874ae79cb_OfficeNumber -eq "123"
Custom extension properties are also called directory or Microsoft Entra extension properties.
The custom property name can be found in the directory by querying a user's property using Graph Explorer and searching for the property name. Also, you can now selectGet custom extension propertieslink in the dynamic membership groups rule builder to enter a unique app ID and receive the full list of custom extension properties to use when creating a rule for dynamic membership groups. This list can also be refreshed to get any new custom extension properties for that app. Extension attributes and custom extension properties must be from applications in your tenant.
For more information, seeUse the attributes in dynamic membership groupsin the articleMicrosoft Entra Connect Sync: Directory extensions.
Rules for devices
You can also create a rule that selects device objects for membership in a group. You can't have both users and devices as group members.
Note
TheorganizationalUnitattribute is no longer listed and should not be used. This string is set by Intune in specific cases but is not recognized by Microsoft Entra ID, so no devices are added to groups based on this attribute.
organizationalUnit
Thesystemlabelsattribute is read-only and cannot be set with Intune.
systemlabels
For Windows 10, the correct format of thedeviceOSVersionattribute is as follows: (device.deviceOSVersion -startsWith "10.0.1"). The formatting can be validated with the Get-MgDevice PowerShell cmdlet:
deviceOSVersion
Get-MgDevice -Search "displayName:YourMachineNameHere" -ConsistencyLevel eventual | Select-Object -ExpandProperty 'OperatingSystemVersion'
Get-MgDevice -Search "displayName:YourMachineNameHere" -ConsistencyLevel eventual | Select-Object -ExpandProperty 'OperatingSystemVersion'
The following device attributes can be used.
Note
When usingsystemLabels, a read-only attribute that is used in various contexts, such as device management and sensitivity labeling, is not editable through Intune.When usingdeviceOwnershipto create dynamic membership groups for devices, you need to set the value equal toCompany. On Intune the device ownership is represented instead as Corporate. For more information, seeOwnerTypesfor more details.When usingdeviceTrustTypeto create dynamic membership groups for devices, you need to set the value equal toAzureADto represent Microsoft Entra joined devices,ServerADto represent Microsoft Entra hybrid joined devices orWorkplaceto represent Microsoft Entra registered devices.When usingextensionAttribute1-15to create dynamic membership groups for devices you need to set the value forextensionAttribute1-15on the device. Learn more onhow to writeextensionAttributeson a Microsoft Entra device object
systemLabels
deviceOwnership
Company
deviceTrustType
AzureAD
ServerAD
Workplace
extensionAttribute1-15
extensionAttribute1-15
extensionAttributes
Next steps
These articles provide additional information on groups in Microsoft Entra ID.
See existing groups
Create a new group and adding members
Manage settings of a group
Manage memberships of a group
Manage rules for dynamic membership groups for users
Feedback
Was this page helpful?
Additional resources