Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate to Azure resources from on-premises JavaScript apps
Article
2024-10-22
2 contributors
In this article
Apps running outside of Azure (for example on-premises or at a third-party data center) should use an application service principal to authenticate to Azure when accessing Azure resources.  Application service principal objects are created using the app registration process in Azure.  When an application service principal is created, a client ID and client secret are generated for your app. You store the client ID, client secret, and your tenant ID in environment variables so that the Azure SDK for JavaScript uses the environment variables to authenticate your app to Azure at runtime.
A different app registration should be created for each environment (such as test, stage, production) the app is running in.  This allows environment-specific resource permissions to be configured for each service principal and make sure an app deployed to one environment doesn't talk to Azure resources that are part of another environment.
1 - Register the application in Azure
An app can be registered with Azure using either the Azure portal or the Azure CLI.
Azure portal
Azure CLI
Sign in to theAzure portaland follow these steps.
Enterapp registrationsin the search bar at the top of the Azure portal.
Select the item labeledApp registrationsunder the underServicesheading on the menu that appears below the search bar.
Nameâ Enter a name for the app registration in Azure.  It is recommended this name include the app name and environment (test, prod) the app registration is for.
Supported account typesâAccounts in this organizational directory only.
Application (client) IDâ This is the app ID that your app will use to access Azure during local development. Copy this value to a temporary location in a text editor as you'll need it in a future step.
Directory (tenant) IDâ This value will also be needed by your app when it authenticates to Azure.  Copy this value to a temporary location in a text editor it will also be needed it in a future step.
Client credentialsâ You must set the client credentials for the app before your app can authenticate to Azure and use Azure services.  SelectAdd a certificate or secretto add credentials for your app.
Descriptionâ Enter a value ofCurrent.
Expiresâ Select a value of24 months.
az ad sp create-for-rbac --name <app-name>
az ad sp create-for-rbac --name <app-name>
The output of the command will be similar to the following.  Make note of these values or keep this window open as you'll need these values in the next step and won't be able to view the password (client secret) value again.
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "msdocs-sdk-auth-prod",
  "password": "Aa1Bb~2Cc3.-Dd4Ee5Ff6Gg7Hh8Ii9_Jj0Kk1Ll2",
  "tenant": "ffffaaaa-5555-bbbb-6666-cccc7777dddd"
}
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "msdocs-sdk-auth-prod",
  "password": "Aa1Bb~2Cc3.-Dd4Ee5Ff6Gg7Hh8Ii9_Jj0Kk1Ll2",
  "tenant": "ffffaaaa-5555-bbbb-6666-cccc7777dddd"
}
2 - Assign roles to the application service principal
Next, you need to determine what roles (permissions) your app needs on what resources and assign those roles to your app. Roles can be assigned a role at a resource, resource group, or subscription scope.  This example will show how to assign roles for the service principal at the resource group scope since most applications group all their Azure resources into a single resource group.
Azure portal
Azure CLI
Select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Use the search box to filter the list to a more manageable size. This example shows how to filter for Storage Blob roles.
Select the role that you want to assign.SelectNextto go to the next screen.
SelectUser, group, or service principalunderAssign access to.
Select+ Select membersunderMembers
TheSelecttext box can be used to filter the list of users and groups in your subscription. If needed, type the first few characters of the service principal you created for the app to filter the list.
Select the service principal associated with your application.
A service principal is assigned a role in Azure using theaz role assignment createcommand.
az role assignment create --assignee "{appId}" \
    --role "{roleName}" \
    --scope /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
az role assignment create --assignee "{appId}" \
    --role "{roleName}" \
    --scope /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
To get the role names that a service principal can be assigned to, use theaz role definition listcommand.
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
For example, to allow the service principal to read, write, and delete access to Azure Storage blob containers and data to all storage accounts in themsdocs-sdk-auth-exampleresource group, you would assign the application service principal to theStorage Blob Data Contributorrole using the following command.
az role assignment create --assignee "aaaaaaaa-bbbb-cccc-7777-888888888888" \
    --role "Storage Blob Data Contributor" \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-javascript-sdk-auth-example \
az role assignment create --assignee "aaaaaaaa-bbbb-cccc-7777-888888888888" \
    --role "Storage Blob Data Contributor" \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-javascript-sdk-auth-example \
For information on assigning permissions at the resource or subscription level using the Azure CLI, see the articleAssign Azure roles using the Azure CLI.
3 - Configure environment variables for application
You must set theAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_CLIENT_SECRETenvironment variables for the process that runs your JavaScript app to make the application service principal credentials available to your app at runtime.  TheDefaultAzureCredentialobject looks for the service principal information in these environment variables.
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_CLIENT_SECRET
DefaultAzureCredential
AZURE_CLIENT_ID=<value>
AZURE_TENANT_ID=<value>
AZURE_CLIENT_SECRET=<value>
AZURE_CLIENT_ID=<value>
AZURE_TENANT_ID=<value>
AZURE_CLIENT_SECRET=<value>
4 - Implement DefaultAzureCredential in application
To authenticate Azure SDK client objects to Azure, your application should use theDefaultAzureCredentialclass from the@azure/identitypackage.
DefaultAzureCredential
First, add the@azure/identitypackage to your application.
npm install @azure/identity
npm install @azure/identity
Next, for any JavaScript code that creates an Azure SDK client object in your app, you'll want to:
Import theDefaultAzureCredentialclass from the@azure/identitymodule.
DefaultAzureCredential
@azure/identity
Create aDefaultAzureCredentialobject.
DefaultAzureCredential
Pass theDefaultAzureCredentialobject to the Azure SDK client object constructor.
DefaultAzureCredential
An example of this is shown in the following code segment.
// connect-with-default-azure-credential.js
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config'

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
// connect-with-default-azure-credential.js
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config'

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
When the above code instantiates theDefaultAzureCredentialobject,DefaultAzureCredentialreads the environment variablesAZURE_SUBSCRIPTION_ID,AZURE_TENANT_ID,AZURE_CLIENT_ID, andAZURE_CLIENT_SECRETfor the application service principal information to connect to Azure with.
DefaultAzureCredential
DefaultAzureCredential
AZURE_SUBSCRIPTION_ID
AZURE_TENANT_ID
AZURE_CLIENT_ID
AZURE_CLIENT_SECRET
Feedback
Was this page helpful?
Additional resources