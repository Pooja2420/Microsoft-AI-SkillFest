Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure the max degree of parallelism (MAXDOP) in Azure SQL Database
Article
2023-03-21
10 contributors
In this article
Applies to:Azure SQL DatabaseSQL database in Fabric
This article describes themax degree of parallelism (MAXDOP)configuration setting in Azure SQL Database.
Note
This content is focused on Azure SQL Database.Azure SQL Database is based on the latest stable version of the Microsoft SQL Server database engine, so much of the content is similar though troubleshooting and configuration options differ. For more on MAXDOP in SQL Server, seeConfigure the max degree of parallelism Server Configuration Option.
Overview
MAXDOP controls intra-query parallelism in the database engine. Higher MAXDOP values generally result in more parallel threads per query, and faster query execution.
In Azure SQL Database, the default MAXDOP setting for each new single database and elastic pool database is 8. This default prevents unnecessary resource utilization, while still allowing the database engine to execute queries faster using parallel threads. It is not typically necessary to further configure MAXDOP in Azure SQL Database workloads, though it may provide benefits as an advanced performance tuning exercise.
Note
In September 2020, based on years of telemetry in the Azure SQL Database service MAXDOP 8 was made thedefault for new databases, as the optimal value for the widest variety of customer workloads. This default helped prevent performance problems due to excessive parallelism. Prior to that, the default setting for new databases was MAXDOP 0. MAXDOP was not automatically changed for existing databases created prior to September 2020.
In general, if the database engine chooses to execute a query using parallelism, execution time is faster. However, excess parallelism can consume additional processor resources without improving query performance. At scale, excess parallelism can negatively affect query performance for all queries executing on the same database engine instance. Traditionally, setting an upper bound for parallelism has been a common performance tuning exercise in SQL Server workloads.
The following table describes database engine behavior when executing queries with different MAXDOP values:
Note
Each query executes with at least one scheduler, and one worker thread on that scheduler.
A query executing with parallelism uses additional schedulers, and additional parallel threads. Because multiple parallel threads may execute on the same scheduler, the total number of threads used to execute a query may be higher than specified MAXDOP value or the total number of logical processors. For more information, seeScheduling parallel tasks.
Considerations
In Azure SQL Database, you can change the default MAXDOP value:At the query level, using theMAXDOPquery hint.At the database level, using theMAXDOPdatabase scoped configuration.
In Azure SQL Database, you can change the default MAXDOP value:
At the query level, using theMAXDOPquery hint.
At the database level, using theMAXDOPdatabase scoped configuration.
Long-standing SQL Server MAXDOP considerations andrecommendationsare applicable to Azure SQL Database.
Long-standing SQL Server MAXDOP considerations andrecommendationsare applicable to Azure SQL Database.
Index operations that create or rebuild an index, or that drop a clustered index, can be resource intensive. You can override the database MAXDOP value for index operations by specifying the MAXDOP index option in theCREATE INDEXorALTER INDEXstatement. The MAXDOP value is applied to the statement at execution time and is not stored in the index metadata. For more information, seeConfigure Parallel Index Operations.
Index operations that create or rebuild an index, or that drop a clustered index, can be resource intensive. You can override the database MAXDOP value for index operations by specifying the MAXDOP index option in theCREATE INDEXorALTER INDEXstatement. The MAXDOP value is applied to the statement at execution time and is not stored in the index metadata. For more information, seeConfigure Parallel Index Operations.
CREATE INDEX
ALTER INDEX
In addition to queries and index operations, the database scoped configuration option for MAXDOP also controls parallelism of other statements that may use parallel execution, such as DBCC CHECKTABLE, DBCC CHECKDB, and DBCC CHECKFILEGROUP.
In addition to queries and index operations, the database scoped configuration option for MAXDOP also controls parallelism of other statements that may use parallel execution, such as DBCC CHECKTABLE, DBCC CHECKDB, and DBCC CHECKFILEGROUP.
Recommendations
Changing MAXDOP for the database can have major impact on query performance and resource utilization, both positive and negative. However, there is no single MAXDOP value that is optimal for all workloads. Therecommendationsfor setting MAXDOP are nuanced, and depend on many factors.
Some peak concurrent workloads may operate better with a different MAXDOP than others. A properly configured MAXDOP should reduce the risk of performance and availability incidents, and in some cases may reduce costs by being able to avoid unnecessary resource utilization, and thus scale down to a lower service objective.
Excessive parallelism
A higher MAXDOP often reduces duration for CPU-intensive queries. However, excessive parallelism can worsen other concurrent workload performance by starving other queries of CPU and worker thread resources. In extreme cases, excessive parallelism can consume all database or elastic pool resources, causing query timeouts, errors, and application outages.
Tip
We recommend that customers avoid setting MAXDOP to 0 even if it does not appear to cause problems currently.
Excessive parallelism becomes most problematic when there are more concurrent requests than can be supported by the CPU and worker thread resources provided by the service objective. Avoid MAXDOP 0 to reduce the risk of potential future problems due to excessive parallelism if a database is scaled up, or if future hardware configurations in Azure SQL Database provide more cores for the same database service objective.
Modifying MAXDOP
If you determine that a MAXDOP setting different from the default is optimal for your Azure SQL Database workload, you can use theALTER DATABASE SCOPED CONFIGURATIONT-SQL statement. For examples, see theExamples using Transact-SQLsection below. To change MAXDOP to a non-default value for each new database you create, add this step to your database deployment process.
ALTER DATABASE SCOPED CONFIGURATION
If non-default MAXDOP benefits only a small subset of queries in the workload, you can override MAXDOP at the query level by adding the OPTION (MAXDOP) hint. For examples, see theExamples using Transact-SQLsection below.
Thoroughly test your MAXDOP configuration changes with load testing involving realistic concurrent query loads.
MAXDOP for the primary and secondary replicas can be configured independently if different MAXDOP settings are optimal for your read-write and read-only workloads. This applies to Azure SQL Databaseread scale-out,geo-replication, andHyperscalesecondary replicas. By default, all secondary replicas inherit the MAXDOP configuration of the primary replica.
Security
Permissions
TheALTER DATABASE SCOPED CONFIGURATIONstatement must be executed as the server admin, as a member of the database roledb_owner, or a user that has been granted theALTER ANY DATABASE SCOPED CONFIGURATIONpermission.
ALTER DATABASE SCOPED CONFIGURATION
db_owner
ALTER ANY DATABASE SCOPED CONFIGURATION
Examples
These examples use the latestAdventureWorksLTsample database when theSAMPLEoption is chosen for a new single database of Azure SQL Database.
AdventureWorksLT
SAMPLE
PowerShell
This example shows how to useALTER DATABASE SCOPED CONFIGURATIONstatement to set theMAXDOPconfiguration to2. The setting takes effect immediately for new queries. The PowerShell cmdletInvoke-SqlCmdexecutes the T-SQL queries to set and the return the MAXDOP database scoped configuration.
MAXDOP
2
$dbName = "sample" 
$serverName = <server name here>
$serveradminLogin = <login here>
$serveradminPassword = <password here>
$desiredMAXDOP = 8

$params = @{
    'database' = $dbName
    'serverInstance' =  $serverName
    'username' = $serveradminLogin
    'password' = $serveradminPassword
    'outputSqlErrors' = $true
    'query' = 'ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = ' + $desiredMAXDOP + ';
     SELECT [value] FROM sys.database_scoped_configurations WHERE [name] = ''MAXDOP'';'
  }
  Invoke-SqlCmd @params
$dbName = "sample" 
$serverName = <server name here>
$serveradminLogin = <login here>
$serveradminPassword = <password here>
$desiredMAXDOP = 8

$params = @{
    'database' = $dbName
    'serverInstance' =  $serverName
    'username' = $serveradminLogin
    'password' = $serveradminPassword
    'outputSqlErrors' = $true
    'query' = 'ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = ' + $desiredMAXDOP + ';
     SELECT [value] FROM sys.database_scoped_configurations WHERE [name] = ''MAXDOP'';'
  }
  Invoke-SqlCmd @params
This example is for use with Azure SQL Databases withread scale-out replicas enabled,geo-replication, andAzure SQL Database Hyperscale secondary replicas. As an example, the primary replica is set to a different default MAXDOP as the secondary replica, anticipating that there may be differences between a read-write and a read-only workload.
$dbName = "sample" 
$serverName = <server name here>
$serveradminLogin = <login here>
$serveradminPassword = <password here>
$desiredMAXDOP_primary = 8
$desiredMAXDOP_secondary_readonly = 1
 
$params = @{
    'database' = $dbName
    'serverInstance' =  $serverName
    'username' = $serveradminLogin
    'password' = $serveradminPassword
    'outputSqlErrors' = $true
    'query' = 'ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = ' + $desiredMAXDOP_primary + ';
    ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = ' + $desiredMAXDOP_secondary_readonly + ';
    SELECT [value], value_for_secondary FROM sys.database_scoped_configurations WHERE [name] = ''MAXDOP'';'
  }
  Invoke-SqlCmd @params
$dbName = "sample" 
$serverName = <server name here>
$serveradminLogin = <login here>
$serveradminPassword = <password here>
$desiredMAXDOP_primary = 8
$desiredMAXDOP_secondary_readonly = 1
 
$params = @{
    'database' = $dbName
    'serverInstance' =  $serverName
    'username' = $serveradminLogin
    'password' = $serveradminPassword
    'outputSqlErrors' = $true
    'query' = 'ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = ' + $desiredMAXDOP_primary + ';
    ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = ' + $desiredMAXDOP_secondary_readonly + ';
    SELECT [value], value_for_secondary FROM sys.database_scoped_configurations WHERE [name] = ''MAXDOP'';'
  }
  Invoke-SqlCmd @params
Transact-SQL
You can use theAzure portal query editor,SQL Server Management Studio (SSMS), orAzure Data Studioto execute T-SQL queries against your Azure SQL Database.
Open a new query window.
Open a new query window.
Connect to the database where you want to change MAXDOP. You cannot change database scoped configurations in themasterdatabase.
Connect to the database where you want to change MAXDOP. You cannot change database scoped configurations in themasterdatabase.
master
Copy and paste the following example into the query window and selectExecute.
Copy and paste the following example into the query window and selectExecute.
This example shows how to determine the current database MAXDOP database scoped configuration using thesys.database_scoped_configurationssystem catalog view.
SELECT [value] FROM sys.database_scoped_configurations WHERE [name] = 'MAXDOP';
SELECT [value] FROM sys.database_scoped_configurations WHERE [name] = 'MAXDOP';
This example shows how to useALTER DATABASE SCOPED CONFIGURATIONstatement to set theMAXDOPconfiguration to8. The setting takes effect immediately.
MAXDOP
8
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
This example is for use with Azure SQL Databases withread scale-out replicas enabled,geo-replication, andHyperscalesecondary replicas. As an example, the primary replica is set to a different MAXDOP than the secondary replica, anticipating that there may be differences between the read-write and read-only workloads. All statements are executed on the primary replica. Thevalue_for_secondarycolumn of thesys.database_scoped_configurationscontains settings for the secondary replica.
value_for_secondary
sys.database_scoped_configurations
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = 1;
SELECT [value], value_for_secondary FROM sys.database_scoped_configurations WHERE [name] = 'MAXDOP';
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = 1;
SELECT [value], value_for_secondary FROM sys.database_scoped_configurations WHERE [name] = 'MAXDOP';
This example shows how to execute a query using the query hint to force themax degree of parallelismto2.
max degree of parallelism
2
SELECT ProductID, OrderQty, SUM(LineTotal) AS Total  
FROM SalesLT.SalesOrderDetail  
WHERE UnitPrice < 5  
GROUP BY ProductID, OrderQty  
ORDER BY ProductID, OrderQty  
OPTION (MAXDOP 2);    
GO
SELECT ProductID, OrderQty, SUM(LineTotal) AS Total  
FROM SalesLT.SalesOrderDetail  
WHERE UnitPrice < 5  
GROUP BY ProductID, OrderQty  
ORDER BY ProductID, OrderQty  
OPTION (MAXDOP 2);    
GO
This example shows how to rebuild an index using the index option to force themax degree of parallelismto12.
max degree of parallelism
12
ALTER INDEX ALL ON SalesLT.SalesOrderDetail 
REBUILD WITH 
   (     MAXDOP = 12
       , SORT_IN_TEMPDB = ON
       , ONLINE = ON);
ALTER INDEX ALL ON SalesLT.SalesOrderDetail 
REBUILD WITH 
   (     MAXDOP = 12
       , SORT_IN_TEMPDB = ON
       , ONLINE = ON);
See also
ALTER DATABASE SCOPED CONFIGURATION (Transact-SQL)
sys.database_scoped_configurations (Transact-SQL)
Configure Parallel Index Operations
Query Hints (Transact-SQL)
Set Index Options
Understand and resolve Azure SQL Database blocking problems
Next steps
Monitor and Tune for Performance
Feedback
Was this page helpful?
Additional resources