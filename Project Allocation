Member 1: Backend & Classification Developer
🎯 Goal: Handle file input, parse workload data, and classify each workload using rules.
🛠️ Tools:
Python (with FastAPI or Flask)

Pandas (for reading CSV)

Logic trees (if-else or dictionary-based rules)

✅ Tasks:
Build File Parser

Accept CSV or JSON file

Extract fields like OS, RAM, CPU, DB, etc.

Design 6R Classification Rules

Define rules like:

If OS = Legacy, recommend “Retire”

If DB = MySQL + Web App = Yes → “Replatform”

Store these as logic or mapping table

Create Azure Service Mapper

For each workload, return a recommended Azure service (e.g., Azure VM, App Service)

Return Data in a Usable Format (JSON)
Example:

json
Copy
Edit
{
  "name": "CRM-01",
  "strategy": "Rehost",
  "azure_service": "Azure VM",
  "details": "Good candidate for lift-and-shift"
}
Write Unit Tests to make sure logic is sound.

👤 Member 2: AI Agent Integration & Suggestion Generator
🎯 Goal: Use AI (like GPT) to provide natural-language recommendations.
🛠️ Tools:
OpenAI API (gpt-3.5-turbo)

Python

Prompt engineering

✅ Tasks:
Learn OpenAI API Basics

Set up your API key (free tier is enough)

Use the openai Python library

Design Prompts

Example:

arduino
Copy
Edit
"Here is a server with 4 CPUs, 16GB RAM, SQL Server, and Windows OS. What is the best Azure migration strategy and matching service?"
Send Workload Data to GPT

Parse response and extract:

Strategy (6Rs)

Azure Service

Reason

Format Response for Display

Send AI results to Member 3 (frontend)

Save results in JSON or dictionary form

Test with 5–10 workloads to refine prompts

👤 Member 3: Frontend Developer & Visualization Expert
🎯 Goal: Create a clean UI to upload files, show results, and visualize data.
🛠️ Tools:
Streamlit (recommended for speed) or Angular

Plotly or Matplotlib (for graphs)

HTML/CSS basics (for formatting)

✅ Tasks:
Build File Upload Interface

Drag-and-drop or file browser

Display Parsed Data in a Table

Use a Streamlit table or chart component

Include columns: Workload, Strategy, Service, AI Suggestion

Add Filters

Filter workloads by:

Strategy (Rehost, Retire, etc.)

Service (VM, App Service, etc.)

Create Charts

Pie/Bar chart: Number of workloads in each 6R category

Optional: Estimated cost (placeholder values)

Design Clean, Simple Layout

Header, Instructions, Upload, Results, Download button

👤 Member 4: Report Generator, Docs & Deployment Lead
🎯 Goal: Generate downloadable reports + documentation + deployment
🛠️ Tools:
Jinja2 for HTML reports

pdfkit / xhtml2pdf for PDF

Markdown (README), Google Slides

Streamlit Cloud or Azure Web App for deployment

✅ Tasks:
Design HTML Report Template

Use Jinja2 to fill in workload table and summaries

Convert to PDF

Use a Python PDF tool to export HTML → PDF

Write README.md

Overview, setup steps, usage, sample inputs

Prepare Deployment

Deploy on Streamlit Cloud (free & easy) or Azure App Service

Add app link in your documentation

Create Project Presentation

Slides with:

Problem

Solution

Team Roles

AI Use

Demo screenshots

Record Demo (Optional but Valuable)

✅ Summary Table
Member	Main Task	Key Deliverables
1	Backend Parser & Logic	Parsed data, 6R classifier, Azure mapping
2	AI Suggestion Generator	GPT results, prompt design, recommendation text
3	UI & Graphs	File upload interface, result table, charts
4	Report & Deployment	PDF/HTML report, README, hosting, presentation
🔄 Final Integration (Team Coordination)
Day 10: All components should be connected

Member 1's logic feeds Member 2’s AI prompts

Member 2 & 1’s results go to Member 3’s UI

